Link: https://www.allengineeringschools.com/engineering-careers/computer-software-engineer/famous-software-engineers/

ten famous software engineers & their apps | all engineering schools
skip to content
none
research schools & careers
ten famous software engineers and their applications
read about 10 famous software engineers, the applications they created and the software engineering degree they earned.
by jennifer wegerer
none
ten famous (or infamous) software engineers
none
software engineer
degree held
company
application
application type
tim bray
bachelor of science degrees in math and computer science
entrepreneur; co-founded open text corporation, textuality and antarctica systems
xml
developer's tool
paul buchheit
bachelor's degree in computer science
entrepreneur; worked for intel and google
gmail
webmail service
john carmack
none
entrepreneur; co-founded id software
doom, quake
computer games
dave cutler
bachelor's degree
dec, microsoft; co-founded agrippa-ord
windows nt
operating system
max levchin
bachelor's degree in computer science
entrepreneur; co-founded netmeridian software, sponsornet new media and confinity
paypal
e-commerce
pierre omidyar
bachelor's degree in computer science
claris; as an entrepreneur, co-founded ink development and created ebay
ebay
online auction and shopping website
alexey pazhitnov
degree in computer software engineering
microsoft; as an entrepreneur, co-founded the tetris company
tetris
computer game
jimmy wales
bachelor's and master's degrees in finance
teacher and internet entrepreneur; co-founded wikipedia
wikipedia
web-based encyclopedia
michael widenius
none
entrepreneur; co-founded mysql ab
mysql
open-source database
jamie zawinski
none
lucid inc.; netscape communications
netscape navigator
web browser
source: softwaresecretweapons.com
software engineering degree & career guide
software engineering home
software engineering degree programs
software engineering online degrees
careers in software engineering
software engineer salary
related reading
famous software engineers and their applications
software engineering career snapshot
program outcomes vary according to each institution's specific curriculum and employment opportunities are not guaranteed.
none


Link: https://hbr.org/2021/07/career-crush-what-is-it-like-to-be-a-software-engineer

career crush: what is it like to be a software engineer?
none
none
none
subscribe
none
none
account menu
none
none
none
search
clear
suggested topics
explore hbr
diversity
latest
the magazine
ascend
most popular
podcasts
video
store
webinars
newsletters
popular topics
managing yourself
leadership
strategy
managing teams
gender
innovation
work-life balance
all topics
for subscribers
the big idea
data & visuals
reading lists
case selections
hbr learning
subscribe
my account
my library
topic feeds
orders
account settings
email preferences
log out
sign in
none
none
none
none
subscribe
diversity
latest
podcasts
video
the magazine
ascend
store
webinars
newsletters
all topics
the big idea
data & visuals
reading lists
case selections
hbr learning
my library
account settings
log out
sign in
none
your cart
your shopping cart is empty.
visit our store
none
guest user
subscriber
my library
topic feeds
orders
account settings
email preferences
log out
reading list
reading lists
you have 2 free articles left this month.
you are reading your last free article for this month.
subscribe
for unlimited access.
create an account
to read 2 more.
none
none
where your work meets your life.
career planning
career crush: what is it like to be a software engineer?
and how do you become one?
by
kelsey alpaio
by
kelsey alpaio
july 21, 2021
none
none
none
none
none
none
none
none
none
none
loading...
none
leer en espaã±ol
ler em portuguãªs
none
i am fascinated by coding. itâs everywhere! every single one of the digital experiences we enjoy is the result of code.
but honestly, i know almost nothing about how it works or how the people behind the code â software engineers â do what they do. to find out, i spoke with lindsey redd. lindsey has coded for some of the coolest tech companies in the world: slack, lyft, and now stripe. she shared with me the details about her journey â from wanting to be a doctor, to studying computer science at stanford, to thriving in the top echelons of software engineering. we also talked about some common misconceptions about software engineers, what itâs like to work in a predominately white and male industry, and how to nail an interview for a job like hers.
can you tell me a little bit about what your job entails? what does the day-to-day look like?
it can be different depending on the day. but usually, it starts with looking through what i have to do for the day. i know a lot of software teams use task management tools. my team specifically uses jira as a ticketing system, and we have sprints.
a sprint will be a week or two. in that amount of time, youâre supposed to get âx, y, and zâ done. iâll look through those to-dos and make sure iâm on track â look at the tasks i need to do for the day, and do them.
then coding, of course. but thereâs a lot more to software engineering than coding. you code. you test. you deploy your code. you monitor your code, and make sure things are working properly. but then, there can also be a lot of meetings around product development or new features that need to be built on the team, and how weâre going to build those features. i meet with engineers a lot on the plan for implementation. thereâs also a lot of pair programming, or working together with another coder to solve problems.
did you always know that you wanted to be a software engineer?
no, not at all. i didnât even know what it was until i was in college. i wanted to be a doctor in high school or a biomechanical engineer. my dadâs a doctor. my momâs a chemical engineer. so something with stem, i knew, was going to be my path. but i didnât feel super inspired by the pre-med track or a lot of my engineering classes â i couldnât really see how any of those skills or any of the things i was learning would be applied. i was looking for something else in the stem field that would be a bit more interesting and motivating to me.
i went to stanford. and stanfordâs a huge computer science school. a lot of my friends were taking intro computer science courses. i had never coded. i just really didnât know what it was. but everyone was having a great time and seemed to find it really interesting. so around my sophomore year, i decided to take a class in computer science. my mentality was, if i like this class, iâll take the next class. and then after that, if i like that class, then iâll major in it. and thatâs basically what happened. it was at that point i realized this is what i wanted to do.
what were those classes like? when you first started doing it, was it something that you were scared of or intimidated by? or was it more accessible?
if i hadnât seen other kids taking the classes, other people who didnât know how to code, i would have been a lot more intimidated. but the introductory computer science courses at stanford are super accessible. i even think theyâre available publicly. they really start from the basics. you donât have to know how to code at all to take the class. the professors were really great and they really walk you through, from the very, very basics, of what you need to know in order to code.
i enjoyed the classes because a lot of it is coding. and that is what i currently do right now on the job. i like that direct application of skills. i am learning things that i will eventually use in my career.
at first itâs a lot of puzzles. you code a little robot that navigates a maze. itâs simple stuff. i think my final project in my first class was building an extremely basic âfacebook.â they start you off simple and gradually ramp up the intensity.
when you were in college, you interned at both lyft and slack. can you talk a little bit about how you landed those internships and what the experience was like for you?
i had a very interesting path to my first internship. stanford does a lot of job fairs specifically for computer science students where tech companies in silicon valley show up and recruit. i had no idea how to navigate those spaces. i had zero clue how to land a computer science internship.
i got one interview for front-end web development, which i had never done. a lot of stanfordâs introductory courses focus on back-end work, like algorithms and data structures. so they were asking me questions about web development i just couldnât answer. it was terrible. i was really lost. i had no idea how i was going to get a job for the summer.
then, i remembered some of my friends were applying to an organization called code2040. code2040 is an organization that helps black and latinx students who study computer science enter the software engineering tech field. they have partnerships with companies that take on code2040 interns. and itâs a pretty intense process. you have to do a technical interview to even get into the code2040 program. you have to do a writing interview and a video interview, as well.
once you make it into code2040, at that point you can start interviewing with their partner companies. at the time, lyft was a partner company with code2040. i interviewed and the interview process was really hard. but code2040 definitely helps you navigate that process, as well. so it was a good program for me, as someone who had no clue how to get into tech at all.
i interviewed with lyft and then eventually got a job offer. code2040 is a summer-long program. you go to workshops, you network with a lot of other people who are in the program, you work with other companies who are also partner companies. slack is a partner company who i networked with during my first summer interning and then was able to use that connection when it came to getting an internship the next summer.
tell me more about the interview process. what was difficult about it? what was that process like?
now, having worked at lyft full time, i know that their interview process is very different. but at the time, it was very similar to a lot of other tech companies, where they ask you random coding questions that donât really simulate what itâs like to be a software engineer on the job. like, i canât tell you the last time, on the job, i used a âbreadth-first search algorithm.â but iâm pretty sure that was one of my interview questions for lyft. and you have to code on a whiteboard, which i never really did â usually all of your coding happens on a computer.
the interview test was just not very indicative of what i would be doing on the job. and i really had to study for it. i think studying for software engineering interviews is a whole ordeal in and of itself. and at the time, i didnât really understand that, so i didnât study well. luckily, i had some skills under my belt that served me in my interview. but it made it difficult because i was very confused about how this was going to translate into my job.
you have to study for software engineer interviews? what does that look like?
the best advice i was given was to buy this book called âcracking the coding interview,â which basically goes through all of the different kinds of questions that a lot of the big tech companies use â like google, facebook, and microsoft. a lot of mid-size and smaller companies base their interview models off of those large tech companies.
thereâs a lot of new innovation thatâs happening in that space, which will make the process less of a test that you have to study for. but you usually do. and there are a lot of resources online, like meetcode. basically you have to do practice problems, like practice math problems as if youâre studying for a test, except itâs practice coding questions that test you on your knowledge about data structures and different kinds of algorithms â all kinds of things that you have to brush up on in order to do the interviews.
i know a lot of people who give themselves several months to study for interviews before even starting the process with any company. in college, i was definitely studying for at least two months before i would interview. when it came to interviewing for full time, i also started studying a few months before i started interviewing.
so you have to basically start studying before you even know if you have an interview lined up?
yeah, and a lot of companies understand that that is part of the process. recruiters are very, in my experience, flexible in giving you as much time as you want to study. for my current job, i remember asking my recruiter if i could have four or five weeks to study before i actually did the interview. and they were like, âoh, yeah, i totally get it.â but a lot of people, once they decide that theyâre going to switch jobs, they know that means itâs time to start studying.
when youâre answering these questions, are you coding live in front of the interviewer?
yes, in most cases. lyft does an interview where you get an hour to code a small project on your own. the interviewer doesnât have to be there, so you can focus. but i think in all other interviews that iâve been in, youâre coding in front of someone or pair programming with someone during the interview. itâs a lot of pressure.
you do pair program on the job. so interviews that involve pair programming i think are really great. but coding with someone watching and judging your performance is not typical on the job. a lot of it youâre just doing on your own. itâs definitely something to get used to because itâs not something that you do normally while youâre studying computer science or working as a software engineer.
tell me more about pair programming. is it just programming with another person on your team?
pair programming is when you work with someone on your team or another team on a problem that either you need help on or that you two are solving together. thereâs usually someone whoâs the âdriverâ and then someone who is in the âpassenger seat.â
the driver is the one whoâs actually typing. but youâre problem solving together. itâs a very collaborative experience, which i like. i think iâve learned a lot doing that process, even in interviews. you tend to solve problems a bit better and faster when youâre working with someone in that way.
so you interned at lyft and then were able to get a full-time gig there. how were you able to turn that internship into a full-time position?
generally, if you do well during your internship, the company will give you a full-time offer. so the big question is, how do you do well during the internship?
there are a lot of pieces to that. my misconception going in was that i needed to get my project done perfectly and completely, which i didnât do when i was interning at lyft. i think what people are really looking for when youâre an intern on a team is your ability to communicate, both verbal and written communication, and your ability to problem solve and work your way about an abstract problem. so even if youâre not able to finish the project, demonstrating those communication, organization, and project management skills, and figuring out how to implement them â thatâs a lot of what people are looking for when youâre an intern.
what kind of questions do you ask? do you make sure you ask questions to solve your problems? how fast are you able to ramp up and learn new technologies, skills, and languages quickly? what kind of energy do you bring to the team? what is it like working with you?
now, being on the other side and having been an intern mentor, it definitely helps when your intern is super excited and super curious. thatâs whatâs so fun about having interns. not only are you helping to bring more people into the company, but you want to make sure that those people are positive and fun to work with.
exuding that during your internship, that curiosity, that spice and passion for what youâre doing, it definitely helps leave a positive, lasting impression on your team. if you have that, plus youâre able to problem solve and get stuff done, youâre pretty set up to get a full-time offer at the end of it.
i know very little about coding languages. how many coding languages have you learned over the years? and how long does it take to learn a new coding language?
in college, we were learning c and assembly, which are extremely low-level computer systems languages that you donât usually need to know. i also learned java and c++. but i donât use those very actively anymore.
in my professional career, i have learned python, golang, php, react, and ruby. but every company uses something a little bit different. or they introduce new languages that do different things. and so thatâs why i mentioned during your internship itâs a good thing if youâre able to exhibit that you can learn quickly.
when i started my internship at lyft, i didnât know python. i had no idea what it was. luckily python is a pretty approachable language. i think iâm forever learning these languages. itâs like learning an actual spoken language in that way, where thereâs things that are changing all the time. thereâs just a huge mix of things that these languages can do, and so youâre constantly learning what those new things are.
for me, to actively code in a language and feel comfortable in it probably takes four weeks. but even at that point, youâre still googling a lot of stuff. i feel like i google how to do âfor loopsâ in certain languages, which is a very basic thing. but each language has different syntax for even simple things. so luckily google or any search engine is a great resource for learning how to do whatever you need to do in whatever language.
i google the simplest things all the time. i remember there was some twitter thread recently where a lot of senior engineers were tweeting the things that they still have to look up. and it just helped a lot with my own imposter syndrome, knowing that these people who i admire a lot because theyâre really great engineers are also looking up very simple things.
how did you get your current job at stripe?
linkedin, honestly. i know linkedin is not for everybody. but i definitely use it as a tool for my career. i keep my linkedin up to date. i have my email on there. people can reach out.
my current manager at stripe reached out to me on linkedin. she just sent me a message and was like, âhey, iâm hiring. do you have any interest?â and stripe had always kind of been on my radar. i wasnât really planning on leaving lyft when i did. but i feel strongly that if there is an opportunity that seems interesting to you, you should at least have the conversation. so i did, and it went really well.
from there, i was like, iâm going to just interview and see where it goes. maybe it wonât work out, and thatâs fine. so then, i started to study. i did the interview. you do a phone screen interview, which is usually just one or two questions with one person. and then you do an on-site, which now is just all virtual. but the on-site interview involves about five interviews. after that, you find out if you got the job or not, and then you go into negotiations.
i think the hardest part a lot of the time is just getting your foot in the door, getting your resume recognized. i definitely use linkedin to help me make those connections.
do you tend to get reached out to a lot by recruiters?
there are definitely more open software engineering roles than there are software engineers. that gap will continue to grow unless we do a lot more to get more people educated in computer science. a lot of people will reach out to me about their open roles. when i was job hunting, i was very proactive in reaching out to companies that i thought were interesting, even if they hadnât reached out to me. so itâs not all inbound.
but, iâm very privileged in the sense that i have my stanford degree. i have lyft, slack, and now stripe all on my resume. and these are really well-respected organizations and institutions. i think i get a lot of inbound traffic because of these names that are on my linkedin, and on my resume. i know that thatâs not necessarily the case for a lot of other engineers â great engineers; better engineers than i am â just because they donât have these brand names on their resume. so while there are a lot of open roles, i think that thereâs also a lot of elitism in the industry.
i know of companies that are like, âoh, we only hire from the top five computer science schools,â which is ridiculous. i think thereâs still that weird tension in that there are actually a lot of people who can do this work. there are a lot of open roles. but then people have unreal expectations of what a resume is supposed to look like.
and of course the interviews are intense, as i was describing. not everyone has the resources to prepare for three months for an interview. so there needs to be some bridging of those gaps there, in my opinion.
when you do have a ton of opportunities like that coming your way, how do you decide which ones are worth your time?
i think it depends a lot on what you want to do. there are a lot of different kinds of software engineering. so when my manager at stripe reached out to me, it was for a full-stack, more product-engineering role. i was doing a lot of infrastructure engineering at lyft and was interested in what it would be like to work on a product team.
stripe is also just super well-known and has a reputation for being a good place for engineers and developers. that was a particular combination that was interesting to me. but someone who wants to work on a lot of ai and machine-learning stuff might not be super interested in a product role at stripe. so when i get inbound requests for the hot new ai startup, itâs not going to peak my interest as much because thatâs not necessarily where my interests lie.
there are all other kinds of factors, like what size company do you want to work at? are you interested in a google-size or a five-person startup?
the company choices iâve made so far are all pretty on par with each other. slack, lyft, and stripe are all similarly sized, and have similarly sized engineering organizations. valuations are in a similar realm. they were all pre-ipo when i started working at these companies, which is something that i was particularly looking for.
in the future, that might change. i might look for something completely different. and i think that i probably should at some point just to widen my range of experiences.
but thatâs how i narrow it down. i have a pretty clear idea of what i am looking for when i start a job hunt. and so iâll filter out based off of those requirements i have.
youâve mentioned a few types of software engineering? can you tell me a little more about all the different types?
there are a lot of different types of software engineering. i probably donât even know all of them. iâm forever learning about new areas where people are innovating.
the basics are front-end, which is more like web development or what you see on your computer screen. back-end is more like servers and algorithms and things that you donât see as a user but that help power the front-end. and then there are people who are full-stack, who do both of those things.
thereâs infrastructure engineering, which is building out services, like microservices, servers, monolithic servers, or observability pipelines â things that need to sit underneath the back-end layer in order for it to work. a lot of developer tooling is considered infrastructure, things that keep the upper layers working. thatâs a lot of what i did at lyft.
thereâs machine learning and artificial intelligence engineers. thereâs data engineering. thereâs sre, which is site reliability engineers â they keep the lights on and make sure everythingâs working properly. there are qa engineers, who test the quality of the things that other engineers are building. and they build automated systems in order to test the quality of products. and thereâs mobile engineering â people who build ios apps, android apps, which is a whole different kind of skill set.
anywhere your interests lie, thereâs probably a kind of software engineering that fits that.
is it challenging to switch between those different types?
i think the most difficult part is just learning the new technology. hiring managers are pretty open â like if youâve only worked in infrastructure, they are pretty willing to hire you on to a product team or vice versa. that can be good because they have a different perspective than people whoâve only worked in infrastructure.
the biggest thing you have to do is learn the new language and learn the new technologies. and there are a lot of resources in order to learn. there are udemy courses, books, and online projects or tutorials you can follow to understand how to do something.
i think the parts that are a bit more difficult to learn are maybe ai and machine learning because they require a very specific, more math-based education. otherwise itâs pretty straightforward to lean into a different area of computer science or software engineering.
if i wanted to become a software engineer, what are the most important skills that i should be developing right now?
definitely building, testing, and maintaining software is the core skill set. getting your foot in the door and getting a job is a lot about developing those interview skills, which there are a lot of resources for developing those skills, as well. iâd say a lot of the skills that people donât really talk about that you need to be a good software engineer are more of the soft skills, like verbal and written communication, organization, and project management skills.
can you talk a little bit about some of the misconceptions of this career path?
a big misconception is that software engineers just code, which is not true. a lot of my job is writing documentation to explain things to people or communicate or pitch ideas. a lot of it is meetings where we figure out the direction of a particular piece of software or a product. and those all involve a lot of other skills that are not coding.
i think people have this vision of software engineers that weâre in a dark room coding by ourselves all the time, which is the vibe sometimes. iâm not going to lie. sometimes thereâs a problem you need to hammer out with code. but a lot of the job is very collaborative and not solo work at all â a lot of planning, being a team player, communicating what youâre doing, and asking questions you might have so that people can help you.
another piece thatâs huge that people donât really consider is how important mentoring people is in software engineering. that can mean mentoring people who are younger than you or just people who are new to your team. software engineering is such a team sport, and i think a big skill is making sure that new people who are introduced to whatever it is that youâre working on can work on it, be productive, and be an active member of the team. that involves getting people ramped up, helping them, answering a lot of questions, and being able to communicate your ideas.
software engineering and the tech industry in general, itâs predominantly white. itâs predominantly male. would you mind talking a little bit about what itâs like to navigate an industry like that?
itâs hard. itâs definitely a struggle. i have a lot of privilege in that i am able to navigate the field with the school i went to and the jobs iâve had previously. and even with that, you definitely get people who doubt your skills, doubt your skill set, and undermine your work, which sucks. itâs hard and not fair and definitely needs to change.
a lot of navigating it, for me, has been my own internal work of staying confident, sure of myself, sure of my skills, my education, and everything that i bring to the table, even if not everyone sees that. itâs definitely clear that a lot of people, companies, and teams do see the skills that everyone can bring to the table despite their background or the school they went to or company they previously worked at. but depending on the culture of the company, the specific makeup of the company, and your manager, itâs definitely a daily grind to do it. i think itâs more work than the white dude software engineer has to go through to find a team and find a company that will work for you.
one of the things i ask when iâm vetting companies and teams is, what does diversity look like at the company? how does your company think about or treat diversity and inclusion? are there other people at the company who look like me who are doing well and feel good? thatâs definitely a piece of my research. and itâs hard work in and of itself to vet those things and figure those things out. but itâs necessary in order for me to be the best employee or engineer that i can be.
what are some of the other obstacles and challenges of this career path?
it can be different depending on who you are and what you struggle with in particular. for me, i struggle with imposter syndrome. so one of my struggles on a daily basis is just feeling like iâm doing a good job. it really helps me when people give me feedback at all just so i know how iâm doing. and also it helps when i get some positive reinforcement.
because engineering is a space thatâs so male dominated and white male dominated, it often can feel like iâm not measuring up because i think a lot of people sometimes donât recognize the skills that i have because of my different identity. so staying confident and staying sure of myself has been a particular challenge for me in software engineering.
thereâs also this notion of the 10x engineer â the engineer who just gets the work done of 10 other engineers and is super productive. that is an ideal that people expect out of engineers. but itâs just not true and not actually attainable, and it can affect work-life balance. maintaining those boundaries, understanding what youâre able to get done in a day, and knowing that thatâs ok is also something that feeds into imposter syndrome. itâs something that i have struggled with and that iâve had to deal with.
what really helps is having a community of people who are doing what youâre doing, either at your company or outside of it, or ideally both, who you can talk to about whatever struggles you have. because 10 times out of 10, when iâve asked someone else in my community or in my support group of other software engineers, âhave you struggled with this?â the answer is yes.
and whether they figured out the solution or not, it does feel better to know that other people are dealing with the same things that you are. i would suggest that for any career path, whether it be software engineering or not.  having your people, having your community, helps with any kind of struggle you may face.
letâs talk money. what should i expect to get paid in a software engineering role?
it depends on a lot of different factors. your location â if youâre a software engineer in alabama, your salary will look different than a software engineer in san francisco because of the different costs of living. company size also matters, and what stage of growth theyâre at. the googles and the facebooks will have the higher offers. companies that are maybe pre-ipo and going through a lot of growth, theyâll also have high offers. companies that are maybe pre-seed startups or seed-stage/series a startups will have lower salaries. but there are a lot of upsides when you think about equity and stock.
if youâre in one of the coastal locations â san francisco, new york, la â some of these larger, more established tech hubs, if you are not making $100,000 out of college, youâre probably being underpaid or could at least find a company that would pay you more. iâm not sure what that looks like if youâre finding a job in atlanta, for example. it might look very different.
there are resources online to help you figure out, if you just got an offer, if itâs fair, depending on your location, your level, and the size of the company. i would recommend looking at websites like levels.fyi and glassdoor to figure out salary information.
i would also say talk to your friends. people donât talk about how much they make enough, which i think leads to a lot of pay inequity in the industry. i would straight up ask people, âhow much do you make?â when i have seen people realize that they are not being paid fairly, it is because people around them have been honest about what they make and they realize somethingâs not adding up. so i would talk to people and encourage them to be transparent because itâs what needs to happen in order to hold these companies, that a lot of times donât want to pay you fairly, accountable.
what do you love about software engineering?
itâs the mix of teamwork, collaboration, pair programming, and problem solving with the ability to do a lot of solo work and figure problems out on your own. i enjoy the process of coding and not knowing whatâs really going on, but testing and working through an issue, googling whatever i need to, and then getting to a solution. that feeling, that gratification of figuring out how to do something or solving a bug, is unmatched.
i enjoy my teams. i enjoy working with people, and i enjoy doing my own thing a little bit. software engineering definitely allows you to do both and, depending on what kind of company you work at, allows you to do more of one or the other based on what you want. thereâs a lot of flexibility in that way, too.
is there anything that you wish youâd known about this career path before you started?
when i started and majored in computer science, i did not know the intensity of interviews and how much you had to study for them. even if youâre 10 years into your career, if you want to switch jobs, you have to study. i did not know that.
i also wish i would have known all the different kinds of engineering that you can do. when i started my full-time job at lyft, i didnât really care which part of the stack i was working on. in my head it was kind of all the same. my first two internships were different in what i was working on. but that wasnât what i was really paying attention to at the time. i was just trying to do a good job but not really thinking about, what is it that i want to work on? what are the kinds of problems that i think are interesting and want to solve? is it infrastructure problems? is it product problems? is it front-end? is it back-end?
for example, i really wish i had invested more time in learning mobile engineering. i could switch into doing that and probably will at some point because i find it interesting. but i just didnât even think about any of those things. it can really change your day-to-day. it can really change the kind of work you do, depending on what kind of team youâre on, what their stack looks like, and what kind of product that they produce. i wish i had known those differences and how those kinds of teams differ in how they operate.
okay, last question: who is your career crush?
i really look up to erica joy baker. she is a software engineer. she worked at slack at the time that i was interning there, and i had known of her before that. she was at google for a really long time. and now she has transitioned into management and is the chief technology officer for the democratic congressional campaign committee. i just really like the way that she shows up. i had the opportunity to speak with her a few years ago about her work and about how she approaches her work. she also writes a lot online to give you more insight into how sheâs thinking.
she is someone who brings her whole self to work and uses her unique qualities to lead. i really admire that and would love to exude more of that at work. she seems to be super confident in herself and her skills. and people are super confident in her because of that. and i also admire that.
also, transitioning into management and moving up that career ladder into a director of engineering is also something thatâs super interesting to me and i think something that i will eventually pursue. i think theyâre solving a higher level of engineering questions about organization and how people work together, which is super interesting to me.
new!
hbr learning
career management course
accelerate your career with harvard managementor®. hbr learningâs online leadership training helps you hone your skills with courses like career management. earn badges to share on linkedin and your resume. access more than 40 courses trusted by fortune 500 companies.
what's your next career move? learn how to set yourself up for success.
start course
learn more & see all courses
read more on
career planning
or related topics
careers
and
job search
ka
kelsey alpaio
is an associate editor at harvard business review.
none
none
none
none
none
none
new!
hbr learning
career management course
accelerate your career with harvard managementor®. hbr learning’s online leadership training helps you hone your skills with courses like career management. earn badges to share on linkedin and your resume. access more than 40 courses trusted by fortune 500 companies.
what's your next career move? learn how to set yourself up for success.
start course
learn more & see all courses
partner center
diversity
latest
magazine
ascend
topics
podcasts
video
store
the big idea
data & visuals
case selections
hbr learning
none
subscribe
explore hbr
the latest
most popular
all topics
magazine archive
the big idea
reading lists
case selections
video
podcasts
webinars
data & visuals
my library
newsletters
hbr press
hbr ascend
hbr store
article reprints
books
cases
collections
magazine issues
hbr guide series
hbr 20-minute managers
hbr emotional intelligence series
hbr must reads
tools
about hbr
contact us
advertise with us
information for booksellers/retailers
masthead
global editions
media inquiries
guidelines for authors
hbr analytic services
copyright permissions
manage my account
my library
topic feeds
orders
account settings
email preferences
account faq
help center
contact customer service
follow hbr
facebook
twitter
linkedin
instagram
your newsreader
about us
careers
privacy policy
cookie policy
copyright information
trademark policy
harvard business publishing:
higher education
corporate learning
harvard business review
harvard business school
copyright ©
harvard business school publishing. all rights reserved. harvard business publishing is an affiliate of harvard business school.


Link: https://www.fullstackacademy.com/blog/what-do-software-engineers-do

what do software engineers do? job types & training
skip to main content
program finder
blog
none
programs
programs navigation
coding
none
none
none
none
none
data analytics
none
cybersecurity
none
product management
none
bootcamps for nyc residents
none
none
none
prep courses
prep courses navigation
coding
none
none
cyber
none
none
product management
none
admissions
admissions navigation
none
none
none
tuition & dates
tuition & dates navigation
none
none
why fullstack
why fullstack navigation
none
none
none
about
about navigation
none
none
partner with us
none
none
none
apply
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
sign in
apply
06.16.2021
none
none
none
what do software engineers do? job types, training, and salary
by the fullstack academy team
none
anytime you visit a webpage or use an internet-powered application, youâre engaging with the end result of a software engineerâs work. what is a software engineer? software engineers are computer science professionals who use knowledge of engineering principles and programming languages to build software products, develop computer games, and run network control systems.
none
as more and more of us rely on smart devices, the number of software developers will only increase, with job outlook predicted to grow at 22 percent by 2030.
to help you learn more about careers in software development, this article will cover the following topics:
what does a software engineer do and types of software engineers
software engineering jobs and salaries
how to become a software engineer what does a software engineer do & types of software engineers none
there are two primary types of software engineers: applications software developers and systems software developers. applications software developersoverviewclient-focuseddesign software for the end user to interact withdevelop applications for ios, android, windows, linux, and moreconduct requirements analysistweak software and release updates regularlyfront-end or back-end?bothwho they work withgraphic designers, project managers, marketers, and customer success staffsystems software developersoverviewbuild operating systems and networks for user-facing applicationsresponsible for both the hardware and software needsintegrate disparate software products onto one platformoften serve as general it managers or systems architectsdesign and enforce it standardsmaintain it documentation and update to new technologiesfront-end or back-end? mostly back-end who they work with data science professionals, senior systems architects, development teams, and senior management software engineering jobs and salaries none
of course, applications and systems developer jobs are not the only two positions available in the field of software engineering. other common roles include mobile developers, applications architects, quality assurance analysts, and database administrators. how to become a software engineer completing a two- or four-year computer science degree has, until recently, been the only path to successfully launching a career as a software engineer. other math- and science-related degrees in fields like information systems, electronics, and civil engineering or even community college courses have also enabled people to transition into software development.
none
none
none
none every industry needs software with the proper qualifications, a software engineer can work in almost any industry with any type of organization. while it firms lead the pack in hiring software developers, government agencies, nonprofit organizations, healthcare facilities, transit and logistics companies, and every other business needs software.
none
none
none
programs
full-time coding
part-time coding
beginner coding
woman in tech
cybersecurity analytics
data analytics
product management
about us
about fullstack academy
careers
for university partners
for employer partners
fullstack academy hq
5 hanover square, floor 6
new york, ny 10004
none
none
none
none
none
copyright © 2022, fullstack academy, llc.
fullstack academy is licensed by the new york state education department.
regulatory information
privacy policy
browser incompatible
you're using an outdated browser. please use a modern, updated browser to use this site.
none
none
none


Link: https://www.coursera.org/articles/software-engineer

what does a software engineer do? | coursera
individuals
business
campus
government
none exploreonline degreesdegrees none
none
none
find your new career
browse
top courses
log in
join for free
individuals
business
campus
government list none
none
none what does a software engineer do?what does a software engineer do?written by coursera â¢ updated on oct 31, 2022 software engineers design and create computer systems and applications to solve real-world problems.
software engineers, sometimes called software developers, create software for computers and applications. if youâre an analytical thinker who enjoys solving problems and making digital products easier to use, you may find a career as a software engineer rewarding. what is software engineering? software engineering is the branch of computer science that deals with the design, development, testing, and maintenance of software applications. software engineers apply engineering principles and knowledge of programming languages to build software solutions for end users.
software engineer tasks and responsibilities successful engineers know how to use the right programming languages, platforms, and architectures to develop everything from computer games to network control systems. in addition to building their own systems, software engineers also test, improve, and maintain software built by other engineers.â
none
in this role, your day-to-day tasks might include:
none
designing and maintaining software systems
evaluating and testing new software programs
optimizing software for speed and scalability
writing and testing code
consulting with clients, engineers, security specialists, and other stakeholders
presenting new features to stakeholders and internal customers
professional certificate ibm devops and software engineering launch your devops and software engineering career. master devops, agile, scrum, ci/cd and cloud native with hands-on job-ready skills.
4.7
(1,168 ratings)
16,753 already enrolled
beginner level
none
average time: 15 month(s)
learn at your own pace
skills you'll build:
cloud native, devops, ci/cd, application development, software engineering, test-driven development, behavior-driven development, iaas paas saas, hybrid multicloud, cloud computing, agile software development, scrum methodology, zenhub, kanban, sprint planning, shell script, bash (unix shell), linux, distributed version control (drcs), open source, version control systems, github, git (software), data science, python programming, data analysis, pandas, numpy, artificial intelligence (ai), kubernetes, docker, containers, openshift, serverless computing, microservices, function as a service, cloud applications, test case, software testing, automated testing, continuous integration, continuous development, automation, infrastructure as code, open web application security project (owasp), observability, security, monitoring, logging, agile systems developer vs. application developer software engineers will usually fall into one of two categories, systems developers or application developers.â
none
none
ensuring that different types of software programs communicate with each other on one platform
none
creating and enforcing it standards within an infrastructureâ
none
maintaining documentation of it systemsâ
none
updating to new technologies as needed
none
collaborating with development teams, senior systems architects, and data science professionalsâ
none
none
none
developing applications for ios, android, windows, or other operating systems
conducting an analysis of requirements and tweaking software as needed
releasing software updates
working with graphic designers, customer service staff, project managers, and other customer-facing departmentsâ
none
professional certificate ibm full stack software developer kickstart your career in application development. master cloud native and full stack development using hands-on projects involving html, javascript, node.js, python, django, containers, microservices and more. no prior experience required.
4.5
(2,355 ratings)
20,313 already enrolled
beginner level
none
average time: 14 month(s)
learn at your own pace
skills you'll build:
cloud native, devops, iaas paas saas, hybrid multicloud, cloud computing, cascading style sheets (css), html, git (software), javascript, cloud applications, distributed version control (drcs), open source, version control systems, github, nosql, cloud infrastructure, json, react (web framework), node.js, ibm cloud, kubernetes, docker, containers, openshift, data science, python programming, data analysis, pandas, numpy, application development, artificial intelligence (ai), django (web framework), database (dbms), sql, serverless computing, microservices, function as a service, web application
none why should i pursue a career as a software engineer? none
choosing a career as a software engineer gives you opportunities to work in many different industries and fields, as nearly all businesses use software. whether you enjoy finances, entertainment, sports, real estate, or some other industry, thereâs a good chance there are jobs for software engineers.â
none software engineer salary none career paths in software engineering none
specialization applied software engineering fundamentals build the foundation of your career in software. develop hands-on experience with git, github, linux, and python, and learn the fundamentals of software engineering.
4.7
(116 ratings)
1,838 already enrolled
beginner level
none
average time: 5 month(s)
learn at your own pace
skills you'll build:
linux, software design and architecture, python programming, git and github, software development lifecycle (sdlc), basic programming concepts, careers in software engineering, programming languages and frameworks, the software development lifecycle (sdlc), software architecture, shell script, bash (unix shell), distributed version control (drcs), open source, version control systems, github, git (software), data science, data analysis, pandas, numpy, application development, artificial intelligence (ai) how to become a software engineerâ  none
letâs take a closer look at some of the requirements for becoming a software engineer. software engineering skills as a software developer, youâll be designing software to help solve problems that real people face. this requires a combination of technical know-how and solid communication skills. if youâre considering this as a career, here are some skills you should focus on building:
none
none
object-oriented programming
database architecture
agile and scrum project management
operating systems
cloud computing
version control
design testing and debugging
attention to detail
none software engineering certifications by earning a certification, you can build new skills and validate those skills to potential employers. some jobs might require a specific certification, so itâs a good idea to research some job listings of roles youâre interested in before preparing for a certification exam. here are some common options:
none
certified software development professional (csdp)
certified software engineer
c certified professional programmer (clp)
c++ certified professional programmer (cpp)
aws certified developer
microsoft certified: azure fundamentals
specialization microsoft azure fundamentals az-900 exam prep launch your career in cloud computing. prepare for the microsoft az-900 certification exam.
4.6
(1,431 ratings)
40,605 already enrolled
beginner level
none
average time: 5 month(s)
learn at your own pace
skills you'll build:
describe the benefits of cloud computing in microsoft azure, explain core cloud concepts, describe core microsoft azure services, describe core microsoft azure architecture components, describe microsoft azure management tools, choose the correct microsoft azure artificial intelligence service to address different kinds of business challenges, choose the best microsoft azure iot service for a given business scenario, choose the best microsoft azure software development process tools and services for a given business scenario, describe microsoft azure security solutions, understand what it means to build a cloud governance strategy in microsoft azure, estimate and manage your cloud spend in microsoft azure, describe how microsoft azure adheres to common regulatory and compliance standards, explain how microsoft azure's service-level agreements (slas) can impact your application design decisions, secure access to cloud resources in microsoft azure, az-900 exam preparation, practice certification exams do i need a degree to be a software engineer? none get started with coursera none
professional certificate meta front-end developer launch your career as a front-end developer. build job-ready skills for an in-demand career and earn a credential from meta. no degree or prior experience required to get started.
4.8
(3,576 ratings)
60,886 already enrolled
beginner level
none
average time: 7 month(s)
learn at your own pace
skills you'll build:
cascading style sheets (css), html, ui/ux design, react, javascript, web development tools, user interface, front-end web development, html and css, responsive web design, test-driven development, object-oriented programming (oop), linux, web development, bash (unix shell), github, version control, debugging, react (web framework), web application, application development, web design, user experience (ux), accessibility
professional certificate meta back-end developer launch your career as a back-end developer. build job-ready skills for an in-demand career and earn a credential from meta. no degree or prior experience required to get started.
4.7
(1,405 ratings)
32,459 already enrolled
beginner level
none
average time: 8 month(s)
learn at your own pace
skills you'll build:
cloud hosting, application programming interfaces (api), python programming, data structure, computer programming, django (web framework), linux, web development, bash (unix shell), github, version control, mysql, database (dbms), database administration, debugging, authentication and authorization, rest apis, filtering and ordering, serializers and deserializers
none
none article sources1.â  none 2.â  none view all sources none written by coursera â¢ updated on oct 31, 2022 this content has been made available for informational purposes only. learners are advised to conduct additional research to ensure that courses and other credentials pursued meet their personal, professional, and financial goals. learn without limitsjoin for free
coursera footerstart or advance your career google data analyst
google project management
google ux design
google it support
ibm data science
ibm data analyst
ibm data analytics with excel and r
ibm cybersecurity analyst
ibm data engineering
ibm full stack cloud developer
facebook social media marketing
facebook marketing analytics
salesforce sales development representative
salesforce sales operations
intuit bookkeeping
preparing for google cloud certification: cloud architect
preparing for google cloud certification: cloud data engineer
launch your career
prepare for a certification
advance your career browse popular topics free courses
learn a language
python
java
web design
sql
cursos gratis
microsoft excel
project management
cybersecurity
human resources
data science free courses
speaking english
content writing
full stack web development
artificial intelligence
c programming
communication skills
blockchain
see all courses popular courses and articles skills for data science teams
data driven decision making
software engineering skills
soft skills for engineering teams
management skills
marketing skills
skills for sales teams
product manager skills
skills for finance
popular data science courses in the uk
beliebte technologiekurse in deutschland
popular cybersecurity certifications
popular it certifications
popular sql certifications
marketing manager career guide
project manager career guide
python programming skills
web developer career guide
data analyst skills
skills for ux designers earn a degree or certificate online mastertrackâ® certificates
professional certificates
university certificates
mba & business degrees
data science degrees
computer science degrees
data analytics degrees
public health degrees
social sciences degrees
management degrees
degrees from top european universities
master's degrees
bachelor's degrees
degrees with a performance pathway
bsc courses
what is a bachelor's degree?
how long does a master's degree take?
is an online mba worth it?
7 ways to pay for graduate school
see all certificates coursera about
what we offer
leadership
careers
catalog
coursera plus
professional certificates
mastertrackâ® certificates
degrees
for enterprise
for government
for campus
become a partner
coronavirus response community learners
partners
developers
beta testers
translators
blog
tech blog
teaching center more press
investors
terms
privacy
help
accessibility
contact
articles
directory
affiliates
modern slavery statement learn anywhere none
none â© 2022 coursera inc. all rights reserved. none
none
none
none
none


Link: https://hub.packtpub.com/18-people-in-tech-every-programmer-and-software-engineer-needs-to-follow-in-2019/

18 people in tech every programmer and software engineer needs to follow in 2019 | packt hub
none
none
none
none
none
none
none
subscription
news
tutorials
none
search
none
none
none
subscription
news
tutorials
none
none
web development
front-end web development
full-stack web development
server-side web development
web design
cms & e-commerce
data
past issues
tutorials
news
interviews
podcasts
mobile
past issues
tutorials
news
interviews
podcasts
programming
application development
languages
design patterns
high performance
microservices
cloud & networking
devops
cloud computing
networking
servers
virtualization
security
penetration testing
cybersecurity
cryptography
forensics
malware analysis
game development
3d game development
2d game development
game ai
game design
game optimization
iot & hardware
home automation
robotics
single board computers
3d printing
embedded systems
none
sign in
welcome! log into your account
your username
your password
forgot your password? get help
password recovery
recover your password
your email
a password will be e-mailed to you.
home
cloud & networking
devops
18 people in tech every programmer and software engineer needs to follow...
cloud & networking
devops
programming
insights
news
18 people in tech every programmer and software engineer needs to follow in 2019
by
richard gall
-
january 2, 2019 - 10:03 am 7707
none
8 min read none
while there are thousands of incredible people working in tech, i’ve decided to make life a little easier for you by bringing together 18 of the best people from across the industry to follow on twitter.
from engineers at microsoft and aws, to researchers and journalists, this list is by no means comprehensive but it does give you a wide range of people that have been influential, interesting, and important in 2018.
(a few of) the best people in tech on twitter
none
none
none
watch her keynote at nodejs interactive:
none
none
none
none
none
none
but she is also an important voice in discussions around diversity and mental health in the tech industry – if you get a chance to her her talk, make sure you take the chance, and if you don’t, you’ve still got twitter…
none
none
none
none
none
although drasner specializes in front end development and javascript, she’s a great person to follow on twitter for her broad insights on how we learn and evolve as software developers. do yourself a favour and follow her.
none
mark imbriaco is the technical director at epic games. given the company’s truly, er, epic year thanks to fortnite, imbriaco can offer an insight on how one of the most important and influential technology companies on the planet are thinking.
none
none
the range of guests that quinn gets on the podcast is really impressive, and sums up his online persona: open, engaged, and always interesting.
none
yasmine evjen is a design advocate at google. that means that she is not only one of the minds behind material design, she is also someone that is helping to demonstrate the importance of human centered design around the world.
as the presenter of centered, a web series by the google design team about the ways human centered design is used for a range of applications. if you haven’t seen it, it’s well worth a watch.
none
none
none
none
if you want to get the lowdown on all things devops, you could do a lot worse than chris short. he boasts outstanding credentials – he’s a cncf ambassador, has experience with red hat and ansible – but more importantly is the quality of his insights.
none
none
none
if you’re a javascript developer, or simply have any kind of passing interest in how we’ll be building front ends over the next decade, he is an essential voice to have on your timeline.
as you’d expect from someone that has helped put together one of the most popular javascript libraries in the world, dan is very good at articulating some of the biggest challenges we face as developers and can provide useful insights on how to approach problems you might face, whether day to day or career changing.
none
none
this experience makes wedekind an important authority on developer learning. and at a time when deciding what to learn and how to do it can feel like such a challenging and complex process, surrounding yourself with people taking those issues seriously can be immensely valuable.
none
jason lengstorf is a developer advocate at gatsbyjs (a cool project that makes it easier to build projects with react).
his writing – on twitter and elsewhere – is incredibly good at helping you discover new ways of working and approaching problems.
none
none
follow bridget for her perspective on devops, as well as her experience in devrel.
none
netflix hasn’t faced the scrutiny of many of its fellow tech giants this year, which means it’s easy to forget the extent to which the company is at the cutting edge of technological innovation.
this is why it’s well worth following ryan burgess – as an engineering manager he’s well placed to provide an insight on how the company is evolving from a tech perspective.
his talk at real world react on a/b testing user experiences is well worth watching:
none
none
okay, so chances are you probably already follow anil dash – he does have half a million followers already, after all – but if you don’t follow him, you most definitely should.
none
none
none
jessie frazelle is a bit of a superstar. which shouldn’t really be that surprising – she’s someone that seems to have a natural ability to pull things apart and put them back together again and have the most fun imaginable while doing it.
formerly part of the core docker team, frazelle now works at github, where her knowledge and expertise is helping to develop the next microsoft-tinged chapter in github’s history.
none
none
none
none
none
kelsey hightower is another superstar in the tech world – when he talks, you need to listen. hightower currently works at google cloud, but he spends a lot of time at conferences evangelizing for more effective cloud native development.
none
but most of all he nailed the human element. and reminded us of the big picture. a brilliant storyteller.
none
none
none
who did i miss?
that’s just a list of a few people in tech i think you should follow in 2019 – but who did i miss? which accounts are essential? what podcasts and newsletters should we subscribe to?
share
none
none
none
none
none
richard gall co-editor of the packt hub. interested in politics, tech culture, and how software and business are changing each other.
mobilepro
past issues
tutorials
news
interviews
podcasts
datapro
past issues
tutorials
news
interviews
podcasts
programming
application development
languages
design patterns
high performance
microservices
subscribe to our newsletter
monthly digest of what's new and exciting from us.
join
none
â© 2022 company, inc. all rights reserved.
none
facebook
none
instagram
none
twitter


Link: https://goremotely.net/blog/how-many-software-engineers-are-there/

new intel - how many software engineers are there in 2022?
none
find a job
blog
none
none
none
post a job
find a job
blog
none
none
none
post a job
none
none
none
none
none
new intel - how many software engineers are there in 2022?
written by
ana djurovic
last updated
january 28, 2022
none
none
none
have you ever found yourself wondering just how many software engineers are there in the us? and if this is a solid career choice? who are these software developers, and where are they based?
if so, youâre not alone, as many people wonder the same thing. our software engineer statistics have the answers to all of these questions - and more.
letâs dive right in.
spectacular software development statistics
the us is home to more than 4.4 million software developers.
88% of software engineers are male.
there are 1,365,500 software developer jobs available.
employment for software developers is expected to grow by 21%.
the employment rate amongst software developers is 87%.
the demand for blockchain engineers increases by 517% every year.
samsung alone employs 40,506 operations software engineers.
in 2017, there were less than 50,000 computer science graduates and over 500,000 open positions.
stats on how many software engineers are there in the us?
and what countries should the us be keeping its eye on to make sure its talent remains on their turf?
letâs find out.
1. the us has more than 4.4 million software developers.
itâs estimated that more than 4.4 million software developers call the us home. software engineer statistics show that this makes the us home to the most software engineers. but not for longâ¦
2. india will overtake the usâs number of software developers by 2023.
by the time 2023 is over, india will have the biggest concentration of software developers. back in 2017, india had around 2.75 million. but by 2023, this number will skyrocket to 5.2 million.
3. 837,000 devs are based in germany.
europe is home to a bunch of software developers, too! if you were wondering how many software engineers are there in europe, hereâs the data: more than 813,000 live and work in the uk, 467,454 are based in france, and 368,291 get their development done in russia.
4. chinaâs software developer industry is growing at 6% to 8%.
other countries may be ahead, but no country's pool of software developer talent is growing as fast as chinaâs.
how many developers are there in the world? well, youâll have to make it all the way to the end of this article to find out. we like keeping you on your toes like that.
us software engineering demographics
now that we know how many software engineers are in the us, itâs time to take a closer look at who these people are.
5. 89% of software engineers are men.
when it comes to the number of male vs female software engineers, women sure do get the short end of the stick. in fact, women make up only 11% of the entire software engineering workforce.
6. 41% of software engineers are white.
software engineer race demographics are an interesting topic since many races are underrepresented. but still, we like the inclusivity and hope to see it continue. the bulk (41%) of engineers are white, 24% are south asian, 12% are east asian, 9% are âother,â 6% are hispanic, 5% are black, and 3% are arab.
7. 71% of software developers are married.
why is it surprising to discover that over two-thirds of software developers are married? perhaps it has something to do with the mediaâs depiction of software developers being skinny, pale, greasy-haired computer nerds with a fear of sunlight and terrible social skills.
clearly, thatâs not the case.
8. the average age of software developers is 43.1 years.
you may think that software engineering is a young personâs game, but the average age is actually 43.1 years. the most common ages for people in this field are 30 and 34 years of age.
us software developer employment statistics
now that you know a little more about the us software engineering demographics, letâs take a look at the job outlook of these people by diving into these us software developer employment statistics.
9. employment for software developers is expected to grow by 21%.
according to software engineer labor statistics, the employment outlook for 2018 to 2028 is growing at a steady rate of 21% which is much faster than average across a multitude of industries.
10. there are 1,365,500 software developer jobs.
in 2018, there were a whopping 1,365,500 software developer jobs available. and in the period from 2018 to 2028, this number is set to increase by 284,100.
11. 78% of software engineers change jobs for higher compensation.
the question of âhow often do software engineers change jobs?â is tough to answer, as it varies from person to person. what we can tell you is why they would want to leave. close to eight in ten would change jobs for higher compensation. other reasons include growth opportunities, location and commute, company culture, as well as not enjoying the type of work they do.
12. the employment rate among software developers is 87%.
if you ever wonder whether or not a career in software development or engineering is a safe bet, consider the fact that the vast majority of all software developers are employed.
but just where are they employed?
us software engineers hubs statistics
what are the states with the highest number of programmers? what are the best cities for software engineers in us? are certain areas better than others?
so many questions, so little time!
13. california is home to 628,414 programmers.
none
now that we know the states with the highest number of programmers, letâs discover the best cities for software engineers in us.
14. seattle is the best city for software engineers.
seattle, wa, is undoubtedly amongst the best cities for software engineers in us. with big tech companies like microsoft, salesforce, adobe, and docusign driving the industry at a rate of 47.7%, itâs easy to see why.
15. the san jose tech industry is growing at 79.6%.
the number of tech jobs in san jose has grown by 80% in the last decade, and the industry is currently growing at 79.6%, making it another one of the best cities for software engineers in us.
16. dallas is the 11th best-paying city for software engineers.
dallas is one of the states with the highest density of programmers. but while many choose to settle there, itâs only the 11th best-paying city for software engineers.
software developer shortage statistics
as you may know, there is a shortage of software developers. how severe is this shortage? weâll let these software developer shortage statistics and general developer talent facts answer this one.
17. there are 5 jobs for every 1 software developer.
jeez! itâs pretty clear that there is a massive supply and demand problem when it comes to software developers.
and thatâs not all:
18. the demand for blockchain engineers increases by 517% every year.
none
19. in 2017, there were less than 50,000 computer science graduates and over 500,000 open positions.
with less than 50,000 graduates and more than 500,00 positions that need filling, itâs clearly a sellerâs market, not a buyerâs market.
when we average things out:
there are less than 30,000 computer science students who graduate each year. at that rate it will take 8 years to fill the open positions available today.
20. it takes an average of 35 days to hire a software engineer.
maybe one of the reasons we find ourselves in a software developer shortage is because it takes over a month to hire one.
most popular software engineering fields
so, just what are the software engineers who form part of the workforce up to these days?
letâs take a look at the most popular software engineering fields that employ a large portion of qualified professionals.
21. there are 20 million registered ios developers.
mobile application development sure does keep developers busy. on the app store alone, there are 20 million software developers who cater to the 500 million app users who visit the store weekly.
22. samsung alone employs 40,506 operations software engineers.
this is huge! in contrast, google employs only 18,593 people spread across its research and development sectors.
23. there are approximately 421,300 jobs for computer systems software engineers.
these jobs are spread out across various industries. computer services provide the bulk of jobs (31%), the manufacturing industry offers 19%, the finance and insurance sector employs 6%, and the remainder is made up of software publishers and engineering services.
24. there are 67,180 computer hardware engineers.
while this job may not be the most popular, there are currently 64,400 jobs available for computer hardware engineers.
how much software developers make in the us
have you been wondering how much software developers make in the us? or if thereâs a pay gap between male vs female software engineers? and if working in an office or from home has an impact on salary?
letâs find out.
25. the median pay for software developers is $105,590 per year.
in 2018 the software engineer average salary was $105,590 per year or $50.77 per hour. not bad at all, is it?
26. ...but not all states pay the same. washington software developers earned $131,790 last year, while wyoming devs earned $72,210.
the software engineer average salary in washington was a whopping $131,790. in california, it was $127,950, and the figure for new york was $116,830. in wyoming, software developers earned $72,210. in south dakota, they earned $75,000, and those in louisiana earned $81,640.
27. female software developers make 83 cents to the dollar men earn.
working the exact same job, women earn quite a bit less than men. that works out to $16,640 less per year.
28. freelance software engineers earn around $104,463 per year.
while freelance software engineer rates vary according to states, most earn around $104,463 per year.
speaking of freelance software engineersâ¦
freelancer software engineers statistics
how many software engineers work from home? and should you opt for a freelance software engineer or one that is employed by an agency? letâs find out.
29. 12% of software engineers
work remotely full-time .
slightly more than one in ten software engineers work from home 100% of the time.
30. 57.9% of freelance software engineers prefer working in an office environment.
somewhat surprisingly, more than half of all freelance software engineers actually prefer working in an office. 33.2% prefer working from home, and the remaining 8.8% prefer working from co-working spaces or coffee shops.
31. freelance software engineer rates are typically 203% lower than the rates of software agencies.
if youâve been wondering whether to give your development work to a freelancer or an agency, you should know that freelance software engineer rates can be up to 203% lower. we just made that decision a little easier--youâre welcome.
32. toptal, upwork, guru, and gigster are the top sites for freelancers.
the software engineer job market 2019 saw was largely online. toptal, upwork, guru, and gigster had the most freelance dev jobs according to freelancer software engineer statistics.
and on that note...
to sum up
how many software engineers are there in the us? a lot, thatâs how many. on a serious note, we hope that you recognize that being a software engineer is a great career option.
the software development statistics donât lie:
the talent shortage is no laughing matter.
so, if you have an appreciation for engineering, developing or maintaining software we urge you to act on your appreciation and make a career out of it.
table of contents
spectacular software development statisticsâ
stats on how many software engineers are there in the us?
us software engineering demographics
us software developer employment statistics
us software engineers hubs statistics
software developer shortage statistics
most popular software engineering fields
how much software developers make in the us
freelancer software engineers statistics
to sum up
frequently asked questions
how many developers are there in the world?
none
what are the most popular software engineer jobs in us?
none
what are the most popular programming languages in the software industry?
none
sources
1.
bureau of labor statistics
2.
bureau of labor statisticsâ
3.
built inâ
4.
business of apps
5.
business insider
6.
brainhub
7.
career explorer
8.
c# corner
9.
college grad
10.
daxx
11.
data usa
12.
full scale
13.
forbes
14.
glassdoor
15.
info world
16.
inc.
17.
narrow the gap
18.
pearson frank
19.
rentberry
20.
stack overflow talent
21.
stack overflow insights
22.
wikipedia
23.
woven teams
recent posts
none
october 12, 2022
none
elma mrkonjic
author
none
october 12, 2022
none
aleksandar dimovski
author
none
october 12, 2022
none
ana djurovic
author
login
register
home
about
us
pricing
contact
privacy policy
terms
of use
none
none
none
â© 2022 goremotely.. all rights
reserved.
your experience on this site will be improved by allowing cookies.
allow cookies


Link: https://se.iastate.edu/people/

people â¢ software engineering â¢ iowa state university
skip to main content
iastate.edu
index
a
b
c
d
e
f
g
h
i
j
k
l
m
n
o
p
q
r
s
t
u
v
w
x
y
z
directory
maps
safety
sign ons
none
menu toggle
search toggle
search
coe homepage
las homepage
academic program
none
about se
external advisory council
abet accreditation
future students
none
undergrad admissions
none
apply
request info
schedule a visit
transfers
scholarships
none
college of engineering scholarships
university scholarships
faq
current students
none
curriculum
software engineering learning community
student advisory council
student services
resources
faq
people
none
faculty/staff
expertise
careers
none
career resources for students
open positions
internships & co-ops
people
javascript required
none
none
software engineering
donate to software engineering
software engineering
none
none
none
none
none
none
non-discrimination policy
privacy policy
digital access & accessibility
loading...


Link: https://www.computerscience.org/software-engineering/careers/software-engineer/day-in-the-life/

day in the life of a software engineer : work & what they do
none
label
none
none
bachelor's degrees in computer science
master's degrees in computer science
computer science ph.d
best associate degrees in computer science
best online bachelor's in computer science
best online master's in computer science
affordable online bachelor's in computer science
affordable online master's in computer science
computer science certifications
view all
none
computer engineering online masters
computer engineering masters
computer engineering bachelor's
software engineering associate
software engineering online bachelor's
none
computer programming associate
computer programming bachelor's
web development degree programs
data science phd online
computer forensics master's
information technology bachelor's
information technology associate
information technology master's
computer forensics bachelor's
none
none
programming languages guide
learn computer science with moocs
guide to k-12 computer science education
is computer science hard?
actuarial science vs. data science
none
women in computer science
secure a remote internship
get hired in artificial intelligence
get hired in computer science
software developer vs. software engineer
none
find scholarships and financial aid for your degree
find scholarships for women in tech
paying for your degree
companies that pay for your degree
none
washington
california
florida
texas
north carolina
georgia
maryland
new york
kentucky
tennessee
illinois
new jersey
ohio
find more states
none
video game designer
software developer
web developer
network administrator
database administrator
computer programmer
software engineer
information security analyst
computer hardware engineer
data scientist
information technology architect
systems analyst
computer information researcher
explore more careers
none
none
best coding bootcamps
best online bootcamps
best value online bootcamps
best free coding bootcamps
none
data science bootcamps
python bootcamps
ux/ui bootcamps
software engineering bootcamps
full-stack web development bootcamps
cybersecurity bootcamps
none
ultimate guide to bootcamps
bootcamp types
how to pay for a bootcamp
using the gi bill to pay for bootcamps
how to get into a bootcamp
view all
search programs
none
none
none
share this article
none
none
none
none
none
none
day in the life of a software engineer
none
by
audrey webster
none
audrey webster graduated from the university of oregon in 2017 with a bachelor of arts in english and has been professionally writing for over four years. her writing specialties include education, wellness, and travel. in addition to writing, audrey...
none
updated november 4, 2022
job responsibilities
a typical day
interview with a software engineer
where to work
should you become a software engineer?
faq
interested in becoming a software engineer? learn about a software engineer's typical day, and hear from a professional in the field.
credit: maskot / digitalvision / getty images
none
are you ready to discover your college program?
credit: maskot / digitalvision / getty images
software engineers and developers work on computer applications and programs. these professionals identify problems by running extensive tests. they then correct the issues and build new programs. now is a lucrative time to start a software engineering career.
none
the page explores a software engineer's typical day. we unpack the qualifications for computer science jobs and look at where software engineers work.
what is a software engineer?
none
software engineers design software solutions, while software developers build those solutions to make them ready for consumers. depending on the type of company they work for, software engineers will create original code for software and applications. they also build reusable code for future use.
none
none
what a software engineer does
none
software engineers also spend time revising and rewriting other peopleâs code as needed. building prototypes for clients is another common task. this entails understanding client expectations and developing prototypes accordingly.
none
software engineers enjoy solving problems. they pay close attention to detail, since a small error can cause a program to collapse.
main duties of software engineers
system design: system design involves defining the outline for web applications and products efficiently and clearly. these designs provide information and data in the coding framework for the software developer to make the product.
establish new documentation: all new technology requires documentation for people to understand its functionality. this might look like creating or updating products and supporting documentation. the software engineer writes this supporting documentation.
maintain software functionality: software engineers maintain existing software and create new software. this includes making updates to align with the latest industry and company standards, troubleshooting problems, and brainstorming future improvements. maintenance is equally as important as writing new code.
troubleshoot and upgrade existing systems: along with maintaining existing systems, software engineers also troubleshoot problems when they arise. both internal company systems and clients may need help solving problems. software engineers also make updates as needed to ensure existing systems remain usable.
comply with company and industry standards: technology is a rapidly changing field. products and systems must keep up with these changes. software engineers usually oversee these updates. they must match industry trends and ensure their systems align with industry standards.
nonstandard duties for software engineers
work with clients: many software engineers do not work directly with clients. however, working at a small company or startup can change this dynamic. if a software developer leads a project, they might regularly consult with the client to ensure the final product meets their expectations.
manage internal teams and projects: software engineers might manage internal teams and projects depending on the company and their roles. experienced software engineers in a senior-level role at the company typically oversee teams.
interview and hire for new positions: if a new hire is being interviewed for their team, software engineers might speak with the job candidate to ensure a good fit. the final selection to fill roles usually falls on upper management. still, a software engineerâs feedback is taken into consideration.
collaborate with front-end developers: software engineers do not usually handle front-end development, but they might partner with front-end developers on some projects. in some cases, the front-end developer needs feedback from the software engineer to ensure they create a great product.
build software with code: a software engineer writes the code and creates the framework then a software developer executes the build. however, depending on the company and job description, software engineers might create new software with the developer.
top online programs
explore programs of your interests with the high-quality standards and flexibility you need to take your career to the next level.
none
a software engineer's typical day
a software engineerâs typical day begins either in the office or at home, if they work remotely. each engineer is different. their routine usually depends on their employer and personal work preferences. however, a typical day for a software engineer might look something like this:
software engineers start their day by working on their coding projects. ideally, engineers set aside time every day to enter a âmental flowâ state, which allows them to focus on solving problems and developing reliable solutions.
software engineers may attend meetings interspersed throughout the day. the afternoon might involve reviewing emails and checking in with colleagues on shared projects. engineers often meet with peers to ask questions or work through a project's challenging aspect before returning to their desk for more independent work.
reviewing and revising code is a good habit of software engineers. this task can occur in the afternoon before they wrap up their day. software engineers conclude their workday between 5 and 6 p.m.
none
professional spotlight: sergii zhuravel, lead software engineer
what previous computer science-related (or stem) experience(s) did you have, if any, and what prompted your journey to become a software engineer?
when i was learning applied mathematics and system analysis at university, i liked programming courses very much. after my graduation, i had a proposition to stay in the university as a teacher, but i decided to become a software engineer.
if you specialize in a particular subject or work in a particular industry, what prompted this choice and/or how did it evolve?
at first i started as a web developer, as it was very popular. but later, i also learned mobile development. i like everything in it, so i usually learn what is required right now on the project and donât specialize in something particular.
for whom do you think this career is a good fit? why?
i think everyone can become a software engineer. but of course, there are some skills or human traits that can make the learning process much easier and adoption to the profession much smoother. i think itâs good if one has good memory, for example, likes learning new stuff and can spend tons of time with a computer.
computerscience.org is an advertising-supported site. featured or trusted partner programs and all school search, finder, or match results are for schools that compensate us. this compensation does not influence our school rankings, resource guides, or other editorially-independent information published on this site.
match me with a bootcamp.
find programs with your skills, schedule, and goals in mind.
match me to a bootcamp
what educational path did you take to become a software engineer? did you pursue additional education at any point? what was your educational experience like?
i got a master's degree in applied mathematics, and this helped me to understand logic and programming easier. it took about five or six years for me. after that, i also spent 2-3 months learning java myself, before i got my first job as a programmer. today, there are a lot of different courses and bootcamps that can prepare a new developer in a few months, maximum in one year, i think. but i think that if possible, itâs better to get a decent education to have a good base in cs.
what certifications or tests did you need to pass, if any, to enter the field and/or progress in your career?
i had no certifications and didnât pass any tests when i got my first it job. but during my career, i often take some courses and pass exams and tests. for example, right now iâm preparing for the aws exam to get an aws developer associate certificate.
how did you prepare for them?
there are a lot of online courses on the internet. so, usually i prepare by taking some courses and reading books, then i practice a lot.
what were they like?
for example, i took a scrum master online course one time. i passed the course. i read a lot of additional materials (like the official scrum guide that is available on the internet). then i passed simple tests during the course, and i got a certificate.
what's a typical day like for you?
in our company, we use scrum (itâs very popular these days), so usually we start our day from the daily meeting. in the daily meeting, we discuss what we did yesterday, what we plan to do today, and do we have any issues/blockers or not.
then if i have some tasks in the tracking system, i work on the task or i pick a new one. i can communicate with the product owner or with a qa if i have any questions about requirements or if i have some ideas for improvements for the feature iâm working on.
when the feature is coded, i also work on the tests (unit tests mostly) because we try to have good test coverage.
when the feature is ready, i publish it using git to our repository (we use gitlab), and ci/cd tests the changes and publishes them to a dev or qa environment, where our qa can test the feature or fix. if there is feedback from the qa that something doesnât work or works not as expected, i investigate the issue and fix it.
some days we have grooming sessions where we review existing tickets with features or bugs to better understand what we need to do and to be on the same page with all the team.
what's your favorite part of being a software engineer?
i think itâs a possibility to create something new every day. when you write the code, itâs like writing a poem. i mean that itâs a creation process and is very close to the art. and of course, itâs a âsuperpowerâ to solve problems. as a software engineer, you have a lot of tools that allow you to resolve a lot of different (and usually quite complex) problems, like sending starships to mars.
the most challenging part?
i think for most people, itâs to keep motivated. because a lot of times when we dream about complex problems, at work we can be asked just to program another form or spreadsheet. for me personally, i think the most challenging part is to keep the right balance between work and personal life. working with the computer can take you fully and eat all your time.
what advice do you have for individuals considering becoming a software engineer?
today is the best time to become a software engineer. if you really like this, jump into it. itâs a cool profession that will give you a real superpower to solve complex problems. who knows, maybe you will have the world.
what do you wish you'd known before becoming a software engineer?
none
sergii zhuravel
sergii is a lead software engineer. he holds a master's degree in applied mathematics and more than 10 years of experience in it. sergii has worked with different back-end and front-end technologies. now, he works mostly with the front end (for example, with react and redux), which he enjoys a lot. he likes to share his knowledge, so he conducts programming courses (javascript), writes articles, and participates in different events, like hackathons.
none
where software engineers work
software engineers find work at large corporations and startups or as freelancers. they can work at a standard tech company or in finance, software publishing, or manufacturing. each of these industries requires software engineers, but most jobs are in computer systems design.
none
none
none
none
top online programs
explore programs of your interests with the high-quality standards and flexibility you need to take your career to the next level.
none
should you become a software engineer?
none
software engineers implement new strategies to discover creative ways of executing their tasks. technology is an industry that moves fast and software engineers must also keep up with the latest coding requirements.
in many environments, engineers complete coding independently. software engineers must find motivation and take initiative to accomplish tasks. they should stay patient and focused while writing code.
none
none
how to prepare for a career as a software engineer
none
none
while in college, students should complete internships. this helps build connections with professionals in the industry and provides students with real-world coding experience. those who opt to take a certification course or bootcamp learn the basics of coding for less time than earning a degree.
learn more about software engineers
what is a software engineer?
learn about the skills and interests necessary to become a software engineer plus regular daily tasks.
learn more
how to become a software engineer
find out about the educational path for students looking to become software engineers, along with degree and skill requirements.
learn more
salary and career outlook for software engineers
learn about industry and job growth projections for software engineers, including the average salary for specific roles and locations.
learn more
software engineer certificates
review certificate programs available to software engineers, including topics covered and eligibility requirements.
learn more
none
frequently asked questions about software engineers
what is a typical day for a software engineer?
software engineers spend their day solving problems in web applications and programs, writing code, attending meetings, and collaborating with their peers. they usually work on several projects at once.
what is life like as a software engineer?
software engineers spend much of their time finding solutions. they try to improve products by paying close attention to detail and making small adjustments that have a large impact.
is being a software engineer fun?
those who like technology, solving complex problems, and working with their peers may enjoy working as software engineers. depending on the company, software engineers might have flexible work hours or work remotely.
do software engineers have flexible hours?
this depends on where they work. large corporations, startups, and small companies might set different expectations for their software engineers.
recommended reading
take the next step toward your future.
discover programs youâre interested in and take charge of your education.
footer
rankings
certifications
bachelor's degree
master's degree
doctorate programs
see all
degrees
bachelor's in it
doctorate programs in it
associate in computer programming
associate in software engineering
see all
careers
computer information researcher
data science
health information technician
systems analyst
see all
states
texas
california
virginia
michigan
see all
resources
women in computer science
coding bootcamps
jobs in computer science
computer programming languages
see all
none
â© 2022 computerscience.org, a red ventures company
about us
sitemap
privacy policy
advertising disclosure
advertise
contact
methodology
do not sell my info
cookie settings
terms of service


Link: https://scai.engineering.asu.edu/software-engineering-faculty/

software engineering faculty - school of computing and augmented intelligence
skip to content
report an accessibility problem
asu home
my asu
colleges and schools
sign in
search asu
none
ira a. fulton schools of engineering
school of computing and augmented intelligence
none
none
undergraduate
graduate
online programs
accelerated 4+1
none
admissions admission requirements
apply now - undergraduate
apply now - graduate
tuition and paying for college
request info
new graduate student information prospective prospective graduate students
talk to an advisor
visit campus
housing
first-year and transfer students
parent resources current courses and override policies
undergraduate policies and procedures
graduate policies and procedures
undergraduate advising
graduate advising
gsa positions, teaching assistantships and fellowships
scai cpt application process
study abroad resources entrepreneurship
student orgs
career center
career services for online students
study abroad
tutoring centers
inner circle: news and events for students
undergraduate resources
graduate resources
skill verification letter
none
leadership
faculty
computer engineering (computer science) graduate faculty
computer science graduate faculty
data science, analytics and engineering graduate faculty
industrial engineering graduate faculty
staff
scai mentors
directory
none
research advancement
research centers
research labs
research briefs
giving
contact
none
about the ira a. fulton schools of engineering
our vision and mission
annual reports
enrollment and degrees granted
rankings
scai news
faculty awards
hiring
summer camps
asu home
my asu
colleges and schools
sparky sign out
software engineering faculty
none
all
computer science and engineering
industrial engineering
software engineering
faculty by rank
ruben acuna
none
none
none
none
ajay bansal
none
none
none
[email protected]
(480) 727-1647
polytechnic campus,â prlta 230v
research website
srividya bansal
none
none
none
none
tyler baron
none
none
michael findler
none
none
none
kevin gary
none
none
none
none
javier gonzalez-sanchez
none
none
none
none
robert heinrichs
none
none
none
tim lindquist
none
none
none
none
christopher mar
cm
none
none
none
alexandra mehlhase
none
none
none
none
anshuman razdan
none
none
none
douglas sandy
none
none
none
none
vijay suthar
none
none
none
ayca tuzmen
none
[email protected]
stephen yau
none
none
none
none
none
none
none
school of computing and augmented intelligence
contact us
contribute
none
maps and locations
jobs
directory
contact asu
my asu
copyright and trademark
accessibility
privacy
terms of use
emergency
covid-19 information


Link: https://www.careerexplorer.com/careers/software-engineer/

what does a software engineer do? - careerexplorer
none
none
home
career test
for organizations
careers
degrees
community
more
jobs
blog
none
log in take the â freeâ  test
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
what does a software engineer do?
80% match?
none
take the free career test
learn more about the career test
what is a software engineer?
are you strategically-minded? do you enjoy problem-solving? you may want to consider a career as a software engineer!
a software engineer applies mathematical analysis and the principles of computer science in order to design and develop computer software. software engineers are highly sought after, and developers that live in high-demand areas often receive many inquiries a month from recruiters and head hunters.
in this article: what is a software engineer?
what does a software engineer do?
what is the workplace of a software engineer like?
what career options are available for a software engineer?
what is the difference between a software engineer and a software developer?
what does it take to succeed as a software engineer?
how long does it take to become a software engineer?
what are software engineers like?
should i become a software engineer? see more
what does a software engineer do?
software engineering is a branch of computer science that includes the development and building of computer systems software and applications software. computer systems software is composed of programs that include computing utilities and operations systems. applications software consists of user-focused programs that include web browsers, database programs, etc.
software engineers have extensive knowledge of programming languages, software development, and computer operating systems, and they apply engineering principles to software creation.
none
by applying these engineering principles to every stage of the development process, from requirements analysis to the software process, they can create customized systems for individual clients. just as a civil engineer will make sure that a bridge has a solid foundation, a software engineer will also begin with a thorough study of requirements and work through the development process in a systematic way.
there are many types of software that a software engineer can develop, such as operating systems, computer games, middleware, business applications, and network control systems. changes in technology and new areas of specialization keep this profession evolving at a rapid pace.
none
software engineers must also possess interpersonal skills, and be able to effectively communicate with users in order to train, test, and debug software all the way to the end product. they are often involved from the early stages of software planning right through to the testing, development, training, and support stages.
software engineers can be divided into two categories:
none
none
being a software engineer is a great career choice for someone who is exceptionally good at both left and right-brained thinking (analytical skills as well as problem-solving skills). software engineers are instinctive problem-solvers, good at working with others and focused on seeing issues through to their successful completion.
a software engineer should be well-versed in:
programming and coding
fundamentals of computer science
design and architecture
algorithms and data structures
information analysis
debugging software
testing software
are you suited to be a software engineer?
none
none
take the free test now
learn more about the career test
what is the workplace of a software engineer like?
with such unprecedented growth in a multitude of industries, software engineers can pursue careers in any number of areas, including technology, healthcare, automotive manufacturing, green energy, remote sensing, aeronautics, government, non-profit, and finance.
software engineers can work as either employees or as contractors. they typically work in comfortable settings, but it is sometimes a stressful job that involves long hours and tight deadlines.
frequently asked questions
what career options are available for a software engineer?
none
continue reading
what is the difference between a software engineer and a software developer?
none
continue reading
see also
web developer
what does it take to succeed as a software engineer?
none
continue reading
how long does it take to become a software engineer?
the software industry is always changing.
this means that a career as a software engineer demands a commitment to learning that starts in high school, is solidified in university, and continues with career-long professional certifications and training.
none
what are software engineers like?
none
should i become a software engineer?
there is a lot of investment going into software engineering at the moment due to the increasing reliance on mobile technology, venture capital-backed start-ups, the growing complexity of technology, and emerging industries.
the demand for skilled and qualified software engineers seems to have no end. this demand is strengthened by a changing economic landscape and fueled by the need for technology solutions. with billions of physical devices around the world that are now connected to the internet and that are collecting and sharing data, all industries are quickly becoming technology driven industries.
âbuilding software solutions that power virtually every organization, itâs a cool job.â
that is often the comment heard about working as a software engineer.
and while it is true, it is also a demanding job, one that typically requires employees to work long hours to often short deadlines in an environment where a single mistake can result in a massive bug.
so, what type of a person does it take to be an effective software engineer?
here are some qualities that are essential in the role:
none
none
none
none
none
none
none
up next
loading...
software engineer
none
none
none
your compatibility
overview
salary
job market
how to become
jobs
education
further resources
satisfaction
personality
demographics
work environment
for individuals
blog
login
sign up
the careerexplorer career test
explore
career collections
what career is right for me?
careers in finance
careers in medicine
careers in psychology
careers in travel
for institutions
group pricing
© sokanu interactive inc. 2022
about careerexplorer
contact
faq knowledge base
terms & conditions
privacy
accessibility


Link: https://www.uopeople.edu/blog/how-to-become-a-software-engineer/

how to become a software engineer: your complete guide - university of the people
skip to content
request info
login
uopeople portal
online campus
uopeople arabic
apply now
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
academic team
none
none
none
none
none
none
none
none
none
none
none
none
none
apply now
apply now
request info
login
uopeople portal
online campus
search
none
none
none
how to become a software engineer: your complete guide
none
share:
none
none
none
none
every industry relies on software engineers to help run their backend systems, as well as mobile devices, databases and more. software engineers are experts in the field of computer science and they use their knowledge to help businesses run by creating consumer-facing products and user-friendly systems. the path for how to become a software engineer is paved with education, technical ability, programming languages and more.
we will take a look at what it takes to achieve your goal of becoming a software engineer, as well as how to plan ahead efficiently.
none
photo byâ  danial ricaros â onâ  unsplash
what does a software engineer do?
software engineers take the electronic hardware of a computer and/or mobile device and makes it useful by employing computer engineering practices to design, develop and implement software that will run. software engineers must first understand the business needs and then create the necessary programmed tools to achieve such goals.
in practice, software engineers blend together their understanding and abilities in the realms of computer science, engineering, project management, and software development. from the creation of functioning programs to the testing, they ensure the userâs digital environment runs smoothly.
the broad field can be broken down into two specializations, namely software development and applications development. software and systems engineers use programming languages to develop functioning systems, whereas application developers code applications based on the userâs needs across various platforms, including desktops, laptops and mobile devices.
since the two specializations require different job duties, their average salaries are also slightly different.
according to the u.s. bureau of labor and statistics, their average salaries are as follows:
software developers ( applications ): $108,080
software developers ( software ): $111,780
become a software engineer
the software engineering field is highly technical and specialized. as such, although there isnât a single way to accomplish the goal of working in the industry, the common path begins with formal education.
1. study computer science
a degree in computer science is a good place to start to begin your journey. you can choose to get your associateâs degree, bachelorâs degree or higher, depending on your career goals.
associateâs degree: for entry-level positions, associateâs degrees will suffice and can be earned in about 2 years. the curriculum will provide you with the core foundational knowledge such as programming languages and modern ways to develop software.
bachelorâs degree: for those seeking a position with any big or well-known company, a bachelorâs degree is often the minimum requirement. bachelorâs degrees generally take 4 years to complete (if enrolled full-time). along with the foundational knowledge that an associateâs degree offers, a bachelorâs degree will also provide coursework in mathematics, software testing and software architecture.
coding bootcamp: for those who donât want to attend a formal institution or online university to receive a minimum of an associateâs degree, coding bootcamps exist. they offer intense training for the span of about 8-12 weeks, and upon graduating, students are meant to be prepared for entry-level positions in the field.
earning your degree: online options:
itâs important to note that your education level will impact your salary and likelihood of obtaining a job in the competitive field of software engineering. as such, itâs useful to weigh your costs and benefits of obtaining a degree. if financial constraints feel like they are a big part of your decision, you should know that you can always attend high-quality, accredited and online universities to pursue your dream of becoming a software engineer.
none
the benefits of attending an online university include the flexibility of choosing when to study, the widened accessibility of having everything online and being able to study from anywhere in the world, and the lowered cost of obtaining your higher education degree. additionally, online programs provide a simpler way to study part-time and continuing to manage preexisting responsibilities, whether it means raising a family or holding down a job, etc.
2. start programming and building software
none
java – based on an object-oriented programming model, java is intended to be easy to use. the language is used for complete applications that can be accessed from a single computer or network.
python – python is used for computer software programming, as well as machine learning, browser automation, scientific computer, and robotics.
c++ – c++ is a general purpose programming language that can be used for small programs or large applications.
c# – c# is a general purpose programming language that is designed to create apps on the microsoft platform. it is considered to be a blend of c and c++.
php – php once stood for personal home page, but now it stands for php: hypertext preprocessor. it can be embedded into html and was originally designed for web development.
once you have a grasp on programming languages, you can try your hand at developing and testing software or applications. these can serve as use cases to land an internship or showcase to a prospective client as part of your portfolio.
3. get an internship
while youâre still in school, itâs always a good idea to get an internship to start making connections within the industry. whether you choose to intern at a small startup or a well-established company, the internship will help make your resume stronger upon graduation and will expand your networking opportunities.
none
photo byâ  hivan arvizu @soyhivan â onâ  unsplash
4. attend conferences and networking events
the industry is always evolving because technology and usersâ needs change. as such, itâs important to stay up-to-date with your knowledge of the field. industry events and conferences can help provide you with information about new products, changing regulations, and best business practices.
5. apply for jobs
upon graduation or the culmination of a coding bootcamp, youâll want to create a killer cv or resume and start applying to positions that interest you. thereâs always the option of continuing your education to earn a graduateâs degree, but with your undergraduate education and internship and coding experience, you should have accumulated enough examples of your work to secure a position in the field.
the bottom line
software engineers are integral pieces of every industry. they bring software systems and applications into existence and ensure they are properly working and safe for users. software engineers must be team players, have strong communication skills, be logical and solution-oriented, and are always willing to learn more.
from earning your degree to creating products, networking, interning and ultimately landing a job in the field, software engineering will provide you with a lucrative and rewarding career.
related articles
none
none
none
academic programs
student experience
become a student
tuition-free
about
donors
calendars
essential documents
uopeople policies
catalog
contact us
volunteer
faq
administration
blogs
events / webinars
email preferences
none
none
none
none
none
copyright @ 2022 university of the people
privacy policy
terms of service
sitemap
we use cookies on our website to give you the most relevant experience by remembering your preferences and repeat visits. by clicking âaccept allâ, you consent to the use of all the cookies. however, you may visit "cookie settings" to provide a controlled consent. cookie settings
accept all manage consent
close
privacy overview
this website uses cookies to improve your experience while you navigate through the website. out of these, the cookies that are categorized as necessary are stored on your browser as they are essential for the working of basic functionalities of the website. we also use third-party cookies that help us analyze and understand how you use this website. these cookies will be stored in your browser only with your consent. you also have the option to opt-out of these cookies. but opting out of some of these cookies may affect your browsing experience.
none
necessary
necessary
always enabled
necessary cookies are absolutely essential for the website to function properly. these cookies ensure basic functionalities and security features of the website, anonymously.
cookiedurationdescriptioncookielawinfo-checkbox-analytics11 monthsthis cookie is set by gdpr cookie consent plugin. the cookie is used to store the user consent for the cookies in the category "analytics".cookielawinfo-checkbox-functional11 monthsthe cookie is set by gdpr cookie consent to record the user consent for the cookies in the category "functional".cookielawinfo-checkbox-necessary11 monthsthis cookie is set by gdpr cookie consent plugin. the cookies is used to store the user consent for the cookies in the category "necessary".cookielawinfo-checkbox-others11 monthsthis cookie is set by gdpr cookie consent plugin. the cookie is used to store the user consent for the cookies in the category "other.cookielawinfo-checkbox-performance11 monthsthis cookie is set by gdpr cookie consent plugin. the cookie is used to store the user consent for the cookies in the category "performance".viewed_cookie_policy11 monthsthe cookie is set by the gdpr cookie consent plugin and is used to store whether or not user has consented to the use of cookies. it does not store any personal data.
functional
functional
functional cookies help to perform certain functionalities like sharing the content of the website on social media platforms, collect feedbacks, and other third-party features.
performance
performance
performance cookies are used to understand and analyze the key performance indexes of the website which helps in delivering a better user experience for the visitors.
analytics
analytics
analytical cookies are used to understand how visitors interact with the website. these cookies help provide information on metrics the number of visitors, bounce rate, traffic source, etc.
advertisement
advertisement
advertisement cookies are used to provide visitors with relevant ads and marketing campaigns. these cookies track visitors across websites and collect information to provide customized ads.
others
others
other uncategorized cookies are those that are being analyzed and have not been classified into a category as yet.
save & accept


Link: https://careerdiscovery.sciencebuddies.org/science-engineering-careers/math-computer-science/computer-software-engineer

computer software engineer | science & engineering career
none
none
none
menu
start career discovery
careers index
translate this page
sign up
log in
search
search
close
computer software engineer
please ensure you have javascript enabled in your browser.
if you leave javascript disabled, you will only access a portion of the content we are providing.
here's how.
overview and key facts
education
bachelor's degree
median pay
$107,510
job growth
21.50%
(above us average)
jobs in 2029
1,785,200
what do they do?
a computer software engineer could...
write the software that controls the movement of assembly-line robots.
create the artificial intelligence that controls characters in video games like the simstm.
develop software for a portable global positioning system (gps) so drivers don't get lost.
write software that allows people to communicate over great distances.
none
none
none
none
overview
listen to this section
are you interested in developing cool video game software for computers? would you like to learn how to make software run faster and more reliably on different kinds of computers and operating systems? do you like to apply your computer science skills to solve problems? if so, then you might be interested in the career of a computer software engineer.
software engineer
in this video, jessica mong explains how fixing a broken computer when she was a child in nigeria eventually inspired her to earn a computer engineering scholarship in the u.s. and start her career as a software engineer.
https://www.youtube.com/watch?v=xosgg6db6hs
do you have the skills and characteristics of a computer software engineer?
programming:
?
writing computer programs for various purposes.
active listening:
?
giving full attention to what other people are saying, taking time to understand the points being made, asking questions as appropriate, and not interrupting at inappropriate times.
complex problem solving:
?
identifying complex problems and reviewing related information to develop and evaluate options and implement solutions.
critical thinking:
?
using logic and reasoning to identify the strengths and weaknesses of alternative solutions, conclusions or approaches to problems.
original thinking:
?
seeking new and creative ways to solve problems or invent solutions.
more skills...
user needs focus:
?
applying an understanding of what people want from their computers.
mathematics:
?
using mathematics to solve problems.
quality control analysis:
?
conducting tests and inspections of products, services, or processes to evaluate quality or performance.
core tasks
think about if you'd like the typical tasks a computer software engineer might do:
analyze information to determine, recommend, and plan installation of a new system or modification of an existing system.
analyze user needs and software requirements to determine feasibility of design within time and cost constraints.
confer with data processing or project managers to obtain information on limitations or capabilities for data processing projects.
confer with systems analysts, engineers, programmers and others to design systems and to obtain information on project limitations and capabilities, performance requirements and interfaces.
consult with customers or other departments on project status, proposals, or technical issues, such as software system design or maintenance.
coordinate installation of software system.
design, develop and modify software systems, using scientific analysis and mathematical models to predict and measure outcomes and consequences of design.
determine system performance standards.
develop or direct software system testing or validation procedures, programming, or documentation.
modify existing software to correct errors, adapt it to new hardware, or upgrade interfaces and improve performance.
monitor functioning of equipment to ensure system operates in conformance with specifications.
obtain and evaluate information on factors such as reporting formats required, costs, or security needs to determine hardware configuration.
prepare reports or correspondence concerning project specifications, activities, or status.
recommend purchase of equipment to control dust, temperature, or humidity in area of system installation.
specify power supply requirements and configuration.
store, retrieve, and manipulate data for analysis of system capabilities and requirements.
supervise and assign work to programmers, designers, technologists, technicians, or other engineering or scientific personnel.
supervise the work of programmers, technologists and technicians and other engineering and scientific personnel.
train users to use new or modified equipment.
tasks 1/3
salary & job openings
steps to get there: becoming a computer software engineer
try it out with an activity or project
on the job
more information
please create a free account to view this career and access our full library of over 160 stem careers.
none
with a free account you will have access to our full library of over 160 stem careers. each career profile includes detailed information to help you learn about a career and the requirements to get there. you can explore:
salary information by state
recommended high school coursework
fun projects and activities to test out a career
videos and interviews with professionals in the field
details on what a day on the job is like
support provided by:
none
none
company
science buddies home
sponsors
contact us
privacy policy
image credits
pricing
get involved
create a free science buddies account
find us here
join us on facebook
follow us on youtube
follow us on twitter
follow us on pinterest
email us
copyright 2010-2022 science buddies. all rights reserved.
reproduction of material from this website without written permission is strictly prohibited.
use of this site constitutes acceptance of our
terms and conditions of fair use .
top
quick links
x
we use cookies and those of third party providers to deliver the best possible web experience and to compile statistics.
by continuing and using the site, including the landing page, you agree to our
privacy policy
and
terms of use .
ok, got it
free science fair projects.


Link: https://seedscientific.com/software-engineering-statistics/

software engineering statistics: 21 figures you should know about
skip to content
none
menu
blog
science jobs
none
menu
blog
science jobs
software engineering statistics: 21 figures you should know about
september 12, 2022july 5, 2022 by
kristina trajkovska
software engineering encompasses the development of computer system software and application software. the main principles of software engineering are designing, developing, testing, maintaining, and evaluating computer software.â so, if youâre interested in software engineering statistics, this article will tell you everything you need to know.
top software engineering statistics: editorâs choice
there are
4.3 million
software engineers in the us.one of the
most famous software engineers
is the creator of xml, tim bray.only
10%
of software engineers are part-time employees. 73%
of software engineers have a bachelorâs degree.only
22%
of all software engineers are female.
general software engineering facts
software engineering is currently in high demand due to an ever-increasing need for new software and mobile applications. on the other hand, people are drawn to software engineering due to good salaries and low unemployment rates. knowing all this, here are some general stats and facts about software engineers.
1. the average base software engineer salary in the us is $120,000 a year.
the average additional cash compensation for a software engineer is $14,649, which makes the total compensation for a software engineer in the us $134,588. furthermore, the lowest salaries for software engineers can be around $36,000, and the highest salaries can go up to $265,000 per year.
2. the unemployment rate for software engineers was only 1.9% in 2019.
other than a slight rise from 2014 to 2016, when the unemployment rate was 2.1% to 2.3%, the unemployment rate for software engineers has slowly been decreasing since 2010, when it stood at 4.6%.
3. as of 2021, there are 4.3 million software engineers in the us.
the answer to âhow many software engineers are there in the usâ is a complicated one. the actual number is closer to 3.4 million people in the us because the 4.3 million we previously mentioned includes hardware engineers, cad programmers, and others whose job is reading code on a daily basis.
4. the top-paying metropolitan area in the us is san jose-sunnyvale-santa clara, ca, with an average annual salary of $145,730.
the san francisco-oakland-hayward, ca area is a very close second, with an average annual salary of $145,250. third place goes to the seattle-tacoma-bellevue, wa area, with a yearly salary of $134,090. according to software engineering statistics, the fourth place goes to the new york-newark-jersey city, ny-nj-pa area, with an average annual salary of $122,230. and lastly, the fifth place goes to battle creek, mi, with an annual average wage of $121,160.
5. the most used programming language worldwide as of 2021 is javascript, with 64.96% of developers and engineers using it.
the second most used programming language is html/css, with 56.07% of programmers using it. after that, we have python with a 48.24% share and sql with a 47.08% share.
6. one of the interesting facts about software engineering is that in 2020 and 2019, with 58% demand, the backend was the most sought-after role in the field.
the second most sought-after role was full-stack development, with 57% of dedicated companies looking for specialists in the field. front-end developers came next with 30% demand. these numbers come from more than 10,000 companies and 245,000 job seekers in north america and europe.
7. the top-paying non-metro area is the north valley-northern mountains region of ca, with an average annual salary of $125,010.
the second highest software engineer salary in non-metro areas is in west central-southwest new hampshire, with an annual amount of $115,990. the third area on the list is southwest colorado, with a yearly salary of $113,280. western washington is fourth with $111,910, followed by hawaii/kauai, with a yearly salary of $111,740.
8. in 2020, 69% of us employers struggled to fill positions, with tech positions being among the most challenging roles to fill.
the covid-19 pandemic affected the american tech market. since it accelerated the digitization process, 92% of companies increased their cloud workloads. that resulted in a demand for a larger number of software engineers in the us.
9. the most numerous subspeciality of software engineers is frontend developers, with a talent pool of over 463,000 members.
mobile app development comes next with more than 224,000 members, followed by quality assurance with more than 220,000 members. furthermore, software engineering facts show that infrastructure and cloud devs are fourth on the list with around 175,000 members. the fifth category includes embedded and application devs with approximately 58,000 members, followed by machine learning and data science with 56,000 members.
10. tim bray, who made the developerâs tool xml, is one of the most famous software engineers.
while we canât say that there is a single best software engineer in the world, we can say for sure that this list has some of the best engineers the world has ever seen:
paul buchheit developed the webmail service gmail.john carmack developed the computer games doom and quake.dave cutler developed windows nt.max levchin created paypal.pierre omidyar created ebay.alexey pazhitnov developed the computer game tetris.jimmy wales made wikipedia.michael widenius made the open-source database mysql.jamie zawinski developed the web browser netscape navigator.
none
11. there were over 26.2 million software developers in 2020.
to further answer the question, âhow many software engineers are there in the world,â we have these stats that show that out of all software developers, 13.5 million were full-time devs, 7.8 million were part-time devs, and 4.9 million were non-compensated devs. this statistic also shows that application developers account for 72.3% of full-time and 26.2% of part-time developers.
conversely, infrastructure developers account for 27.7% of full-time and 73.8% of part-time developers. as of 2022, only 10% of software engineers are part-time employees. therefore, as software engineering statistics show, a vast majority of software engineers work as full-time employees.
12. as of 2021, the most sought-after cloud platform is aws, with 40.35% of devs expressing interest in using this technology.
google cloud ranked second, with 22.6% of software developers wanting to work with it. microsoft azure is next with 21.12%, followed by digital ocean with 8.46% of developers wanting to work with that technology. furthermore, we have heroku with 7.31%, ibm cloud or watson with 3.24%, and oracle cloud infrastructure with 2.6% of people interested in developing with that technology.
13.  germany has 901,000 software developers.
these are the number of software developers by country in europe:
849,000 developers in the uk533,000 developers in france412,000 developers in russia323,000 developers in spain20,000 developers in the netherlands314,000 developers in italy295,000 developers in poland200,000 developers in ukraine 179,000 developers in sweden
14. employment for software engineers, developers, analysts, and testers is projected to grow by 22% from 2020 to 2030.
this growth is much faster than the average for most other jobs. this means that the software engineer job growth and opportunities will be plentiful, with over 189,200 job positions for developers, testers, and analysts opening every year. some job opportunities will result from people switching jobs or retiring.
15. the most sought-after software engineers are those that specialize in machine learning and data science.
the demand for this specialization is very high, but there is a low talent supply. that means that if you specialize in machine learning and data science, it would be easy for you to find a job in the current market. furthermore, the software engineer employment rate for this specialization is favorable for another reasonâthe average salary is $129,000 a year.
16. the top programming tool for all developers is visual studio, with 46.2% of developers using it in their projects.
none
17. in 2021, the enterprise application software market made $271 billion worldwide.
this statistic shows that the global software market has been steadily growing since 2017 when the revenue was $172.1 billion. this survey also shows that global revenue will almost double by 2025, reaching an estimated $421 billion.
software engineering demographics
software engineering is a male-dominated industry, like most jobs in stem, but women are more and more interested in jobs in this field. so, from this global developer population and demographic study, you will be able to see all the different demographics and how software engineers fit into them.
18. 73% of software engineers have a bachelorâs degree.
the second most common degree is a masterâs degree, with 20% of all engineers having that level of education. furthermore, 4% of all software engineers have an associateâs degree, 1% have a high school diploma, and 2% have other degrees.
19. 22% of software engineers are women.
with the remaining 78% being male, it shows that this field is male-dominated. furthermore, software engineer statistics also show that women earn 92â¢ for every $1 earned by a man.
20. the average age of a software engineer is 34â44.
a very close second is the 25â34 age group, accounting for 36.6% of people employed as software engineers. statistics further show that the majority of software engineers are in the 34â44 age range. finally, 45â54-year-olds account for 16.2% of software engineers.
21. software engineer demographics show that 52.3% of all software engineers in the us are white.
moreover, 33% of all software engineers in the us are asian, 6.9% are hispanic, 4.9% are african american, 0.1% are american indian and alaska native people, and 2.8% are classified as unknown.
software engineering statistics: our takeaway
software engineers are in high demand, especially in some fields like machine learning and data science. although more and more women are interested in stem positions, software engineering statistics show that this field is still very much male-dominated. furthermore, with high starting salaries and fantastic job prospects, software engineering will only grow in the next decade.
frequently asked questions
what percentage of software engineers have masterâs degrees?
in the united states, 20% of software engineers have a masterâs degree. the majority of software engineers have a bachelorâs degree, which is 73% according to the latest statistics.â
what is the average salary of software engineers?â
the average base salary of software engineers in the united states is $119,939, with an additional $14,649, bringing the total compensation for a software engineer in the us to $134,588.
how old are software engineers at google?
none
table of contents
top software engineering statistics: editorâs choice
general software engineering facts
software engineering demographics
software engineering statistics: our takeaway
frequently asked questions
about us
privacy and cookie policies
terms of use
seedscientific â© 2022 â· all rights reserved
none


Link: https://www.dropbox.com/jobs/listing/2184214

staff software engineer - dropbox
none
none
dropbox jobs
about
about dropbox jobs
where we work
diversity
benefits
veterans at dropbox
blog
teams
all jobs
search
none
remote - us; remote - canada
staff software engineer
none
company description
dropbox is a leading global collaboration platform that's transforming the way people work together, from the smallest business to the largest enterprise. with more than 700 million registered users across more than 180 countries, our mission is to design a more enlightened way of working. from our headquarters in san francisco to eight dedicated studios and a worldwide team of employees who choose where they work best, our virtual first approach is leading the way into the future of work.
team description
our engineering team is working to simplify the way people work together. theyâre building a family of products that handle over a billion files a day for people around the world. with our broad mission and massive scale, there are countless opportunities to make an impact.
role description
our engineering team is architecting a family of products that handle over a billion files a day. we take on the complexities of technology that affect everyday life, so people can get back to living and doing their best work.
the heart of dropbox is engineering; the heart of our engineering team are our staff engineers, who set the tone and pace of engineering at dropbox. staff engineers work at a cross-engineering scope, driving impact felt by hundreds of dropboxers and millions of customers. as a staff software engineer, you will contribute in a multitude of ways, from architecting phenomenal systems, creating and encouraging good software development practices engineering-wide, driving strategic technical improvements, and mentoring other engineers.
dropbox is a unique opportunity to work with best-in-class engineers on very large engineering problems, but in an environment with small teams and abundant opportunities for personal impact and growth.
responsibilities
you will set direction not only for the team but will help guide engineering visionyou will architect important systems and anticipate strategic and scaling-related challenges via thoughtful long-term planningyou will write code as we expect our technical leadership to be in the trenches alongside junior engineers, understanding root causes and leading by exampleyou will mentor engineers, both junior and senioryou will own relationships with other engineering teams and collaborate with other functions within dropbox
requirements
bs (or higher, e.g., ms, or phd) in computer science or related technical field involving coding (e.g., physics or mathematics), or equivalent technical experience15+ years of professional software development experiencesolid cs fundamentals with experience across a range of disciplines, with one or more area of deep knowledge and experienceproven track record of senior technical leadershipstrong knowledge of shipping impactful and complex software projectsability to set technical and cultural standards for engineers
total rewards
our engineering career framework is
viewable by anyone outside the company
and describes whatâs expected for our engineers at each of our career levels. check out our blog post on this topic and more
here .
for candidates hired in colorado, the expected salary/on-target earnings (ote) range for the role is $175,400 - $206,400 - $237,400.
this salary/ote range represents the low, middle, and high end of the salary or ote (sales roles) range for this position, and is subject to change. to determine a dropboxerâs starting pay we carefully consider a variety of factors, including primary work location and an evaluation of a candidateâs skills, experience, market demands, and internal parity. this position may be considered a promotional opportunity.
salary/ote is just one component of dropboxâs total rewards package. all regular employees are also eligible for the corporate bonus program or a sales incentive (target included in ote) as well as stock in the form of restricted stock units (rsus).
dropbox is committed to investing in the holistic health and wellbeing of all dropboxers and their families. our benefits and perks programs include, but are not limited to:
competitive medical, dental and vision coverage(us only) competitive 401(k) plan with a generous company match and immediate vestingflexible time off/paid time off, paid holidays, 11 company-wide pto days, volunteer time off and moreprotection plans including; life insurance, disability insurance and travel benefit plansperks allowance to be used on what matters most to you, whether thatâs wellness, learning and development, food & groceries, and much moreparental benefits including; parental leave, child and adult care, day care fsa (us only), fertility benefits (us only), adoption and surrogacy support and lactation support mental health and wellness benefits free dropbox space for your friends and family
additional benefits details are available upon request.â dropbox is in the process of updating our technology to provide pay ranges in new york city based on the recent amendments to the new york city human rights law (nychrl). if you are based in nyc and have any questions about the pay range for this role, please contact paytransparency@ and provide your name and the job title to which you are interested in applying.â
dropbox is an equal opportunity employer. we are a welcoming place for everyone, and we do our best to make sure all people feel supported and connected at work. a big part of that effort is our support for members and allies of internal groups like asians at dropbox, blackdropboxers, latinx, pridebox (lgbtq), vets at dropbox, women at dropbox, atx diversity (based in austin, texas) and the dropbox empowerment network (based in dublin, ireland).
none
none
none
none
none
there are no open positions right now. check back soonâwe're growing fast!
other open positions
our engineering team is working to simplify the way people work together. theyâre building a family of products that handle over a billion files a day for people around the world. with our broad mission and massive scale, there are countless opportunities to make an impact.
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
none
view jobs
dropbox
desktop app
mobile app
integrations
features
solutions
do more than store
security
advance access
products
plus
professional
business
enterprise
dropbox sign
docsend
plans
product updates
support
help center
contact us
privacy & terms
cookies
cookies 2
sitemap
learning resources
community
blog
developers
community forums
referrals
company
about us
jobs
investor relations
esg
partners
none
none
none


Link: https://www.codecademy.com/resources/blog/what-does-a-software-engineer-do/

what does a software engineer do? | codecademy
none
blog home
career advice
learning tips
course updates
news
business
published 14 october 2020
/ updated 7 november 2022
/
career advice
what does a software engineer do?
interested in learning more about what software engineers do? by definition, software engineers build digital products, database programs, and computer systems for businesses by applying different kinds of programming languages to user-focused applications.
none
in our interview, xavier talks about some of the common misconceptions about working as a software engineer, and the difference between programmers, developers, and engineers. plus, he shares what he loves most about his job in software engineering. check out the video interview below and then read on to learn more. what is a software engineer? many people believe that software engineers just sit in front of a computer and write lines of code for eight hours every day. in reality, nothing could be further from the truth. xavier tells us:
most developers create applications with the user experience in mind. behind the scenes, they have to juggle multiple software projects and consult with their coworkers on how things should be done instead of just coding the entire time.
software engineers work in collaboration with designers, data scientists, and project managers to figure out how to best create and support their processes and projects. they're also generally in charge of reviewing other people's code, meeting with team members, and doing a healthy amount of research.
another important part of the job is identifying what the client needs, designing a prototype of the product, and developing a functional piece of software. after that, they have to run tests on the software to see if there are any existing bugs to remove. the final product is then released and made available to end-users.
you could say itâs a group effort â software engineers collaborate with project managers, ui/ux designers, data scientists, and subject-matter experts every step of the way. of course, we canât overlook the interpersonal aspects, either, such as training developers to debug software or asking users to test apps for them. what is the difference between a software engineer, programmer, and web developer? if you're thinking about a job in coding, you've likely seen a variety of titles for roles in the field â software engineer, programmer, web developer. there's definitely a lot of overlap between these roles.
as xavier mentions, you may find, during your job search and throughout your career journey, that some companies will use different names to refer to the same roles. for instance, some companies will refer to their programmers as web developers or front-end engineers, while others prefer to call them software or ui engineers.
there are a few ways to spot the differences among software engineer, web developer, and programmer roles.
web developers are focused on creating browser apps with a combination of client-side and server-side programming languages. generally speaking, they are involved in designing interactive websites and building user-facing applications.
software engineers are more likely to work on computer systems as a whole. they develop standalone programs and apps to help users perform various activities. for the most part, they program, document, test, and maintain software by utilizing the best practices in devops.
although their job descriptions may slightly differ, they do still fall under the same development umbrella.
none
none software engineers vs. software developers when you're looking for a job, you might see postings for software developers and software engineers. the difference is mostly semantic nowadays, and many companies don't distinguish between the two. but generally, engineering roles require knowledge of and experience with a broader scope of domains that includes development infrastructure: the tools and systems for building software.
none why being a software engineer is rewarding we asked xavier about what he loves about his job as a software engineer and about coding. he shared three things â the flow state he gets into when coding, the way that code helps to solve real-world problems, and fact that there's a lot of demand for software engineers. the flow state xavier shared that one of his favorite things is the flow state he gets into while coding. "when you're coding, you're thinking of very abstract, hard problems and you don't have time to think about other things. you become hyper-focused on the task at hand, and it's just a very empowering, very creative pursuit." you're improving the world "by writing code, you're actually solving real problems in the world," says xavier. it's hard to see when you're in the code â you're just in that flow state, having fun. but as soon as you're done, you're putting that code out there and you're solving a very complicated business problem for millions of people. there's a lot you can do with tech, and code in particular, when it comes to having an impact on the world.there's a ton of demand for it finally, xavier shares that he likes that there's a lot of demand for software. "i can support myself and my family for years to come, based on the skills that i've learned."
none advice for budding software engineers considering a career in software engineering? we asked xavier if he had any advice for those that are just starting out. his biggest piece of advice is to take initiative: in school you learn to do things the way your teacher might tell you how to do them. but, in business, there's no one telling you how to do things.i would encourage people to take initiative in finding solutions to problems they're not even asked to find; to take initiative in reaching out to people; to feel confident in asking a lot of questions. try to take initiative in everything you do. the opportunities will find you if you reach out and try to solve different problems for different people. none how to become a software engineer if xavier's interview was inspiring to you, a career in software engineering may be in your future â and you can get started right here on codecademy!
none
none
none
none
related courses
get more practice, more projects, and more guidance.
none
codecademy team
none
read more
— codecademy news —
career advice
top 25 project manager interview questions and how to answer them
want to work in politics? these are the data science careers to consider
the 10 highest-paying industries for it professionals
see all 286 posts â
none
none
cole romano
none
none
codecademy team
none
—
what does a software engineer do?
share this
none
none
codecademy news
© 2022
latest posts
facebook
twitter
privacy policy
cookie policy
do not sell my personal information
terms
made with ï¸â¤ï¸ in nyc © 2022 codecademy


Link: https://faculty.washington.edu/ajko/papers/Li2019WhatDistinguishesEngineers.pdf

%pdf-1.7
%âãïó
685 0 obj
<>
endobj
809 0 obj
<>/filter/flatedecode/id[(\006!\335\252_\204s\323\223\321\363x\315\304\201\001) (\241$\312\300u\254\367m\270\256\212h\316\312\306\026)]/index[685 125]/info 681 0 r/length 183/prev 1427742/root 686 0 r/size 810/type/xref/w[1 3 1]>>
stream
xcbd```b``ì² idì
hlæ~°dl««ÿ"ãyál%é¯f
ée`,â8ìëb.³}a$w
äø&áæpêhv°é\
@#	,rvóv3
læ7)õlúfé6g¾,bv?	d
öh^qkxg001þo/ûqä×þ
t'ÿ30}ºëä z4¿¯íç0  ³
¶
endstream
endobj
startxref
0
%%eof
686 0 obj
<>
endobj
807 0 obj
<>
stream
xc```b``9éàæà %ì ì â@16iu000282ð¨)4s(¸r,<`àô ¤þäüjé,¦»áwpakàù ôµëzç
ïöfåîë*¤m
x#µ
$x²êäªu$
wìhö4hîsi
pyìiñü«±¨ëdòyi
ïï&ri#âp-djhæ7×;«ï>õº\uá'²b«¤¢ïëãsµt[í7<wkë
¬rk.>õºd,[~"²iw\èäi"÷æt¹ych°9kajíe
zb
ô(ÿf
deùy¨êª, ávlúeì:u|ª
±¢¥º

6yþkm°kå·¹ £ºýª× íjµ|ôú6°l/gð¼
#
¼gù±	hk ±>x¤
h
 ±cfcóñè;<k^
0hpc8çèæ,áþãûc~"ãýã'ø¾èwä72*dñ¬jtk¨þáðàøÿ°âf
. v¹2oñ>æõ ·ö¨
qî3p1³
:à?\¤béê´(gðòópoë%þ
;,x6l0guø záæ þë
33²þæ jé
1ï7 ¿[â%
endstream
endobj
687 0 obj
<>/extgstate<>/font<>/procset[/pdf /text /imageb]/properties<>/shading<>/xobject<>>>/rotate 0/thumb 248 0 r/trimbox[0 0 439.642 666.49]/type/page>>
endobj
688 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
689 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
690 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
691 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
692 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
693 0 obj
<>
stream
hþtâp ðÿÿ-ktöuì´¢"¡<²¿éºf8sî÷nìzßòó
²3bâ$no$ñg|³ì@ö$v¸b
ã-²í&à ðñ÷=îykùmë/.º®cëö³myhhæùì2ó×)nèøñhl@úßz´k:¬ý_zmò õz
yt®£®i¨©*ªjyiqpqx,0or  ây¤p
endstream
endobj
694 0 obj
<>
stream
hþìën0÷ó³i¥¹4@@mt5©fhí1'5æ¦æ:¯e©¯pë¢r¥.ðáã£ÿûís,9ºhëîa£-äläø×ãoxã¯§+gu.aç>l_néao
_$¨
û¢,@§¨-¸¨â6æi&·ÿ.l0êsô>æýº[­ñr*@§¶gqçqño»~ðñ> ïq
âä;·\?ôïcï
næ©ì>¼¹útäywz!!móøok7âxäó,au?n[kt'è£îtt±r3)p7o·²ö1æ
ôd
²v¼§d ®k»dïô3r©*èõà
|f8k6ëk´®·u;phê;£peä¸<#ïõ"ò"º3¤æðk®_³óm?ä©ècüzü§5×8©jådêâ26oúª÷ö&f¬'µøû6$*»ïcê´ii
äl
d²ãåpl·ròdèîkîëj«.úîæ=ºèyoº
¢¦?íõ ãýxv¸ÿdì2cfè
!3ä¿,¢ñu
â<©óvþ-à àú¦
endstream
endobj
695 0 obj
<>
stream
hþìïnü æïû^kvèèvmtõ²uôfm®,]k1 `eg_­>r_¡xÿxýmn*õà9xfï÷
ã·½e|#xêu£+øëçoqáïw
¼°s¹n>íüºûüèw^x[ïêö­me` oö´¯ f)iüòý°©àý°`nwip	¸îsòâ=è0á(»ihnó]càz¿¥ïôëýç#.®*¸árº®k»<5n
hqg(ëx"ñ/:°>ñþýaä¤s/=w
ñ`x³¥ù
âø#uµviîkl¹iqï,")f£ò
oó¹,÷hª?¬m0~m,ø& eû]^8¹d6ÿö¾à£{»ujÿh#©d+uð±r^à44aéúll½sá<{úpí@£éuûdèg¶uöbû¶/©´þpj.dñkõ]xû)ùø±ñø¯ìý dl	2a&èã4+u
a»8«þ` °nõè
endstream
endobj
696 0 obj
<>
stream
2015-03-03t16:28:54+01:00
2015-03-03t16:28:54+01:00
adobe illustrator cs4
2015-03-03t16:28:54+01:00
256
256
jpeg
/9j/4aaqskzjrgabageasabiaad/7qasughvdg9zag9widmumaa4qklna+0aaaaaabaasaaaaaea
aqbiaaaaaqab/+4adkfkb2jlagtaaaaaaf/baiqabgqebauebgufbgkgbqyjcwggbggldaokcwok
dbamdawmdawqda4pea8odbmtfbqtexwbgxschx8fhx8fhx8fhwehbwcnda0yebayghurfrofhx8f
hx8fhx8fhx8fhx8fhx8fhx8fhx8fhx8fhx8fhx8fhx8fhx8fhx8fhx8fhx8f/8aaeqgbaaeaawer
aairaqmraf/eaaiaaaahaqebaqeaaaaaaaaaaaqfawigaqahcakkcweaagidaqebaqeaaaaaaaaa
aqacawqfbgcicqoleaacaqmdagqcbgcdbaiganmbagmrbaafirixqvege2eicyeumpghbxwxqipb
uthhmxzi8crygvelqzrtkqkyy3pcnuqnk6oznhduzhtd0uiijomjchgzhjrfrqs0vtnvkbry4/pe
1ot0zxwflaw1xdxl9wz2hpamtsbw5vy3r1dnd4exp7fh1+f3oehyahiimki4ynjo+ck5svlpeymz
qbnj2en5kjpkwmp6ipqqusra6voraaicaqidbquebqyecamdbqeaahedbcesmuefurnhigzxgzey
obhwfmhr4sncfvjicvezjdrdghasuywiy7lcb3psnejegxdukwgjchgzjjzfgidkdfu38qozwygp
0+pzhjsktmtu5prldywvpbxf1ex1rlzmdoawprbg1ub2r1dnd4exp7fh1+f3oehyahiimki4ynjo
+dljwwl5izmpucnz6fkqokpaanqkmqq6ytrq+v/aaawdaqaceqmrad8a9u4q7fxyq7fxyq7fxyq7
fxyq7fupeahy2sc7udiv7c2aj+q6n6mpzajhjfziccqgpx35hatdvbwks6ydd/dofpb4v+fzuzu3
8mfobl9g/hwyhieju/zc1mukqrxw69iaxb72npwzv5e380vpaj9v4+ta5clu/mfzbp8abvprx+q+
n/xdjmdptlus5zpw2+5jxlbsxt5kaytyof8akdj+s5iyztlzjpxy2o5wrsvvo728iny55ep+s7d9
ryyoaceri+k2jypm/mcd7f9kafzn1p8aiflmqhawojymfjv97ljka2n5hazeqj44rhe5ikn96mn4
znyu380fqal9n4+tizcnlj+ywkzuw6iktwpu/wb4g+lfi/4xnph7fwy+sgp2j8fbmmgzdz6hy3qc
7sdjl78gbi+y6j6c2+huy8gubbzggojlkuxv2kuxv2kuxv2kuxv2kuxv2kuxv2kuxv2kuxv2kuxv
ldx8xavpan6zlwbtanxsh6o305havtdfghqo/cobguggf6r591s6jszas4feffif9ken0doa1xbu
we0pqptajklgpzpzpdjk7ssn9p3jyn5k5pptmjznlrw5fxyq7fxyq7fxyq7fxyq7fxyquimlhkek
lthiv2xqlwhyiyuzmjsgirjdk8+6pbejeaxcpifhka9mgx+kftm50vbuwg0/wptbbklnnj8xaxqi
j6tlsxva9fkh0d/ozpdj2hizj0nfupntjifmszwtsvdirsvdirsvdirsvdirsvdirsvdirsvurq6
trwbp7mryoufwdjqzxlyxxx4pggee0wxxfplzpyg0wgchobg/wb43+r/ac/r+wctru3jt9ol0jv6
/sapzo5ituzsxclmy1ziakn3oaakk2wprarsvdirsvdirsvdirsvdirsvdirsvdirsvbr2rg6eqy
mqsdqg+xwgkgwrldc8+3ehgduwz4egub/el/ak3836/nm/0pbko+nl6h39f2tscnezq1ura6gwe3
kwwj91dtuz1ollhjhiibdadarlixyq7fxyq7fxyq7fxyq7fxyq7fut1vxrhslf1jzylb+6gu/ex/
gpe5ha3xq08blz6dvyyltztwncv9wn9s5f4af3ck/yuew8ffok1etyz5xi7db0djyksl+yihyq7f
xyq7fxyq7fxyq7fxyq7fxyq7fxyq7fxyq7fxyqmgja7f6tp6ls9y2p7yft0ye48ffmvr67jp5xe7
dr0kyyiemajr1jq9v6kb4yrt1yg+0p/ipfo10wuhqi3hn1hc5ezwmozrj2kuxv2kuxv2kuxv2kux
vj/mfmo30e3biel1ip3mp/gzeaga7tdtconj3zpimzsp5jfx11fxl3nzizjxo5pyeahydoizzpzz
gujzljk2ozuh2kuxv2kuxv2kuxv2kuxv2kuxv2kuxv2kuxv2kuxv2kuxv2kq9jfxvjcpc2shjlq7
edx4edwctw554pcutrcqaen+xfmvtrfssai7qmd1oa/8mv8ak53hz/aedrhukoy/hryiytn82dj2
kuxv2kuxv2kuxvlde1u30ixm8nxstvyiu7n/qdzmfrtbhtw4jz6dvyyltyu+vrm+uplm5cvliak9
h4aeagcjmzsyympgyxhjtqypdsvdiqrbwtzcyelbxpnif2eusfwyepfkzqijpkocvdapqtonqxnp
lfh/adsp4/semw5djlxi5rihusykipmddsvdirsvdirsvdirsvdirsvdirsvdirsvdirsvdiqvy3
1zy3ud1bouljnqex8qfehlcgawkyle0qkgnqug63b6vyiep4zv+geku6t/q9s7vq62oohxdn1hc5
ezwmozrj2kuxv2kuxvsurqc1tplmdgkmslny+ayvlljjizs2aqttyfxnyn1a/e5kqe+zdh2vow+f
jna63vyz5di8ug7g40pwuvzeq7fxyqujrpjfjqvzyfue5nbhictqv67o2kwul2sw0cjlqgwtu79y
f4z6fo9jhbarj8t3lyoxpgsqspvgcpfcducdmsrexs8x85andpmqd6uvg3uf9re7ka0zr7d84jtf
rjdl9p0y3cecakq5qmdsvdirsvdirsvdirsvdirsvdirsvdirsvdirsvdiqyafrm+k36xmdwjpwz
r9mq9r8/dmvq6ywnycq5dr3hmzuxrfrdqxvthcqnzilumjdwod9iyxyreo8i5inquwjdirsvdira
ppmu+vcjtig/cwgtwr+1j/l/alh9fyzku3ndxs8kpkpp3/sackujec59qdirsvdiqpbtgc4imxdo
nvwpdtxjy58mhlukh7jaxuf3br3mdc4pvdiw8dno+llhjesjylla2q5yl51+ygoq3gqr20r5fvuk
yefzsakfqam47t7uceurh8i+1oyhdi+anrdirsvdirsvdirsvdirsvdirsvdirsvdirsvdirsvdi
rlviwu+hchtj2/czmtut+zj/l/sv1/pog7d13dlwpcpcvf8atbccujp861udirsvs3zfq66xputz
x98fgghji3t7uuyxagrgdezdeq97guqdyv3z2luszmswy9st1ocassbljnyfdirsvdirsvtlsfmw
q6vuwsv7pjvoxhjk+no30zmaxtdlg+g7d3rlgrcpvppevxmrjux24oxafsgp82lu+jmvn23qjito
+78fjyfjxjjjjqtusc1blb2kuxv2kuxv2kuxv2kuxv2kuxv2kuxv2kuxv2kuxv2kuxvthzgdosrk
qvydqr0oeeg2fetexdwxvnliua/vr8e48jfg/wb/xo/7p1yz4hlrypvcmmrczzmsnyq858+6r9a1
qwagsnmkh3kbdvu2gcb27quplwdld72jid2mzpgt2kuxv2kuxv2koqhsdvmjwwgynlib7lpe7ke2
xapl8nllkljcrhukeer/anba3/1b7n/ktj/tjfks/wdmn/psvcujjhjfi0cqfjengrgqqr2ioy8o
mjo7fc3arlvmykojymga3jjxatub+gtb/wcrfc/8izp6zk/ks/8amn/psnhlv0frf/vvuf8aktj/
th8ln/mt/wbkv4s79ba3/wbw+5/5eyf0x/jz/wczp/sleeu/qwt/9w+5/wcrmn9mfywf+zp/aepx
hlv0frf/afb7n/ktj/th8ln/ajk/9kv4s46jrqftyxia6kwyf0xoizd+cx+lk8jq0ttcqmk0txn/
ac1k/rymwoueyirsnkfdirsvdirsvdirsvdirsvdirj/iwqm21q2bn9zdig8biu6n6rufdm77c1x
bl4dyn97zjo70boyb0pqf4llyz3b/zhrnp4kdyfsdsp1gyy8zmegqtqeotsytsvlieukjf3bxlgp
oedtkzek8y4q3iq7fxyq7fxyq7fxqvld/lhll/vb/ibz3fzh+lq+p3lyyck4zzmnkfml/jvx/wdx
nf8a4lnnuv8a7+f9yunlml2yjfwsf97bf/jin/ehlmh6x7wkc3s+ekuu7fxyq7fxyq7fxeaihfqe
oojcpbe+wtdvafws4wx/bjhpt960/hmhn2bgyc4j4bfcxmqwl6r+xkigyazn6n/feta30okd76fp
njqvz8jfeb8j+troluyjc2tzazndcrtfkv2kcuoc9kxshlhkklurslkfdirsvdirsvdirsvxqyyq
ypngemkbb0bwztuhjqkykecwr2pt7xl2xgu0+zmivtwjg4+g7z6lp8wyyxmdq5qnhj35hx3o6tfa
qandsbjxsp4j/wanxzudv5uhcifzj9g/ayzds87zj2h2kuxv2kuxv2kuxv6r5q/5ryy/1w/4m2d3
2r/i0pj95cmhjom2tj5h5i/471//amz3/wcjz57r/wc/n/wljs5pdmixvrh/ahtt/wdjin/ehlmh
6x7wkc3s+ekuup3eyqw8s7glikz2a60uvnmhkmirmjyatsxr/lyuif74uf8agy/+a80v+idb3t+q
/w1+khf8rf0t/ffz/wadh/zxj/ogwd0/kp1r4od/ysxrp98xp/ax/wdnep8aogwd0/kp1r4ovi/z
b0fvtlph/rip+nwosj2/gpsq+h7v8qjha+avl90qsd6ise0ly/8aiyxmzf2pp58pj47feyewmqsg
azscducomzwnsnyvqoralyarb+jdr1i/u5rs6h/joyur0eppgpj49qgxbeza7ov3pf16m3xxnvdo
brxh8co4zinbop6efdll0pe48o0luybf2kuxv2kuxv2kuxv6j+xt962ky2rgrwsmw8ek+if8nyzs
owm3fhmp5p+w/gt+m7jh+yv2zdzjgb+g3iai/wapywp4uzv9v5elmi/zr9/4ddid2l5o2t2kuxv2
kuxv2kuxv6r5q/5ryy/1w/4m2d32r/i0pj95cmhjom2tj5h5i/471/8a8z3/aojz57r/ao/n/wlj
s5pdmixvrh/e23/4yj/xizzh+se8jhn7pnpllixvv+oxef8agct/aigcx9x/ahm/6p+5b5phm86c
v2kuxv2kuxvhazreqaa4a0nzf7xh4kpzu7zlabw5cjubry6fjikqz7y75wtnuk284fve9kr8d/6h
p6s6vs/tegf0y9m/spu/u3xnbic3dncarpltqvljaxaqr/zburdow9xmpqtnhnawl/ygi3k2pafc
afey2k4pjeavhqjqghsrnaajblfmwlzdjeuhspq7fxyq7fxyq7fwufl7dmlwzicfhuiiap8akqhh
+fc3nygxhzgp84fd+c2yzulxmef1/mf8/wkpt/kx8h/guypau+lutpnxy2yz5pzmcxdirsvdirsv
dirsveq+up8alhll/vb/aim2d32r/i0pj95cmhjom2tj5h5i/wco9f8a/gd/+jz57r/7+f8awljs
5pdmixvrh/e23/4yj/xizzh+se8jhn7pnpllixvv+oxef8yjp+ihmfv/3m/6p+5b5phm86cv2kux
v2kuxv2ktqzkwzsvztvwgxbhcyg1ufelet/mz1s1nvct/psa+i/zp0dfpsc7xsjtdx48mvrj9o7/
anbkqlbis3dnifn/aegt2k6jgp31trzad42p/grh9eadt7scubkhopp3fsa8kdrefzylq7fxyq7f
xyq7fuz8st+h5gsx6vlcf8jpg/42zo7nnw6ib86+ezkhnbxshlvj5d1er2+9icxc0ukzpesxkjla
uxv2kuxv2kuxv2kvvfkh/kowx+q3/e2zu+yp8wh8fvlkw5jxmyzpi/mx/hev/wdjo/8axlppdf8a
38/6xcaxnlsxgkty/wc9tv8a8ze/4kmsw/wpeejm9nz0lyklq3/hlvp+men/aba5j6v+5n/vp3ip
j45nntiuxv2kuxv2kuxv2ko3rtsftdtgu16rt+8a7odmh3zk6puhdlex0+7qmjovx1zwumpqrcoi
7g56gdysousuyi7i3lt5bwovgrx7mkhi5mynexpiillxq5ge3ujyh+3e7i3zu0oeczigeje8wacq
qeqv2kuxv2kuxvwspdfeqsdqkin9za5zhlwzb7ifcjlauxv2kuxv2kuxv2kuxv6r5q/5ryy/1w/4
m2d32r/i0pj95cmhjom2tj5h5i/471//amz3/wcjz57r/wc/n/wljs5pdmixvrh/ahtt/wdjin/e
hlmh6x7wkc3s+ekuuhdw/wcoxef8yjp+ihmfv/3m/wcqfuqetxzponfdirsvdirsvdirsvdir1ny
tcm48v2ujgpefpk/8yyu/wcnc77szjx6eb8q+wzkwoyaznsnlfncaq+y7xr0dlkh+zumfxoch2td
h1mx8fmhgnzsbncxdirsvdirsvdirsvdirsvdirsvdirsvdir1xyh/yjll/qt/xns7vsj/fofh7y
5mosczsmtypzf/x3r/8a4zv/amszz3x/an/p+sxglzs7mrirwp8avbb/apgrp+jdlmp1j3hi5vz8
9jcpc6t/xy7z/jbj/waqoy+r/uz/1t9ydyeoz504rsvdirsvdirsvdirsvenerv+ucg/1pp+jno3
7e/xye8/e5gpkn+bzm808+f8pc//abjj/vne9uf4wfchhyc2o5qgdsvdirsvdirsvvr2mxxk8z6p
i6/cxgwzo8myo4lso5wrsvdirsvdirsvdir1xyh/yjll/qt/xns7vsj/abahx+8utdkngbjk8j8x
f8d6/wd+m7/8szz3x/38/wcsxglzs7mrirwp+9tv/waze/4kmsw/wpeejm9nz0lyklq3/hlvp+me
n/edmpq/7mf9u/cg8njmedok7fxyq7fxyq7fxyq7fxrhlw2nv5fsoykfo/up/pql/wdjbo+7lx8g
ngpk/nu5mbsmuz7j5b5znevmo7p0tgg/2kcv41zho2j8wpl5upscfjzstnawdirsvdirsvvrkmy3
key6vii/ewgwyy8uwo8hqjfm8hoeyl5olzs//iz4/wdjbmrtkhdqjjzv57sp80szbyuxv2kuxv2k
uxv2kvvfkh/kowx+q3/e2zu+yp8afofh7y5mosczsmtypzf/x3r/ap4zv/xlppdf/fz/akxcaxnl
sxgkty/722//abkt/iqyzd9y94sob2fpsxkqurf8cu8/4wsf8qoy+r/uz/1t9ydyeoz504rsvdir
svdirsvdiqm0jt31durezx/drdmr2qbsfogzgkwhnkjadt/amisvyfvuukooqgbqowgeiaacg5tu
0scmlzsgkcal3pgfftgnmrbkeqv41exl3v3ncv8aamdpd/sjxpomuqzmzhqbcqm1hk1dirsvdirs
vtpyxb6/mcxtrsup/wai/j/41zo7nhxaia87+w7khnnfzctdfrmc4hw3eqjp+uhkn8kzndv4uhmj
fzh934dlin2l5o2t2kuxv2kuxv2kuxv6r5q/5ryy/wbvv+jtnd9kf4td4/exjhytjnkyer+yv+o9
f/8agd/+jz57r/7+f9yunlml2yjfwsf97bf/aiyj/wasgwyfrhvcrzez56s5sf1b/jl3n/gct/ib
zh1f9zp+qfuqetxzponfdirsvdirsvdirsvejesflzwfs17crxu7guvd1sprq+7dtny9i6a4o8cv
rl9g/a3440yfn42mx8+6ulxtryxt+/u/tduix1/4i7ffmi7d1fbj8mfvp7vx+lrys2p51nhtdsvd
irsvdirsvzr+xtozdzkni+g3ijb/yniufhxn52bi4sxl/nh3/gtmmbp5+yvj62kxxsirwsm58ek+
e/8adcc2nb+hiwif80/yfwgeqbpo849odirsvdirsvdirsveq+up+ucsv9vv+jtnd9kf4td4/exj
hytjnkyer+yv+o9f/wdgd/8aiwee6/8av5/1i40uaxzimvax/wb7bf8a4yj/xizzh+se8jhn7pnp
llixvv8ajl3n/gct/ibzh1f9zp8aqn7khk8czzpxxyq7fxyq7fvs2tri5mwg3jawvuiiknj48cpn
hilkgm88tesutgw71iljcdeodqqhxb+zvwzquzexhaiexexqdzddhxnluda2oful+2slos6ug4xr
ivut2ue5ynuz44ogcuqqttyxvttn1o/lu5tmc/cnzvhrr8s4dvamwbizy6uni2ujmoh2kuxv2kux
v2kvrpy9sfr0mw6yua6k2pikfwj/aiblnydgyehcz/zj9g/bb8y2zdqfml7yz2j/agzkzk+bi2p0
hfnvqmiyyza9qzisphjopizxhkhgsnijr4mpornnu4mjipmoktykuxv2kuxv2kuxv6r5q/5ryy/1
w/4m2d32r/i0pj95cmhjom2tj5h5i/471/8a8z3/aojz57r/ao/n/wljs5pdmixvrh/e23/4yj/x
izzh+se8jhn7pnpllkv3abi0mgb4mwnk5dacgrxk82pjgy94iqwff8q2n/5b1/5fn/mroa/0oy/n
j5ftavcd/waq2n/5b1/5fn/mrh/q7l+epl+1fcd/yraf/lvx/kwf+asf9dsv54+x7v8jfh+wp/3z
qh0lf/evko+znfp7p2r4sywn5faleq07y3bhvswvfuua/jmxi7awx+omx2fj5shjdilpt7kyj9o0
gsfe4qae/m9t9obbdp4yxuaazapxy5kf1hu7ltrzri7keadop2mpgo7nknrqyyy8uzqqttzlzd5h
utyuetvjtyz+5gr0/wapvfjnea/tcwolz2ioq/hvx5stkcwglsvdirsvdirsvxqxstspdgoukjbe
xxzjqdjqizeacyr2pt7nlkxgte+zcipxxig5+k756lp8ix4xada5qfbezcl5z590o2uqc8qfubwv
ptiuzfekhon7d0vbl4xyn97rkg7gm0jw7fxyq7fxyq7fxqvld/lhll/vb/ibz3fzh+lq+p3lyyck
4zzmnkfml/jvx/8axnf/ailnnuv/al+f9yunlml2yjfwsf8ae23/aomif8sgwyfrhvcrzez56s5t
svdirsvdirsvdiqjdxtpaj6lzmkkelsf+6uvzc0myura96cwl6t+ynnegj06m3enazwvjh0bmfwz
r6rt+edsq4j3nl+v7ms5o5hooale6hoz7uuyv2r0a8fa2gczn1e8sukzstrjkgyldsvdirsvdirs
vdirj/iwlg51q3jj9zaco8di2yj6bu/dm77c0vhl4zyh97zjg70boyb3yqlvmlsf1tspban74fha
fcren39mwu0nim+ix68x72mo2hkroymucfwukmp6gjqm4agg0xgawk7fxyq7fxyqnvh5v1mxti7w
bkemqiqfatusev05ssha2bfaqirq8mymqip8e+yf54/+agw/y5qo8fjfekrxdzldxmtzlqyzmxcg
uftuc1exizymjzlam1likujdo5fkxzkizt7g1wxjbsknn+ofmf8ay0l/ami0/pm0/lru/wa77az8
qu/xz5j/aowhf+raf0x/lru/zvsc+ixf458x/wdlqv8aylt+mp8alwp/nfyf8qu/xz5j/wcwhf8a
kwn9mf5a1p8ao+wl4hd/jnzh/watc/8aitp6y/y1qf532bfelj548yeu+skpf00/pj/lwp/nfyp1
l4hqtx5o8wtgis+kap8airh/amqc5rk7t1e+cz8nvuqzllzjzjxlyoxc9wykn7zmfkrjs7svubxy
q7fxyq7fxyq7fxyq2im7bebzmicqopj6dcasacvwvl2krpelxw1b6x+odh3kbr93to/7p0gwyhhr
zpvcmmaczzmsnyq7fwaefdc9c5gpwl+5nnlgd9mt+b/zfr+ecl25oegxix5s5+/9rtkj1yjnptts
vdirsvdirsvdirsvdirsvdirsvdirsvdirsvdirsvdirsvdirsvdirsvdirsvzd5c0l17g6pov7m
a0twf2pp5v8ay/r+wdb2hoekxiy5r5e/9jbjj1z/nwtzsvdirsvurq1guras2nupdkpv1pgcry4o
5immtwuew8n13rp9jv3tpkld8umnzk7h5+ocdrdhlbkmty6hvdjsjrs/mrdsvdirsvdirsvdirsv
dirsvdirsvdirsvdirsvdirsvdirsvdirsvdirsvtdqtgn1a/s2jqsy+katsqdqfn4zl6hry1gqr
hlqe4jjgy9ytbwc1to7ebeeushuueazvswkooijhkhjapvyxlsvdirsvdiqxa9olvq9iyjphlx4o
jabq39d3zc12ijqicj59d3mzrt5vfwnzy3ultcouljncox8cpehoezyzypgmhrdjkuozuh2kuxv2
kuxv2kuxv2kuxv2kuxv2kuxv2kuxv2kuxv2kuxv2kuxv2kq9jy3n9dr2tshewq0a7dxj8amtwyzz
zimrzkqleq6dolvpfiii/ilajty92b+g7do80oijp4ci59t3urgnjjmyydirsvdirsvdirsvsjzf
5dttytgcrhdrg+jnt/hw8voa7tds+ooj3shi/joxlg3mf9y3vjcvbxmzjlq7g9x4g9wc4jnhliky
yfeoorshlshyq7fxyq7fxyq7fxyq7fxyq7fxyq7fxyq7fxyq7fxyq7fxyqr2njdx1yltaxmsvzsb
2hit2ay3dgnlkixfkpat6h5e8vw2j23fasxug/fz+p8akr4km7js/s+onj3ypm/jo5ey0m2bbk7f
xyq7fxyq7fxyq7fxyql2t6dy6vb+noomq19kdftkf4j2zc1uhhqi1ln0pcxlg3mes6ff6tp6dyly
2p7uzd0yex8fbok1mhyaevsg3q9c48okjfmih2kuxv2kuxv2kuxv2kuxv2kuxv2kuxv2kuxv2kux
v2kpho2hx+rt+nbjsnt+9mb7cd3pj7zmapq5nrkojbqegzris9m0tqbhslf07deujf3s7fay/wab
7z2ui0mnpgo8+p72+mqexzmzoxv2kuxv2kuxv2kuxv2kuxv2kqv1a211a0fxgsst7mjcoyvlijkj
wyfhbfsf13yfcqcp9mjnh6m3p94v+r/n+v55y2u7dlh1yvuo7r+1qlj7mjojixrwvztrlioqfczo
ccdramscuxv2kuxv2kuxv2kuxv2kuxv2kuxv2kuxvted2cipz2nfucpjpgbhajnbww6d5dujys+q
vhh6i3h943+sf2f1/log0pycperl6r3df2fe2xx97orw1t7wbylenyou2vffbnuy8uyr4yigg0bv
yxlsvdirsvdirsvdirsvdirsvdirsvdirsvs3vvl2laop+swj1aue6fdipp7/tmfquz8wf6hv39w
jicwvvfiwqwxz7mi7h7kphka/wbu7h6dnnarslldehrh2trxljusmsmhjmro5f+0jgqw+yoaaude
0rra1urv2kuxv2kuxv2kuxv2kuxv2kr4ozppbhcjssn9lebyn5azkedi0bzvkmleqtuushvclsh+
u/fir/qjyfsc3wl7cyz3n6b9rymzzpppl7stlufvor6tkgd/ikp09vozpnl2fiwfsn+/q2iiczzm
snyq7fxyq7fxyq7fxyq7fxyq7fxyq7fxyq7fxyq7fxyqh7zt7g9thdwjmvbmaspkeo+jkc2nhkft
akcly9e/l7pexlwsklqx6lx1eh0n8x/dzqm3yggx0kx+0fj4sdjcr3x5e6xhuwsrtr2fsjfcrt8c
1exsdnh6sjfywoipxp5y8wqfbszt/qd1p+icswz9maipob+g/wbzhgkbksr2pas3kt/wrh+sziyw
zjzir8gnkovq7fvaoyvzno7er/8avrj+ozzhdoxkjpwwkdb5x8wt/yszr/xkhp/8t45lq7m1euud
8dvvzcbts1/l3wjkgeskbe4qxb7gkfjmdi7azs+oip2shike2p5farcq11jjdmoq19npux4v+gza
yewmmfqjl9g/hxzjggq2en2vlh6drakk9+aaj+z6nnvhwqxioabmbsvlyxyq7fxyq7fxyq7fxyq7
fxyq/wd/2q==
acrobat distiller 10.1.8 (windows)
springer science+business media new york
application/postscript
xmp.iid:ca3922dcb7c1e4119116ab34d81c299e
xmp.did:ca3922dcb7c1e4119116ab34d81c299e
uuid:710ed555-8a84-40e9-9e4d-3fc36dd07293
1
proof:pdf
converted
uuid:62ab0481-0f43-47f5-88fd-669e3da3c871
converted to pdf/a-2b
pdftoolbox
2015-02-26t11:53:50+05:30
saved
xmp.iid:ed034194eec0e411992d8a086e555da8
2015-03-02t18:13:19+01:00
adobe illustrator cs4
/
converted
from application/postscript to application/vnd.adobe.illustrator
converted
from application/postscript to application/vnd.adobe.illustrator
saved
xmp.iid:c93922dcb7c1e4119116ab34d81c299e
2015-03-03t16:13:34+01:00
adobe illustrator cs4
/
saved
xmp.iid:ca3922dcb7c1e4119116ab34d81c299e
2015-03-03t16:28:06+01:00
adobe illustrator cs4
/
converted
from application/postscript to application/vnd.adobe.illustrator
saved
xmp.iid:cb3922dcb7c1e4119116ab34d81c299e
2015-03-03t16:28:54+01:00
adobe illustrator cs4
/
uuid:710ed555-8a84-40e9-9e4d-3fc36dd07293
1
proof:pdf
xmp.iid:cb3922dcb7c1e4119116ab34d81c299e
xmp.did:cb3922dcb7c1e4119116ab34d81c299e
3.180512
3.180512
millimeters
false
false
1
cyan
magenta
yellow
black
standard-farbfeldgruppe
0
endstream
endobj
697 0 obj
<>
stream
hþìën0÷ó»i¤séex@1­å$õl¤vwy3aclj ój]ôò
10a¡i³¨t©
¼@øøèÿ~ù
k'¼h
bwl
ûf"?a¥üzºteâî³ï{åöûë[ºßñ
ñ,lp9ó49%n"hr¹aøü·aa¢w¼là·åhåà©íyôq\pæû®øá
xë '@þ¹åúø?çþ8,ïì7té
^->
pfá{­
p]×víûrmr<äyé°ê¡icòc/ò¬³`%uy¡3)@»'yéâx±zpjnq)þqrg9ºd®í¢a¼õo)¦-u<ëàköc
}>ày¼ªø¦$ù
,úíáºpø2cth
¢×!zßòæì
k\ÿér{±`c¥ìt\ãøf\-¾'ke³¢|ïüx»37²ñg½¨æßvé4úp&qú]'útæ¨!
)3.éæii·rò¸ïï+î«r«6z´:îíè÷ôw÷qó¤æ} á¼ºý²&è dl	ò_afá0b3aæêú
ðo
 ¨ÿú_
endstream
endobj
698 0 obj
<>
stream
cyan
magenta
yellow
black
crossmark_bw_txt_100x100.eps
rakesh masih
endstream
endobj
699 0 obj
<>
stream
hþìíjü0
÷óbýö	¶ã0¡t3¥4vw4²fb,k$cw^­>r_!²=1qfq(ta-uu9ßî(½ê¡³`ï¥èà¯?!(
~¹ø;µewåf7§·ôtñ¤wù*ípw«yº
»
bîvÿ}a0¤ø*~|ý}[©¸ð#aö±æé»8y
¢
p èò
c
_âh
îæ+÷muqà¯ßqná;kf¨m[¿}©(l"ïexæ»°¤óy3<ê\3cu©l)èçd/a¸oæ*èäqæ¥ qv3a
ýmâ½~a1õx©óü ¾a÷óèã/óê45ájcî¡¹ z®¢q½	[zî^°°áöoú-cnä1w°i¸
9õòèê¹of¾*¯93/cöümi\wmµæúï§²f
q®.á¼..oçºçcsnüîöä0ð]%×)ú=íuócôu¥»hºï÷²@èy
düwu:½©péö½ xö©
endstream
endobj
700 0 obj
<>
stream
htmo0
ïùþ¡r{`p8l*¤vjýxé=bb$yÿ~	4×~mx<cë-ïù
ö¢u­àh²x¶òæèmùúîjðxqñ¢yi8â´lnôÿðóÿ"¦,ãýçm¿óïî~?\ãûñú4	ã_¦ôü
4)ë¤¹´cj¼sêìqbfàìegjt©ñgèúvðfºö­ônz}üõ
vïxçz9² öeu£:xîvà03b¨
ïo<q+eæ28ý;ä¬?uí

áúp=ví$;èö?*ö2¡¨#ù8®ôå7
þä7hò~%jd]×
|²ñ
ç
u¬õ&þefú3ûz¸¥­rz~[öd³àøø¼ò¨úgøhóobn§
ù` §úk
endstream
endobj
701 0 obj
<>
stream
hsmoû0
½ëwh éá³ûò2z§¡kºî0ìàhtfà
ù_q´ûb(
>ï4ûô°.us þ
ñgèá*²û¼e³ù¶qc
¦¿ð §l÷?øfí¡çól·ý²¿päqõ ab}lºciþ(øï¿eß>wú`ÿþlkw\5~ 
ê¾rg¹\åuwü,/bõk£³¦æ_ì
g<¥ñv4ëh±åërõóòu»qùúý©ë¡þ¢á1ñôð\îãgºþøl^p
&î­[ã
c*ùm[zçß£}tf
ï.¯gçÿtj/i`au£¡ks67g`ëx±ák)7øé
tr(ôü²uô(ráaix"^^!ö·
å±è
äo
þåÿrüúåk
1
bjal~»jrªjïí:bilôüòeö+êj( hh bp ¿_(¬¼ t1j]sæ3åèoº$uiêmú¹ð ð,ðú½¹¬uâ_¾p:ãòàëen«ügo`z¸º¿a/
 0¦1¤
endstream
endobj
702 0 obj
<>
stream
ht]k0ïó+î.
í
ó¶1ýx©~p»á.59v&!æaÿýrô´0æ
æä}^ï{
i°*ã`þá	kõájj6­o*v(pxµ~£q­â¡¦k±óu#ì:ß´ëçàz§
m*/è^²§w ø£ykóïôôh-;¸?%íå7æ¸øítb§x°v\íõ}
ÿ;ðî°a¿
 $õ6
endstream
endobj
703 0 obj
<>
stream
hoo£0åïþþc¤ôàb ¥b¨y©ô´§jä
²¬à |ûñ@wzí!hý~c?göíõä=èæ
^ô=oð5uàeoy+f³]£lÿ
aonw/_m£nðëyvü
mùß!|4ª4lôÿ¡-\jó¡}äüñ#û±?<êßåå<]mklõnpû¦òþqôü^ö6ýäkwuþéøvß55
·â3k:eqmçàòlçbj]ª~º¢j¼:×ºv=ôgs42bníèjé¿¡èz{sz'5d¼x
¶4/fj;
m[å£]å0è=ç5hÿ¦ë &×ó~ma¼è«fc×æ
ln. ò62möúío¬¹å\¨_¹
ñ ÷æóxdºz8uâ:!½f§iè4ô1ë4ó	ñ	ócqwo!æàíeùlä[g¼:îþéæ!kphnnv¶\2vk
¬bü kì
en1:;;.{.ä\nj÷ioéëû©ázü¸î!ùów*
|=ê¶i©ëýø=o4½
ä ¯r,
endstream
endobj
704 0 obj
<>
stream
htëú0ýû+ü³ <ìr!¤á%¡v
¦lª.mhôäò¨äß¯o2­ªnx sï¹ç
çîèãóar¯ëdþb²«¬òfru
±í£1úè¡ú|æïu©¦åãõ~³·y{çè{«ònõòê\2ûb>|¼9®¾
¿
uþûwûp­³t;éä`ìtæpm'ßk-^³6wòt\¥y6üe@n[«×eað06ísðéëy]÷qø16
¹ît;,=¨âm¦×®mk½=<owuïå|úâþ4m}åc
|çµ9sá©ö¦îìå¦­ä®ªrc)xà«=º
ï1-
þ°5$õê×kexv3¤p¥6m*s§öbø"ôk¾gkòü§æbhngõ3­ù":;jd»%#_ìváì
{âïî¡yòïnn¼>ü.¸f3·tüâa 1 !zlxz
z
z
z
z @>æ¾õzé¾õ
5`ã	3	zâîwüòurlbtø'°wo@¶ì	á-]eðì¢ @ @ ä@p ùï'@ à- ³k?»$3b%á,á,á,á,á,á,á,ç{×ê¿p¼`:4twþ©êêúcs¦ãaì¬y¿
uyêÿpo
­vìm ¿ki»
endstream
endobj
705 0 obj
<>
stream
hsënû0¼ó+øçàjd2.¨y jñe¹vux@ihý÷ár¥4zðár;3;\oùìf×ìâï!¶î­ùú.oød²©u_éî4è±ú~á¶vt|ºþoö¦ì®
yoô©×0²þoº
ciþq°n¿þøo¿ïþþ>ü)îî¶ìµî2¨êµ}cjëîä$°¹êo§¼å0ctþ½®+>
stream
hþwtt×ï½wz¡í0òz.0ô.
qfê ã
ml¨@de £¡h¬b!(¨`hpb0¨¨dföj|yyïåå÷ç½ßúgïs÷ù{µ. $o./ 'àz8ów
gð±ý x¦ 0yé©¾aîá@$/7zºè	üþ
hü¾eèéo§ÿoò¬t¾  è_äæln:käù"nê¤í3"¦æ$f/jpärb[ä¥}ùqììd
[äâsùél1÷x{#bägä\n¦ox3iìñ[ql2 $¶
8¬xätñr p¤¸/8æ
p²âc¹¤¤fó¹qñº.knjmí {r28¡?èä³é.)é©l^6 gþ,qmé¢"[z[z~q¨ÿºø7%îí"½
øü3ö÷í¯ürê `ìj³ë[ì~ :¶ wÿæ! $e}k¿ñåyhâyrm333¸
¸ ¿ë:ü
}ñ=#ñv¿îêe
tqýx)i)b>==éâð
ÿ<äÿ8ð¯óxèåð9<qd¨hê¸¼8q»yl®â£syÿ©ÿ0ìozk(õ 5êhý äç>¢ypüõßûæâ¦:±8÷ýû®pøîû
çlg	ùkâk	ð $è t!0và87°ø`öé2a.ø
@øöjpêa#h'@8
.ëà:¸	î`ç`¼óa!2dä!uh
2ì d¹a>p ecqb¹ð¨*
*¡z¨ú:]®bð=h~
þãl©°2¬
ã
ø	öá5p
çàùðn¸®áíðø:|
ã³@
qc
âø!h,âg6
h9r´ ]h/r
a¦w(
¢£
q¶(ot
jcm@£*qgqí¨
ô-ô(jõ	mf+¡
ð6h/ô*t
:].g7 ûððwðãè7
ñáxa<1áì:l1æ ¦s
3ãìb±xy¬öëebøì~ì1ì9ì v
ûgä©âìpî¸
+ç5áîâq¸y¼^
o÷ã³ñùø|=¾
?'htv`ba3¡ðb¸dxhxe$õöä "¸xa àpð4ð407°7ôô&ø9¸$øan0¤;t242´1t.ì5¬4ldñªõ«®+sã;#°¡
³«ývï]=
iy9´fgmö«kö&­=%å:nþàôcö1gc¼bªcfx.¬}¬çlgv{cç)åläúåænæùåíw/æºp+¹/<jæý$.$
%µ&ã£oñdx¼¬tôô4´½i3|o~c:¾&½s@ýlõ	u
[
£öuo3c3ofigñ²ú²õ³wdoä¸ç|½µµ®;w-wsîèz§õµ
1º7jlìß8¾écóñííè3é+í{½%lkw¾rþ¦ü±­
[
$
øãûl·õlgmçnïßa¾cÿo
ìâke&eåeyå×¾2ýªâ«
±;ûk,kîâìâíúí°ûh©tinéø
ß=íeô²â²×{£ö^-_v^³°o¸o¤â§¢s¿æþ]û?tæwþ©r®j­vªþq=w}`ð ãáå¢÷¸îözô¶×i×æ
î8ü´>´¾÷kæ×
e
ð
<úóhõøø¤ôtò
7
§e
»ùë7--µ­´ö¢ãà¸ðø³o£¿
:á}¢û$ãdëwzßu·qú
û¡öìöøîðîs+nuwùvµ}oôýój§«îè)9k8vá\î¹ùó©ç§/ä]ëê~pqõåû==ý¼/]¹ì~ùb¯sï¹+vwn_µ¹zêãzçuëëí}}m?xüðöoùß~ãêfçmë]ëî:
^¸åzëòm¯û×ï¬¼302tw8rxä.ûîä½¤{/ïgü°é!úaá#©gå
×ý¨÷cëåèq×ñ¾'ao
±æÿþóñü§ä§åªf§§ü§n>[ýlüyêóùé¥®~¡ûâ»_
éy53þÿrá×âwò¯¼^öº{ööñä7ós
oåß
}çx×û>ìýä|æìz»>yz¸¼°ð  ÷óû
endstream
endobj
707 0 obj
<>
stream
hwën
é¼÷wô<lme½ëç¥dö°!{ö
r!%\þ{gdu÷tw /	ýy|effïß§ý?ï_÷ßþ~ÿt_
§ýß>èüð:ýt;íÿ*³ì·§2[ü9d¤ôzck&zk.óíódçig¬µ~¾=àíöçôñêýó·ççã§ãõnj6¸{<[c4z°	ë
4ß	ôp³øã}fþ
ëè§d¼z¥9²(>3ÿãrbóî9;1q;#kf|cüñ¶
·^¶ãå÷ä¾àué;¨)eå§#æá=º79æ;¹%æváìùa	ý¡ª*üuºy¾-tª2¾§ãä={ò(¿pãe.=\ïôåcm²mp§x-ÿeojfè3ñsmn

|@à6þù@v²
+%0üy¸e#
øídvæàbàj(va´âì
è%;á¥t[²ã}lj;ú´?v\xm.ñî¡í«qá´yçä wyv
÷7/m
ßìmuðaaaoàuè-¬ö,rq$<­w5/!à¥eëc»
æj	ÿße7)£eá|êcøu?#4p©\ä=i1-¸tq)´b0`ë
»ý
ððx@i"m{¡ù^;c/üu om³ý[àò`ç¢màku2vè=%v³& »b#úèªc8$~	,ì¿zªm36
)¥ka,úh²õó5¤ö
túc±yýe|x}]¹6v2ãåblòrz@-¶â(ë5´,§ùèzôulrí ò­
kqsczä'³ñ®¹¦éä÷ø²î_bá+k+1t´ ¶ý²f
>ôxô|¹æ´qôòöòæ]ìg¸ £èi_èïð ùàmvõ(-è`c]ó ôsinôúëid
ó%åµ$4(\k¸tñåô
øãc5õ0^öåçf¤ð
g.øê$ephw9qx
*,®6àâ¤ì/nö_í"å ©l{eem\òsèwç q¢t
a%)
!*þu_8j¯{*jêõû(mô#¤é¯ùt¹sl6øú"ý`àïó´°qhîø/|lr-
±òòcrxãb<®+àóòa¢¨¹î%o¯ý­j+µu zñh«¨u½htkt
¿byuç$o´rºâø\úùu`§,f
é|ðæñ¨
¾ay
$üé½³$ö
¬é©]«f:uìêaõ®ýãzë<,½+@üàøéx¢á~2 æ¶»¾²ã×âð¥m+k]5­$%¶)ï;>éèw®åä4t
¨äsààðäbcf
xµ¸¬jùêfçõq^
¬7ñè
p¯­µç@îóäa ñ7à~$y$6£ê?k^û£êtl"-i9&7
òo­´°nì¢htôts
òãhtàú>3yò<õõë
õåeãäwôÿ ýæl­ýønsòiuûõ<|zà¬ub;{8âæ^õ }ë\855îq½c`³uû'¦p­	øöiw×¿»häö¦¥ñrdðry=òj;xfî\çl¬¤ß±6^4ûòsêz+
l×!í¦qbð@=$xxà¬'ß£&÷jào»ú óñârªkí]ú5£ñ÷üxözpsèvò
yo=µä5·!×¥bob$°íl n-(2ôçbõ%r,;ìøe3/ñiaûvú
ñ]~æv[}á%mü·­èâøü_ hy¯
endstream
endobj
708 0 obj
<>
stream
htwé$9ü§©@òh§+c­í£æ±úö
ùóª	âp8àoje¾ó.sã·þô¥¾kê¹ãyñ+n+~½>in]>!/"¶ävû¶ò1þüëú±©¤ý%õqø6ôcãázøâçnz¹¢qüm1um75coêjsãkz5eik¡`×ò´qcm¹vjâçyêò©ïr]íïôºï¬!y'éó=´ëqø^z5a¸ÿ×+ûó2þþõú^5ðíïßdsêª;"+ã¼¢m«øp.c¤öq4µsy¶xkä\óï!'x=§á\cxðxgçlåìõª+4`kæ#-m<_ô:å¬º.â3öäse¢èzâ9¤¬
bòä
»cêd­sî¬u7×lyý
@$¡{y9
¨ïg1e?/å
½«å}[zy,ñv cço
ô~$ýóu=3ø²¥³´i¢l´hò¾ælç¾¼³çrñ%îü<"ü°¸h#rú]o)ôãæ³¼gïa|tgqe¸¦u
ûõ ^é
å²úç£
öïr$ktõ]d7
ù1%ªcrùâçãapþvóxr,@áªõì
@§ftpi
8=0òu5m
4äór¡¯æ¶â ¹âeöþ=s¬dã
î ¢{ð whu»=ð0uûvëämrí2-òî¬ëv4ª¯e>$).oå#êö½d¾?b
ì@éãa{ö
afy 2áci²£¶j6ê|@àipñáçì÷óúïë?¯ÿ½êìxþ2fê
é¨c¾;^`ð³ã¿@a0
e(<µ4ºö»g4i
©c¬adgû±µç~ds(åxî¾ó)rºþïh
©c
zíéxh¶øö
ãcd
w)*´ ì¶íôî$³¼¿zsífáôøxþë
<'zõki/áävã
nõ\ùöæ¸è¸$rdyð]©æõosrëøa#ù[]ûºü
´
þ!v§v¤|èâ¸á|èsymk´.#¿r±vb±äõuvzütôn«~2ö­ëì%
úuäúp	[4klô?÷!êdy#[ß6kã©ûvuxùÿ°
ì¨äô2;ñ(õèæú¦#eåö]½mãµvâpý
\©êt[c¦.p.l'u`,¯y°à
+·íé­½bnwe%£¶ûi¬ö
m+ï£}û8
µuúðáçãîë9úí`2r»cnë±
ò9odk |xò
"3egcjk-6ì
s0¦^ç¥zm}5úuwô\ãf2o³µá
pöâ
ìr«*î*w ²i¸o+çd§ìs !9ðr)w¨qzõmõk!?æã!6}"3l²ï<khh´$å1ü\5¶$ªè
f¶vîîî!×ù>`õþp,;rs@ î;ýâ?-u|ü÷3q¼+3õp0½u;î­×¬uzªwr¢êàpq¡/	s
ê1çú ü1òçõ ,fí]pq¿¦î p¾el:í!sdb
£ã44}­øù-ÿrðèeùß6û
rgôé¼sî:õ§"øyk2
d'äýé´ççõcxy2-2ïë^	,°ùàuõ
¨#nsq-¼µ±5aæã-!ì`
tî2ü4ºïa°_fpºº­÷w
rðëuïi
n89ob·*@7¬èàõ÷# ûü  uhc\q±bü&î³x8çó·
i(¥¹bh"{_ßg·®£kqh¶rµì#éé»º+äyï·fýöú¹h oyÿ«¼1iîö]óoâ§üûëp¼w
§û ¬îõ×cödjè/2ârcm\âb£ò ûuüb¹à$i±gwïkrc
zk[ãïi=íu&k ú8²+w ù!újrª¨zñàö}s>y­´h·×b6òrù·¶ïî |@û²©§>"tiëq½¾ «¶¸^¸¿ßûª¡ì±éþcð¾gçaïçrôñìzóëkê*8!¡xãaqó1­<{$'	¾å­§r¿rdã¬þhúãxçæçñä#
<ó+
 w'ç
æþ!²0u'
£ß_¯¿¬@º¼7é·m
÷ø)¸íängýy
ý'4 uô­§¹ïý0(åý$cíû¶¤uuê«¸x_7è2|.æt|w×@j44äñ^b4å¢5"we¤l
öø:°¹¯úµ,l¨ìö·;lîã²üûýj"d_wìvãôþè
×{
ó*2 ú
¦ #éz®»bïüõ{3±8c~î!ì-î?fñoûßÿ` :'@z
endstream
endobj
709 0 obj
<>
stream
htwk²
;
ßu
ü
ú.£×à
ø
zÿî¡ýö
øu¨â$ ït]øk}öêí#ï|*
é¨à©tlðtëôóãkq±ëeú±gâo:í¾õbzüqbúøñëcµv4u¡´~%~×¼
xzè\¶>v÷§òºõ~uû|?¸ç¿¯vcõ÷còãby$ô(¤ðkíòw¡ä|1àácþôç§øÿßüûë__ÿýhêg>6)£w£}zoç¯ò
fÿóåoþùzváiùü¼~}?³îgiëp
óß½0del?afùóiiý89g:©m?~?:+æ«dyæõhìsêã¥cô´óc.~jc¶k[¡ø)óî<ãwó4·é
àç%øåu$~ð¤èïò"=
u0ãmn %ó>ä!ä|¯úüöøàik,cqë>±¤«e+
{©fµm¶
ááq[g{³
t¡gíøà+~iütç1d¾âï¸¸spwô±æy ð/y¬hìttmpåÿý
­>vlm$®µæ+ö\£¾ ü~áïã×o
$ð¥éf£í]þwà©naí»¸t
¢>fbøa,´favæ
q:ywÿëpø²ü¦ºh¥¤ ßxà 
p¥ðõlê	óç *©-ë,ß/qqzáâ~ 1rþ×è´àh¼ú$ölw9oã:çz7và^å$àn×¾­ï
&ôw¥oà¥§wgd
=çy%mó¨ð¯$æ>ûc
oq
ìüxím0óhiégs\7ì¸  y;2qr¤ýz
';5@]ïbl2yè}¦ ài^:´'ûxêésùýç
c"(:yãi
#ò]ójxî¼r¨
ö£2x½àylk¨ièdª=ôpâxiµcäñõ³ééröñoîz><	ôàöì@»hhý}ç¾6÷£g
édôòæúpom¨bji30jað|fý´ýªùïjüqô,^®·fgætòëßf»jâ$û&;ô(
³q¨¼ôßë)so'w`6|x/£o}lv
äí+²64qiö"^ßfpzåýê5+dm
ìâ¸ò	;wpº@¦þê±ì¶ }?î«gv°ñv¶êëx'¹§?9f_/;q¿=báòùgo¦êhu-ãçîÿ£^ð6êë?äómúpp""ÿ±íöp½øùëý
ewñ6-aù
¹$|ã3`­§úlrwñä©ôþt%%/ i½i
ðyvws1|ÿ\hc£.í-òrbcüeû
ø³x{ôó©rûá×¸$ü½=ì¨( rù »õ¢97jo%
z/	§yqqó2r r·wôqp!5mè·]	k3
fdÿìö £ºw ,qç×¯íäï²
ä*/÷d"4iø&
2/no§`½³süåïg?£·* ëìz=e@à8ïh¹»¯òù,he
¬7-éçûn=ödí3¬ìçë&ø«|àºêèïo~)¤ßz[giü±·õ50bv¿{ïvãgj(ö7·o.kyùlð¾ìõ)
xì4àr¬g{tþ"ù½ò8näñþb1/çlò|\i¡½7¿[ª¹:ßí±yæ\üä
	[c;±æîvïy>úþòbz{ò+/pj«¢êmez;3i
5zs¬-
rö
y±(e«ej÷
|1 ì¾ý/^s~¢ðë9%i³z0|ò8ý½}æ÷(ðr: y*véc¾ojgêï6rom-cj<ûõ©ô
¨@mûçx²
"ä4k\9dõ­
¨}îåñi"4ewâoyíáþ}çþ¥u
³¹ìåôÿüe~ír|aõaï¶£k¬qc/
$\põî®ì:ryåúcâã6hóqð%óhì+w%~í¤®ð#?x©í¹z}]§f8ýi|i"æà((jè"ç
µ}ña©b/lâãêj,òknoh®`ìóµjðmö±úönu°¸ç±û&wmë	fóû¢ëê¨­3 èûùe5k hózs)ñd
zþí
gp {ðü^i¹ú\
áð\\ãíe^,öiä4y÷è	ávzã¥æò·õ9êk?åö
j¤î¼ãàz7	æ|%¥&ï ý²ôyø
ué
½äæãáþoöåú+ïßäv!ûc
ÿcdbûk\$
iî¾gävïâfê2b­î_¾|«{b
ª^oý`mætnç
vßù¼êxôrÿú¾þioî5g>ö­åð¾{f9ãúï;gì>ümí-prmdç]!þñõù  [o=û
endstream
endobj
710 0 obj
<>
stream
htwk,'
üï)ús q
á/æ-|ÿs?ªº=jbßtòm×são^ßú§¾¾!mø«îlt|¿þü2ïhdmkj|}oû¦=\õe]8îkö¯êx¦í·¶ì//w°ëk³ëíí û·´sõì#=à
~åä
;ýxql8xìòómþt{®½î°mü¾tö[|laôëmá¢ðúèá²5¨l¹xõg÷s]\y×ºhù=êµ
ùi±çî5æ.äs
æë
¼tp\öìj÷­aúë
ÿÿþâ¡vó©_/>îºûthø«+.
áqúkîc
oé9bzýêhè
£*xþ®
·
k=3ì
üz
óòjä
änä	*p«ÿ-_soes~]ã:æ¡ùbös"æ;åô*ò-ô--ñ/2é.rù£g-¢b
zö¬xväü²©~noùà, ¾$êæ-\qí½²ºflejôþn÷]uk+i|»ó;3ãß¡â7³íåmïáuí:=uzvw+½7õcq4duw(idú<o
»ýø0f?víá¢
?"iþ>u
qú aø1@£ë ñ %©®½rôýù¹n"ûv£g;]¹âlçq¦*4
§õ
ív '3cq5hâ>ï|-,ºc}hnã%êçq%æçnyç¥wm¢·{bxév 1úªèdk2óá
e$û"ùçä/ðqùà!kke^#¹eb cö½]
iøàoa´ö
n*¬0ä`a
¦iw¶þ2,¦spç4¤?¶}pb!¤êç^b½³.áy'rå,ã÷ãtc
mox5m®ã1ygónîg¢2t¢ä
q½dç3|æ»¹¡óqêwwýò¯ìph¼ªúmfýh3ýìíáñ±
¥]f¾-
7àì].ëgé
þ³?|û=/g¬{(hçóg|b±jøô_öw|@¢ñ =p
¹û#.7)ßåcáï¼êúpoéê4n~¿ÿ2ýf¨x!kö»	gqéýãçæ°@«t[,9aîæ $yåè¬j%w.à«
i{¢åæôâíæ#}ÿ!	?_}ýñõï½lð
&5àðb¢x
ÿüå|¬bº8ñð#1¤×òì7møço¤¬sùó8õ¿r,ç`
köjî)îkføz²!a<éiåñ¨=êddvórbá´¼a4æ°bâ éâcï4lñsãr¾ó®	(0ñ
5£t\yq0´þs²
òñ×c!a	b×*~ï ¿©?òäíbú{ë%»ôò³¹g\>¤»¶`6wçãë!n]oà4ñá?ãõ-£3.^tùk«×0 <<(ñ@'i5ê½¹ùænpj|¼mzj4(ãìhä²¶öòê&(:t÷ +v^ñö£
ÿñ¡²
¨tæ@
h ."¹ôû±êªã§ö0á2>c`ôê& nlìy{´`úc¢kxãºgû>4âgç%c4^)kµê}ìýêâvä5ã®¨`o-ô²*l2îy é:mc«
tôlrèíþµ·ç(fï)s82ª¹q¡ô'î
ýô
kç¦[ "ÿf ìeãqa
êí
z
a
%$§ç{n<ßsï=-á×l$ñûid¿ß¦|ø;sí³l>i¦¹»ú-þöx> geï#ªr'5+haçä
ç:ßf¼³v.çºgóý¥î5/oñvß4u&òhx×k¾c6¼=®þñnãó­áo=ã\ã!g`43£ýo¾+°g¤k_£rtå³/*aé8öµ ìr®úd¸ï#ëämhþbìîï§ã;1ìñjr+y'/2ï|îfmçâ­ï¶uºôä6¨m
ºh×,fíceèz÷£ss^odi0æ~g
òò©ý'«n
½èx tjðd,ù¼lu$owgdú^ëm¯fúêo,ddaq!kæñ9¤óz&qâ´ò%êx<ªbüì®w¤=ó¦îlö'm,zqs³_lüzt=òg·à0à¤¡=ù°éðsczohr%ç!(ù<ú¾ïã¼#åqo´«
ÿáßg¡z]é\
úv²ç,ôûº=^1í<8/n¡ò(z/¿æºí5ê°
îñæîwºõààôçç¡aû\æù®æxv
_²j´->f¾þ` w>@y
endstream
endobj
711 0 obj
<>
stream
hwûné}çwìã±æ}¿<¶ìlâø
,`
?ðäâ./ie»´_ßë©ªî!-xfjªë^§ªumln:ý%m~,½«l`@p¶yît]ìøñ xçáci
dªñí3ñ!¥-ñè,<êt&ù(b:
nôt&pûtö$ðþ¼ô¥õ¦®õü×u$
äe±sbú~cº â4#jsh¼£ñmö]ô:­xô×¾
×ç
ù
§/¿< µjîõy(;ïïh¿ôc%§ç­àïèì¾e6
lê¼yàz
mîí	ktä
ã
%ïî
]p¨õý^í~¬
nnß^]û1è øï9 ÷ð' ¨=mhf§ýóhäªç<ò	cäj×
}ß	¿ú¯ýî^÷ë~û'ãö
e*3çç-·ßánïhò´c\e¦_ äóáxñ¨h_þc§7nnµi§qé¸áoà]bòäddäãsûñë·?òä
\ç7¡]r
7ý~ùÿåõã	ãóäsùcîc¿ú,^z
åïßïêêuï¶·/d¦-áýº.ecq>n
äà¯ï×ý5 =?êpsf[këáûsý
-§à8â2vûêëé|\,ï§zå æ½/p´ê
ó6øn
}çr~#¾]ìiçýµäx­íë.bd5øúý3§g³ íszn.ê#~h¾cá½ >vinû+ï\÷åañbêÿå['ã2öwi}ã$é´=©'òpÿk7îkhð´j^þ
vßçarj/äöañsï%à3
0yùëûåòwúaâbexü¯ób¿bõñ7;fj}ûôàááç
w«ëýøjå¯k0'üóüo8ïp.ãå`woü? #;<ð~'õé¥êez|y~¶xíðåc0èû¤®ï2+¦ö×ýu·ýjm"ãëåw!ô2ýâõc¦æðñ´âýh2)ã~õ¸>
stream
hwírä¶®êqo1gò¥¡	ðìéúµ]e¯]dãújñpkþh
?f.~¿^º 	r´q¬ífÿáë¯o_ýa²ý¡¼yðd÷twrö¿8
¢
þ¢üý ñqlx¿w20r´â¹÷ñaâag\¦þåg	y
æ)ó.djvkì6ç)ây´>öëyö£vháy¢9þ[sðuwe3uu÷b>ùõªÿÿl}yª÷þ§õìáe9¢oà]wñ#t0yºº,|âóq6òy
?_ç:äñb»²p-jyrêy<ß«ú²©zf<ë¶5û³êç¢+·/ýâq;´vljõ{yýpû<¡âazæv)óeqx"ý ôä¨-cøgªb¸û#jr±;|
¿$¥0x}ýè³<è¬i¾ç¼æòåßs/
,²ù:|á4z 1)
êsí!/2	ivõti|ìè2
t³jºùdqw£ì_j7í	«<
_ç>*m¡¢û°õôølåuwíâ±kañ
¡§8^ £ág3âg
åå©« :£ñâ¡
§;6ôøa3vz`«
õ7íjè'j8òe9ª~«æ`÷f¼ûhúbä\-µp½óápr-3/
ä3ô¿a6£<£(çegpf4ý/ýÿê#cyågâl6ü²ê´h'd%þî5íì;
éµ}+fi£âf©	ú¶.{5 w ]ìö(	±
i±áðö¢ûe¾îëioû?âîäàlâ¨mþzöî7ó+ì`í!j²vöa¹à»ëª~½%¼®ûï
5%'ù¸±ñ4ëoxjã §`hôqm	÷kùlj¶i
ëð@â<º <è#4æ1¼z8
û_°
3°ì÷àýlýßnzí_²juwýêåín>ãîæ·¡qxng¢¹¿üßý
´r³ùÿrziû|
ðt×ádönk?è
?²ôº³¢õ{
#åi©fð/´ãv5^ììü×¤#tp?ôãemè´i[>.&¶
{z8án<ªnä=ìä±fíëé[áç\°<ù¦ó.#a ¾qõýýw ½©.ø
endstream
endobj
713 0 obj
<>
stream
hwë\5ýß¯¸ëä8vùu^$$à ôl ddâÿsû·üé ©çúø.«n=ì÷ûóvoïÿúp÷ô÷\m±5¬aïà"ïcæýþi»s¾yëo7?¼?}úøüñíçû;èþ!íøèóío·wn
ÿøtz÷-m&t}xúøáá

¿þð.ñ0d¸y©k¸iè3èxóëï/o¿ÿ~{s¿½xóôçãããããë§
?|~ñã«²÷úõöâõsùoïó5å°ólqþòðùôaûûíï-è}ã
ºck©àñ5ìrò~zúxÿi ý«û
¸
u
'^ë}z`pµf^
ûi³ñ¯ro^jðïèriû]p
õh­t6»~yäj	¤ªó/ú¼s9ã@zd;âpc|þï
õ6$z
ä¡xt)dúæl@õõx!ëiñaâ~ùàbègsâåátûmré_®.ôªf&søme`úx
ængr®eý$
ê°)äô[
8ún:¾ejªõ]`
¯ðªýxcáu,æô$é]í ç±ò(ìºkóóä5÷ílþáºæêt:@u&åøê^î9«ßêqüçväsç ô æþi{ûíö£

î)kñôfóçbc
dùtø
ðæy1çn×bê¦70éawiërºèw;ª.ß%ém¼ ­og0;3dy7
eãpø¼-õ¨ríbí#o
«h­ònsuõý'"±óò`
±	f8§ubï--3aó\uya
¦æ{
béhm¡a8,{fâx%w´{9yé¢bpf<¦j0´êdc¡áøl"5ê5_qic î
se#b'.á#dïç¥¨ê§ü]	ïaä
ú
µóhfóä)þkå=ëø3;/­z
:®2½ã°ªùu¦f¨í76¯}uâ;
+¹©àaò~µwbµô£b/24îìsôù»j¸x¯rýweë¢¾´êçë£rîâ³å4uó¡¹jâw¶ý=p{{çs!yä¡¦9º­a
-t^ò ià©äkð
ãó¶ÿ+à v!g 
endstream
endobj
714 0 obj
<>
stream
htw»\7
íïwl
`½(qu2
«|à"fq¤0à¿÷ác»ëýºdqäá!õlk¿òh¡'²áãþ:äcg£j«g#¿]¨e¿ø¸duyelyäuäë)@üde>å!qzäps:¾kè­èò}.©c¤?b	%päé!¦ñh~a¬.cvôíö×(ýbvqzöùrcîåæcï
ß¥²}¿]_»¾\ÿ]éñ½ìðã
1ºb
æáo¬ßgi0,³
±n~õ
9ìr
å[ð¥þäe
,ùvm$¾ë­é8by÷8èo×?wè¥§p[(&¿]£¨6gâzüóq)ïèï9¤¢ñz\úùý
¬ñ#±ý^µ,¨qs­xrgëäxêàs,·-9ýd#"iãbçêi\wøé@í7$ª ©0¯õkõ«ßjäµoå¦dh¼­£1åæeä<ý»ð®à¯õ
dlcà]9!áªyt5ðá<$.
µ
v¨å
ú
9ðh+`i0¥	p ö|£xdçe
øßê8ìãxpls)ó
3
pô§æhxfà%ñ½ù
\ß]ðc¼#þ½ât
bkòt&x]ç6o¹ êìïsíh¼þmt	-$}¢úvr´þ=ükò$7um[3êòði¢÷ó­jýuèý±æïiüúzwx.£x
¸¦låiú,1éò<ê?6»¤>éò¶ú «kqðoþyþatj]{5%åðáèt¤üwräè¦vz4	w
trdÿÿ¾¾o u£õ
ª'âqþ/õ ,hj"¬²qã±\× þîû\ö¾=/&éx¨
ôa
¾dd«f
tái*à¾çî§3§º×õ×õïé
ê^k+?r%kßþ
é¤v¯²¨i£ì;°"ùöbõaát>hå2
³jdþßd/»êîæ¬ðínéejkábåx©gò\hv9éá
ð*%æªîí©ljëo¢ûì~zj;
ó}m¶om2ù»	>y\¿ eé4sjñàéz"orpôör¢êö'ï«nlp¬à;/1÷dd ¹zº	_0±2ñì5ú¢®ëfõ'bíj
0g7i
îâ%2{`+rýâæ
t@y£²´b=âèd«å'uzc	¹n >àöæìk;zu©ù{!ïuq=×m!pèèã9
×¥õ÷m¡ 
}?è¤è²ä $ãká¸õnò$frôég joßòú}¿/©zc@iìsjàöªäò¸ï°ç[¼»ü$]¥¤õy°x7úßnø£éã
q iûùãäèæ#läaæº
8w;ð)]¸'s
láô
ù
ym¯3´	g¾mà¸ª
aìï%©=nöx2{¯
3¬g­·ëiq¥wqq±õ%=
¯76ãdå¹jû·§eo³»¸[63#ö¥¦óààöý zï{â¢dëýqì§nik½rb½òº*ðäüñÿ%;pàtôva5î>
æs
gæµ¡ºôv~²xnùjý«p
fywvbhke÷íö®­«îz5©þj¦&í£ý»(=0i
ãåye|û\\%¶x½
¡iñz3aý½p$-£©þ×fõ
µ4x
ã
¯}¿¦vrå"óýq@¾¹h¤±n&{ä°
fßb¥8cý¥âº}ëá*dôbæ)3në¬kqþ¤®jkÿ$©·
'w·î~äùñv;òì(¢béq8¬.`«gvðk8c**n¾oqb_ú3ä#m3×ñy¦6
ô¼z?udý¶í
ß#yàd÷*ï(âöàjv^,µâ;d
h	ßêý 
þtøø/,.rqô
ytäæd­½¾q'ðîcû÷n³ü¬b«æ8¡ ï=ª¾oýöb úvpô¥íñèu-älòcd<ñþë'~¿ï?ó<ú¼óáçúîð|½ ù}ªfrý
×£c¢æ<ë\ê|~:sz´r¢îéðx"yckm@¨ýs-ì©rß:xró[úå8ûå£nk¿öõß*ømæè^µ	òx
oþ3s¾©gµûý»°[[¥ãs§{gxwï±{ú£wó3v_/ûä#sxæuô/oàïñ?þü
¿_®ço ø
§
endstream
endobj
715 0 obj
<>
stream
xúíùanä6`*
^
"d×`4ì9v/&
µ¨ù9'_d0¡
g×7hx¨> lh#îÿ
)qª*»ìt
äf¹]ôô¢èg*æ?é«d¬u²jvé*y%zé~ýä}ù~ä|ÿûße¿ydïðænú~âbòd«¿~î$:ÿ±
¿6£°%fe¨ñë·)(é{ì%¡zæ#ô h'+d}vâñð:	½èñ\´þ¢(]¸òì%ötâf8>bt
é@þð{:»ù7êçü,ùt$ßïÿûtrttéjtg+å
ä
óê6	÷c3¶*ïº;[4$nk§qùî8j-n ìc]$]j(tæ[$^.çqýq+oõ@gnxj®!ùãtw¶ããa«æýéñsüäïö(éäeé>ïpünôekâééúài4yâúq·°ð]kòm`i>ú3$·)
$¾¹(¹§k%ãàmt¯|$i6klê
%íçh$79%¡¾(¹¥koîjüçh°y3
õ$éìõ¿ü8ø/*1üh&i%twh¢²ä}!	ºàîõôõî
fy½dhpn
ãí·xóñôåuïyg\ª £´éâû"¹$g&úàïâl@ñw$bú:öò©)çñ¬¦gfxñvæex
.ôûë ñ]s	5uúeâ>)âöõa *r
*¾kgõ2´g%®µý@ýu$1ñ_ótàuîâ
'a4h;á]¢vå9
@¤ ·e>àd
=&bz¡ck¢âê¶i g$n"
¨
éq	è«jºòpi
óú¡	â
=4h¶ìw¸¼
<¨qò)®f½aæq;ätb
opë(öuw"ié©û­é$
r`[»x?ûndô÷oqünk]${ü5:a>!ìþq!êæê°ä©'$6i¾$áý9àßw¨=z$4v§òýùv t irú$={|vq3 ìg´7ªhåõûcixh:åt»âl©dàÿn³ç
¢þ÷¾án&iºä
ÿßác©âà2c
\7ïø¬ni=&%=jpê%¿òýßn£2d %ôé÷äôe²ã.[üm¡è2=³&r±ñïi¼© %wàæ,km¹g
,ái½s-
¢*,¡â@bù1çnïæi2t3	úu¸qòø¡ k4«
	½)déebcv»doª"«ì?î%ýôû£×é$ýl²c¿$	'7,$%9e½+´$sæ8iú$q%
êæ)b&<llq<ëc¯p$\%ýlb®äóºqb,$r!ñg3i®°å
°\í$»¤;#	yr'iã
ip;¨2ýnu1iú4ds3i
v&±u§póëá¥;i®_'	í3f_+q£ä\
r&v<îih
âå¼fçnê
â[p^ògj¼~±¤ã
ÿ,
å'	)h©sæ¤)'ir=#q¯è¥d\<ðêçóôçf¤/äùî$©fé?ë"9«,êg$è)¶üt'	ýö¥cæb¢çeþ}sëå?nò}!ià¸$?`çpvbq¢bpüa&¡î}ìíbîiòøs
îqÿo4ygè£$protâ0«i@w½æ¥¯¥demmç\,%u|
guuz
æu
(4i0s(íär1kúüºq"|ì%j¤üäd¼â±¬ääæ´¦."@³p1k0u{,kjãdtðýuz)¹mø¸¤)à$y%x¨¦'ê#qperçåüü:+iyö
ïq
akã<¶>dt7°´ó¼õø5ø·e%´weòsñ&w'=
û,éârò@]è>æ:kt§m=4ß!	 }yíôòçºhv\äkéf)©â¦$9í9ä¶ÿwï$fld£ù¥qr,nikå]ðôó
%ihe8iæõç«êhh\ñô
æ]cxsqî°áñmä´§¥í²¤÷j×2¯7´]óò¹m
ó`¾#¹0$qôööþs¸à¨hqliä
i12d#iíà
¶y
¥bùæãº¤å
çi3ôhæ­rå
çè)
åü@
íî%°ñó
ã2¨^r7#ïeó	iåwt	´ôð^¥u
d¢ïæï`xdå[ì*ºìxþªpz3 v â¡;áå_y°*`
èþ4uèø¦åºç*jn7üg.äqi?.3ùå¢ékke¡ë¾úl¯$ö7«d¬u²jvé*y%«düiþ
»ç
endstream
endobj
716 0 obj
<>
stream
hbd`af`dd÷ööôï)î©,ïìkoâböiærl?äyd~óë0üadü!ã#öý;]õÿ8«
c¸
cµ
#cycï"çüê¢ìô

f
¾éeùåùi%
îùez
%z
©y)z
99
a µå
a©å©ee©@a°6] a¨ryªszw¬£à]üñ©ye©9ù©iéù8¼åààèäàøéàèàìèè\t:ï»n÷âï8/f¼¿øæbæßÿþ¾úû
ëoqö×?ý~èùçæöýê÷+my¦nk!=sú)så?}ê~¿êúwýøo5ñ_lllþø°¶µ·v¶h·¶önhÿú#dôoú¯éì|ÿ2øätv(ïï%§²°cfçî_ü"¿2då´ôccsäy8å
gfîø/gº0tf¿\vjç|9£ej3ÿ³a4ê)/6fðçáêsy¬ä ù à ò­´
endstream
endobj
717 0 obj
<>
stream
htktéçg b@æ2é&£nïú­×ºv¼!^á+è5á 	bai)! +h@î(èu=^vñz»»bqvq½ô¬õýµëjõööìko;á~p?ìç÷÷÷ÿ?ïÿ
óäa8ó;v¯û¸uöä
*3r©kç®×å§)ý«
x1î~àáxjð_ûhp_
7iúlo¬·+ñög#õoæ',ñãx8~¤îbhza£lþ¯cg2
-]4ç]õeîºl g¶´:¹jë¬w'¦k2ò5ñ:yò<	nkc¶¹oð2ûäz¹&{;&qjxf§o«â5©lºù¨t§ë
r&x-¯n®aüwú¬­2i¯qêµóþ7öë1|b>gð[ìwx°ïvïýø^,uxtb
cãpl¢ `ü6õû'¶
ãv`øj
[-â¼0laz
+æîá°p®ò°pì v»ýåãð#øç*
ækáý×s·çub#1è_ãø
o¼b¼úç­
gï5¾|üó	a>ñf¼-þw¼ßnôoüp±pèg¦o«o´ïëiîúeù5;èûééí¥¥
û¯ô¿0=` 03pd"òîñóéut8#ôº¦ê»ô~gè8ø
p{áçöýmº¿$gàsjö_éë.{qyõúæ et¸
mÿ;z*åx¨ç!cw
­£ &',­4øgàä'=`&z"ú##òn@bé>°uslaäàwxdq7o÷ß¦ïin)
ãíñòø
%jz©ðçqìçûàä.8b¡t¾i#|!<¼x¼oò)o¬¾«¦§=³e¥òhråæzp
=ûµjo`wò`ð5þg1ìg
®uððià$~ú1|ñþ;ô\üð³í)­a3ehtdà2r^{ùwgýàñ3¾%âv"êª».ö{û´ëd±3l²ß	òéï¡ß\¥rº=å±â!{ß
óçñwêuêcm[f¥ì. þ~z¹ëý$älð¶u±5îa=ß#ðèúnn¨äµ_
+yï)ù468gïimsj£miêìåwðì¥?üwô ìºo@¬¦*nõü»qþ\èõ7
í_ñ÷#¯íc×'
ª«
m´9úd
¹môå?ù
ã[4h
o0¢
ès$æ85æ
j§s«³ú»
ur!tø èfgéñ],â±_:©­¢c¿ëöfòñ¹që2äxå"#lv
bêò
-tcyõñvém ü!¬cd©éf*¡3vz¤f( piòkøçq%á&µáõópõftú±!í|múc|á[ðáë°¶
²r9üãgçó ý9mù­mvcî*òiïè¦\ë¬ý:q«¸>ü)ù¬¤ùèõv iÿ.:hû
4ej«s*zeä÷0­¡ªëìu7ä_÷$¯åîï4ël»lý
ì«n|<ùèzaåtì%²ùìeõºmm!bd@a(e¡h
^0ýû·ç{d9çè½a¡£	o  f¼3dã´£n/	yüöæ>óúëâùþ®iôkyië
ó¬ùï1b¹ .â"}2.v°åhq;â·pçëêªo!¬ùlß¾dw¢µå
îªóg;dî¶và¥¨ìp£
×#.¡k
5zäµõ(pãöóù
öc?ã±e[°øx
£(qf½½²¬v 2xb¶ùöðf«ñ+­3ß\cù¡¬&qvzqztìe
¨+/-¿'-öìy
²úbâ]nuÿ_êµäcè-ålä_µ4+hãaå4¦ãw¼«³íp
¥ñ¥gècöêòé-ð%'î÷k:¬±ùfõ$«1?<#fa±
­°þá+ùûåô·ñtl*1	`qcô8a°ó¢÷»
¬¶
átìrí¢è¹eéiñ¹xrðv´ân¡t¨þ±áì¬6×
´]+9ñ	£àº¹éª¦éhµz'õ©5ù»ähe*ø>¥/á1w_¥ £²z«ì9ï?
n¼ðåä¹p¶íè?gnµî§
fm^¨
vö^rtù9hqpùòêåáýå¡ä)øy¡¶wýa¬ðëßò
á
kl·öâd9íõ@6+°¦ßyúwôk¨µ9]8'ð¸keuòã
ûiºéqwîý}øíï6r\qð¾²÷¸âo
í.o'^4âûýu
öôååø^pz£åm(¼lß«õë¸t´¶öñvsk-¨,ue)ã	d$
,dc	i %aqqqt¨[µuwá}\:ö~÷æê¼_ÿë÷{ïs~çßï
| b¼wáb~j³~@o{·`âò´4
¿øòhwhì²1·>'³@>= þþýó/-ô3è¶ªööåeôä³<[}6ùbü¨ü , ù
[
k¡é!¥~°æ~¦oïþ½´¬,rmð¥eceo0´»h¾êì¢@©
°q
v×ë'sótëkj¶²×5yðr0@qßñäö3áäª;áo¾4bá¾päøïuøçár¡c!+þªdxêý´y/¯ëèùc ó_lfy~õy\£þblgâb
­`àõä%
i25õëü
²8'æêþv»y¿4ïô×r
cåø×ùpèû0
oráfaaøëêgè
ú.ò¡¯5ô½®jvà<çâ<ï»ö ¡§èò|ë$ñ­¨)þlèd
õb¼o2q¡$(åðgbü ²nlûþð~´j#¥þ£!ejt{hönl¢a\àdd·³ã`:t·izëik°pnøòí7ô
>gyvãå\°m¸þdëe2²èè  q@¾¡¼mhîoà%ó°sù_gºâq lkx=övöqý,{æc/ads¯¼
ñÿââd£ÿð~ú~¨|4kûiz]µ ë1y½eùl:8ifrîb5ñòààµüªrµæ·&¢e(x½tgv'¤9ù
ðë°ù­ö·á[·jíäub¦âtî
f
ðü¢©',2e´!!7wéwþz/a×ý©]adtê¢9óö]»còè5&j¨åoúæd­ºüèhnïo9çá?üüàlþîîó
fv
¿ïw¥a0i÷^öõ§þ·ã·°<|òù'¢¹v&ïs@
îmì_ s0ø{¬ìïõû5ý¤¥¼æôlê±£øå¼÷ä´ml»á
«ßó»,áugìrºñdþ'è4
éaå
ûüuçèp¶z?m?ói< ÷%âq¹c=
õ¬è§`î·aðnjìêsê+o1m ì9íêwbç
p1^«ú§è$³bkäco19þ5üj:è*?l`h^*fêtr<âµõâp"dx
¡¶µç0jô^àë¯^.{5.v2yaùl¯ãûuì4¤(¤q­d¯®nsk¿k6õúô»dì
*3âì_¡ïð#æ³¢u3dþóyþïó.³ojõj+
<áµ0þæ`z¼ï9p0ÿå<\eî¬
qr_
y÷f<,5y#® ú p*z±y±éw
½vö2½hóe¶ô´
¡zþ²@ko¥éyí8[ëìa¹]m&¢ih~ü:jûýì$]múýåiù
ãôè~ugfø×i°¼¸ñ¡p
eÿz
k|§u¸8]ó¬óvhôo×ª|×yü|
"
o.ëæ@(¢=ç0´öw:[:ôyju±jfs$bû!§>àöouan#º	ü
æsããüí@q$
pê!g³
n×ñ!îâù(½³iýd|þù¦æ¬xálaà÷xq.
kø²,
ýé«âìü+`x
báü
1í[9wc:¥ò`äõvíáõ7äú âñæâ(yt©?ç¤òu~­7ÿ
<û
²)i5/ü½w
ë@ ý!ßnl/í!5
õöæ6~ßbô>¢èsqð0ÿôóã\gç@ôaøvã[`õey

vqãõçl÷
2ûúêx2eì¦0p(yårclõ¥´\¹q(yü¿}t
£/í¢ð*v¯¹×1
&óãahöæºã4×7hãï¦¼gªè<·ûôï{(d/üc_û- :ã³{§ëì#¼æ
qtîèrr"
¶½ïmnl[ïküøpö¡wèëèær
|üðàú5r_æî(í|´m[éúôù{÷­g	j®×\@tïf\
®±:à»ü»øþo°diâñd&]ivûèæêâ2*e¥þ¢$¿1tïhãìvëi¦ï
ðã
.
ãûí­`ù
^u
bjkõ¹¤äíj°;
qïßq@4zôqõîaiõàv
ø°ûr`:ê¾
f
¥_#0îäã²³¹&íù|soò_&|ù³­sl§	23hqmqu	µ02=7
xüà;w¿¡ínõõn
umqtó_o?¼qñ¡töò}81fxc¹ñ1qó¶£qåÿip;»;(®ýià
o-±óµ%qäÿù®ò¨¨®;,!3nbåçxxoßkûhnb+1æfücæredå ;
0ovafaexf6aaq¢f¢j´k\âùã¦mïk¯§ön?znïûï½sþ÷ýï÷ýï»»ßé
ænmø"vû>ùû¢çf+çä¿ørùu­t,k¥càð=ã]ytð7)½(&êëëì&v,c~ýd]é¦upcby¥¯3ù=â+uæup$ë:»º^^k%ñt¢­0ïvû´ï&§«å`] ì2¤w

ñ°ç÷úd?¡byfï ö]èä¼÷lð{ôt
]j(uõufópzæ5þêjsm¤w!ðézµêßué¸h{rlfdúêy[åbtènù*vg
y¼6qûþýò½uú^¾rèçeÿ ¾øð»kèÿm<¡tè(³eëà
´î¨äu&ú¤îççáûãäßðlö3èõ±z5µ*1n(uèã9ø*°ìþ_ô¯´y×xv¤·9cì{ w&*!
£`÷~
 xðü
õügå]za\µ!æ
tbüªçæý¤ºg[wìuaç1:t=yzp<6än6sk*î&f\·)¤³ù}xb°{8qï'¤zëyô	z#
=?èüÿàºí<¿&säúùñå$jðï}6lÿ\|° ¿ea}ÿ:ü^-$j5f
ë².g/>tüy&rûfè9üã²µ}iå=¶ôþá¹èý
hök«-;^p'lha°oií³@pë¡«
,k¨sá¹0z´âauá;è£
°gç8ý·
fc¹e½öà2-ï3saæb?y[çúéù~æcóõks1§ü|3øù4q%óû(,íü_ö{ûol
ôþdäí3îç\qüns
©àç@âk,þñ96ó?ûph>+qëã½psçésg§úf?¿úåáltt> îàóg.\r|
|k«/ê;tka$xy#ç>äp*w¼õdüè³ûÿ	xý)h¯rá0õ63¸wk|k¶'¨£v\´	fá`>ßäz
ðìù®§c|l ö)x±zy}·9ëvvø§íò3^âô¯ìåûï¯efqåt~$ùçgiq
ç«p£ém&è®èeô6èc÷ ñü¶-|1ºà´cïûáz.
7³ìlóù«khxyö¨¿âàç³ød±äëíg£k);»p,»\]q&î¥s_é¶ç ý´
mä³$iç¶i¾
qùãnü»'` á³»ýõ­¾¾ê¨ª
sê+ê|^rjx¬ìwu(5j­zwá¹ãþ»xaïí*kü¬í£
vãúøéfiÿ;àu4°±¨âú.õgø.8ogqúl¥ë[`çeì1æ-î:½ä¾ópô¿
éäf[së­$æs÷·á_ãeî,z"ç=¦4bæd«àúû¹ 4ì¡®®.#ô2å>t)5^8ý¾b±¬v ¼sìæq¬[²#¼w_[aþf1n1
ªù
*ófylu°çòw¯ýóôãñ³]p%ñie&âdi
¢°æñ)â¾â]î<¥hlfyõgð¸]ïl$æî¥¯ööª
m¥zcácp9
kl*keïé©2¾pfiê£)üó1`úc3!l
fdö@nn! hu½ªèèkpím°âeb
­uâv¢½¡¹âí%fa\rtd
©f=iµ%dvd²ât5rv}õ`$:kd9fj§î
aj
þrsa¦àbd¢æ¢¤t$a)²
ýýfss#ù;à¿qþ,4öb¹6°o!ðôtìl»¥avaìgcþäìu:ñåô»tãqü¤&òóè3åj	åä]¹@,p%õ«©aàíd ~úq¨èès¦óxìh:@ò#?ê«ãd;%åiè¦°í±(`8wàø\à¸æiu	°
g_pj	m«ñï··ì½=üzeq©llx
\.ñ	µîb2î¿:w5ïsæ÷mßßhlû½=ç7;+_ñïuàbò»öwyïóââ
¾üð öíg_9unj[ñìæä¶d¹ø
]ri!iåurànlõiïïòa°ð}ïo= î |'©%yk'o°un{\ïz©
6ì!'üò=f^hf
tìª"\%üñ=¯
¿»¬ø
¹±õó/¡ïí¢ÿøcy	 [¨?ù®sÿèùþs´rîoå9¿ûf|¯äö}aß~öú?â¦~éñ;¯çgñäïý  p·z
endstream
endobj
718 0 obj
<>
stream
hbd`af`ddvq
ôòòvi/¬ìêò
ô	kþfü!çôcea
¿
ãr­?dxäºÿùýzþkuakñ^
ñâö%ì9¿ ²(3=£da#ysáðòòhh)&ådg(ä)¤xy)
j:
yéz`
3s3s°¸év;c'
c#+##]\}ßï©{¿³íe<üóùgú}qÿ*}{e£ï¿å¤í
í£êå
zøï,ztáøw¦g¿-¾hß¼s{ïlùkì|w¾
þ®v¢5ãûqñã
ùü°øþ8~÷úîèxÿ;#óýï
¢¹w®\²xåê¢%¹¹åe¹r|ãùöríåþþpäg¸¨weäì
}
îy?rçíð]{
ûïôeìówòð¬ïã
` å¥î
endstream
endobj
719 0 obj
<>
stream
h|titw®¢»^5-e´«íjudpä
êadiüåèò
¸ mëâd¢-´±eadekàî"q£q9¨3á1q8ã-òðyí¿ù3þyë­[ßý¾û]j(¦	ñá¡kvz&déò
±eõ©ºx~v>kg}÷yzb#n*©ñjê¹£ê$*í'îæf¥tø7qrþj{_gjbók6ì
×ç$ëêój_u¨n®^vglïîsgåhõ\½!õ®óvfe©zóôkóóò
ùöëþë¼õñ$ ç¨hïóvç¦çèöçdzÿ/ºÿ¢íç0¡t¸m$eårkétyc$m93ô4ac¹qeysm
éh
¥¡©e*|oqólèk¨.úî¦oøøù|/'ñj®ijk{w¦iq
ºèn`ù¿é|ei²-²¶n¶:ûëvîv)v½v71³»[ü¹&ënéh¼ôc¼x>ï®âpþ`?#¢ñ+uös¶õ0æöx
îàä/y ¡|icþªp@x=®#*ìäâðàfà±í'ñä4ü^îb*8asºñí¼y6ð
(ø¾àn~áùiªnl1g/êá5§&|§c! ä){x4l{gxþx	¾.ã÷àëâ,clûnós
þõ
ð17
ªxwmmwï)^?äpa§jæ6lmóõãáo7çèg$
ñ¾\ïüêy¤k9q»i°ö³n¤¾~!þ0f 
°áq5ã
, )veu?â´ã
uç:'qyi§sx!-h'þdìq¤üßøtüùót¢ê
\ñff.êñ,©;¬ô1
çn
òþþ8<îþëêv¡umì¡þ%&óváð?çèbpôiðà-?û8°e·vuêëgùggkdá]ñxýæ
ôoÿ
(g?æ´æ³âuå¨öqß]à-'ìgv×d8h43¡èõ·î
uu5{«u-[;øû-+5ö'%ònbk(¡åbb9h@wp(gø38	á´þ
ø"èv»£ni;p¹ºðbñy-z¼h;¸q³0w"^«ç6=sµªt

î¯}oç¶âf¡
üøú@
§à ìðr°ç3áó¡þú&aþlàþ¼à
ì|;âå}tgëî÷'hºñ@èïéz	
r"®¨.eï?9>8lwé2¼f/rb,k®9nn%ñcax*ö÷	åbaþns± _@zæ#¨	ä;¤åløg\injáiôï£¿jt=
syù½
0¨2³µ@h'ö±mæ ð
<î=æmëýµçn~c$ëû0áñ
m[îrç37dõùñx)u6º×§4·^d#ÿêõ±ú.aïü
æ~äã^ýá
éáó±çàa¸.ã#`á,øâê´j´e`£1xóüâw¡­
oo¢`ó$r¬òme5pí¸
ìy¾çwóo²*tçû0ëxà|hco¡¶iðäëã/&w!w³§ù÷*yé#`k	¨ødáëü-·6u®©ùë
}×tôåw¥¶ªú>=ìêdì,]-'þ"¥¡ê<¿ccfmf° ûnêp¤/kjîã
2ü¶gù<ä¼ø¤ovôaû
_kæñnåùæówn_*,nr9s¯]~8ç¾
s1ëö0¤zahßblq$gæd,nhðªäþ%ÿç½ó_l±*¾ì8fm|çûf
×©ny0õ-wê.óeæ
;éðãh]zãþöþ¹¡­e0£êõ
la;lºø.-5v|¡ê*é2dðë
õm×oö
ò­öéö¶y@÷6^e<ý7äþdotöýeªpüù«×xâ~ék ÷_°]dâ¦
¡zñèné¶ºò@uµêå|sÿ&øo»jqòúö¡b¿©úbý·îì÷
æô_"«-¦(¦âþ­zj"vmvueqôg£ññ(d!¢1*q@£eiére ¶´*hzß(p¬"bj¤fæ¢þ`|fl4:å«sñónnæ9÷ì!ó:ò]vànáhx\çó!®ö¨4èue/u¥û¸ôâáw½·}
wé6i¨·øb\ü®'âai!-ýôâáãj6gã	þ%ëèâïæ¥
ô,æ¯±0kåðìâòêj=¯7tì×áe¢¤0c©âü!fl4<rùhÿùk
ácõ]êæ²wïêï¿°ë²ù
öðçúßwç´ì?pÿák}+líþ(!¢v·óùú1þãâãñ7çì.g«:ôa
òlöå(w¸xat/à^y×es!rõ1+þ3m éê¨d7ôb#èðúr
ï¿
q=
é÷ã¨"#¬ã&õ7ñ·¤n·;i·öúp³
bõ#§móiôb
|\ý¡sic¾mû+¥êüþ*»q!.l¢u%¸ö:8}2üa°¶{ç]§.w´å´iéìî©ûø/lkqvózç²5iuýµ

å¾òsylù~cnnúéö^i­uhf­¨¶hì$aåø8ôú&)¤fã¦4k]å|ù¹î}çêñcná
,sk´x÷q¹æ!v#ã©uêdd÷°þ
¡vâ8
wøã½lexcáõ}q>¹·' @+æ»x:'°öó[o¿ûé7ck"µýö;bßlâå`ið¤¢iô?l
¨i¬°ßhòð£mhëç9´^º<
¦
41¸&ðæªìcñuäâ3ß5ú²!+*híµælkft-9è«°ôë?æ1'áàà_"-mrl°)¢4i°j"´´y³[¡x»"ü  j<é­
endstream
endobj
720 0 obj
<>
stream
htriti­¢¨jd¢*xuî
¶-qaptdtpa1hhlb
²¨åvme!( (¢m¨´£¢¸ñ
»ýefdzæqçýñg&8æïü¹çüï½ûî»÷{8æh`8{í]
µ`|9é¨5/ñhõæuzujñ[tàâpñóñ
5è
wqõâ£^îî(¥ü¶ù7wò
óñþ%ç
ßwäâl>í i\oææüü§5¡¿þþýèï+(tkõbtñ¤ö
ðxa¯3¨lêi ln÷o0
õfµálý² 1
*ádp%¨µ*ãa·nð¤èlizµ +¨r|tac×7­5j4*fmô?þ¯s
è`#±øx×ø¼b1gãüáøi¬?§8æìq&xa31l'&å0
y0la¹vmaë
ìh`
xîßqèwøñkèbâf|t
çæøäè
ò9%£¨ï_énéi)/}:`îv§)n
¸m`s¢óaçw.±.u2wevkpà ³®\¸¾
2¸d>zþhó´î¥ïº¹
uûèîr÷·cb4x¸{
÷xéãù
`/(æ*vz9{åx]
ªzóá*¹7üh¾tp8áoè~dúvü&æb5èö¾¼p
¯{
ß#n#ä
pc
ütý²áj2ò¢õ$ò¤ª¿ä~â´
(3bi$]ò/*	%7¨ólk¯÷ê~shæòßçreö2k¥øù¤¼±4»ýc
p«jé¿3ä]
5õ!ûví¶h"$t'¢³bsøq¯¢»b8t+¡{&.iúç&~3r§¾9ysó«bjí+é§×aâ6¿1í
ì¶+¯ä´ë
obþx.îôuöøþ{=¸zôãð=-	w6ìaglnêád¢þj5náúò6ù­0ßítcfïxqâ èmx¨mn7¸t7ÿuèo`îùwl
aüôùöæ£
× ªwá[&ònx«þzvrîóÿî(ißr
«@nþhèñmë/ó|>òöùe»öï,árjî¬w\«,->îçç¢¿;)»n9¼alg®?{zlmooá÷¦d|ã"ç@äh_ýksô#ø{¤7¼»ß	~wé+p#^cn)?¡n³|ºß*ýîrþòtg¡!
j6sgvü¡f.ðoqs1·w·%¶iïøºÿævd4î
=möêâ¤c
9õ&2\í:ec>n¼[kïqúª
v|n¼0§·n>@js´b9ïii&ßòâj=s·âgål
u{¤ô¾v´yýó¥u\c`óä!òèðù&åè;y±wº¿üë½óäãã¼q0¸ó³íj
¹|ð	¸tx(zÿ¤ýïüe°ò%q
0àóîý[yàúv´qêæðõûò=`&â­h7eeãg(qö»/3÷_>ä·õ
ò
é[aºv¤}8%r no=
÷
cè2ûþ_z±ï"m¤íqñuû+öäåpy
yù
:®¨hgfjúêpý,káëa7qûøý"	@à `psv{ølõæ
­ö`ø ®i/ãeaeæþp
	?pî
b
ò~%ïs²-½ò
üä{(~o@a/ç[>*²rë
ìïçc!¸ñ(b
,è	¹4 d@dàt`a¼ìzú;îæ³;tráy±gâ|é-cívëaeu£ï[.q®ëìådöñx;]/	qc­{èô]ë( c6~ÿ¼ë3
~÷}§l\æk¹²
äµc¶.8ûäçùmä£pinylkøus:õmôïùå;êr¥w*
lðú iü"us¬"ý­~µãøók
ójußñôö
'/\cïëÿ°ééhh6fmc[?h^
goþj^½jêê-c¹­u>égg	~tr®qª{{
ë.ä+  ¼!¶±à?ä8ýüqzø
g`»ï·vqf}fì*"zý&¸ v
z¯6%kjø t¡ßÿxõh <
l\flù s½2f=§oz©dt~aûã¿½ìïxrsa,esè:;^füo!
¯sí=},)ëèáé}ðxø
qógô'"5}-¾3óoù§jrøëp ¤r7ëí)ú2
ëpöb÷jk²¹óùç»)f %ë¼â}
£-0
ç+.åµè^
,p¦þþú
r»a5
òôd§ë"5tt¬ëñn¿féò¨d
¿²i
uqóu±
j!iå"àznøâðycê+æãp9p
åùâèdvkdön}´-
ôs ¡¬
(´bg;µ
¢+è- ³ìi.³º+~ì4iç±¶`:@ä«'ëïóläv ×öâÿä´rþh~ïùç¼î|¸à0_e¥ãvy<©kßþe£··¡1ägè^|v?»d;(	~
çm<|i÷
2vårêvñé¥îyd¢ôô¬¼tñ
á
ñs3ã}íõ×´ã»l÷ïx/ð72l[
åsúæwß±~da´:n@[dånð-róqúíá~¨.¸cu
ôý_8åsrähð´iÿ%,2¨º7l
ýyä×v¾£+ò°¶mtø.m
·¹z`rgòa\ªæµ
õ)êã0&b
r
ìý®e&}b
yj/êcø1ë8ø@ÿ
·u {u÷ìzåû,;îf;w[z
åô¡ê7eü4.oê
µ{ù¼hè·µ-¹èeftpßõêoò"=µ
dc³@9äá´¾^ 5ó'a¾<b÷ l ¡înç¥
ôíê^;wµ¯p8uiåõ¹=v8
_û,å¸v ndv¦â'ð8$a×
)o+òós>c%o#
fûq¹éüh[mù¥8 iåªöß²³qûßçpfzu,if$ßô.æ5ìp+mö¤#íâ}=mc¤x9î¨örýþ¶ìmyòþi©í¼lª¢`hcno=9ÿý§å\ø¤ù@éàßñ¶7¸c$¡/i¬3èã.àî°oqf×r:@vçbùl0æëe¼ã¶û¡ûþþidò
3wj	ß×÷jì.0¨|3
gj®³°öå,³òå¥ò£|yiwg?kf*ïeã2
þ h,ì&ãï[8	yãäl£`"lªý%
ë
ªb
©û¢5éz&­ìãäçãþ
õpttüäg±üur~pvy\aè6ñøèz^1nmn+ü èhpûaóã:z ùlb
¨u¼¨øh+?!ôéàf
éèwéãa-åüè«{jò^y2a¦¤:öïm¿ea
}îixqó)æ±-\º§¨ý_p¶ü÷¢á=aïeºr8!íúáôw4oeòjr?i vëuªèøõmë|¼©/­{êãøé¥!ìêm!þ¨ü
ünúûuuv
¤û21á
==à{ö{d´â>qcâ2¨ee\øa)yt¦ifoºénl~
í¾5û¦(¢â¸`å%q+ã¸ç\¬êml9rõþ¼ª³|÷s¾ûz
&(
ëúþð1æ_ÿ×#ðrxb]½`>ÿzdåºb¦j838üë.«ò2ð²oöò>&ñdóuï@0«6ï*c+
°q0}e7
*ékt^cyôà´jø¥*v
¥»ï"k³á§lv¯&áýë)ær©ðfv¥ìâh}êae
³/zwä¢u4à°pëâf÷,lf^1¥!
°ü7h'ñd8jàã>ôº»gi
ë°x§6xoí°
ûôíªd¤îdðâik¼¾ä^hèä¨nèây&)êq$w®ìénn1ü¥ú1á\y&þçôÿôgëözb	or5gsô¨t	?æï±¼èûë©n,¢þl.³qmã:güð¿(2
tuiîy
±pkñe¥!ºamûâw¸õ^ncîq[=à!íóçrâað¼gáýðn4ôæù|àð)7ë©í0ilvkv$%åçf3x aë÷	¥t}¥¶ok2
jñ%ez/!r`µ^=¤(öfíb	ëbr(¹½¬ù°è{ì(0æ6{&pg5¾*r»ó&ä­7â½pã@øáíæêþs&õë
÷x 

ímêè¤ä´¬/azqºéu[¥í¶
½qîfq*
{¼×oft±-<>lb+µâyæ`hfß4h!yh#¶ñû¬òùgöü·à,þ
'uãö4.òîü7]âñ&aµðzqáß`>
çó®óorþ
ªgíq¼¢j*¿êêé5ôm},®â¡ï!´êoèoóqèn­fmýyæ
l³nâöâæ¡1q¯æp2ûn5jòd0¶or/rnv­o·>eãd	tà
q*9rî(ó"qth´¹èê¦sc°ô!*íë+>v­[¯3*¨
9ª1æp¡4ym,»ê­ûýñonpàîóù_õ¾^óâ'díðïiqhzðñ úuë,y×{zz#¶deñ°×]òna¬,x}g°æ}àw ºãq@ÿrfø
âüøöû­­5dâ»
o¨¢è~s·ñ\±
9ö(d7 j±ªµæ.$6pû*úu}'|ìâìsûó_àßºã
ø³±udc]p	æ
x|ûké{.þ'y¢®8~aõzý8a
wy/16âv}ß ó£ÿk]zqt×t fvñà¯ö°ë"
àkâ²4w#"ýa]}
k`lqôeøýxvááv}­]íènáçnm­è¶£è´ãëâú2s+c~{rë5/t6·õ½ê êkûüc,°0´ãìnðîâkí-:§ürûcÿ¸ç
8â·ýâö(1a'!ü¡¸¼0zór<{wóþác¬èvù*'bf
©n®q0¢;>¡û
wl>õc ¨mºí¨gdã°8w¥õï© j;:kuln²
ú±
~q>ízáúë¡þ×ûö¸oæùdnìª'àudãlé3c] ì®õôó
lb]yé)ié)ò$öp¸çþðhµî_²è4ñ^2¯$¿÷ó¯-¢ûsøi	òlw»¤03øöäå¨µìshá»rdy(þåûw¯÷âý¡½
²yðë¿}qfýã	ønù>'ê}ühì¥>mêã¡0ía]/íhß=0úw
ìêà(ä«
°g,j#sæ(ð£¦ò&2u7µ
>,e_'ª}3å
ó	ôöµ	ýnz5ßé}çq	óùåf{
ð`ï
v|¿l|âftyï«°}¦?íríîoóèìýgb¹b%y¼s4¡ö6si==\êîâÿr^íámuixnn×å ¹diïõ{µ:e
«³ºxwèîzñ²x[r[úbúhóæölþ&í«émò´iimåqûà t-:¬[¤##º»óýzøã:îßî?÷ñí9ßï;ç|çûý¾jòéý¦=éu8]ýâqúix?ªü^]£,a¯,â]nã-â¹ÿó%ä¼dìndu,w z3 å¹ñ(`í
p_cîc×ñ*.|§pµà?ønæ­w??
ý
üv]ìépc^
3ý;òkóðú	uõæ­r³ºàäv)b>«
`%µ¬hô¼á w~ëvöóç=¥,ù§æ¬nâ"iäaþ.õvòé#ôùí>æ`og%g]·(ôý-qmla[7hêvìjåòøaxiv\0·éãv
ö;âåpuk°a+rñ]e^êÿtvn:æü¨pújgë3
xo,ó·»nð¸
à
r,ävtma«·k_ödú;¬<wuësû¼çìå«·
ùûò
¬ ß|uð¯wþá<5ûá¼¢hkù¡ã`èbg­ë4vrüèé8kíæý5xhpd¢m¨¶º¶-gýtçæjú^i/ñâµ:}î¡l\7ìvïçômòsç
p;w¤àûðå7ãýdj-&¾£!ú*³¦¼ èw3{îõpôèù:b¼=ú\o¿´k[«¹~ºõj©j´>hr£¾>wo?ãh¤4ç÷®n_§&qä¨$zò
±gø8¥
mî
=¦îæ7m÷¸l\29ä9äal!^»ûàîùé·vwe¶¶¶»ióâ´±§ñé#sªs=>³]¢«§½µ)¶¿ý&ÿmêtg»câ¯bò
óð{ò¸l>©xáj
¢ák×aîy]êj:ºé:nÿg¶uõøùèèï
8¸
î$öqë
4r«?jpmn²©±tz	js<|$t&)ó¨å?	a±,cüæ=øõ-ôþ|´¾öq6|åkúéáþ¸p1ofmq£ðx(ÿkäçï,p}ç
p°>¿íx=­à%
5vãsdhá
ñ}ì'ã¦¨¹î6ªzø
¨é·p¸1¡çfz'üøÿ«<9e
#b=*írâêí@
¤1w,¾'g¬þ®h)0èvvmè­ó0}î@/z)>c=äþóàe¼.ÿä ,|-
vû<ùë$õæ$aqwì\t¸lýý<­öò
l)
£ú,z	åy×`7l¦
ùêãé°-fsó=f}áoxíøîù=4âà*yrâño*ü=
¤hs½²óª²dóý©í+
õùø+°àâ`þéoå<$vpå}é-gxé¸c@§¡õ]õ:»5!úç0¤g:b
³»
zú@ly¡ëxz[øyjõõq1jkµ£ïõ¼tô<ð§xü¬0ù²ëö¤h'%3á
q#0v±eklxí v
ãb.! oh
ºhïx\¯_d¢á;¹xßcêåçààùàª&©íôðåçiÿçç/ð×^
¶4õñåtåâð$¹wv)m5lnååÿ8¸ûô¿n2%vu¸¸ðôkôò.ö§jòãj¿öè®mhõ-üp

ô
rno
ã©º kü=ÿkñ²!q§êb
»½æ½äoìÿá^û/~` £¯)
endstream
endobj
721 0 obj
<>
stream
hbd`af`ddv
óòòðv+hkë+ó
t	kþfü!ëôcea.¿
ã,e?dxäªÿyÿzþkuaqá3#£±
s~aeqfzff²¦¡¥¥b@irnfqb~b@j¢©©£à¬¶
å
ûa&3)«ñýaû®ýýñþw[æûßëec6¤íúµqã®]©cbòrcäøþóíåúëýý¡èïpq9¯ 
}
î
¾y?rçíð]{
@ i1k
endstream
endobj
722 0 obj
<>
stream
huitw®¢©*ð­´åòåtµh\pnäep9¤[¨iµqiz$àæ.èa¶qô(ãq(*â¸
4¹å<83¯cü5?æg½s÷{¿û}÷½wixj$>á«|½wïõqåný¿v.&j ó:©ãb<µ9æqäh·í,íh
ñv
é6qüõd/d´³¬û·
egì´³ú§-aiáªä¯vi0ò¶ízerr¥j»e­
ú¤wç%)?öê´º(½zå¬\©ñ(íáiê@uzlv;9+p@¼^é¥nrv&¨ãu1ñûßû_ªÿo	alq¿`ájo_?ÿ(z[&.^«ûhÿö
&éz@îj)}ýíïû8xüôþü¾
ùë¾¦®
e¿ï
d·üs§ûêw, jë;wr·k¶fø­j
>ßeëÿv;æ#t
âü©ÿé¯icy2

¬i
±kw£
¦òh;âj¡ù4ò¹r §¡x´î¥g¾l15n+¤mª¯6o±ê³!i øöba1+î
ç92ûkú³{8øo/5§z®(úvy
ã\ü¥¼ñâ5ååæès|udðîë;k¯j )*ea-c,.+¬çî¶äûn^$ø£«,$t3ò·ý·v,ûø+þ]ol¤(ú0,þå2¢pß!jä
õfõæøõñ	¥ði³)cùùì:¦=îuø	#ýwó5
ä¤%½8aì³ï`ºoc ºjòå)mk#oªß­om×héôüa±ç+û3wtfub#æ-5>ì!30¨þ wbç°qùÿí·y'¸gwn¶¶
ß5¶ý¤¸ø]ë×gúºpköíûa~
d,ý±ëïp­pøh·³à öébxû5ï
w`
« "^ åþ)úmüi7ª¬¶­ä×4d°a>ôc6?x¿¼þ~º±7ò_s ¡³ªóîs k°a}ìüìl~{zìpn¥9~áîýo
ò]ð31)d
läý!xd$e2tk×ë7¯áð¸sñ4çé,×ûcíåj¡>¸î©íëlw ìb=/òòs2øôèpî=òúçç~¾ûõ¨
7	fc¾á .éû_aü\î+	8
»´ñtpìâ÷õ0-@ó"9âðagxðûu¤´ßõú£rerëv÷(gø_yk·¨îù;wÿøí4©`üs¸úì)é`3ý7xôëb%ósðh¬åt¶/k7é£ê=°¢hâîëz++â(ú~]ûºðc¥>áò5_ÿâ×sëèùv¡½¥¬wø¬2ugòòr÷§óiê¸pî#òæýwíouôåd
æìã
=/kiä
¼7&lle2ºûgßcø°¥¼
ç
ùh#
bcÿ
û­aí»oò0ä¢!l}ï
-p'	9ô¾û=m,ø¤&¼/.õfbïêê0nia1æo(>s×êý<
¼z@øç
]omæ1ô/ò=ôvã <àû",k æ<qmö4ëq}fï·c>n`'
°y´gxï³{uýyè1kïjü§ýü)åöæ wßû,º2åå
&¾ëôôp+.îë5	à0ò£a_~:¸}yüvösjºu¸bgx%ú§×qþgæë3yx}
màw¤kðaömì¸'à1ìoäoá½g[ûîákvðúîiêk¹¬#¦grle-
£©øy ¯âæ
¦
¦+æºîqú#ú8hät
ùðáh³'0=$+dz.mèüóvésðleû!ýð´`ãzìïì4t¦wxig£°äõ¸¹
kf¨éyù¬}û3ùý±úx}n§.#9»âajuqkikó¥öó}7áþ©h
í
½[³ð¬£³ê3ê
õvòñçò×l>
stream
htitw®¢»ª¥,]¤«m1îiðdeqeð²óø-âjxzc*¢ è¢0
ä'¸
ã`ü£qmoãvr<=gª1ù9çìûþ}ç¾û¾{¿ï]
0
ç'ì_
¼eý4
¸ äÿýÿõá¶sñâ¹¿4èj
jµ
wk
é·q8æ$æöb
íà±ï­0/
bá&å
û¦²ìblå`ç°§ø"|þu´uh¼(môñ±³8k\+î¸j*éýä°økîi'kiyz×z¿eëºeèæçf©m¿­íjû«vãìínú½¥¼©zê}¤}ý5û©
fþdäûqt(æóg¾í'áº4¾%`djtóvä-3¶9hði¾±ìå£
t÷ñ:èõáf6äýp¨3¦ãfpã;ñðö\¯v'%®©klå¨äjý¨bchdæ
qådm÷«	ò
¢¤
í|¼	k ñáîftt,é4¯^ýû¬å¯7oqjr¢á¨úm_1³»®c÷¤·+ï´qmuí=òçk»(
ÿñxóß¯êð¯q4®	-íåíôp`íçö.®goµnx¼lz.az»húío½ë}½çi³
[9ª ÷¿ã®w:)¼×ïo1³=uín5æù< ð{zdß7ål?îñíõï	ºÿæ°h!ú
ù¡­(¬
d^»xà`
g=é{æïæû@uà ²ào:¿û2
²çµ/q.
qr°óüîrtï©b²+71
3ô±àvstà¡/gù yb¯+4lá¨ðb3ä`ù]äoç?bnèôn3}§â%fô
ä¤bbzmú>°ïyàò
é&¡kf\eö$å/ë¿'tæ­±â_g2j
ß.¸qtª7;aæ[¤:t¡*­·î7ûßõk2û¶~ sðª\
çx$¡bï£=/
\écþg=ª¼ñigäh©¾[ýèè]wy0kï=³¥ô
oâ-½ýqôæ0à
øâ6ý
&	ê	@$rgjý¹c ·×ä|
rp-âà¥
l ì(ä¸d~¬ v
ýfòzºkþ3k
%d~yyáöîcç;¸sm½ò+ú
ñfup¹
ëû'ü/á?tjùáskæûf®òôe¶qaèzÿ3de
ù#k}'ù[prxvùì²e%z)øû«³noúwöµ´¶èãr¤·º«ç¼{sûúå_cê<æd¼fxéùsztcç4_d¯öãtd®ï5'ë:þ=à
h>áljøç&a¬}~ÿ1g]v~ïy5¯«ênh½q±uóöc
º­æ?=puä¢ñ*/íì]<¢æ6l^!w¯
^^  ¢vû_â°p¨ 
çûaþë·jwkru
`ïnó>¾
n§n,óç=ý¼ñgãì->röaý`æ=èqa
+þ)8y,"uÿeºü£º²0^ä{@ók4·sïhqäzuu|)v+v¥ >*p°j !¢¢@d!
ðr)å%/yèøöªu¦#f©8¶¥;®ã¬5'0®?âê:ó³÷ùû÷í8á\
:ó3	-þ7¡ v¸s|ýðùñ@cð±/.£>!f,v{_¡³u¬x¢ü\³s?+ï(~þ
ú
¸>qoê§¸àshîò~ú`(ô
ñ$ìvî=
aæàð¯\³àjsìá«
ãhúòõ2yó] qv×ròbß5meµ<´ ½³
½çr
=ácýg*mõ¤òn$^yuº¦&õx]m®vîäi$ñtü·å÷joç²übnxµìáû
är¯
ø¢ñ3u\ z@¥mñ
ëâ_iª£àöì°gûéß_<âu
¾ù/ð;tèéödvõ¸éà}t¡à 7ê
vã÷õíômë
ýäkvn«ét²º£¹"yháí§ò2^oþi¿	´2iún: ôüë¡í6kº¶s·ls×
sc£s+üì)=­æ"3ë?ò÷®ç³
'«àm¸ ëxvytåzzª¿?züþî
.uj·°îä¬ þeêêu=gdk<ä>zp@u¨sõ9
³q
,¾òäqã­[íöøm
¬ëóp"~v¼ïç}z !\]
ëa§@oð¯
h
²y ©èïá,q©×xjc
ê8m$½|mã3
{b÷¡ëwéæ0{$ãõëcõr¯
à dx;|^ú§[xôóþýfsv¶¡
¿`=tx7
½uïæä¤­['j	yxeôçïg;à¤!¸üïæ&,6âøïô½kú&½ñ!©¬µ´¥o
ðsfù£?#úý­æ
vcnü¸õxi"4h±s÷ów/û¡=órvõ¹ãg¥n­b¶«âåô*ñå¡æújwçø\¾z-âë!àwqqvó2üvôiók[qmu}±<"e
x½¾ëúì¤«÷1)ªôýjn9±bþ¼½záè
òsòv(ð)ðhwþqvðh©>mvåä¸8k¢åoûú±ó]!èyîÿçg-%úá}´ ì
«¡{ü1äð'j¹f
lø{âç7;/þ&|ì>lxuúsîù"n°pü3ù#ê
þ78cèm
l¡¦®î)zë¢¼þås®«±ºêf÷£yt×;x0meßg;µ
)#s¦¦*0(ºäûn®¥oûçæàëºfl#õûõßlxtn¼c9
e,©-¤ior&õpwûl_(\í"^ïâáôàþeë7åä¦0:jí¼nø¼õâ8;<´ã2~äð®+8ákð¸
k`öü#ðw
nïçåêíà¸»c«~ñ£¨ócq!©¦ü½é5~oí¦k
su
,¼üô|5½9"~m
mr§³ìã9z>ö>ûcfø ×ß	rëºtýxf»ñ×'×åmëù¯+ä¦zqùüd«wªë&i4
¹§
|ºáºéñn¶oßñý»e	é)q;¶|aí\±»
ë ã¶`þª
wç[e¶hd³uõd7ô
.8îæübd«4¹©ôýó,èa
m÷y|
7²êy³^çqh8èvø¡àuîi:e¶h$	ûèð®ÿòpgí<äw-ôñý¶senø§¿ºf]{¿¿.&íó+rq",kf
y à¡ 
b¹øÿ4û9qz´[þä5ªvb®_äáè6=ã%ôi£sûñö×ä9âd.i7´çæwz´¥8ªm¾&áç)ìff¡=ª
üæìhìoúnu·²oìî!×¡$u2l[,½ëöto©¿!yr(»8ö¹gmghê#";_x-æ*>
stream
h|ktiç»º¢qllämgqueã8#"
ò
=âðdàp!u!&àktt^
#ø e¢( @gõ9®ºêz)üùgïù/÷ô­ºuë«~÷yq1
ç%kömñ]³ùégo|*ò?m!p$-
í¯n´d,`ä8#á0v8ªöî
ücó§évh:êý­ñ7pàv;ly-à¬p<2nï«ù<±q©òj©ë%kz¬ô+:)r&
nkiílú&f%)©²hg©wb4è²%e$k)épç`gi *õ¥8keñòäxçi	ûÿ+áð)n6n¸¾
_màcx`¥àª°4
ç&û`3plc86ãq0w
[
aþ$æo
s±-æ&á°
öúc
ì0vëàìø|#~g8ë9uüµ\5÷ü*ójø+kün® «èÿð|x=övök­ã¬ú8ø|có>ézò¶i%^úøöú^ô
le^µâ¬óê=hådld:(ä	g	xa")ºfå8â ã?á±>é´q²xü±2%h:p(½ã
r¦byh*¤¹pu dñøè/gîcdcknî)óbµ½zuò¬ýö|
ywñjðp+¡ú »-j_
ºpòì
ºôry|ê®ø¸ó»ªi>ò_©âõðï½eaáx
ág¢oq_®îfªºñø~
{õl<ø
qþ0i²e4×÷#[,îë¦v¿=
®m
×j
ríz&áëëì½á*(u °xb#åyìünboòåml	3yngbez^kaù
l½
yìö$íiîl"jï\ª¸)
­
^;{¢#íçclæ±o£ úgýæ/~ª¤t
*æôÿòþ¥×	zï¾}tq±ýh0è!²y )ó'~<óxö$~xä¹\
hg¯¿h
_
?pññþºh¿¿c·,l¡-õï}èy0cè áùïè}7f¾
l¸áp|x(r(=$[rst®ìòì\2'&'6f¢,j» ã 
=xµör»ñytj{@a{e­}m½é7b
û âà
ô~d/cà58ë/,!*qm}0ü
¨óöy§kuåbä8qe}¹µxzº8¯ ïäê©æëâwbíûäûy7ó½áwo¹wç%74çððñ^bbæqu¥éo´táufè
ái¨m¹þ\þýc]õí-ö]þd®«hªç,4&÷ß¾\^_#ñ_í
ß±]þ÷]tú45ìgª¨'õè6=[s@cëé[ä>á×gþùzë@&àçû`)
71­ýýó¸¸s,¦:4þ¿üýûïañ]pv	lfø>²þ©ðioem8ð.~k*il¤ïw5µ^ùþð)äò±ügöùûtõñg%ç£b
¿|½ïûú
dåæ¶æ¬z¶ö%7xuâoe-^èã¬ôå~gói
0í¦]*á
§b#0fe$«·íò|àÿõs°o­sg£
u¥fbhìwm+ò#ñihj!²¯eçh~àah{ áxèíêððè'7xmbe
¿m7*ké~5¡|æ;é
ö={_á×ç§r÷vcdä¸áhjqo²«ò;ý{fþ@ù`×#ôúï!ã?¹ä	¨?ü&ï£~
±ø«ó«p~ºíoããgåæ²>va»ì0â
zlíÿ{âmà²kêýâ&oå¶9u´[bøsßèçç[ú
[h·¢+
¢æó×f®õ§gjm'{a_b[ñf1úâãóq±qók=[ã/ò	ûæ¾ysñi¹ï¯6ä+aw
¦5fð5
[ü¤þê~aöa¡é»å@¢¬²áxxlwà·uéckus7¢i"¯v¿±;íuuå\røý@â1¹¯fûp/òh¦-­:[#ù63&.d
[~ëõûâ-í­12n¼í]îj¤»l0õë¶ñ·
yé.â¸22»ísf
4-|¶fþl,ì/£ùôfñìx vö³á÷ñp
uçð.*ã+6g/qfkó óç¶wnñq<^2§:§µ^ä<á¹o
efh3³õué[w|#vzý®ix¸ãçðð|z¥ëèñã4÷`e'ì¾×rë,4jÿ® dôklg?©éëx}óñ¼á@wµvh2:½i±êpñrïf®¥uôýãçúåg½ö²å£,¥p3îu	úíâàfç,ì°³ï9ïû4ºf;mûä³ªb¥%:e8vq(ôû6ëéfw$
:0
 °êðöçp §ùíð§ä<\
oóefâªzá§.]
ö¢wæàëþíþk#ðüì5iû]5'èâ|÷
}õ?àjkgep{ |"xõ¾ùx^±î­ò©õú|±úq["/fñ¨ÿú'üî«a[/ä51³
:
~@ú\ûðt¹ áxn¾êxnª	ùvw0ä
î¤[û1w	6dxòkáûääðâiè"ó\5ýi¿vý&5xqg|ð+rí
{
îjøbj4üø6®rí·¹¬æ$­ñi
t'åfâ;õ>÷v*!k©dìùu6&'¸lîð®ÿ,àäsãa
æ8+mt·ãóúmýô¸9aî
|åmnü¥¢1nñ8,ëçãü¸9àâ³ò¿a8!rõsô&
]
bqôoã|¦òsëésîï_yûþþoöâ1
`ë/¸ô  góãh·4 _p¼ñæ~êåô#hö½@¯%ïêùy4(eâøpgprno²,p@jçªqùätu÷ð®^önfltúþ+zæd?k¯ið,ø£gs,äýa¬öüéùéa[{ge½pn®b
*jj+¨ôôìmjæd­e¿µê¹=x+z\äçcý!6!hij:õ7©wc½oïezã
o}ymæþ¦©ëúeá+ºî¡sy°:z¾eëº
×3~9â|w¯êéssvdëk*z2fùcl
ð#òuifq½h5»^i«j
­tsãy1ù
&þ¬¦²4¨±'h$)cgáþc ²dìk¤1¨8mòéé#ãòï¨äss
\a^
ûóóã-µ8æiíù¤à¹föúdh,û/p
¸fþ#[]èy
÷ ³ûñeësu§}+mi#
°×c-¨dbh/nëd°>oû»
#ö	è¤m×¦²{ðyq·á§¿½
8^0ª±òqk'z6exyäe¥¦ò2>­p
íïwªnæ5&fô÷ôxúúú<¿÷à
ãtdüìaöpi..ib¯²wv@kdö"¹7?
=
x>úæîe5aóxìb
våöîø ´
ð
i«¶7úäè ­ãréâ-gç¯
ûw ûa
å
endstream
endobj
725 0 obj
<>
stream
xµr[ba
«,`¡°
x¸°
xàb,`
ùd¯ëz½^ï÷ûóù|¿ßßïç«?q«c
endstream
endobj
726 0 obj
<>
stream
xí[ësûæÿî¿b?ýizû~¨óæg 	)å	i2
a
ø#éú×÷
=léølrópãì¢³«õ×îoïykv8â>áxé òjn¤oà*öxä2¼*â,t8ý
ñ­«%i
àá 
{ød*îbe}'ú:
 æwhhâ¸@b_ ?hå
ºeççv06÷-h
r>¶¸s^3¤@^«9p"o@im(u«r>è¬0í¸pûð5><$g[hà!%6<¤f (he
xhkñ.ðn <¤zà¡8`
ðpòx 2¨®
êi¼
<4s0
xkôo?ñ­0írâ2røâ´¬céð÷{x]dùègj»i¦ ¹òr*	ï¼89§½(èççô¿½8ú33fiê1ªí¸ßf¾µ²}û^<¢áï£þùó/èúpx
~oº'½09fpe'tpýîewé
=
»ù±ö3
¦r©!}å)paúbðîø4»
ôm4¼¢ïzãl±jqòz¹
þúpx[ãjûúw
9ùäôæ&zªüêõøp+×	&ëgñdû^?úe¡éã³ìëæ|ìòæyæáó^ïqa{\ùçè\^å¿?yao\êùjjïùh5ã\jâjøkâoþix
öî¹g	3î!(hç îµçyöîmnniøë
 ÷ß87£¿
³ @ìn;ëeµ³oçd1úömö²yhßo
ngeçüëíñcæéwâaf·wßûþ°¶ssyöétÿ6þa·;á ú
òía7îeãó
r@gº%i¶y$q|
¦d£,nr,â.o²ðzb?ówñûa#`3wîîùõ²ôx3f¾h-$&^¥pq¡,­æ¾³4ö_>¾"v¼¿^üoiulóîéu<	«4¿æ2¨ýkàþ©9ìà°?
îoú
ü·`ïávüp*%úö3é°^èmèüüõúêóå»
«ô8i¢óöñæ£×kgýþõuöd§ó¸ß»rf5jù z(ud
ö vyíë½æôëibp-,1
bu
¬|( *ô^aô1-ö
äzãáv«¬%êu´
óï%ø^cþ °¿d´
iu@&ìò~hþ}·ç%
§ *áu
òcüc(ç1üëûf4ìþw÷·xîr»ï7_mï¬íö.ïîmú ªãzoú!ø$>aòlëhkóòõ¶ïùåïjhwµõîïdjú~´¼ôöµã-íkylákè©lðæ)èx¥í4:µ>ú2áùåwôñs^×ßb¹>­í
¾ú]û
¯÷ßuþø¨cx
iò!$æcmÿö¿@ïzü«ô°od/æùéåñ^gm÷ú2
\¿aú>a#c«¯¦ywûïs
êº|çæf:°möø+|ëª
8¨[x;6í÷`üªîóþ?sà¾luqùï$x!ál
u@ïuðw<ëë¿î÷\ic©úá³hãýêãw4¶×m¡êè%§uá×^':×e/ikïf¦uäò4y¥@³kè¥æ)%kv½8¶h ý°ºëò×ùzê£ê^ïµòñäñ±hp]°bzôø7
vàænf2	ª¶bâmøõtñr2vþîk£èiq5ít4·pùªìnäeïçæ7ç×e([m¶ ïyíõd¨o
å4ï
½þ\ÿíãúq¿wüls·´m¯>üö:üæo+mk­±´êë´üóys¥<¾&êãbãå-\s,§æ¤xî©gêç1x
¦9
ð·°.ñ(	ù: p;c¢<ðçvmíe\qè?ûj'ëuø=mû®çr=f¿w~ûãõ«µ­ó·¶½­còêný n¶å4ázæåéß¢
_ð³áòæþößöºgeú¶ý¨;a&àáú0&õ¥µú¬ûkæo)e.¦à]eo«å°ýà¯üìþªqpª`»/ø$0¯goõ,,¯
¨1èfùê}'òª²9ìò°_	æùo]áuu¥zöv×­
ô«özv6ñ£zö6 äã\
r«þ?ük}u	¾kþ]óï5í
^gqòì*
þ(
?§i ¦>[ïå§!yï&ñi|üãæ9ý³ d1åkéô]õãgwðÿj?$ô÷éeí7}½à{8oó`ðù' q&dk{v½~f	¶üùìðïç+5¤±5i~=üüûúk3îçò; m.q§ñ
iåcâ{ìfpþà¤kzãáàvê£ô«s°gæ§ý(½ m:ar
uãt¥n¿7ø¨´´l»çsvñíq\#¬ï
jìà1&µ e'47fgtãüë
z3^¿wíñíêí,
öñmäüuäº3
v34ñ=¸sà)¹[ñùycðïx¯ã~<
oîõiù
s¹j»á0
|3íñùò¸­;ýà<%*ß¨såiùñc
8ß?éïìdý¢ ^@ëû`.
$ìf}xþc'
»d(ï	w°â?¦e]dï5¡±ûérrßmeosã£ôøi
îé¦ô¶)ýâ¬®@kojxs* ä
áéï¥¬jñy®j£aôxépp,ú>án:
(î¡bð·÷|èãg7laxèó°kzaîaù<ÿivªä"¿õõu>¡ñ0$4ûã¿$ú,
'ð?ºñ7àsb×!%tð-b·aã|;ñ(4¦#z
çéì,@#ê±¥e¤j,@÷\±ë9ß5ì!xó
ëg
wk-¡ùéø9ù  øö¥.vómseþtyîeeµj?2oáën
kâ¡¯	}c ]§åªwk33][utð\t
t²¤ð+@bo?ûê((v0õ¦]åìtzñ&éüõåxµº@àå«kß59èâvt¾ylûq
¦å_ùd}t±îæø§k/zöwôõ
é;á="ôãjxûwu¶èè6òkô#½7ú7dz%^æqxþ<êü
+en\êñ3ö¥"g6¦{}â0ï± [¥_¹{¸_* l{æapçé4í)øöï0¹öþ|£ix
j0ç0â]	áõ¦ô;+¸çòñô-a ª¶:÷mue9ç¡åêl­^÷ñcà
+]è0>´3.tm.ÿfnë,¿'êû"ÿpø
ob°ðvÿáë
<aòáä¬äv
endstream
endobj
727 0 obj
<>
stream
xíx[o9þ+~lw*ñmfl©êª-ð­d
´û°ýd
il
ì¯_{îñ1öt&ýj}ã¹øóïß¹øu%gu%y¡ýbªòÿüß.x©j÷ï~æÿwìþ¹abã2!kår&´ô¯	&jåæéñå$âu4¢4®s0©%oçðisùaòu,sryvyît!|g8pí
é©|g1-¸ùj¦zùérøné´i;+v3[ã
évö:[fæyxx¼æmqx7áâía¸beá¬0\³ò§`þ3r½~=z?_ïnt8y®eînggáåùã¢
¯édv¯þ¼ñ£þæî	ÿçi¸
í×«æåþ|üê¬¹x6/gã*r·'ëzæ/åæ
fz¿ø¢ªòýª/ó¿|së
ß4¾a¾¹òíä7+xð^î|sã5}¥¥kï-áaôö½¹o®áá=¼ãôðã¥f	þþ2åßð·ªçíd>ûmoløû\?4­àc2ãø[ß\rb züþëõu½ùzôáeý­õ¦ô×oáøkj6ò3æuècï!
±pª2ê=,$"dv°^w¨atýu¨nó^l
mñ>õîí
øçõejêz
-ç®êºi
®èà[ç°æ_à*"µk6§¶c ¥^ä½ gódq
×pq^¹mr.t® ö¬h{
j°¦vs
óaûª æ3àìéî- à¸1l#¿§ öµ¾fq8ik´erêc2&ë2ïøòp\so"0ã=k´þ!ie¬&em
¡ñ¡lrnð	 µànðuo÷sqª¡16«ã3êtß è#ð÷¿46bê
sxù)\¶ü@_ ößü'0q9¡ðì	ü»ÿqûápiödvh#·¹sö>ð°igtdwt¸hêçumwí©$zõ%®04§2nú¢´k£±é¿g@
º
2z¥j
ê%j3ycñgéù)läë&ç
r6æbuóà+whépàhã¤ß¹üw;2
ãpì
|sßàóe	hðêãp^áåvðsåaâ=0&>p³ïàþ8å=xdåwsdl	ûum+¶êøö®àõ®úãg	5'¹?á*ôlñâãbÿpëtx(
±îf2übîsrrï¨þnv# ês(äånôp!ªôâo¹êvg ãþa°[#ñµªs²uë&ç ðteµ&öòo*	ø;ó!q'í
¹
÷
6üãû¢ãä\úûú\pàý!m¿¢½#ò¶oáetjâú^tý
¯h÷àoc®²
èkißª0+:â²á²ùsð]òûü;hr{ûîmýi-èìø:+ó:«ri+{f
"íxfúëÿïzf¤ù6ëïà£©ìr=¬àðq[õb±cq
endstream
endobj
1 0 obj
<>/extgstate<>/font<>/procset[/pdf /text]/properties<>/xobject<<>>>>/rotate 0/thumb 250 0 r/trimbox[0 0 439.642 666.49]/type/page>>
endobj
2 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
3 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
4 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
5 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
6 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
7 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
8 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
9 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
10 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
11 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
12 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
13 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
14 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
15 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
16 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
17 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
18 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
19 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
20 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
21 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
22 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
23 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
24 0 obj
<>
stream
x][û¸~×¯ð£:çâ`òñ\²éîi2önö<èjv7ciôp±»?xëkúuîøí"p 
uùª v¿,¾úk7n»ãtþìc¿øêûwjùxz|ý~ñõwj©ïnyâÿür·uaiûò6ëz×eeûö5nù~¿(uq¥y¾ßâóûïvßîýøo7»»µjâµðç´«wwë¢né[
wëö?ºõôy3vøºz}{xì]7öç»¿¿ÿãâû÷àö{øïðß?´ájµü¼påòåo/÷
µì¿àß8cµ´uñªzê&¬
ã un¹åëýâ@gl©l
ï»å»å_yí¯½-*â
ÿvm¡+äfõ².ë¢-[¥\]ñúaù?­¾»ít·6f'§õê4ð¼éî¦m¸ºpö_1dü¼7ary2ûó¡¿óµ%íùt§9s:õ¯	$
ötskjhëñ&4ýñás\
òf(
à©û¿áòæõv*úonèeiç`
wñhí{
rzåìò
z]ea¾i©pßþø§ý]úènsmàú8`]ð6|%xq÷þüá»t+åkâ`§qºøõäômæ-zxùæ7o'÷´#»d©
é¿»ïñij÷´qýw7uè²dñôºýpì'6=õóñ3ß÷_âæôósh¿9dl¿ìpoóùx7.îðø?ãp>¡ûðm½ð
ílýµ}ºår
µ#õïäôä7úýøí	²hc&±ë?â\4tôc7kh»"&±
î©±-ãpþ¬e ¬fì'6n¦îí
ð@|é¤ú¤fçþ8á0ü*¢2zúå
î¸<øeô öã
ð³ýô¹ë^gh´4û¯öºµò:ëfp/1îd@ú
®epä¥+þ`¿÷'¦e5äh¸æc¦_(ý	ìês?=ïþ¼z·ù~üòt&1îø ç
=î
èwooõr{z0è?m
x£)qù
ðàïá:4åõö£
f(é6n%ûó]áµùóãôíe-¬qoz%û\èm·ù0:
ã|íðæ°t#>~xçò@,<>ø¥fá;wù>9qx®#rùyõýù±qnn; ãájów'h
n
pciû¥ü]ý¹ÿ
úù#a
ác¿ûmæ{eäpsþvss¢¬
è¹©çó^öö´ê 	ëêdç$t;×õ¦råì`ø+ñ»
¥>k n®rôv¶bds·}:p
­«zz:ö£uj<¦íécáj£ñ{èè ôpkí©?1îcà!æäl¢÷e­|=¬x¦¥@\
ãv,a
9	zxîænì/§/2¬¹÷c
¤"é9sbxé{ü
£êÿâ¸	á¼ëò ïuãÿ²ýfq^1þqlu)ù=
axn§tîá7òrºjë£ùvñæ#g
ôomáè%zúýü,ï"j{awzàyï)©î!4ïò¼óñú¼;ï
~
ÿ
¾	\
o_®´«`äqn¿¿4ãeèßþo¤ýúy¡ba@÷hë*%ý
·?òåcq'(õå
èr&øfþôô[öqß9®(¡áu,ä(ö:?­ý "áå|f£
9àøoó)âì`±¦.hjî6«ïøóa¯xíþ9ødçù9ksµãà-âþnfà7
vÿ&ÿlí`ø0 êñx8yø¦qµ¥õ6óãe>÷dö¤6yª¸í9¹;÷
b¸3!dtð
t×gâ©rð±ëáçà°v]¨ulø\y2t)x<
[þåµû$pñ9wê	òub«.õ³r±ïív
.ã	]ï
¸ää4ç_hæáqüì÷\¯ãå°=è~³µ+áµ*ûãnxº¶±á7úçcþñçf£?=<ðer³hh×³lsüvü<êiæ÷mèñfdpë¨y×18âö@ö6ö¨/gøý4#wa=xe1åmýo!10å
j¶lðx'scnëë}>uñ"ú·f{=ã0çîsd¡ ytþáwwáx|k
$x³ù+ñãçûóüæq³¢ý«¸w_çñsw¥pøm³ªýmd
bÿ
­ªÿ2¼áøêïo=³óù¼bõä§t]uÿèùpàõèd||
2çxí)?¸ú´9ì¸qîñzßú4w÷¬àå­.\ªøyðdüpk²®pìãü#{yßôj@ø·§âvvf¦©séì8ö9ê6öôçyf[§þd[v'pã
ä/âá
¾bþä'@â¹×n^ø½
wuã6,´qý+ ¤}îuj
÷xïèmìt~|ìxñ6+%[_¶f®x·j±3[g ëk'ìgî¥³êb,;®tvúõ38à@èè®t#d´tý@øãïl^`" 3ãî¬e¬übdãã éýãc·}äm5fòr\qä©b¸tðñå
õëëeyhicgªî]©
â 1;õøã^ò?w/km&t­x³¸y¦º&\ûïñïx
º×6èþ)u¦òfwvý­ôà¢(|¡p0\ûe
ããùòeíwìª? gªrvvéº
v7^×þtgäaz(>è>jd¿tæ$0­ò1ý`zu°î]yÿm/0/ö2¡w±ô«úd #
¡ièlê]ãñ) !t£+6çïpgàhq6p¥òsô'ßýàýå
l*¢ø
çæ9ìm(mî×_«}èåiçyö£
@e@àâ`rbúßiå:¦®èëuôörü7áþ)µ2é}üù¢^=n<½twbza ÷ùä^
bá(r©m#ìàgf.
ye>
ïè®äldn
ndü´pï
xreàp)¦pxyí
ì]ñyàãõòºæ[);6»ullv4¼çe?n@©÷<µæe	ò	ÿvçð0nz-@
à;üû+9°y]a$ß~§é¤ââj¬q´æ29ùûýpà3üä$tx©¬ï½yë7¼
3ûûµãríâù/ç~ä3a3eø¶âc¨kéïî(9!-o$:'~ï+<~ö#õääýe&àëeñ^õ wt}óìmõõð=íi.=g¡gózðnåëþ"¤.%llú.e"¾(ó?t§i £ëv{
?,|¸púòhõnù~øx²+ïýöc>.e
/ {riwù«[kë khljm÷òdh óph{ì¸¢t`x¥½ø1/ß-öwhëx³ùùäà=þhgmæ[qej¿|_;
wümo.çåp¥â1õ¶÷@¡0,àã1ìcoñfîöé(/l]à¶`íp
þ+'6¹k*ßruâò;ßw_«t1ýî6=_b³)}xîoníî{¼áæu(q
åêâü*ãëq>né'à­ .^ xàr½"ñ¦;n×py©xc 
ùbýuöªº×öçmpdx5üi½ïùëúêò7íy:tø¡ßæc$£¿øzä#@7¼6¦ê%:è+(¢ü2æ§é])q¨|?
|{"6óv~×o¿
7x¹ôã¿hñ"§·ã"þiýî|:¡«¸*h1`×t³úò¯ã`/ffoë:¿ùa. ¨ù7¶l^äkð>%ü)aæñ
à-nd´òú×nw;dûû}¼hü -«[ç×qä$§§¸¬ãæ0¿gw¢ø°"ä;áqû~xësâ³r9e<£-	)êñxú
fwå»toêt>
ñkùìa·ã$ð¿¤kmß
é
øÿw÷t:£êèaþzéñh)eôåùîxp¤q³xtµ,eáü8;ã«g«iüôeæå_¤³gs]ö`þ0óè
¹dró÷&\qêqlåh¼(wbñ5û±ltë
ù´;}þ%×
.\[ñ<ü¡ô*þ§é7
+¨òû¹_:jîò#+ß
@ñè
3e¸'>-»
÷ä®×"ä}¨üfßã¦¿	b./fëóeoø
´^m	àã<(ýs¡ý: çåþ¾íäoìó
©ý¯á3ðù	tnôþ¨
äwñ
v
íî+ù0#³ûç§x<*xýmnd+°íã¸ùçgèl»'²>ïvâsùþûûwßîú
7|tîcâ¿÷¾sôçiöîp^ªfa]áæê&øéªî~,?ó
îhóßïfîøó0}5
ë|0x¡nýëàï.éô4¹wbºd|í[¸àï<©2 íäük%>	êsw¾gãçrzdd}åë>­
æ
4ñ½#í0~×ô³p,+÷}ÿ¹í&ær&vlhe}/ï]n)i`í ãzpjé©íyùìûõ	b÷v:s-
âöä§~ff3
ã)
ì_7 ãé±îi¼¸3% ò,¹7#x.(a#bz¼ùñiêo
føt­¾é»§oðr~ócö8²»véìë<9í[¿xºaîgªóáñóyb¢#æùðÿbrw©
þónjä2ýú_ðõ·ûýý}wÿí°=ãeó¯~xû,¿þæmtq6¶rkøçycÿâ#z²ßpãja©%\ºæ~i 4*íx§×º°x8§ÿª°-îfdøù^nòþü!i(l¯jå?cê[·¨nµaçâ)ð¹hùø)6·i
4â?áë¢ª\ zgnºëºfrkè zîô´céhnøªu¨ô¨¦zâ]86ºâlá¨zò
=¥ü @kiclßdi&u]]¶çxãbqõæj¡£bt¸êë&×vü£âï¥$eaã8^e¢»òwa-ïjíègr>ûðncåû!gxç#ãos9í37¡%ùqkqämå;£tøw[?k±tô@ºá)ec©4¶¼ayqøé*veé"6(q ­y ôýíâá7¿j[õ ¬`/ðí¢èm-mxq9­¨ø)óx¦2^uàey/zaþ"ðãëó©),ø³5o~®-­½oë»#h¥aúi¨z
å=ãcg$ëåûzoul@±xõø§t¬qr*o¢áiêe2½ âdwë¤y mt©%ñ´^±ç­ûê
kãæãf±{@}o©¤²0ú]ì¦då2²/:+nt¹r.ê±ktu2$4q5´ì´w@¡61ôêï$ã!.³!¦næcî9ç mùgï
ôjuãõ(zóèè;fö¤ /½@6$ï$9¦×k9=ojk»ÿ¸åî<ùb¥¿¦v
ôû0]ênévw-3nú
¤z^óúko@÷é¬!vt
"µy8ý
¹
öèàim#37+	/[ðg¦µa¡k£f?vó:
kkrcz òæ²àyfà [í1ó.;p@j­wöa-)çwî
¥®¬pôô0ã8åù7
c8a$ùà4×y¯
tçàä
óµ¨måîöädf*+fârò]¾ëªê¢
ù¼ðt·á,
ç ik*iª#z«s¨
â©
+ñ¼ô
®ç­ ú$pq
ê@jt×¹r`ò´®zæð.<×&{f»âédp	è)ü´->ô>véèúmuà¢
ê÷ñ.8/sx¡¬÷ãl¯lãj¸4ý]x µ¹ñâééx
ä
tü]z%ý})x¥±qã7ày\;¨aù­â¿é/òè¶øe[{=#±dä\'íª£ñ"ð	£5
/­*e¿«:õkð
èu:¥ú n´:ö$úñi¬dqmçiâþq«zt4bneíqi[z2
´k¶]pm)¼öú+(je<w>áe®êðì0i)ù¡ø³ôel¦u`#uy¼èuy0ª
d[3sà
3ýl7føáeë.§èeªãûwõeôò»x óçl¿q%zvâì^' 	r²­©ùyqèã}çñkgå!ú·%o¶ ³k×ceþ
x¥n%f¯íâó2ázw
ß¨­7 ßô~£iògnt4¸öypµa$ë\ì>+]ñ
örol¦½ïïé¥ó¹k¤áz)ßru1;gaô­ßûheëvæol4m)y± 
czrá¢v61p54«bvn&ï~âôön9læ üð@±ãñi­ l3ð7u\\àòäaü_'¾g&îçöµçx¾"aaîd(ë57uéñóuip³àá6$o5§lða±!)
r,ób-bv
êä´üjrô¹{w
dj¶±­kyva­d{amüy­328yã¤/	/àgã¹o
ýbð\5*
6l-.tc×20 i
¦{¬i>¨x°©ìã|,èxfsyÿ¢}ý{üs¦pñ`»	hqª*# ¢ô³,
ªbús¾fµm
á¦ òùcìåqbýd«/ê
b0ä`ìæ(étòã$i¹1é\~ ûú\#g3f
k/c¤ß6â
{9ª
­û:i:e¼3/pþú/´#av#)]

égï¢0eåß
z@èùä¯
ýá(¶6-¶æ_krxsïð:"£_n~@úäü]\ awóä~®âêxkpßå1lfñ¸^âßæÿì÷yåð¥ßhæ´pñ$ð-v&õx
b¬)b¤2	±îzöà1jqjno*¥­$ðät,¥
i»@ám-eþç£¦¦±&jzl
ñ
g·-éd¤"-dü±ø
(@| àîëd5*2è 1à«~"%ç¯t(]ìébáy¶õ
î3×ôt?½¨ãö\3êê0!nv
96,è­6¤(ùö_j,ä¾ûb51/óøy'á¼ìã9
e°üyç}¹âãfö*j&tx"%«ðøn©õó0«ïúey'½hõ
¿³êndòóênê³"nðý/^sýqyaç]«é¸+å
_9õtsl
ô5/ç_y³c¸^ãq^î±mp×j:¶íæëküm4s[-k´>6â#
h
ænñ ô½âñ#b
ý8dtvê;v
¨
$d!ðøsírösêz
z}w¤;dòì5ëjg¾áë	$ptjiµ7èónñ·åaþt~á"v¯°
sña¡i0nbúë
1µì$¨]0éûó¿#x»n¡ýì#{fûñv}xâ¢8lö5gùþ,a»à
þ¨øci+
~èrßfò¡-êeî òqhª.2òeàiº?
ä ôïf=*c±a`ãµèù,
eyk¾q
oj®ep:éýp6
×d®|ð6þxebu:ä"´wøþ¾ç¨&ð)êe
?ð9f]äá!¹f¿	<ä¹«"ö
dô4_ëæ;{¤ylõ¨(ªô¹ w@.¢³éàûè
óï.`1íï}êxz tª
ãdöâøg
æxò¾v {m
8ä
seðxtçr*êèì³ðçáî 4ûæ]¾ùí+u¶<àwìs]¨<½<%ã§	xs]1¾¨ø¤ùó)c¤ä#¸í"ò8giaò[§ùýç*étô6
øy,¶úéjâ¨r »
3mfi#ãg«¨°`|ëä`è$ñaõ[ã¼eeî\iiq©"#òz6j­óx,sroeuµ²"ôxhûè¯[®§óaÿöu%©p¢"£ã\càåhb=tx©ó¼ncîáuá ÿº+ùcôuø)c¾¢_«äxjdd (*·åcrhëc%a¤³²n%ô¡r«öw`êæ
4eo2`
ß_#á=»otæxs
s÷dg
ö¢#ªët  ziàá²v
yèv
øà²~m»ðü±#y°ºçñîdâ&ìld!
]¡ff½õâ¶ 
y¹úéò÷d¼v×ð ¢ô.öéið¨êh·
oeåôt`coï­¿
½cxöø
jxf¼ú"«`x%à_y¤ã$(".%ýæë}þ¶ç'îùäb+®t¸s_ bím,üä@kùj
ªüxråøjæ
>wþjeåvûøow
bµ¨sîéá~ê{<÷gù=)!çg;n\8ó^¦|5ã&ä¬@h©x!âè.kéo¾©põdþv:zhüÿ]"@[õa+ñ6]/°%x¦uò@*áëûn"nsy§dá³7
ìnáìöâây~<=é9à¬wsb,>®óêcïzà@¹½þ|' qõøjç:%§4v4·o®®àg¡ßþðþþëâÿ ñº¢
endstream
endobj
25 0 obj
<>/extgstate<>/font<>/procset[/pdf /text]/properties<>/xobject<<>>>>/rotate 0/thumb 252 0 r/trimbox[0 0 439.642 666.49]/type/page>>
endobj
26 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
27 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
28 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
29 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
30 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
31 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
32 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
33 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
34 0 obj
<>/subtype/form/type/xobject>>
stream
h0    
endstream
endobj
35 0 obj
<>
stream
application/postscript
print
2019-07-15t17:01:52+08:00
2019-07-15t17:01:52+08:00
2019-07-15t17:01:52+08:00
adobe illustrator cs5
256
104
jpeg
/9j/4aaqskzjrgabageasabiaad/7qasughvdg9zag9widmumaa4qklna+0aaaaaabaasaaaaaea
aqbiaaaaaqab/+4adkfkb2jlagtaaaaaaf/baiqabgqebauebgufbgkgbqyjcwggbggldaokcwok
dbamdawmdawqda4pea8odbmtfbqtexwbgxschx8fhx8fhx8fhwehbwcnda0yebayghurfrofhx8f
hx8fhx8fhx8fhx8fhx8fhx8fhx8fhx8fhx8fhx8fhx8fhx8fhx8fhx8fhx8f/8aaeqgaaaeaawer
aairaqmraf/eaaiaaaahaqebaqeaaaaaaaaaaaqfawigaqahcakkcweaagidaqebaqeaaaaaaaaa
aqacawqfbgcicqoleaacaqmdagqcbgcdbaiganmbagmrbaafirixqvege2eicyeumpghbxwxqipb
uthhmxzi8crygvelqzrtkqkyy3pcnuqnk6oznhduzhtd0uiijomjchgzhjrfrqs0vtnvkbry4/pe
1ot0zxwflaw1xdxl9wz2hpamtsbw5vy3r1dnd4exp7fh1+f3oehyahiimki4ynjo+ck5svlpeymz
qbnj2en5kjpkwmp6ipqqusra6voraaicaqidbquebqyecamdbqeaahedbcesmuefurnhigzxgzey
obhwfmhr4sncfvjicvezjdrdghasuywiy7lcb3psnejegxdukwgjchgzjjzfgidkdfu38qozwygp
0+pzhjsktmtu5prldywvpbxf1ex1rlzmdoawprbg1ub2r1dnd4exp7fh1+f3oehyahiimki4ynjo
+dljwwl5izmpucnz6fkqokpaanqkmqq6ytrq+v/aaawdaqaceqmrad8a7wdg0bvttl1o3oo2t9c+
npcx212tu8kqj9oazrjkgccawumadzxfykodvidtcwulm2q6/mo9okd/0ihcimksj0bj8dbzqnxt
0nmvtjqtjoistqj3s8nyuw3t7manxhwdmwjds0q1stxa2a22riqclesskraykhoq0jh/accxvxvz
a4q20gdgwveunsfocqpu7vgkrztr9cmyzwpfgcaxd4vufianzj3jpiq43koibtzqwnfbahc0rqfv
payq39amrt6plu70rf/1uxv31mf/ajzjfvi/6qyq76zp/waskv3xf9vmvd9zn/5zjfvi/wcqmku+
sz/8skv3xf8avtfvsn+sl21pjfjbme9rbjwo6voxuozfzjanfeeokqeqa1yaw9mt45t69cjaw7ae
gzsgiiadk4qh7zwrxtxuhmv5edwecrcxyh0oz9kv79ka96dyqm2kuxvjuvw+la2zwcyzpjzyeq3t
vjfdikskfpt6mjmhdkj1bkj7rarwoxval5mt4rerzl7xwbls0smpemqtizsvisiigmg9gbwmkrbx
ylfbdszyx2u3ayroj21zfljdxufdschbfgjdwdvc9eukupksosvhupmciwnoqdufs81c8ws5jcu2
zqnfv1v5jsgr5pr+uo0ji0he9jqwsoclgwahrvvx361vtvrrsxs9psyavr0izsj7yakay+o5ehkl
gklyote2ko76zp8a8skv3xf9vmvd9zn/aowsx74v+qmkritq9xn6vu8npsufi8j4soqmkmxhhiq/
6zp/amskv3xf9vmvwi+yynelaqykazjyh5bwjckj1oh4mnyxvz3zp9u2kwglgrqj4v6n+86cuktp
eyoodlarlo4yncqfpemkt/wz/wdlkl++l/qpiqldak9tbyxelnoy4hyk4ekxcj7tcrju8rvqb+aj
2xvgmr3v5dpdejr5mjdta8lxd4xn+rw0pdczuc0sottgawdavq1vvc0x8oz9ns+tzrn6ncntngt+
hyozheibuhorviowpeukpfnqh5lx3tpe99ewzoi2iu/xw4rhmqieqyv8mrovpeukltwcmvzzaerf
jot2kgpwwsg3u/unj9r1mwnjjmm/i0qeo+wnohixvfh8s/kxehyjuj+ywnlpfqkhlvmkht+tn6ct
cvv9vsnf0jyhhyx1vnqemwptytaewwwq+vgszkki1nh4swudboo2ksegx8jrkd4b64kgskpi76ji
xdwqr0qgswpx+klbtunsvtnyt5c/llw7yputce85sdbxee/q3mal+3eqrivph90gzepe9674q9ex
v2kuxv2kpdp/ampfzf8amjd/8nbbfuu84yyxyaai4hkw1a3dq1eiuq4lggiqtes17jfvdznbrpea
byloswr278aozvesgbchbh9qp2uurtvyzvlokuxvgvmj/laekevwdxsuk91xamnngivazcqqysh9
ljwqekt2rirhzno/jg6gu7pnkmc2mbeovg9hqjguklyzfys8g+lxpxfwyxn5nevrezurkncsi0ms
yikeolnojcgqufu1eld/bqriqmv5q+vpvit5dcpeskl9wfvli4zq8qftdgcuo2/8akq6/mt5ycye
ljniihsocicx4tj6nhyrvm5rfec1atbsu2kozpzx8qmgazxejhefdf8arjyzxsivzcbovksv6dji
qtf+zvldm9nzcxtldhcsxvbyjgklapdupebkvndq1nbirjrk6w7s4lpvzfui0lvg+0a6hqh3fcve
c3035w2ery6te6dnbqfvdzoz4fxkpozdi0jrbu6ozta8qoaadqaayql9vb+tt3cimwt7w0u0eedr
il4i0hsrafzptsnyna/vdiqq1x+tj2c2vxpl0ipwgkltzdfsnhluemgzcxugtty+pbfxf4c/jqps
yle406c26xxsimyxbkiw5xymy5oiv3/ahwk/6uyqj0hzd+vtg6alpthdw9z6hqs0n1zvpnpkeqam
nx7lkqdqv+hfwrf8ro8tncwsequzwuyrhxgcuonmgjaeg9kiu/xfu1ttc07wteu7vt5djaekqsys
h5enyovyajzhsdx0o+kpu1z50ham2emw1/zawfvwkmetpgyy1kahu/fyatv0p44q3cav+yqjrrfq
bd34p6kb3kl+8h2olbj8j6dphptvvlelstdg0qhjsomia1ayjca96hfv+kuxvaa7lq0wlzppmszx
6ldfg9ardmvmekinwv33p4hovuitty/modi3fqba39vl+f7kn6angg5oqasvzipul28dukqsoo+f
jfrrcatblz8lwv4pw7cse5mvip0zm28bxwdksnxv2kuxv2kpdp8a8pfzf8wl3/ydtsvrn3p9pdva
9whc20gmg+jgfkxo1aqdt3xvbxwk2+otlpmzxs7tz4hxisrrcofoycftdgmvvz9ctyb76oy5go8c
us6ggnjjacebflu816kqkitmvue80aeys5svukepbmvx9+pdubjayndpea58eoxvjmvvncsvw/l6
2tzldetm9tr5yjhlcjqopj5rv6qye8ug49tsqr28n5im1i9egxw5hdefb2zz14ftyqf4feq3w/j0
zvt1gb8zirys7ftrlt6cjrykrlkxkzy0qgbdyqvuk1ap3ksj0+kyqlpdqxrx8qr9amq2jxyb7k0r
tuayqisvdirsvdirglmb8wovxnnbwu59wt0hcsfrwpmx8ptueaar8g9tutvqcqq2g8/mf1jxnyad
6aqtbskslwasdawpqumn3dfvfbj81y41q2eltphwv5wlmt1dl5uafpdeu2/8cqibc/mehsp6pzti
yul3bdlysnkzp3qaha+hioy/1u+kqdtefmybubbnttnfozihcsjnjzwm+l6pvtueisnhfegrtfwv
4qhluccdtlpiy1iqxytxqbrvgstqdycvee69b+umlujns803glp6up6q0yj1jwu/v4ubhwgz+chw
/dnra7jc4qu1geuxfn1vp1xbxvwcol1arbnwmduwcfybryktxwqge2ksh0tw/kenncw58zrxssj8
2e6u0cgqgqqmw40c0ja6d8vzrhjhlgksth43azhugqykvbbhuhfv2kpp5tfgdbufv76btrrmiws7
tyrkpavvqkqrkcnixp3xvh36m0oa5kexn6d0v/ilwk9jpxinesjo1e5b1qdt04gbuvr1i3llpujj
87stu0p1hib6pljjjzgvxrhwuvxiv35lt3xvmy/jf+husfngryeukqiglipezagoliwaod8nt79d
8vubb8vbmcasc+ztwmndmf1jzwaehwovqagveynan+irtxfu58tajfatasxxupz6nnnijoc5jey4
kvcpkxbj8nfiympokpviqxt/apkrwx/mjd/8nbbfuxxvqtv7662i/ejx3/dj4gfhxfwda5zi58x3
kofuloxstgwulqwggs3syrgzrkjuylnucy/tdrtiqq6vbpd3dklvrhutla3erabjdzflnmlhkijx
/ehr6x2u4rr/zqpzvh6xqplw1t9iub7xbjt5pfs/ejcssrpdyrdfnfpk6ycic0nvjfbvqbtrvval
yw5t6/mdec2wzviof+glksjarxdyefzcq4zm4dd64quw38hpbrzjztctjji8cn/+kifxl+jezrri
frtgfyr779cvuitn8lrxnal5/wbwkefomkvduriim4ckwrauqnatbsevtfwzwxnfyfcwh7bv7esj
weycybemgwjn9onyfg74qnfpdw15aw3drks1tcisseyhkrxuaysphuegoxvvxv2kvmnq0x8vlvlq
6vpml/p8c9xnlcqt3jgt5mqya0saojxr8okcfh/dqrwlsqinfypc3ckqeer2nruyxl5arqnbrfqk
furvijit1rtjx6jfyuvunsi8lwd6ls8896pbckxwzrnvohpyro7c5nhxmjrujctj9kafdrvpti8y
esfl+lcwm8xi/wbwawswburhprbms8jszcqlfj5abdbirjrdubduiprfjcr3mfsvqxmgwo9x88vr
gkofuf8ajn3p/gj/+infwexd0swofrrysduriyvqmrqwwto9iijih5jmtoffkv5cskcm6qkdv068
zhp+xn4tdoijmns7mqyevxmlxy8k8q1g1ffdvgaspleq6ljot35t/rlxjappk7wrorrivekrlgfb
4mckddt7yqzwcckccocfqkushi0hqkoob9axvfiqxeylu5tnklulxtm1w5jkndyovbdg6kem/wak
8ptvph44qwehvtelygeqjhvyohc3ucnnbybjdikycml2kggfa29hvvfc8si0hlg8gsmvjpdzqlw3
jmjhwgxm7efuy0jfcu5vkdemkptp5z1g201bufy9ftlwd5yilu8vqk1etlb9lu9nwr4kkqdt58vl
mck4h8uamyjsnfzfsokheqsf+1sp4ekaa4qth89au8nf/kmqkragngih9kmedsoxrtqfwnfvstz1
cwsr202hx73rjk5ghjdkigywll3hwuqgutt4wu/zcvvuh+zlzwpncjpo95paqwurwyxcfasizrzm
vf8akjyempl8svzbiqhbck118nkyjehff3sb7qtfdq3z/zcrv5zjdlggdoze/ngsla8sv7qydgok
prbavfotndmrqlbagsvwq1kxlklupwpau4gkpu8umm2s2ljoi61fbszrqpkvrgyljworssloq6kd
tiqwxf/b3bg3fydiz2yqsfbephhlsmiypxku3xboxziwaowvrun3z3flp6/kq2jw5v47dktykrts
mmihf5rsrqpobycjoqhbs7uft44pvy9vgwj2+aqtgfunjgc0yklsp7p1okphqjnpyzr2xk+g8mii
amkmcawtiy0pfpg5sg6havw9mvcvm7zjb28kw3k25it4xjgifujuxpcaqbuiwrapvqgb8f2ruqoq
fzv5ls4jwpy3csq0yy0dedohnstqe3ou4k157blriqmplfzbda3asxm2mzacikcitggyajdldkja
a+ixvjm1/qz1k9trrygtxbpctuukfuyy+njienk5ip9wjlpssglg7ujvvyrmvofy+rur5f3d3efg
+yulsktgnmcognxq/d3rxvtzqrbrdy06lv5deitli8zpjyri3vzuasmaz8kvqkjkcr3xvmjdc0ow
rpzdotpjhhf3agnmi4lkekfysr8jiqkgtre3thbeksfyxqfgwa6d2agkqmkofuf+ofc/8yn/aoin
fwnwwa5pctfpus28rkw5kgb97nbf6sclwingpncwdl357iiiqqrpnr5ydrwdtbs7ztwzzocunwlg
2ofkdefen+x68vzjjcqruqsskjscvvmajaiuka/5tqppgkr8vdiqx6/bct6vlfb3yszmaphcklqt
jfjfqvpxd4evffuktldzzfj/pfmc1nseovlelskbnktyikfa3wnst9ruaedfvq6x5ytrbcfmsbdi
vit26l2vqsr4kt/my9vth3xvlnsk6w0sxeglnvfe0oxigcd4mc9qntiqpirsvurq6gtbes4nbhde
pz2ownb4aakk9gnziqryahfyahbqkwb9cgcal0gkvbhvvanqhd46j0tgzo+9mvtmxvre+tlulcko
sviyfwvlpflztucpfdirrvqj7whacpgsaav/dritqq16dat8+wvrgkuxvh+prys7vdr0wispc3rt
1aeseemxbg0ssnwvsdyvhrq7ghxvqxtvmllxdecobi3tifvvstyiwawnwcfw7envh5cu1qrtuq3f
ar5r1cyx9g+cugiuiyl9ywcmmxg4gsjg6mdi/wc8hxgnqyqr29p5ikekuxmsk61g3wqsbyi0ucxe
esilwpqb14mukrh8vfmaszj5tvsagj+jocgfsqacuveg+1t2xvmnh0jzjbapjc6nrf6rtpr9o3tr
blb8xzgzsmymq5ooa+hb6tiqeyq7fwexgj67dnup0x5xjgaadojomf1n0ysrs8dhnppsqrcp93x+
zxjwnfvuftvolpan0pntvifvijh+sw8sqsbcywc9zheqsy0qdyfcuvv4nf863wmcu83jk0xlrdx2
mi/dvegvvcuojhmrwvxddsvv7xy951hmuyeatpbjjte9lagahif4s6kevufuqpv2ptiqp+gfn7w0
an5lk3ssymbioziaajuhgmxszl8junl9relffvrh0lz6yi/v8zxrp1lc2mliaey1kekb0b5vu71v
thil638vmg/uvrt7hbmtxdhfi9rwhq3bfhwvgmvydqy+q7ltbrtjcy81tblshmekdvtjakhjhlb7
cxorngu3wobdvj73tpyu0ywsyn0m4is+i9asrfvmolysi+h02asl1fdvbjx2uhvdvc1j+tbwy1w3
066c3edqlwi3isgtptk5cjw4q/kdfjzfiqeri5yqyzfza8j6hpdikt3eentrpjafla6mxgjoccqj
kbxtqn9gkpt5f85axrd1jaw8dxddrj6jxzxfrxbuvdiqhdula+2kqnncfs4pl1zlqljlqvkrrc7g
bpvkkf1v9jvsq1jl496eo1cvecw9p+tctresmh3knpgzzw07/xgc+pv2yljhlapwjenkctmvtbrd
8m6synpjuhsxdfcl0/o0mje/wkjmwqixpsgnr3fvuy8ra95h0o5fsnkf8h1a6n5gsse7avpwjadf
kogujtn277giqbwp5j+xlodkbi2b0mnzzojfcxjkiuboayx8tfzbb16yqsi/mzyxi5wtygesthmt
5lhpuakxquwrtc9kgmgxvc3xnry/q4vlr5zbzxebx5mtp4ywasq1aveh7utjix6alxfu9xq7y8q8
2psxmslxaueuo0kcsjiqr4feb91ixsmntt1ruga/eip23/djiqvirsvyb5qvflvvxgvarpqch164
ys28ty/vzgi5azhcgay8ayqlnjh+vi1kc1g8t3ampjtipmif0wsw+rpupjx9k7hsva5byqten5se
lneplfwyrgxxst9uklexuwjaq3qd4ix5dbxnayqngian5h0sewttdiubcwobfxlq60jmkqi1dym7
7/a2r164qmev5oabdcpbywuopi7bvras0owvly/yikg67joahbfu30xzrp+sxekfrfciy4knek0l
roysmyqvy7hddiqcyq7fxmmvq/l2t5dzap5ykk1cf1wxsiszvq9wxqzfybecrclj61p3c4qhxt8r
rq0s8j8vxcshqc2lcx3emq+ovpyvnsrixraa79/mqypyvrxlgydnp0ttlmyj1o5aviyhrtpjgw5y
8zzuskprhuchiazsvwzyq7fxyqhttzu027zifvyzczhyabtuk4qxzwvmwg+xlxlca0vfg9jjvnis
0il6srjxemj5dcv2wnbqqcqh4/pnlx2qejqpx8wcpwcvukavr2b5avfd0xvfqxnbqlcgsws31r1q
r8ar3xxpkkog35ftsnviqrpvm/ql66t7ur39vnduugfwzog1knys/wgrx+0o42nfwrdtbusgqep6
hauv6stsbugv5dbu4qu+owfzs/8ai6x/ajqxvp9otzezh9r0cfwvpzscdsqqwxvqptbwony4/usn
afrfllaaaoaag2axvd9rg/ml/wcr0v8azvirvqmh80v/acol/wcasvd9rg/ml/5hs/8anwkpxrgl
2u1zapohnjqssrhm7yjzxiqtxcstqhnnsvy1cubs+fgnh1b7b54recwxncwqsgsskigsexrr8ikr
8hqhbomvt/q7o0s9bnjtiut45bwmvheorsy3zupeufqpp8vkmvtu2yga7h8sob6f76q+j/h/eqq+
kuxvjdemg01gvorcw5mmdeslvzg7ejc8g5uzer4x8vr3omvsg+ddcjgakdujizzlijmprxur25jd
arymrvy9yecr0dhtiqin5h+vwhmuamppbrtcd1okuzgzmmweto3c7u6gj7vbiqij836lpbrnha6g
ypy/wgerpy1yljhgxblj8co0yks21awfqmvwr+eplz6hfzejqporgjsaxbrxavilhimqqtjxknht
fcgyqyr6jb/nl/yol/5qxv31gd+ax/kdl/zvirvqmh80v/i6x/mrfxfuyp5pf+r0v/nwku+owfzs
/wdi6x/mrfxfuyp5pf8akdl/am1yq76jb/nl/wajpf8amrfxfuyp5pf+r0v/advirvqmh80v/i6x
/mrfvsul2uygodwmiankkwsr0ahr8ssxu/tirej9z1k0zyp7bvtqlkkxntfosjncjtwuisyhlkta
xptfciqqct/nmrv6yl8u+y15ba7rxkhzh6j7mubiceinkk12hdvht63qmd7cwq6trsgiaryrkeei
5jykvxdkwdk1bcku3xvzyatdahla8mia7dipbrpxgjrisi1q5ua/fvq9aa9qqsr/aep/amvt3/yn
/sxvj9ulvrhuegs31o8tgidtc28njg5fjwcfquw+inmnuxokpv/ia6zqpofmyxaqgzkjrvjfvkq0
lsp5q0piqiporaswclsvmmtzaw9eona3cnjvwbfkhap4gngtdunxyqrs+zb2k0t5n0pzgzzzfski
ruf01vud5cvysu+mqnw8myuobviqmt9ykmvlw2/r/mcixevpvpkgwoifah5gdn8jpw7do/vesrif
0p8a8vt3/wajf7mvsrw9bguefrpc3mku0b8uugjhcsjxso8vxvii/wav+m88r+ynyysdhcovjb6a
uhc8utv7n9e+kpz5t0dnj1f7rbu6vf8ar+znvpmujswk6c26au2a2xvkdq1z7svrxmapwtp3uz/n
enxwx5ftmqimvdiretdu/mcrxf7p8m+ogo7mp1ccuqclekes7kqjl5gddgf5gnuukofta1xrgw4g
0bv2lst0o4zj1tkaspasqjj8hkeaeak8l27yqowmqeyxbxbpluqww9tjlh9zjaao7pefx4uthbnw
8wp0xvhlf66bekc6xqywrmbj+sd1aavchj6f7fxu5uptypu8vvo+1lx4pzirbs9ulks+mshm+fkd
gf9l7rwm/y124f1vnnb1qso8spstwf5ag3dqgxzvracko5rubhwpserdlxx4svq3+ipnbamvl7v1
ogkdtcktq7cn1uc++1dvfbfwa/of/l9u/wdkb/zirhry/wbvt7l4y7dvbormqysryhv4o78ejkvv
ctgikub7tafzfvucnf16q2zw2iavpbdr81nfwqkrbnfhwredqwqffh5b/eq7vvra1hzcb+kzbstt
jdsqpld/wa8crjjr2dbor4x/fubvuh9nkqyf9d/8vt3/amjf7mvd+h/+x27/aorv9mku/q//ac+3
f/i3+zfvc+0y4isp5bfulmoeonnidmwrqyio5iwow8rirgnvsvkd7j6wpezl7tjfstxcwy38lpbf
reremfekrdlu4xc99svupnp8plkbipzlk+nwpmmp2bah9ywx63g8cfcslffnykgiet9byxvclxyb
exy2mfnlutc0diiapigcsdirahxj4n4qt32xvsbqvksjhny+dri3ehnrez6msiqhzxagaf19nuiu
kf2ap8oksq8tav5ce1t9l03wk1sagp4xkuvulmvfckys1etikinmntxiqm17l+jh43y6cecz+tuw
vvakuscwi+0tv+nfuit7xz8z7eetwlb4koxrimo8tj8jr3kvwqw2o5ovikfvw07z48ccnxrfqlj0
mf8acp6zmoup0ktvoti3t4twvko4qqn1pnn+crmmuwklssqr6aekybhislq1wkqforiqitbfz5kj
kfult0umbwt7hggegzwj/d79+o/lcdaopvuy9n/mwwuudcsvqsnqmsufwajppcm07cnikt/hfurp
mg+zpzmk1/uy5ihiktgs1mzjkcfjgeslwsqfskhfcundiqmlspf1e2trds+llbzyvtfxle8krvw8
jtiqostkgtlme5ekks86ojpiqajhykqqqfubuxjpu9+goqrw7ezxqjqflag9ad0kp8zu6+a+xcqs
q1vufoo1i7j0erzlskdymjdiqxgw2zijmujb9sqnqr1fabcql7aj+ayokjc7renibifdskrc+nzt
rrwtrv060q6qpmgvn01uvtb/aencll9amua6qq7+lpzx7qbtinqler2xwriqu+j+dp7rbdfnuqui
ecdzilrggmjmjituh4ssbockubw3xvblpvnkaoc20/ztarw2ob13t452kd2k4yuokfdw4btyo1ca
v3xvuttvpujujrnzrancyiks/ukqjkylrit6hqpukkl9b5dcvabtfo0cqd/nchpygjfunnccgcaf
aa8fjkycqwo3vviqmtidt06/s5du11jll9ajrcoqcasvg0rub8ftvckdx3o2ksjxv2ksr1kw8xtd
xu2l+zrez9gf/s0ni+skobhikuipkfikxokcopiem1ag4qtsni88qna1z5rgnw3ufk1jtzx/viwa
zxahx6vv6hsn8vzfzxxhh17jffvpngeqwmrrk4zksoqqpaygexyyqvxv2kofuf8ajn3p/gj/+inf
wft6v5lvl64mwg6nnpxgtlhvl2mppcawqza/en7dooayctb/rbvsl8p+yzboy9a8ueu8zpcwtdwh
jgayagefi8zc71k1r/lvirf+f/ned2jine0cooj4zyucngfuijcf3akekshwwrbelqe0ukp/oxl8
/v72lwdj0qp1jxsiwci4swoqhjkrg/e5b5cp2piqy6f5b8u6bmj9o0qzs5lt01lt4iomcgg4hkuh
j8c7ewxvt8z6lp+mao99qeckttdnbepftlza4jwi/eycgkkk79mvydbyfkzazgkjpyj42hmtjfpe
qgb4ifizsqd0ee6lsnziqhpv3+suvgaylulormfm0kd/jwfybkazypy4ughw7im9pthfuza3h5rq
igag6ug+t2k4iqt+5acktvm7aowqpskhj9wb/ltfuulvpygt4hysxkkxnprrgl5wroekzvzfqeny
wngdxwgh8uks28g6j5lvlk6plazprdzed0zrorgssr1jufvmqd18bttirkcvs6f/ajsky/5hlv8a
5o22kpjiqhbkma6r0eop8vstfwha35gv7/x73uqi2s4amwkxlqoojwh+w3lknnd+y+4p3aoqlc/l
rdigsm8szbrmf4f/brzrryhesqa2+fakkaciqsnk0xs/l9tz+ydpoo2drf8aowkobh45i0nmacly
7cmiyogveqa0a3xvaw+n/lvaxksw3lw8esmkmslcg4njllvqss/eng8uqntxt+y9fwtah5y/lzwi
tf2olibfmvyuhrjiag+nex+ukq+4ozaeuxvfxfln5ehuo7uhr4yriiqy5iy6kfh5jow/a3pj3xvb
l+v3kkv2d9hjlovbyhlhjqzma1hfagq9f4dfvw5/lfypc2ktnnpejtzolgeef1xggaukfyct8i+j
ahfwsyq7fxnxmg5/lmlvxtv9hujbqwrzjphdplrxmuys0zpakcx90k0/zgkoftn/lgfuidcabegn
orgkzlzz3iinupcoksmylriorkhvfyvvaur+wmftcawplvxlfl8dxzqjcubsrlmctivhnxjzqptu
j+fgqqleh5yafqjxeoitlc6bcoouyo5dgk8cpb4sh419rd22uvaib4qnx/k0vlxqnh6v9yqhwpay
hcygmuon9xxbtiqjp5gapwikwc6aoaatobeq5lamsyjj5citt4bhfy0vdd500nuxnp8atqxsltnk
ij09nuklrikn4hu9rt+gksq8ywwas3nzdn5nhuviiezdhkxqyuledgaxqlxxawu4x4+hxvuwytvv
plz5pnqxubnlberss/rpyh5qtiok/vuphk/2hsh3bfvk4bsdqc8etecrq3nz6/g19vbwn5pkmfg6
bo+lnlvtzty74q9k0lsf0jtiraxdzfekwjur2qszuxyss7gkdufdfufiqd1h9stt5g01a92gtihc
kloa+pxdngvp0+xhkwhkldsvy4t555j1keahy3zqskarjdg4jwaz0ff5ceveu161ib23qukomtu/
p6zoi6jasrivksrd05ryib4snwtsh3298vwwtea7eao3t9bsrgy+smivdmtvtel5ct01vbv1dzxb
+fvguyq221x8w3tivn0s3juyq+tj9zux1feewjyv47ur1+yxveafqnnetviol7q4lft2zhldx3ay
fvafiebvwnsq/f7yqypfuun/aouisv8ameu/+tttiqy4qow6ktxrioglbg1kj0kh8q16ej+fykq+
kuxvh2r6pewyxvrp2o2ljqkxskk0d48acoxgzo6b/wblpcnxahyn3fmvsq086eepbqag4/w/bxxi
lhc/xrjg5zczoaegkpfql8ar7csvzzpmv6phyqld6np63fag69canizkd5gufiafqnc4qif8sexf
+rpaf8j4v+asvd/ity7/anxs0/5hxf8anwku/wasexf+rpaf8j4v+asvd/ity7/1dlt/ajhxf81y
q7/enl3/akulp/ypi/5qxvjt75p1767mlk+0e2yleg01yezaqvdcxp8wwjptu7hj8sqftzt5u+qk
jl7y8lt3pnlugzi0puubdtiamnvdhxvtfuxovmluvr6vq19oygkbzzbeceusaxhxfqcqabu7n+wr
ksgxzf5buuxu7mcpnbpenyak/a8cvb/xj5d/6ulp/waj4v8amrfxf4k8u/8av0tp+r8x/nwkotut
f8sizuzhf2jz+g8aljy2kyebioblhk3rr1okpbjqgvlcw7wnmhtbg0pprpyxycbmfbcqutgdf3nq
asos0+ekqcwo+z01bz2806k9tiy/rnuwffcoofonl8poouxrq9264qitroumsp8x6msaiovwvmdh
xbdl4qttxnnq7vzvcr6l5sari/mnri4zedmgynjh+7ksqmwcn4ulcitdv8irsqyhq/mvsnoqaxq2
nvf8porhmjvoacilbmfimfettblwm2kr9w1ly3qni9o2s2ssu0bllmhavpyljwzwjdi/hiw7qsmv
y+dj0z1aw8+xsxipgsc3lsedgk+psvku/wbnlw/yabyqp2ug6nbtsph56vde8vrrwpfwlujkdyop
2mu+pq8ia0fanffualprddrzyeb5jvs5+tna95ey2czethhxrsqfzhivwtf4qoh9d2ouimtz9ccf
qpudxktoxwrxablcolkvfvgrtvuaqtzabo0jop8ahn2slurel+ohajognatsaendqffxfu60kbrn
kevq+ap0kzf2ry7hfiaajiava6n5/iciqywxvvf63dcwciz29tbtrytxnlgxmkikqrj4wielcgdt
txriqbyqh7zsjrsku5sgg0px91gk/ysvtxb5/sqqimvdirsvdirsvdirsvdirsvdirsvdirsvdir
svdirsvf/9k=
xmp.iid:6ef3a395dea6e911a792b1a84b3d0139
xmp.did:6ef3a395dea6e911a792b1a84b3d0139
uuid:5d20892493bfdb11914a8590d31508c8
proof:pdf
xmp.iid:6df3a395dea6e911a792b1a84b3d0139
xmp.did:6df3a395dea6e911a792b1a84b3d0139
uuid:5d20892493bfdb11914a8590d31508c8
proof:pdf
saved
xmp.iid:6df3a395dea6e911a792b1a84b3d0139
2019-07-15t17:01:45+08:00
adobe illustrator cs5
/
saved
xmp.iid:6ef3a395dea6e911a792b1a84b3d0139
2019-07-15t17:01:52+08:00
adobe illustrator cs5
/
print
false
false
1
21.000165
29.699996
centimeters
black
default swatch group
0
white
cmyk
process
0.000000
0.000000
0.000000
0.000000
black
cmyk
process
71.093750
61.328125
58.593750
85.546875
cmyk red
cmyk
process
1.171875
97.265625
94.921875
3.515625
cmyk yellow
cmyk
process
4.296875
3.515625
93.359375
0.781250
cmyk green
cmyk
process
85.546875
3.125000
87.890625
6.250000
cmyk cyan
cmyk
process
81.640625
14.453125
2.734375
1.171875
cmyk blue
cmyk
process
95.703125
95.312500
0.390625
0.000000
cmyk magenta
cmyk
process
1.562500
98.046875
3.906250
3.125000
c=15 m=100 y=90 k=10
cmyk
process
4.296875
97.265625
84.375000
18.750000
c=0 m=90 y=85 k=0
cmyk
process
1.562500
89.453125
84.375000
0.781250
c=0 m=80 y=95 k=0
cmyk
process
0.781250
79.687500
93.750000
1.171875
c=0 m=50 y=100 k=0
cmyk
process
0.781250
50.000000
96.093750
1.953125
c=0 m=35 y=85 k=0
cmyk
process
1.562500
35.156250
83.984375
0.390625
c=5 m=0 y=90 k=0
cmyk
process
6.640625
1.171875
87.109375
0.000000
c=20 m=0 y=100 k=0
cmyk
process
19.531250
0.390625
95.703125
0.390625
c=50 m=0 y=100 k=0
cmyk
process
48.828125
0.390625
96.875000
1.171875
c=75 m=0 y=100 k=0
cmyk
process
74.218750
0.781250
97.265625
1.562500
c=85 m=10 y=100 k=10
cmyk
process
82.031250
3.906250
97.265625
16.015625
c=90 m=30 y=95 k=30
cmyk
process
85.937500
14.843750
90.234375
42.578125
c=75 m=0 y=75 k=0
cmyk
process
73.828125
1.562500
73.828125
0.000000
c=80 m=10 y=45 k=0
cmyk
process
78.515625
5.468750
43.359375
5.468750
c=70 m=15 y=0 k=0
cmyk
process
67.578125
16.406250
3.125000
0.390625
c=85 m=50 y=0 k=0
cmyk
process
82.812500
49.218750
2.734375
1.562500
c=100 m=95 y=5 k=0
cmyk
process
95.312500
89.843750
0.781250
0.390625
c=100 m=100 y=25 k=25
cmyk
process
89.843750
87.890625
9.765625
31.640625
c=75 m=100 y=0 k=0
cmyk
process
75.390625
98.828125
1.171875
4.296875
c=50 m=100 y=0 k=0
cmyk
process
49.218750
98.437500
1.171875
4.296875
c=35 m=100 y=35 k=10
cmyk
process
8.593750
94.531250
12.890625
33.593750
c=10 m=100 y=50 k=0
cmyk
process
1.562500
98.437500
44.921875
7.421875
c=0 m=95 y=20 k=0
cmyk
process
0.781250
94.531250
20.312500
0.781250
c=25 m=25 y=40 k=0
cmyk
process
19.140625
21.484375
36.718750
7.812500
c=40 m=45 y=50 k=5
cmyk
process
28.906250
38.671875
42.578125
21.093750
c=50 m=50 y=60 k=25
cmyk
process
39.453125
42.187500
53.125000
39.062500
c=55 m=60 y=65 k=40
cmyk
process
43.750000
51.171875
57.031250
52.734375
c=25 m=40 y=65 k=0
cmyk
process
14.453125
35.156250
60.937500
12.890625
c=30 m=50 y=75 k=10
cmyk
process
17.968750
44.531250
69.921875
23.046875
c=35 m=60 y=80 k=25
cmyk
process
23.046875
54.296875
74.609375
36.718750
c=40 m=65 y=90 k=35
cmyk
process
25.000000
57.812500
83.203125
48.046875
c=40 m=70 y=100 k=50
cmyk
process
24.218750
62.890625
92.968750
60.546875
c=50 m=70 y=80 k=70
cmyk
process
41.406250
65.234375
75.390625
75.000000
grays
1
c=0 m=0 y=0 k=100
cmyk
process
71.093750
61.328125
58.593750
85.546875
c=0 m=0 y=0 k=90
cmyk
process
61.718750
51.562500
51.171875
64.453125
c=0 m=0 y=0 k=80
cmyk
process
54.296875
44.921875
44.921875
48.046875
c=0 m=0 y=0 k=70
cmyk
process
48.437500
39.453125
39.453125
34.765625
c=0 m=0 y=0 k=60
cmyk
process
42.187500
33.593750
33.593750
23.828125
c=0 m=0 y=0 k=50
cmyk
process
36.328125
28.515625
28.515625
15.625000
c=0 m=0 y=0 k=40
cmyk
process
30.468750
23.046875
22.656250
8.593750
c=0 m=0 y=0 k=30
cmyk
process
23.828125
17.578125
17.578125
4.296875
c=0 m=0 y=0 k=20
cmyk
process
16.406250
11.718750
12.500000
1.171875
c=0 m=0 y=0 k=10
cmyk
process
8.593750
6.250000
6.640625
0.000000
c=0 m=0 y=0 k=5
cmyk
process
4.296875
2.734375
3.125000
0.000000
brights
1
c=0 m=100 y=100 k=0
cmyk
process
1.171875
97.265625
94.921875
3.515625
c=0 m=75 y=100 k=0
cmyk
process
0.781250
74.218750
97.265625
1.953125
c=0 m=10 y=95 k=0
cmyk
process
0.781250
10.156250
94.140625
1.171875
c=85 m=10 y=100 k=0
cmyk
process
82.031250
2.343750
96.875000
8.593750
c=100 m=90 y=0 k=0
cmyk
process
94.921875
84.765625
0.390625
0.390625
c=60 m=90 y=0 k=0
cmyk
process
60.156250
89.843750
1.171875
0.390625
adobe pdf library 9.90
endstream
endobj
36 0 obj
<>
stream
hþìñn0ïów³ixaujú&e«újû­cåøì6
ë«íb´w¶ëå¤i»àþïççxrrñtí¹k¾-d
ýø	a§ðë|
wõï÷gíoîøqïâ
^d³¤!myürðbò¤æjíûnã.åîsxù.¯«k°t¹z
ã g~åo£ø
8àç(\xad¢	ïáiàlæî7äæêý	çf)üy[|¥·(ãá
¡ç2<ó]zúxò¼êeîu®¸aº¨l¡$hçt­jb8fêùà©j-:jî¼äòøä[ý¦9µjg#¹|ë¿£÷
¢è>k%·têìjê^; óâx
=õjð³àö-¬àï¹öofú'êm
/çz
3^çy¸)×ï+ó½±zgod¤ïzp¿­k²¡dòø]úl¨¡+
çee¿mwj¬ïíbôæê6úúæ
æ>nðãô÷q× îl áp<ùß2&è dl	ò_afép½æòý©îòü[ °õøð
endstream
endobj
37 0 obj
<>
stream
xì½û&7&v_o72«1ÿ nd³sxíæ$yól={qdålv'³ª9ôcì
=2³=d÷´ã¶&ówd  ãáîðãõ?¿úíÿyûpsûãç/oï¯
î^-wÿyþÿ¿îÿÿã«ëq
ëü§\ýøª,wÿêwÿm¹z÷ê7ÿù·åêûçwåêîõ?ï/óåjý/[óu\mµ\úo®c\ý|x
'>¼jk¿¶.e=æïûw¿}õ½úoß¾úíßùú·ß½ôó8õ´]úz
cwß¢£ï_]_fçíêûùëû_ýîõß~øáîáîæíýërì¼y´ãõoß\_¶þ¯?}÷æúãõçß>üâéþúo?~÷ñööáîã÷oþû·ÿu¦óhk§ñà¿idër9£±u
ò
éï^~ûéá§7×m4áç÷o?²^*°xëë»7
~øôðöóí#· x+x ¯'ü²îñ~þñmy.ý5
ó?¶ð?åuuúäó¡úúáóííã#·è~|s)¯ï>¿?zï¯ïþì¯~|w÷¦v~eiãõîþ}zñf=h^¿mãxæjý=~º¹/ ëõuóîhù¯¾ýw¢$böíû·oo>ïñ?~¾»­ëb}|(¯¿p¢åídæ¸ù?^&¼é²nçúúûô¦®ó
oñßf«=§þ7¥ú&fþì~v|¯¯¿9½ÿûoà>e ç8ýï_þýýòp_ß¿½ù§ó³o? _>¾£üüvâ
o
bíò"ñp"8ë7?\_ßþ¿ý|z0ýíÿôoßyüæ»co¹#&êýîf`ÿ@#yûãísüß­<ëkûí²rvï_~¸ÿôp0éáv^x3zûpó
zýï_nç4>}óôë¨ ½×w7ä7ßþãüéwz½lî´óëpß>¼iûe'¤ïo[è7vs¢o¨µxë[÷çïw¿3¾ó|j{ý
ö~|òwyæ´uoßñç6òïê/ýr§:²!ê8¾»$wûðge¿¡=ê\â¶.gà,ê§¯âè@hï30°¿ys{=
£ðí
ø:,ì3¼×ó··7>¾ë
ú.ëa¶'
úþóshópvöî~9	þóo
-îmþííý¿gw
ä½7ûv¸ïáùkþ$§'ß¾h&/ãþâ¯ýþôûéþñ>|ò0ï	øhîíïïn¾áþúëòkzëêóì#ïdñþ²áìâ¹0vnøã§pëeu&þú}¤ge.lkvgüù³d}"¢éb¶£ïæ}01ðy=yúýã»3øöñ0åì78qlûga¨qdóçgßé~üþëýãûsçßvþ&hq&sm{ëòûãwy×àcg×áoîé;m
è§7ëüþô´ôsx¤/~´ðxõõ[f'ï«1oßõwg&øúp´×ãòùà¼:­û?½üpûï_îè oëãoó»háö}ë
ß§@øþôéãû?üfa4[ãaùñ»o&s¤#t¾­tä~èlá0úýdìb§ ³ç
ßyxdéàúeÿý3=²¬¼i¬­øxé xûo,nï1ú/ï¾ÿp;gæ@cág}(°5%bþ ­ú¡ r²ìðdgþh§å±û=
q·ç7¢dçuüßîóævâÿöþ¦rýmrré<h¾ìïb¦m»õñ?½ë{¦m¹éíõãt@nó£k¶
wÿbû;~bçñáöóûo'øã2êc qáeãy@òc?¾òüèû¿ßå²cx÷×§1ÿóiªweü¬ºla¾ÿiq'{öñëãeýd/alë±úiu¾9êpó5lt8çôíýd¾¿¿»yøô8£
¶y~ã_p
ý|jcúún!²£ûöüûæóa¹ ëö¯kûx4ªàa¥æï×oïïoã|:»(
9öù!]1#àå©nuó§ûw×?þ½»eád?üôiê°ú*é2c³)|¾#iöpýôsäöw?¿'#
6á@uðb§ÿðæâý*jÿêý»;0óçþlýéõ
ún(x^¾zã
´íeâ´íñ£»koß}º¿'ýñî¿¯¿lù¯-«óëé* ª×õ÷å`fksfö)¿4·ó½î¦×'d`÷?ñû»ÿááö3w`"ý	¿ñcª>é9>¥ó?¯*ú¢î²ºøbìn¸wè
d=ái¨iü~÷ýí
«óõ'â
ß1pqv´ªçï'¶j¬u~õ»yr|b
·úöü?¾< ð¬w±¦
cò6âça}¼å
ð]î­&«ûunbâãg~¾ã¨º¿¶oßwëf,¸iünù»·ã(ö1x3#¹¬£	iq#à¡`£x_?ae_o¯½ "±è¶^:=xõåð 3§t#ïy>è	èkpþéñíþf­÷áód·ï¾¡çù8ó¤s¼®c¼}p¹ öúöúqºu>æjo|ò»y®n2çªãá¤`qâ¸>qå.yæá`ëwáîý¼|¨z¿
këd]êasêº<ù/ïnoæúb·'_ö}w½o÷¾ÿ6áwô l/¾bó3úù0[+cgï~úg±¦âýx®ëa]úqiâu¸x÷ì>"ûbdq7c^õõd;kù q¸qbõxü(öûè
¿ºôs
lc1îá+¿oké£ö#ñfï_î?óá3gñ_ÿñéú£é·,ú~mc3ú{
fa¿âbrü}s&oqð¾êl0?,,/"ìåo¸ßn·2;ao~üéã|hìd8øzq÷¡( îººû½ûøx÷ýûïdúa0)únâîm~rîªçsd~®[âaøi%eaw|ì;#ää
¶à=üó
;t4¨ø}¶¹)þçk¯?¿ý§hc5êíéä?ûö'z³?a¡»iå9	yi¿
4dáøåmý\,{¢);}+¯¬im°ôè/w±lc·©­ecê3ï2çàyôè'áàuÿ!±)4où?s¿
¿a¿ÿñl*bbña
t
ãiè¼¹ÿbz
üîãil¿ýcèf¤¿ê.}½ùö{·ð>à

71éõi¾;%
¾·e¶ã~1²úæº/îbÿ*ýmapó"¤{1=
üçó]¬'k?¿
,i÷lÿödu/ú&9k+shká^êé
üî¹x)õèè
!}ð÷d·a­
¹|zeé®àöüü±yþëm:£þàüó© 8»¦p9ãð^´w¥ù~÷ðécëãß§ä÷â"w©ÿãëÿýîê|ö
¯mæbvå®kdåþáí7¬®íàôµáph|`ýºt
~ãüû·´ö$ïq¿¦öðì³¼(±
*©
õkb;lðî['ñwwßy¸}au{í­ìøâjæa
àæà§út5ºq÷÷ôë,´þ
ä7¯ã
èxþ"«-ýlôtêî6þo¸míôs¸ún_»£vpôd3¹5ò[«>y¦ë6ñ¶á;[úçów¬û!ví¯wß'~{þzxòíág3>­è`àb_1!æ[ú±ïy¤aåwþ~m àõñáïïosý![
i~úàulpéáê]ßé)ï>þþw
íoszàf*gô'ø*
ìeêy°jåw¯·ð'
ù«õàozv©þu6l	óÿïoz¸zänæá 
njîc)úãy*gcsk²ý=äö·¿¿{úøjðõÿe,ûçù³ùé9[y þýþü=â.k¶³uå¡ömêþõg³k²+\®mågï
t/)xáðû|.®zøä¦äçåkøø
ð
î5üu¾wñ5pãë:úl
5íhýûotiöjÿoqu#ád`%«ºñá¯ø§éñ²7ç·íýòûû»1/¤
åi*_ü½ã©`r síóã§/ß¿ï=°
ò\7æ©û¬áòòöþu[áóbbrà8úéõ/í¯]!ølm<ý_^r/û¶çýo¸m8^h4
~>u½^ö½­óàø_ºâ}ä1wµ/§
ðë;³ë±òi$ïãû¥nõonùâ=
³d
vaµ«ã¹?è[mvárcd<ò!ïñüpóvîw§×láàçü÷
ÿ»èöeyxoôïñé
ñdòß~ûê²®´
àé­m´í·ëº]a©cntëá³cáðj-ùóù¾ùðºôií
á¾îui$û¿þ_d$¿ùû¿¿}÷îöýßl6«àßüý_«ÿô7ýê7r0d þl>ö¨9%¬êùh·iu{+>òk÷}î§2uÿª`e²¨³©í®ûässâdl7]o
fiõg×¯róajüd
uúæ)>¦¶oã*}øzîíi©®ª	pkù¾dh¨-87ñþ¼jma÷¹% %~~¡ÿý¼únrãeù×^®ææôå®äç¸xë|oìàbäâ¿
[¿
×½ìr+a[o
oöî®]h²\¡¯êúé·õ¦\÷õéúy®xí¡sxc°¿îëæmçeóù2¡m°lãü^ïmjguð|~­«bvdê>ê*ý_à£/®ëjäñv"fû²ë×çñ°òéþîð°4©%¯ì¹éteó¿>±ggõduy¤»;´ønûlúö°1g0áç
j(¸5j?o2u¦6ðð$ò·ú@cëáªgú.ú³û×v
+hr
ósã4a´´1wó¶gý¤¦d7§[­üý°¼yðl
yn5'¼u
ðãb¬|å0ý
©ö?
ïxæùë>g òç¯ãrl³yþ
w]´%! ¶
"àäócsâòñã¹!ö/ÿùyþ³kõçcùié¼ééò
¶c­`3k=±| ý srìó¥ó[:8ëðä¤ã7sãyõ2ë«ö§²üñå3ë?ênï¿ï·µi-yiró¸
o
'?äñb\×£ôäóájûïs*=óççgûîl¬âòµá)ë×_åÿñr¦ôá
á:c_éwäòmyjé§'
çmç
-éñwéë@yý;å
]¥q¦]8ë_
¦ä©ãsc^¸
×õoêÿ¾æúéñ
ë9¢gx?²~?aýò(7l.§òyüôïécäk
lqgè©'öàú¢gp@åòûîóïwovþú@ië
ñìqý·üjzæ\høa´ô}©z,sùdß¤	¢å´åsc üùþ©é@düiðñ§2ãoxaæøkÿ
f_ó»¡ 5
¹-yïofäûgùõ#5<5òdî<nîÿçì<¿6ûo«çmow/´e3o: 'qðï1óèðodëùê°?=þáçï_ã8|¤å97e~ý©ágfúó
>¯|òê
>ý%oâñàøééàxp2ø$¶,>çhòyr¸íçï fô9ûócà%£o0´©äù 1:ac%×ssíá_ê~ìw¾m sº¬«1l.[åënã/cï¥és!å	î&"ª<¹íôüjò7g¿¶o¶²éæàçm~*s	|1ý®]¬²y¶á§õäívy«îø.±:
a~·î÷_sûùjê_wvåg[®î`øe6àán*ú¦âánt9z¹æì3|tçí8î¶3þ¨y 
ñ@åb;¦\g1[[qý
d8
åçzlp¡®öcçaâ
d[êùwu]­ëµ«
ws²ìyjö´è
z9:>~kõq¬&ä;ç9paíåàm5ãqwûmìu@*þn}èû­8¡]§q7]k­>¾ìí¤ú¶íx¦<ì	ny!eîwq	§ñðôõñáþ»n½æ¶rl¿áòeáört"nøhxûj;f[
û^}9vqï¹"ï2ýfãx:è#¼b{ò6æ`ã=?ý
uj¸¤öø}óøw#íijncýi¥«¬"
xm¾áë»k_td¥ñ¶è¤@"$_m·lºä
ªkø\;kà¾
¾·f;urí-ö¸ã÷:äô®±à4c;u[ùå©¶e6z®û®ô
ç6´1°&g}!¦own6§9ëýøe\üq®û«úú í×­tû
âz0hùvâsºúíüèígæ5¹ïíi}íá1n«hùeóm@«lx§<þw=$.sésr£û«ë
'îèxçjôîéi¦m¿[önjï_u7
ì#¸ïspbªèdc+j¯û¸8ïwóþó
ürõ\væxsão37üôì
ðìæ¾9xýðe9v
f'.b*ï$¡_
½)t
síoàè|õcýímíûìã¸dé<½0ìñõiñåøíþeì%¢iòú
9fgtïg·©âm4
ÿk¯	
?wvrôaëä	w15îxyè« ¨+
ähd¦7)k+6)eeà¢qábaðv{úvãn\6`­åb|ôö=ô¨$}ói*±y£¾0@«iê²eaöâqô6è·òùç
#þkáxxéáöý¼oho²³ñùðúvæ)
;ªór`_o+¬î¥®ûõu®ölxhuo)1t
v¾ò`y·ò6\d~ ìc
3á5­isé¨ñ5<íb$÷¹ò8ø	m¶¡!þüèè¦1¡µ)cçù
ü#,:wàkvýh@)þ"_ã~ûcìº»°ó ð¡w´õ>µov!í])·e<æ¹5·'óïw;à
í=â ¸û¾[©íobwnway"uí|õ xý>àp§ò×é
aò
s
tàôîè
â1¶n@>dågþy[x¾ø;,r=h7 óå®móäwç*ànëê;
+øøh ´ëìëøtæ§!j"aõt*}	êã
kg:÷¯ö©òòø×ásítdðq®æï~èu@x+k uòsá­àî	û±l¶j¹­y¥hî't°.bõàìee¾au¬w±ox7ümâ_!yx3mmâwvêà¢×ûtüvåû"¢émáôç¾sjvvñïíâ¡sîh¿såq_m§þ'k]m³í£f§ö"	æa®ým&ïdñ ¯
(úüdçð!>d·qnávzø:!3à þé
ôtc"àï/_ëx	¶uû	t%iûcâ$qè:\hó%ðüþ5ipñ÷bh³l"
¿ n;b¸¶äóp¨µt6«ê¸¥ùéÿl4¼òè¤üâstÿ
¢²áy=­f«ùpêçx[·m
m±ãæ}ú *ë ·ã}o§ùùãßøòêúí,hæ;04}z¡ççð
ìù*sàódèk"
j("ù¡d¡ë 
âovgée² j§é£gô<d
lþ&i¡oa$;üê^d²cþóûzép²|¸lv\(u%8têê6	er7êg;xy*
¦
±
a´þká&xbr­ìzé2)¾·ß$kmî&x§nòáaýââãï ùl6!_\°pør[î
ôa¥vï ¨ fò@êæ\@2
¦¢"z²apjqr±!
j	i­(æxþvqmx
dy&g¢
l@àòêv¸å·i6û-èò >¯,&èl 2âí>²ð6õ7¥	mdÿtbûi!m^9n.km	nbû!jtý¢ø6¡eï@mqr%6ud6@åmë"ûó
'tõ½öeÿ@
eôzïpæë ó¶¤{
ìë´ã5yíd{ùu£oìp
q´n/3,
¹´¹½d|±á¿vwè| çðä9ôl	$ô ^úéº
ìä¥á«o©¹½ðe2]3±ë<<aºrç°õ°¸ó÷lqhâãl°vzå=m'¸!âj¹ èõ
lî[ñêäb!×zùøqi8s>[qôi[%xr¬äawðb3s $àøcrrå§èq«ñ ='wveminõ`t8e]´
üí/)(¯}so/6ì¡ì'q á-
þðí-í®üg@vkñ±ì]¡äy=	
ú«±}{å§vúkä´0_"5eìm·+)ú6²
"¢z
¼öa¶­òñafo»?ãýun±;.ë6úë[@°.k¹-»
æpqo
iêík¼øð.~sû$olé;$y©=2øbâºäá:¥lr½?è×ë	æ;¼oj¦âw¨¥q

è?èâ
ðkpy8q¶imøx9p}õè`]óó=xdrçý5¥<.w¬[q¿±b¤ùu¢3>údë¿~yä)âyb5{ü,p
¶¯
zkï`mpüxäî=q/lâøèn%né9î6_mìä»)ge¼êqgs=ùënþ¼-©læ°ú¶å¡øsjk±·@zùëtãhaç©
qá{föã4ì=ãûôá%q,*åä[ë¸ìnô»r²9oxè[í±ëíítsðuìv´rtóm
.8xùêmîæfãxï,h ßï69ûê·ièäp¿kúáäo¤ò¢ç
¬íåøø|s5{¥
fòéi»¨
qý­qj¼¨
î
x1¥
ºðmñ8ôgv¥
<ªwà]u»åhð¸ðn7[±?ºúßw[>¸p·æn¸âlów6z¿ã
¸\íùª+,üu
zbböq¯tbé+9y·fsyn¢qà[2ûôégt]°vsàtøuqu6wîäåû=h82
p¸ómìèë´ûéêz0fþ³:rñé#>lêá]êõão6:ý-j#]b¤=ah°,_>¯qå¤d8i#h¢i©m6öfà¢
tw¯ýâd9pùá%ºè!¾qtb2a¤wòè
éc@()$g2m
éq)c'q!9æ@±ì?ubñ£ª¹oo!t 
n
«$c¼½¹j2.#i$cîqéìn	wªb2}âj
éð4ª*$ñ
y$l#aly!°ôóøy! qh(/ÿp:~±aióèìª
¹ö$**$i&®
øú,"kä1ä=¥ùä+frì$²åqjrø
¡©$þl+¹fêµ#s¥

ö
`lqyäþ
3
`ªãwt!	sh 3uî5	é«j$ïho^â9äåvãúñj
0ô¹*lúm":
<+ áþô¢çd¥
ax»y
ã³éæ¬w,þ2²jqaiæçyè\èlöô{¥c²óhøq½s7e(ð{«z|£côm¸+í±w³¡j{
ôc3fl!"à:ðm°ýù×uøìl(,[±'÷í¼eó»
 ß8h4õa·rx´}¿2unq¿.øo%tzb´ùó|nû¾®6³c
lá¡1¹ùì|
ãøh¥[õ1ëé§æng¸¿yé £_svqozöæ\@\ïáëá/ê¾c'
1òk-4ûútòþ¼"ºt,ïr¨à ø6y+à¦ðèn2ûn ßl|áûíìfætzo`p¥mùámµíâd°#è¸'ãzøám
ãi7âü$¹ä
ää	ì;h6¡uç
æ8o×¼ä¦£¶é\²'b<æ{q½ld¶ip	üëáozí
î&@ò´±j³
;à
hás£&oåµõåonèùòéßý4 æ6tµu*hvâ`d(
;»yêê(é#à¡ø4ßwdrþü
¸âîdpõ
rì5=¨ryàrj½¬$kn¼ömx=®|c?è}pév9*bþ:¸
]~aæ·¬äfb\`ýë!r2ûj)¥ñõüüa[¥çú"y?óüª§þ<â¶ð¶\wãñð½eó
^·õ
8va\òæ.\®þ´ñ*-âàû6!_jhkáöàýld¦õ|;x¾}eß
vü{\rê>vûöpl*[áy%
jv,ék/
ñtz7ñdcàñå	âã
pº}gà@ãx¦|¸er;>²êé­eörtaáiä«púzõì­ní
xæjpµ
}ëæùsxpaó£öyzcòûæa#«ä(ºq
hñð	w6w$ñ5÷dcn=9/éo0&sgðås|ùåùbú(èbæ=ç
í$ bß¨t%v%ú³ø,l1"çmd¾öó\áó]¤ì¹ïdr]$êg²óìöífä\²ð&¤þçajf
u±ó¥rò¸oo
¹à²
g£
%ec_o
ï'ÿp¥.óíó
dþâ$ýoèâoí(³áäärw?ð
êl°?x` lh­fwø;r¹äþw
\qòðý%ï58£ìû'ò÷pkv
dçaçdêøqò<òéf2õz%å`æÿ@

é:7¸5àýð(c& (m&_cþí>æ.¢	lqv
ðêq8~=ì
ëôdüj yíh¦n55oàwc
",ç¦e5ìö§k fcyë/7dï{
êbò4{
«è;â_ñé9ünê<l >v9m
3ªêb3ác-ñtþö#
èîc¦¸=úø gë¦é@×mp!>ùn>6
®:ê,=or\î}%oö¶`mº±:¾¬*nhwµº¨$à¼èjªòõñ§1â ó
¦èß»*jì÷n{p²d¯ënmú~i ]_÷ó=rv5qù^l åãêc
pµî1¼(]ûa¼ûx:<¹æ©×æz¯ö{í êûåâyºålä[rma©]%î`ûn°à&c2¯íí(f!å¢¢+dñy¨³/\ø"è°ëf@ïnàpðzc ó 
íýgz ý-é^0è´
kô» -r³8ü÷±ûb*j2ßdýá0jyårïnj]³%únoæqæývµæoâ3y«é<øs¸²µõhúfù-?èir u-ð¼r0[}á& ø±·è q_gx8«ôjó7m
¡×mtnh	¸p%o6ër";öµ£0¦"²ø/½%¬
öê*ktòvñ,,yçöx¬åçdn
eê@ q
ä
ü%"å'¸iü_"ì%wh{.øk ü%zðu¡ëêè¼þáæ/úã­íínçöæ>êp5öceqþ+°½¿ü0¹~;øò
vb«deàòvp2¡¸k
úq]mb®n.hmw/l
réù.ø=ç«njzå«@1¢¶`
¶dh	$¬rãìùôm ¶¤; [â2ò¾q=	&lçf()¦ú
pqêkù;¸áî¶nkècm¾å¯©ac$íiþ£âk¶ô@sd^í§päy|=¿§z*2óõ(òjû
!)
¶um)7øæct£i+ft"°é
áªd
f×7«à`{ãf%
÷ë!©
¸.ob ßl¥(z
õj¦
ls¢­dåñói×y ýí-ºb48qm^§h¨1[¤é
*ªòpqz¤¶ô­1êþû
>@cîz¡	èêûbk a±
tº2â9o~a
±¯2;muu
@hä½zih? *2û@59¹ì~°xâ¶kã;ml>8rlcdëcn,²=jìì£
>+íèÿá
î}9.ä{s¶ää
öbý
³¡)kk*©>sß
âí¦	m&h£ryª®æá+bówxç-îýô¿åã0º lú$øf¥ô(õ\æ£8 =ëìad¼ö
bxbøqlw2é5y·jrç
æzósêoø{ä÷ã9l¹°&®âòµãïmvðê&@þü7¢ý´nû¶~
ùùã­ììnìuf-sîê
{azì`õ%v°<+4ñ!j-äð©ãßplx~ð÷<¯xöy=ß@·íûù¦
çètó¼6?;òmólø  ­äæùð$¶×ª «ù7\âà~iì7÷þ¸ã0póî7íy®á¦y]©%ýìhß+ç¯©6î
6éôqdésh'j]§6wq
¸:,v¢ûa¬&ð~ö h^oæåjc(ändbuóv°l¤ýó¼ørse8%§ê®r
ìt
â )ªª»ovèoõ£æ	ªz¼n)ª:
1ep.íqõ£ì$u]2û²ê²tõp	ìyª:'q
5±ô
®yädu}²s¬ýù-øìlbmmùfcumùömædj¨¥d x£ä4%â­*pü"à·þ!jbô	úï =ä°ô	êwz)f3ò
/ô"÷yëu»ï[à#î<é>ffvg8"æ¤ê¾ms
«î)ßêºöob+$jïy¬&áúõ4vø]îóxõh16	õ'ûanðdv coù¬(î­q9uwïòðªgoiõã
p0 <ïéèdûý` ¼.!fðb¡<×áë~
wòî
ç2m3½ë¢æà5±þüú@å²vàim3ý¯
|êãmà¥áäê{|ëwzªüæw·	®0
vv³ð³#¸ïllúe.@dg°,@!#
q+\qýu<ß[
©×fà";¿nv¦ë)äuø±\ïà
ù]×æ,þ`.aë+
á
e9àw\^t+
aaªë%cd xyg¤x)ùz10j[y¸?iþúãuòü<åo/ü¹c¥{qúµ
©âpá7éùxíäh s?ãå!ö
ûh
oìêàr.|'ú16
.^9:k¢|@å2éð;¤±à
øp?îdjày/q»®®½q
ì0qêéiv}äçio(ý
ë|ôóxãc«ìí@,§o"tò'
f-|zäòðï[ï¾ta¿¼®2nß2à¨^w¸[þ_ù¸
ço½"múxs¼ªipá·\òp
q£í°¬sâr\óíd\²`kmã$òóf;è8
+«
g:
ðb¤úkizàý
°è¢c×íp»«¸apôv¢m*¸·ñ4?v*æc¥hms
kzæupzþøséi3ß<­z4ôñglöå±{,{dñù>ôbtn~¿%£`9`¡$ |®õ®/'(©ytu£pzu³êc¡9¦hgü0æ æ*)¡$
=_a.v^â½ãïre¢ò!t
¼#
õ«x*""6<òûbw~û1óäi¤º6ij®±~£ò($©"~»ábø"zq{ v8
_ö«´ú^.éã·×ûl
&ð»\æ5rj üiý¿â7ütäår úhøg9°
25ägï@õ¯ké¦hìåbµ§ð<è,vì´xèeªñx¢óäôoh íf{'bv9­>`eâ¢êï°ú
ðûd>\9ñý+r"$
æö±
üda6õ û*¢:py
tc
£ábtø8
w(â[¹k!yõê
¾éö­jâçyal]qlpûø[õä
}ß
j5/©@këöéu}±ùóâyüä×v2í¼åôüºî`ùýnuy?uâ³q>*¸[sn`ádè3²sesìpýc
hòý
"`5ðw
v¼&qy
¶5}ørëuè
wbfï;¼¬ê[zõò1qz¨òl ð>î
ú;¿
q 	w²è»8âôi1.xð¶v
ºkji#ââk
h&ä4gváq#¼ä
oíh~¾¦rü}²7i8ü>ãa	÷¯öô£i4ÿqzã%xúh(æ4z8lµ2í6|ðñ®(ö,5
ô>¯c5ëò
r
¶y,§s¬ymz«zÿ³'ù¶àpù¬©ù[=ýj8rzd×|ózï
gö
»ù¡hn
iãqblâ4
ô
zìê@yîe:møo¨ìb{&s·õ¼å

6¥ãét·þ=t(¯î¡
:7/>{7gãb(p²áozòk)»$_ün.\õ;bïé
í¾6kyw&¥«¸ð^q6e¬3(>íâ6izåúljäßºä®²#nùwõïælohôöúdmßö­)¹
¤üëéa¨m´r
ã#4,|¯
uf»æðg?ç$èþb ñõ&²ñkâr
å¾û/çªw¡â*mñýt+ñ¹ecbuwë+³j±]v',îûê
m¸@aæ¼b/:t[=pgâ±êpyë àkæ>(ep]u¯àè÷jù»ç]»ÿ5úøb«i#ý«^c±äùôëîbòðóâºãwïì-&òxg 
b-0ñ¢.èû®t×ún×ìðïøî#¦°©¬s¤m_gµî.9q(ç[%úç^su2ßmôñô4«sâ1ïkl:ëïl\òjh/+»:jd©xô$rf
»3òâañd7¢¥ìè'§çæ~]àæ	à-rf
êelí$|å÷8¿°sºjtèsæi%hûªs¬,	ñ´ª¯ .m5µw¾¥}
1t¬3´%mkn¹z1/q­fded]ëvqí2±ú¢x«uvâ6rø	äs\ê
{
pdq=ìhöçaõpí§ª³ðí°ç[
ï
/f5ïâ/kvèæ³ ?q.lóhuçhvæ¸æxuªdneçq¸6qx
öãm {êèâoïtote¢jê7*{k°éar
8w<êõ~w6¢èq
>¬íàè×ç¥·þzõ3a¼khâ½urïñ
ò^»rðêëætðq)yääxçu!¶ÿ¦)çxøluq
bú©üàõ`tûz¸þi µç8,nëm¢buÿ@coäwwîªç)èê«³ðu@§)iu+m6	 me¶
.c=`zìtêjæ¾ørciâhð)õèþãî=j9\ôêu,f{ç-0·yxú-3rz"qlwô~yãq®¾ýò×a6¦7)éä·^p,
³vvïçèá ßcyëbp
ä:;th5h=´
üõ6ò¸±üýyo^µ5gäbxâ¦
±p§	 »;ùææ¨<8\º;q¶5ãg£ên
lóøkpøiol~wp
2dxkäðõíõè bóa
øvzõeh;&«¾æbvvé!lñ±»×â­
õïkª­ýzo¡,t´
%*í¶eù¢¬#ëjõñ%ùµ£ÿe3mé22säõø¬`ôùcñ$¶y
õ±@-í}xf¼&oòó>æþy¸e9¤ò#¯©öjøm
>5ªµ´îvcó&®	g³q:­â¥ú/qðçé£¦}áél°r=¨ò}ÿ*¯%0iêí-á0ú¢kd´ê6âó(äc
mzþ*©%±úsñúóoëlðo­
¸-4q`·¥p4£z'. ¿eæ±
wímzr,/ª¡,dh°úsô¡ýû,hæiá¯iù¢â6õ¿o4'î !u-¨ùì¾sý
ûc]²qu åø/
ýûõ¹%¯at¼ìvñ u(e
yõ%ôàs
ª6þý
^
öôíðr»ö¡àl3-t|¹ò îi
ö>uj¼°ö!,£ã\s'tm±ë?5)·´ìö{sí .e¡js²óëmu f0të
±õ+vra":àz&
äê´:i´ü?º^$gbï¨ð$õðkûêï¡ç¸·[clß¡.iîøwjåíî³
!¶èñtëmqo'hyãùæg(a
m±8dúê´gèîý`z°¶h
¥pj
½ã8¥`*ïs¬¿&¦sm¦y©ävôxô=caþây»
ßîåèõ­z×½êßª·b½ve+
 ù
¸ë¥p tþp[ü-äªkïp5jþhx´î
«&îcøñ½3ký<q«ìâíktáùó®øz¬çåsx¼£în\j§£½sê êêkö
êãêjsoå[tþ(ãi¯ï#p ðtqt
æ#o ©d]ynôá¾ju
êhüçà)	å¤þ8?iûó
jc
u'ó|wr/è½µdq¶t¢+÷xb¼(l6c2h*dèýn]éà äì_v<ïgu0µdy$·¸,
qþi°qù=ófeö+çe
aµ
èî
¢$²{öed¦6hò¿pî/sö®	^x1	?vdº>8ýo:fàw½ëï«-©(¤qc1¥ãºa
þ®,j
»ä
z êlxé k¤
°'*" eý¿y,äé{hc*x	
àñd-|ïì@
0>ïìé8c	ª#ã,nn3 úò³
«åæ@·%cåm',>z5¯j9â­÷xû*y3ñ¡-yãä­s´¨-å²rå4/.ðù;.jk»g*úàvêwæç¡;i¥3¢a8?ë¶qj	k!¼ø§1±ý§î^lh×â§©¡usûç;rëkñ¾¯¡6±^üsýwq»b^¦qêfxµel .mhõb1äm°`÷,â¦à7®ç,õ¿z.lèpù
tæ¸
ÿ³ñ:àn8ð«@m%blåðcá_ut´¨hôî8áãåqn1ïôv3ii.)iàá%í3x¼$¨wlb]ð¤n7ai²n\½è××9zeènc~òniáj"qe¼ôî&¡#uìâ«vfø²7/nf²	m¤µû=ób¬&×ò ï~n¯´,gw;a¸è^´kñenc8t}¾äò«rç¾xbr¹_p%whõ¿°_<* ßï/õ3¶óózù½¨.)
á¿ ¦zäjbxrïà¯@umìåº-ï(^òs=m"¤ækh§ªµä
]7a³à³qç»þüb^!§/x6×8¤äuæütâdskâkòiþaãá=(®pö
ýâò¡h*ñª,vzþi0wïôz
óvïè&·nrjû=­ò
>yi'ÿ
´
:¨ü°0ÿ<óûøbþ%§/7ê
\å«y´br¡ xª×àdàty¡>~ ùûhmµå!öv8ùxì~ kiä:ryß
h@å
¢
f´"å}¿ìyà=2!óó¡j)f¶
;|+·ë¯rõú[är5§3v*¾¡²y­ñêg=hpyeqãcr!yih:\á÷|h¥àejw3ækú']¹¡ùàû.¦g
õscá%w4±7;p`â~°þxýbx ¾l
´uäz¨z,ï´jiéi~¯ñcv%à£-dð)©54e`7·:­v²,||x1hc&d¾%µzúpq.9â[¼jf
ñ¾ì_bã ö^o&4îcöxð0á4í.&5)' ñ
øáé×l7ñëûòj­%7,äª1oáñ;ò®¢6cw	*êtmb¬úé
fsà®÷,óáa{éöã
ºõ18`?u=ç	m\?¥ë	>±å%ø`hæªç	u9*gÿì¤c*=fà!`ôê¸p°
eùùuëf'z/õµjm^m@üpiô¨
quíý
qðb(ë%y¢àì`\q 'ó2w
¾( ^ºl\zðo¿;
à*¡¨;
ê;!ûéq»û£p/cê©%dë-æ¸»târûç¦yo»$ªú¹%*ôû\p.röbcöçcw/6d}~gkn°òp¢èïl-â4ý-ê$¢éo_yñdòô·èkõoñn(çãú	¤÷§âeiú=udjc6|3¬ybkcá
!w<à_íì9
ñla¥
{rípm
åäóô+\.±ñ¶4ý<
¹å4ýôöôó`¦ç
ý4ë è'¨¢cf"£¦$kúqõ¢¦×9òøhùtôßpj§b¤êt*d§b$õ¨êç½uý63imýê!&muw+w@ïððeü\xà¨éo\7i
5ý-öcm
é½¦ê&ëqµª°húè¿eic\þplë¶"óæòó^ñuý
y|õ¢¦¼ó wzãõü
wûüø¿#
½îrrô'dò`&eê¨çã{íß¸ãðe=?ããní-®çç/¸fõü8¨æç¹f=?â%ëùqíèjrx¬tçujx\ö \d2iâh$«ô¼ó_îþiõ< §ë0¸
âtã¶éarqiûf2±^»æì%wwv-ò)
s q£±§ð 'fxä±ª
´!'ûä¿ ´pmè	ò²o|[:«ããàú	ð9sm;vq
ö5mwöª¼ew8ênì¨êúö×"t:4òóâv¯â£c·%ó±ü]]ìvobïôè
gqáþ+chøæbâ
cã3¹8ñ¬åìh
@¡×¡>ãpi!¦üüü là  õzølê¦òcü1dv3xqù.!0ö
ýþm!¬îm º¨2ëzùhîù¶öú

lada9âó¹)\§ie©£è9ó½rüuõ
bg¦6îq3©
µ)#i1ü³a¶©x¸¢ybcèìa§-8eªy<*óò¯i`5±\lõ"
¡/cò_[?êº.éðõ;óndwcêä§1eêïuì]nêãêiø6óî{êãý~ô
yáä[óyü:­x³g~4»2tõf$ð±2<&;òãáî¬îqnzsî°à²z1n¨_
l0
&rardaj	

¨&8rô½3á°âãbe®5sadàµ 6#«^3¢ß2!
t2u5¥"4èyî®4 yü$a2³û8m,t¤¬z°¤þo$41«¯êvoå"nëk£ázm5\'
°fl-ã(°ááùëå¦·üóô»z\¸&!ìiè¡z
õnä¹ç0¡âº@tçpw<"¹ô øáá½¯+	[e5%ãëñ
æ;
y&úbê&	 ¶s<uu)\è¿v(ol\ã»~qrä&égzcr	2¿^döò$ük£n<éjè$ýáî"
sºqm´ky·ð
^
tiôév0[°ëæ*²¢²7.þèñì¤é¥æ­d*ùdëu4d	>ñx5)ô5ûñä×
c-ê;
|`kõá®ûù·zôòn8(pð×¸êàìó{m`:é2¡æ
xññ$ 	¯é»êé%m:.uûýâñw!ýgieâ	9º7ú
¢
£×e¯c¡,ê#2zï(9¥ßåäü§ ã¾aøúq<··¿°l
¸¼iak²¬xªhêäoùbõ^[óo^b!zs~:yh¦h%«áµ¥huçî
 "fo	ôp¬¯öý þª{dbïàðh*d¥.h1a%à'"£-gväj
1ím:ôz[b ;ù°|lsùn'% ¼øø¾%6-ôhé%@ì%¦èäïé²óöp'k-'.)
÷]¬åþüb'ã ù{nxov9îý"râ"á­êìºíx§;ïf&ªçø±å&ùé[$s¨ãä<;ý×ë¡dþbcê©zôõp3îúyn6èþb¹¥#à(°.`,·efôkeþ&óvõí9ô;
reù<h¡å{¢
2îß¡þ$õqþb&ûc öã¯ºº{u´l
+nvñ	°âgdeïzu+q)fv 
[£=\»æäèdhù8jb¤!läîé\åoh
ö `ûûo{·ø³ù¦qlñpú0êg?of{5~¡ñ«;ñpðú¼mlùd à¥6 êt¶ ruó"a°òap²¹§ãd" ozüu0ðè³¡ ³°èõpzcâ*ed[pôb
äøöàû\à¹ ëcémø^pzôír¡¦k-û8æqûôâpyû×~c(á¢òp0«s°bø*¥
;%ô±`ûiùv2 bûz8yq1p,
ö[%k.à)µtkvæ¡«ó!.ûì©§åêïi²sx)õñið2l4á¦
ây¹l2ªæyfuü]}y
æíèvuævf1:y% 4ypi%»e&ë*á-ð?vsûv3
ú: r	ãê
l±cô
ª 00fþiì/
u/ââbþ¾¢ðî¡±¤lä­ããü]ziìu7ïô0ßaèûpýk÷»páàî*é¶ ç6
þ³¨
ß&z' ]âx¿c¢^ï
¥h¶à
!fä#záo,âå|)§ß½b~ðtþúp^6t»â·¿æùqù0î³1oñ}ñ|+=ùóç^û&êëüx$ñ½
{s§í®ú 
ñà+íö2¡7ºmýìbøä¶£mham$ö none


Link: https://www.canterbury.ac.nz/engineering/schools/csse/our-people/

our people | computer science and software engineering | university of canterbury
skip to main content
return to the homepage
none
menu
library
uc online
news
events
maps
staff
work at uc
covid-19
none
apply now
none
study
courses and qualifications
subjects
online learning
arts
business
digital screen
education
engineering
health
law
science
all departments
scholarships
examinations
graduation
postgraduate study
key dates
publications
study abroad and exchanges
work-integrated learning
academic support
special consideration
summer school
transition programmes
quick links
none
none
none
none
none
none
none
none
enrol at uc
enrolment process
enrolment and course dates
admission and university entrance
identity and citizenship verification
international student enrolment
phd and doctoral degree applications
manage your study
fees and funding
student agreement
change your enrolment
update your contact details
contact student services
quick links
none
none
none
none
none
none
none
research
become a research student
find a supervisor
support for researchers
mäori research partnerships
research impact
research institutes and centres
research specialties
facilities and equipment
ip commercialisation
innovation jumpstart
ethics approval
uc research awards
contact us
quick links
none
none
none
none
none
none
none
life
the campus
facilities
getting around
student life
accommodation
support services
know the code
sustainability office
uc students' association (ucsa)
ccr
golden key
health, safety and wellbeing
life in chch
life in nz
get active
canterbury card
quick links
none
none
none
none
none
none
none
none
support services
finding support
need to talk?
health services
academic support
accessibility
financial assistance
academic grievances
equity and diversity
parents and whänau
job and careers advice
new student support
current student support
postgraduate student support
high school student support
adult student support
international student support
lgbtqi student support
mäori student support
pasifika student support
onsite services
quick links
none
none
none
none
none
none
none
none
none
engage
alumni
business and industry
canterbury university press
communications and engagement
community partnerships
external exam invigilation
find an expert or consultant
giving to uc
international partnerships
knowledge commons
news
school resources
work at uc
work placements
quick links
none
none
none
none
none
none
none
none
about
what is special about uc
uc7
ako - learning & teaching
governance
leadership
health and safety
sustainability hub
people and culture
asset planning and delivery
history
information and records management
ngā uara | our values
contacts
none
logins
learn
zoom
student email
staff email
myuc
my timetable
canterbury card account
my library account
onedrive
uc careerhub
uc services portal
password reset
ucgo
ouruc
staff logins
more logins
use the tab and up, down arrow keys to select menu items.
engineering
toggle navigation
subjects
none
none
engineering first year
engineering course planner
industry and work experience
diploma in global humanitarian engineering
forestry science
postgraduate information
engineering management programmes
product design
none
none
chemical and process engineering
civil and natural resources engineering
computer science and software engineering
electrical and computer engineering
mechanical engineering
none
contact us
health and safety
minor in bioprocess engineering
minor in sustainable energy engineering
minor in environmental process engineering
our people
postgraduate study and research
research
undergraduate study and courses
none
about us
news & events
undergraduate
postgraduate
research
people
lab facilities and tours
contact us
cnre shop
none
computer science (bsc)
software engineering (be hons)
research
postgraduate information
events, groups and seminars
study with us
computer science education
industry collaboration
our people
additional resources
contact us
none
electrical and electronic engineering (be hons)
computer engineering (be hons)
mechatronics (be hons)
postgraduate
research
facilities
industry collaboration
student groups and social media
our people
contact us
epecentre
none
study options
student support
postgraduate study
our research
secondary school programme
statistics consulting
events
our people
none
undergraduate study
postgraduate study
research
bioengineering
minor in aerospace engineering
minor in biomedical engineering
student advice and support
events & seminars
laboratories and facilities
r&d collaborations
contact us
none
study with us
student advice and support
research
laboratories and facilities
mechanical engineering
electrical and computer engineering
contact us
none
bachelor of forestry science
bachelor of engineering (honours) in forest engineering
postgraduate study and research
research
laboratories and facilities
services and resources
forestry news and current scholarships
contact us
forestry 50th anniversary
seventh faustmann symposium 2023
none
applied immersive game design
chemical formulation design
industrial product design
contact us
conjoint degrees
laboratories and facilities
postgraduate study and research
none
deep industry engagement
global reach and recognition
passionate practicing experts
state-of-the-art facilities
experience ‘on the job’
problem-solving creativity
collaboration and teamwork
hands-on learning
none
timetable
research
scholarships and funding
none
poster gallery
steminism
wie can
star courses
visit campus
key dates
none
braindate series
industry contacts
final year projects
none
none
2019
2018
2017
2016
2015
2014
2013
2012
none
international enquiries
stay connected
virtual tour
facilities & equipment
diversity agenda
ucdronelab
eng shop
home
>
engineering
>
schools and departments
>
computer science and software engineering
>
our people > computer science and software engineering people
administrators
department heads
academic staff
senior tutors
technical staff
professors emeriti
research assistants
adjunct staff
postgrads
casual tutors
department heads
andreas willig
head of department
professor
jack erskine 202
phone:
+6433692208
internal phone: 92208
andreas.willig@canterbury.ac.nz
andrew bainbridge-smith
senior lecturer
deputy head of department
jack erskine 303
phone:
+6433691361
internal phone: 91361
andrew.bainbridge-smith@canterbury.ac.nz
administrators
kat bell
administrator
jack erskine 204
phone:
+6433691234
internal phone: 91234
kat.bell@canterbury.ac.nz
sharon mcgregor
senior department administrator
jack erskine 201
phone:
+6433690290
internal phone: 90290
sharon.mcgregor@canterbury.ac.nz
belinda lansley
project coordinator
jack erskine 201
phone:
3697136
internal phone: 97136
belinda.lansley@canterbury.ac.nz
academic staff
tim bell
professor
jack erskine 345
phone:
+6433692118
internal phone: 92118
tim.bell@canterbury.ac.nz
andy cockburn
professor
jack erskine 313
phone:
+6433692119
internal phone: 92119
andrew.cockburn@canterbury.ac.nz
richard green
professor
jack erskine 245
phone:
+6433692096
internal phone: 92096
richard.green@canterbury.ac.nz
tanja mitrovic
professor
jack erskine 312
phone:
+6433694269
internal phone: 94269
tanja.mitrovic@canterbury.ac.nz
ramakrishnan mukundan
professor
jack erskine 311
phone:
+6433692201
internal phone: 92201
mukundan@canterbury.ac.nz
andreas willig
professor
jack erskine 202
phone:
+6433692208
internal phone: 92208
andreas.willig@canterbury.ac.nz
ben adams
associate professor
jack erskine 310
phone:
+6433695710
internal phone: 95710
benjamin.adams@canterbury.ac.nz
christoph bartneck
associate professor
jack erskine - room 302
phone:
+6433692443
internal phone: 92443
christoph.bartneck@canterbury.ac.nz
matthias galster
associate professor
director of software engineering
jack erskine 314
phone:
+6433692172
internal phone: 92172
matthias.galster@canterbury.ac.nz
walter guttmann
associate professor
jack erskine 300
phone:
+6433692451
internal phone: 92451
walter.guttmann@canterbury.ac.nz
james atlas
senior lecturer
jack erskine 301
phone:
+6433690307
internal phone: 90307
james.atlas@canterbury.ac.nz
andrew bainbridge-smith
senior lecturer
jack erskine 303
phone:
+6433691361
internal phone: 91361
andrew.bainbridge-smith@canterbury.ac.nz
fabian gilson
senior lecturer
seng 3rd year coordinator
jack erskine rm 214
phone:
+6433692910
internal phone: 92910
fabian.gilson@canterbury.ac.nz
moffat mathews
senior lecturer
jack erskine 213
phone:
+6433692452
internal phone: 92452
moffat.mathews@canterbury.ac.nz
miguel morales
senior lecturer
seng 2nd year coordinator
jack erskine rm 210
phone:
+6433692988
internal phone: 92988
miguel.morales@canterbury.ac.nz
kourosh neshatian
senior lecturer
postgraduate co-ordinator
jack erskine 212
phone:
+6433692455
internal phone: 92455
kourosh.neshatian@canterbury.ac.nz
postgrad-coordinator@cosc.canterbury.ac.nz
clementine gritti
lecturer
jack erskine 304
phone:
+6433690523
internal phone: 90523
clementine.gritti@canterbury.ac.nz
steve weddell
associate professor
link rm 305
phone:
+6433694419
internal phone: 94419
steve.weddell@canterbury.ac.nz
neville churcher
fixed term academic
adjunct senior fellow
jack erskine 247
phone:
+6433691622
internal phone: 91622
neville.churcher@canterbury.ac.nz
ray hunt
fixed term academic
adjunct associate professor
jack erskine 247
phone:
+643366347
internal phone: 6347
ray.hunt@canterbury.ac.nz
richard lobb
lecturer (teaching and administration only)
adjunct senior fellow
jack erskine 211
phone:
+6433692466
internal phone: 92466
richard.lobb@canterbury.ac.nz
senior tutors
yalini sundralingam
senior tutor
jack erskine 322
phone:
+6433692489
internal phone: 92489
yalini.sundralingam@canterbury.ac.nz
paul mckeown
senior tutor
jack erskine rm 321
phone:
+6433692478
internal phone: 92478
paul.mckeown@canterbury.ac.nz
marina filipovic
senior tutor
jack erskine 323
phone:
+6433692495
internal phone: 92495
marina.filipovic@canterbury.ac.nz
liam laing
senior tutor
jack erskine 320
phone:
+6433690319
internal phone: 90319
liam.laing@canterbury.ac.nz
make an appointment
morgan english
senior tutor
jack erskine 324
phone:
+6433690981
internal phone: 90981
morgan.english@canterbury.ac.nz
katia de lu
senior tutor
jack erskine 200
phone:
3690741
internal phone: 90741
katia.delu@canterbury.ac.nz
technical staff
peter glassenbury
senior programmer analyst
systems manager
jack erskine 223
phone:
+6433695933
internal phone: 95933
peter.glassenbury@canterbury.ac.nz
joffre horlor
senior programmer analyst
systems manager
jack erskine 222
phone:
+6433695374
internal phone: 95374
joffre.horlor@canterbury.ac.nz
adrian white
senior programmer analyst
jack erskine 224
phone:
+6433695917
internal phone: 95917
adrian.white@canterbury.ac.nz
steven sykes
senior programmer analyst
systems manager
jack erskine 221
steven.sykes@canterbury.ac.nz
sophia rabara
systems administrator
jack erskine 134a
phone:
+6433690932
internal phone: 90932
sophiaellaia.rabara@canterbury.ac.nz
professors emeriti
krzysztof pawlikowski
professor emeritus
jack erskine 307
phone:
+643367772
internal phone: 7772
krys.pawlikowski@canterbury.ac.nz
research assistants
jack morgan
research assistant
jack erskine 344
phone:
+6433692481
internal phone: 92481
jack.morgan@canterbury.ac.nz
jay holland
research assistant
erskine 342
internal phone: 7756
jay.holland@canterbury.ac.nz
joanne roberts
research assistant
jack erskine 344
phone:
+6433691174
internal phone: 91174
joanne.roberts@canterbury.ac.nz
tracy henderson
project manager
jack erskine 344
phone:
+6433692409
internal phone: 92409
tracy.henderson@canterbury.ac.nz
josh mcculloch
research engineer
jack erskine rm 346
josh.mcculloch@canterbury.ac.nz
oliver batchelor
post doctoral fellow
jack erskine 346
phone:
+6433690029
internal phone: 96632
oliver.batchelor@canterbury.ac.nz
sam pell
research assistant
jack erskine 343
sam.pell@canterbury.ac.nz
tim rensen
research assistant
tim.rensen@pg.canterbury.ac.nz
sam schofield
research assistant
sam.schofield@pg.canterbury.ac.nz
eugene mcnearney
specialist researcher
jack erskine 346
eugene.mcnearney@canterbury.ac.nz
matt philip mattar
research assistant
jack erskine 346
matthew.mattar@canterbury.ac.nz
none adjunct staff
rainer unland
adjunct professor
rainer.unland@canterbury.ac.nz
phuoc tran-gia
adjunct professor
phuoc.tran-gia@canterbury.ac.nz
richard lobb
lecturer (teaching and administration only)
adjunct senior fellow
jack erskine 211
phone:
+6433692466
internal phone: 92466
richard.lobb@canterbury.ac.nz
brent martin
adjunct senior fellow
ray hunt
fixed term academic
adjunct associate professor
jack erskine 247
phone:
+643366347
internal phone: 6347
ray.hunt@canterbury.ac.nz
gregory ewing
adjunct senior fellow
jack erskine rm 307
phone:
+6433645694
internal phone: 45694
greg.ewing@canterbury.ac.nz
blair mcmaster
adjunct senior fellow
blair.mcmaster@canterbury.ac.nz
neville churcher
fixed term academic
adjunct senior fellow
jack erskine 247
phone:
+6433691622
internal phone: 91622
neville.churcher@canterbury.ac.nz
none
general enquiries
+64 3 369 3999
info@canterbury.ac.nz
enrolment enquiries
0800 varsity (0800 827 748)
enrol@canterbury.ac.nz
international enquiries
+64 3 364 3443
(aus) 1-800-431595
ask a question
contacts & directories
university contacts
student contacts
students' association
aâz of support services
find a researcher (research profile)
accommodation
maps
donate online
none
none
none
none
none
none
none
departments
all departments
arts
business
education
engineering
health
law
science
service areas
latest
news
events
publications
work at uc
info for media
style guide
tools
learn
uc policy library
library
myuc
it account
student email
onedrive
timetable
staff email
intranet (staff)
copyright
feedback
privacy
cookies declaration
payment data
emergency information
â© university of canterbury - a fair trade university


Link: https://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm

software developers, quality assurance analysts, and testers :
occupational outlook handbook: :
u.s. bureau of labor statistics
skip to content
none
united states department of labor
none
none
u.s. bureau of labor statistics
follow us
none
|
release calendar
|
blog
search button
search:
menu
search button
search:
none
about bls
history
our leadership
budget and performance
questions and answers
a-z index
glossary
careers at bls
bls speakers available
errata
contact bls
overview of bls statistics
demographics
industries
business costs
occupations
geography
resources for
business leaders
consumers
developers
economists
investors
jobseekers
media
public policymakers
researcher
students & teachers
survey respondents
none
inflation & prices
consumer price index
producer price indexes
import/export price indexes
contract escalation
price index research
pay & benefits
employment costs
national compensation data
wage data by occupation
earnings by demographics
earnings by industry
county wages
benefits
modeled wage estimates
compensation research
strikes & lockouts
occupational requirements
unemployment
national unemployment rate
state & local unemployment rates
unemployment research
employment
national employment
state & local employment
county employment
worker characteristics
american indian report
employment projections
job openings & labor turnover survey
business response survey
employment by occupation
work experience over time
business employment dynamics
foreign direct investment
employment research
workplace injuries
productivity
labor and total factor productivity
productivity research
spending & time use
consumer expenditures
how americans spend time
international
international technical cooperation
import/export price indexes
geographic information
new england (boston)
new york-new jersey (ny city)
mid-atlantic (philadelphia)
southeast (atlanta)
midwest (chicago)
southwest (dallas)
mountain-plains (kansas city)
west (san francisco)
none
data retrieval tools
bls popular series
series report
top picks, one screen, multi-screen, and maps
data finder
public data api
charts and applications
charts for economic news releases
cpi inflation calculator
injury and illness calculator
pay measure comparison
demographic data sources
covid-19 economic trends
industry productivity viewer
employment and wages data viewer
industry finder from the quarterly census of employment and wages
customized tables
u.s. economy at a glance
regions, states & areas at a glance
industry at a glance
text files
news release tables
more sources of data
restricted data access
discontinued databases
questions & answers
special notices
none
latest publications
the economics daily
monthly labor review
beyond the numbers
spotlight on statistics
reports
commissioner's corner
videos
career outlook
occupational outlook handbook
geographic profile
handbook of methods
research papers
copyright information
contact & help
weekly update
none
latest releases
major economic indicators
schedules for news releases
by month
by news release
current year
prior years
archived news releases
employment & unemployment
monthly
quarterly, annual, and other
inflation & prices
pay & benefits & workplace injuries
productivity & technology
employment projections
regional news releases
none
k-12 student & teacher resources
games & quizzes
student's desk
teacher's desk
questions & answers
none
redesigned news releases
ooh home
|
occupation finder
|
ooh faq
|
ooh glossary
|
a-z index
|
ooh site map
none
occupational outlook handbook
>
computer and information technology
>
software developers, quality assurance analysts, and testers
none
summary
what they do
work environment
how to become one
pay
job outlook
state & area data
similar occupations
more info
summary
please enable javascript to play this video.
video transcript available at https://www.youtube.com/watch?v=_wq_vv4pxpc.
quick facts:
software developers, quality assurance analysts, and testers
2021
median pay
$109,020
per year
$52.41
per hour
typical entry-level education
bachelor's degree
work experience in a related occupation
none
on-the-job training
none
number of jobs, 2021
1,622,200
job outlook, 2021-31
25% (much faster than average)
employment change, 2021-31
411,400
what software developers, quality assurance analysts, and testers do
software developers design computer applications or programs. software quality assurance analysts and testers identify problems with applications or programs and report defects.
work environment
many software developers, quality assurance analysts, and testers work in computer systems design and related services, in manufacturing, or for software publishers. they often work in offices and on teams with other software developers or quality assurance analysts and testers.
how to become a software developer, quality assurance analyst, or tester
software developers, quality assurance analysts, and testers typically need a bachelor’s degree in computer and information technology or a related field. some employers prefer to hire developers who have a master’s degree.
pay
the median annual wage for software developers was $120,730 in may 2021.
the median annual wage for software quality assurance analysts and testers was $98,220 in may 2021.
job outlook
overall employment							of software developers, quality assurance analysts, and testers is projected to grow							 25 percent from 2021 to 2031, much faster than the average for all occupations.
about 162,900 openings for software developers, quality assurance analysts, and testers are projected each year, on average, over the decade.
many of those openings are expected to result from the need to replace workers who transfer to different occupations or exit the labor force, such as to retire.
state & area data
explore resources for employment and wages by state and area for software developers, quality assurance analysts, and testers.
similar occupations
compare the job duties, education, job growth, and pay of software developers, quality assurance analysts, and testers with similar occupations.
more information, including links to o*net
learn more about software developers, quality assurance analysts, and testers by visiting additional resources, including o*net, a source on key characteristics of workers and occupations.
what they do ->
what software developers, quality assurance analysts, and testers do
about this section
developers create diagrams that help programmers write computer code.
software developers create the computer applications that allow users to do specific tasks and the underlying systems that run the devices or control networks. software quality assurance analysts and testers design and execute software tests to identify problems and learn how the software works.
duties
software developers typically do the following:
analyze users’ needs and then design and develop software to meet those needs
recommend software upgrades for customers’ existing programs and systems
design each piece of an application or system and plan how the pieces will work together
create a variety of models and diagrams showing programmers the software code needed for an application
ensure that a program continues to function normally through software maintenance and testing
document every aspect of an application or system as a reference for future maintenance and upgrades
software quality assurance analysts and testers typically do the following:
create test plans, scenarios, and procedures for new software
identify project risks and recommend steps to minimize those risks
implement software testing, using either manual or automated programs and exploratory testing, and evaluate results
document and report defects or problems with software
provide feedback to software developers and stakeholders regarding usability and functionality
none
none
after the program is released to the customer, a developer may perform upgrades and maintenance. quality assurance analysts and testers run manual and automated checks to look for errors and usability problems once the software is released and after any upgrades or maintenance.
the following are examples of types of software developers:
none
none
none
none
<-
summary
work environment ->
work environment
about this section
developers may oversee a team of people during the software development process.
software developers held about 1.4 million jobs in 2021. the largest employers of software developers were as follows:
computer systems design and related services
32%
finance and insurance
11
software publishers
10
manufacturing
9
management of companies and enterprises
5
software quality assurance analysts and testers held about 196,300 jobs in 2021. the largest employers of software quality assurance analysts and testers were as follows:
computer systems design and related services
33%
finance and insurance
11
software publishers
9
administrative and support services
7
manufacturing
7
developing software is usually a collaborative process. as a result, developers, quality assurance analysts, and testers work on teams with others who also contribute to designing, developing, and programming successful software.
work schedules
most software developers, quality assurance analysts, and testers work full time.
<-
what they do
how to become one ->
how to become a software developer, quality assurance analyst, or tester
about this section
software developers, quality assurance analysts, and testers typically need a bachelorâs degree.
software developers, quality assurance analysts, and testers typically need a bachelor’s degree in computer and information technology or a related field. some employers prefer to hire developers who have a master’s degree.
education
none
although writing code is not their primary responsibility, developers must have a strong background in computer programming. they usually gain this experience in school. throughout their career, developers must keep up to date on new tools and computer languages.
advancement
none
important qualities
none
none
none
none
none
none
<-
work environment
pay ->
pay
about this section
software developers, quality assurance analysts, and testers
median annual wages, may 2021
software developers
$120,730
software developers, quality assurance analysts, and testers
$109,020
software quality assurance analysts and testers
$98,220
computer occupations
$97,430
total, all occupations
$45,760
none
none
none
none
none
none
the median annual wage for software developers was $120,730 in may 2021.
the median wage is the wage at which half the workers in an occupation earned more than that amount and half earned less. the lowest 10 percent earned less than $64,470, and the highest 10 percent earned more than $168,570.
the median annual wage for software quality assurance analysts and testers was $98,220 in may 2021.
the lowest 10 percent earned less than $48,960, and the highest 10 percent earned more than $153,250.
in may 2021, the median annual wages for software developers in the top industries in which they worked were as follows:
software publishers
$130,180
manufacturing
124,950
finance and insurance
124,390
management of companies and enterprises
120,710
computer systems design and related services
103,010
in may 2021, the median annual wages for software quality assurance analysts and testers in the top industries in which they worked were as follows:
manufacturing
$102,090
computer systems design and related services
98,000
software publishers
94,980
finance and insurance
92,660
administrative and support services
86,060
most software developers, quality assurance analysts, and testers work full time.
<-
how to become one
job outlook ->
job outlook
about this section
software developers, quality assurance analysts, and testers
percent change in employment, projected 2021-31
software developers
26%
software developers, quality assurance analysts, and testers
25%
software quality assurance analysts and testers
21%
computer occupations
15%
total, all occupations
5%
none
none
none
none
none
none
overall employment				of software developers, quality assurance analysts, and testers is projected to grow				 25 percent from 2021 to 2031, much faster than the average for all occupations.
about 162,900 openings for software developers, quality assurance analysts, and testers are projected each year, on average, over the decade.
many of those openings are expected to result from the need to replace workers who transfer to different occupations or exit the labor force, such as to retire.
employment
increased demand for software developers, software quality assurance analysts, and testers will stem from the continued expansion of software development for artificial intelligence (ai), internet of things (iot), robotics, and other automation applications.
in response to concerns over threats to computer security, organizations are expected to increase investment in software that protects their electronic networks and infrastructure. this investment could result in an increased demand for developers to create security software and for quality assurance analysts and testers to create and execute software tests.
software developers, software quality assurance analysts, and testers are likely to see new opportunities because of the increasing number of products that use software. for example, software systems continue to be built for consumer electronics and other products, including iot-connected devices and electric vehicles.
none
employment projections data for
software developers, quality assurance analysts, and testers, 2021-31
occupational title
soc code
employment, 2021
projected employment, 2031
change, 2021-31
employment by industry
percent
numeric
source: u.s. bureau of labor statistics, employment projections program
software developers, quality assurance analysts, and testers
—
1,622,200
2,033,600
25
411,400
—
software developers
15-1252
1,425,900
1,796,500
26
370,600
get data
software quality assurance analysts and testers
15-1253
196,300
237,100
21
40,800
get data
<-
pay
state & area data ->
state & area data
about this section
occupational employment and wage statistics (oews)
none
software developers
software quality assurance analysts and testers
projections central
none
careeronestop
none
<-
job outlook
similar occupations ->
similar occupations
about this section
this table shows a list of occupations with job duties that are similar to those of software developers, quality assurance analysts, and testers.
occupation
job duties
entry-level education
none
2021
median pay
none
none
computer and information research scientists
computer and information research scientists design innovative uses for new and existing computing technology.
master's degree
$131,490
none
computer and information systems managers
computer and information systems managers plan, coordinate, and direct computer-related activities in an organization.
bachelor's degree
$159,010
none
computer hardware engineers
computer hardware engineers research, design, develop, and test computer systems and components.
bachelor's degree
$128,170
none
computer network architects
computer network architects design and build data communication networks, including local area networks (lans), wide area networks (wans), and intranets.
bachelor's degree
$120,520
none
computer programmers
computer programmers write, modify, and test code and scripts that allow computer software and applications to function properly.
bachelor's degree
$93,000
none
computer support specialists
computer support specialists maintain computer networks and provide technical help to computer users.
see how to become one
$57,910
none
computer systems analysts
computer systems analysts study an organization’s current computer systems and design ways to improve efficiency.
bachelor's degree
$99,270
none
database administrators and architects
database administrators and architects create or organize systems to store and secure data.
bachelor's degree
$101,000
none
information security analysts
information security analysts plan and carry out security measures to protect an organization’s computer networks and systems.
bachelor's degree
$102,600
none
mathematicians and statisticians
mathematicians and statisticians analyze data and apply computational techniques to solve problems.
master's degree
$96,280
none
postsecondary teachers
postsecondary teachers instruct students in a variety of academic subjects beyond the high school level.
see how to become one
$79,640
none
web developers and digital designers
web developers create and maintain websites. digital designers develop, create, and test website or interface layout, functions, and navigation for usability.
bachelor's degree
$78,300
<-
state & area data
more info ->
contacts for more information
about this section
for more information about software developers, quality assurance analysts, and testers, visit
association for computing machinery
association for software testing
ieee computer society
computing research association
comptia
for information about opportunities for women pursuing information technology careers, visit
national center for women & information technology
careeronestop
for career videos on software developers, quality assurance analysts, and testers, visit
software developers, applications
software quality assurance analysts and testers
o*net
software developers
software quality assurance analysts and testers
<-
similar occupations
suggested citation:
none
none
what they do
none
work environment
none
how to become one
none
pay
none
state & area data
none
job outlook
none
similar occupations
none
contacts for more information
none
2021 median pay
the wage at which half of the workers in the occupation earned more than that amount and half earned less. median wage data are from the bls occupational employment and wage statistics survey. in may 2021, the median annual wage for all workers was $45,760.
on-the-job training
additional training needed (postemployment) to attain competency in the skills needed in this occupation.
entry-level education
typical level of education that most workers need to enter this occupation.
work experience in a related occupation
work experience that is commonly considered necessary by employers, or is a commonly accepted substitute for more formal types of training or education.
number of jobs, 2021
the employment, or size, of this occupation in 2021, which is the base year of the 2021-31 employment projections.
job outlook, 2021-31
the projected percent change in employment from 2021 to 2031. the average growth rate for all occupations is 5 percent.
employment change, 2021-31
the projected numeric change in employment from 2021 to 2031.
entry-level education
typical level of education that most workers need to enter this occupation.
on-the-job training
additional training needed (postemployment) to attain competency in the skills needed in this occupation.
employment change, projected 2021-31
the projected numeric change in employment from 2021 to 2031.
growth rate (projected)
the percent change of employment for each occupation from 2021 to 2031.
projected number of new jobs
the projected numeric change in employment from 2021 to 2031.
projected growth rate
the projected percent change in employment from 2021 to 2031.
2021 median pay
the wage at which half of the workers in the occupation earned more than that amount and half earned less. median wage data are from the bls occupational employment and wage statistics survey. in may 2021, the median annual wage for all workers was $45,760.
recommend this page using:
none
facebook
none
twitter
none
linkedin
home
subjects
data tools
publications
economic releases
classroom
beta
u.s. bureau of labor statistics
office of occupational statistics and employment projections
psb suite 2135
2 massachusetts avenue ne
washington, dc 20212-0001
none
www.bls.gov/ooh
contact ooh
resources
none
inspector general (oig)
budget and performance
department of labor grants
no fear act
usa.gov
vote.gov
about the site
none
sitemap
freedom of information act
privacy and security statement
disclaimers
linking and copyright info
important website notices
help and tutorials
connect with bls
none
none
none
publications
occupational outlook handbook
computer and information technology


Link: https://www.zippia.com/software-engineer-jobs/demographics/

software engineer demographics and statistics [2022]: number of software engineers in the us
none jobssign in careers
by job titles
by college majors
by companies
by location
job search advice
salaries
post job sign in none
none
none
none
none
none
none
none sign insoftware engineer demographics and statistics in the us overview
jobs
how to become
salary
resume
skills
what they do
education
certifications
demographics more
job description
best states
remote jobs
trends
faqs
part time jobs
entry level jobs
full time jobs
work from home jobs
interview questions
cover letter get alerts for software engineer jobsgender ratiomale - 78%
female - 22%see all gender info percentage of software engineers by racewhite - 52.3%
asian - 33.0%see all race info average age39.5see all age info top industrytechnologysee employment statistics software engineers average salary$100,260see all heatmaps software engineer jobs you might likesoftware engineer statistics by gender 22.0% of software engineers are women and 78.0% of software engineers are men.
job titlemale, 78.0%female, 22.0%software engineers by gendergenderâ â percentagesâ â male78.0%female22.0%gender pay gap for software engineer women earn 92â¢ for every $1 earned by men male income$93,382female income$86,299software engineer gender over time this data shows how men and women predominate in the software engineer position over time.
malefemale100%80%60%40%20%0%2010201120122013201420152016201720182019software engineer gender by yearyearâ â maleâ â femaleâ â 201069.61%30.39%201169.32%30.68%201270.96%29.04%201370.84%29.16%201472.16%27.84%201571.81%28.19%201673.69%26.31%201773.04%26.96%201873.09%26.91%201972.77%27.23%software engineer male to female ratio we compared this job title with other job titles to see how gender percentages varied. as you can see, dell certified systems expert and software applications architect have the biggest difference in gender.
compare jobsjob titlemalefemaleinformatics nurse specialist13%87%clinical support specialist22%78%clinic administrator23%77%software engineer78%22%senior data center engineer98%2%software applications architect98%2%dell certified systems expert99%1%malefemale100%75%50%25%0% dell certified systems expert
software applications architect
senior data center engineer
software engineer
clinic administrator
clinical support specialist
informatics nurse specialist 0%25%50%75%100%software engineer statistics by race the most common ethnicity among software engineers is white, which makes up 52.3% of all software engineers. comparatively, there are 33.0% of the asian ethnicity and 6.9% of the hispanic or latino ethnicity.
job titlewhite, 52.3%asian, 33.0%hispanic or latino, 6.9%black or african american, 4.9%unknown, 2.8%american indian and alaska native, 0.1%software engineer racesoftware engineer raceâ â percentagesâ â white52.3%asian33.0%hispanic or latino6.9%black or african american4.9%unknown2.8%american indian and alaska native0.1%software engineer race and ethnicity over time using the census bureau data, we found out how the percentage of each ethnic category trended between 2010-2019 among software engineers.
whiteasianhispanic or latinoblack or african americansoftware engineer race by yearyearâ â whiteâ â black or african americanâ â asianâ â hispanic or latinoâ â 201056.55%5.49%29.83%5.68%201157.02%5.72%29.33%5.39%201255.93%5.26%30.71%5.83%201356.32%4.78%30.52%5.64%201455.19%5.29%31.17%5.77%201554.37%5.10%31.29%6.34%201653.87%5.09%32.00%6.34%201752.45%4.97%32.56%6.71%201853.09%4.82%31.78%7.32%201952.26%4.91%32.97%6.94%software engineer wage gap by raceasian software engineers have the highest average salary compared to other ethnicities. black or african american software engineers have the lowest average salary at $84,962.
$95,000$93,000$91,000$89,000$87,000$85,000$83,000unknownwhiteblack or african americanasianhispanic or latinoethnicitysalaryunknown$91,057white$90,216black or african american$84,962asian$94,917hispanic or latino$88,050browse most in demand jobs none
resume
location
none
resume
location
none
resume
location
none
resume
location
none
resume
none
resume
location
none
resume
location
none
resume
location
none
none
resume
location
explore all jobs software engineer jobsaverage age of a software engineer we determined the average age of software engineers based on ethnicity and gender.
malefemaleunknownwhiteblack or african americanasianhispanic or latino34363840424446software engineer age by raceraceâ â male ageâ â female ageâ â unknown3532white3942black or african american4043asian3737hispanic or latino3535software engineer age breakdown this chart breaks down the ages of software engineer employees. interestingly enough, the average age of software engineers is 40+ years old, which represents 46% of the population.
compare jobs 40+ years
30-40 years
20-30 years 0%20%40%60%80%100%software engineer agesoftware engineer yearsâ â percentagesâ â 40+ years46%30-40 years36%20-30 years18%types of software engineer degree levels the most common degree for software engineers is bachelor's degree 73% of software engineers earn that degree. a close second is master's degree with 20% and rounding it off is associate degree with 4%.
job titlebachelors, 73%masters, 20%associate, 4%diploma, 1%other degrees, 2%software engineers by educationsoftware engineer degreeâ â percentagesâ â bachelors73%masters20%associate4%diploma1%other degrees2%software engineer jobs you might likesoftware engineer wage gap by educationsoftware engineers with a doctorate degree earn more than those without, at $114,338 annually. with a masters degree, software engineers earn a median annual income of $102,317 compared to $93,382 for software engineers with an bachelors degree.
$119,000$114,000$109,000$104,000$99,000$94,000$89,000master's degreebachelor's degreedoctorate degreeeducationsalarymaster's degree$102,317bachelor's degree$93,382doctorate degree$114,338software engineer employment statisticscompany size we created this chart to show you the average size of companies that typically hire software engineers.
compare jobs < 50 employees
50 - 100 employees
100 - 500 employees
500 - 1,000 employees
1,000 - 10,000 employees
> 10,000 0%20%40%60%80%100%software engineer jobs by employer sizecompany sizeâ â percentagesâ â < 50 employees2%50 - 100 employees2%100 - 500 employees5%500 - 1,000 employees12%1,000 - 10,000 employees34%> 10,000 employees46%top industries hiring software engineers just based on the number of employees within each industry, we were able to determine the most common industries that employ software engineers. those industries include technology, professional and media.
compare jobs technology
fortune 500
telecommunication
media
internet show more0%20%40%60%80%100%software engineer industry statisticsindustryâ â percentagesâ â  technology 37% fortune 500 21% telecommunication 5% media 5% internet 5% professional 5% finance 4% manufacturing 3% start-up 3% retail 3% health care 2% automotive 2% transportation 1% non profits 1% insurance 1% construction 1% hospitality 1%software engineer turnover and employment statisticssoftware engineer unemployment rate over time the bureau of labor statistics came in clutch when it came down to figuring out how the unemployment rate has changed over time. between 2008 and 2018, this is how the number of software engineers changed.
unemployment ratesoftware engineer unemployment rate by yearyearâ â software engineer unemployment rateâ â 20104.56%20113.25%20122.64%20132.67%20142.07%20152.26%20162.33%20172.17%20181.80%20191.88%the average number of years that software engineer stay in a job by looking over 102,987 software engineers resumes, we figured out that the average software engineer enjoys staying at their job for 1-2 years for a percentage of 45%.
compare jobs less than one year
1-2 years
3-4 years
5-7 years
8-10 years
11+ years 0%20%40%60%80%100%software engineer tenurenumber or yearsâ â percentagesâ â less than 1 year24%1-2 years45%3-4 years14%5-7 years10%8-10 years4%11+ years4%comparing the lgbt ratio of software engineers with other job titles after finding the gender ratio, we wondered if the percentages of lgbt persons were different as well. using the data below, you can see how other job titles compare to software engineers.
compare jobsjob titlelgbtjob openingsfunctional test engineer7.66%44,452telecommunication systems designer7.80%102,055software engineer8.26%database development project manager8.31%95,300pc systems administrator8.39%135,471support associate9.71%100,892data scientist20.69%106,973data scientistsupport associatepc systems administratordatabase development project managersoftware engineertelecommunication systems designerfunctional test engineer0%5%10%16%21%26%software engineer lgbt demographicsprofessionâ â percentages of lgbt â â job openingsâ â  functional test engineer 7.66%44,452 telecommunication systems designer 7.80%102,055 database development project manager 8.31%95,300 pc systems administrator 8.39%135,471 support associate 9.71%100,892 data scientist 20.69%106,973foreign languages spoken by software engineers the most common foreign language among software engineers is spanish at 24.5%. the second-most popular foreign language spoken is chinese at 11.4% and french is the third-most popular at 10.2%.
job titlespanish, 24.5%chinese, 11.4%french, 10.2%mandarin, 7.5%german, 7.2%other, 39.2%software engineer languages spokenforeign languageâ â percentagesâ â spanish24.5%chinese11.4%french10.2%mandarin7.5%german7.2%other39.2%software engineer jobsphiladelphia, pa, ...distancesalaryjob typejob leveleducationdate postedfiltersgender ratiomale - 78%
female - 22%see all gender info percentage of software engineers by racewhite - 52.3%
asian - 33.0%see all race info average age39.5see all age info top industrytechnologysee employment statistics software engineers average salary$100,260see all heatmaps software engineer jobs you might likerecently added software engineer jobssoftware engineer heatmaps where do software engineers earn the most?
software engineers earn the most in california, where the average software engineer salary is $115,477. the map here shows where software engineers earn the highest salaries in the u.s. the darker areas across the 50 states highlight the highest salaries.
average salary which state has the most software engineers?
by looking through more than 102,987 resumes, we found that the most popular places for software engineers are san diego, ca and new york, ny.
number of software engineers where are software engineers in high demand?
software engineers are in high demand in new york, ny. there are currently 1,003 job openings for software engineers here. we looked over job openings to determine where in the country software engineers are in the most demand.
jobs openingssoftware engineer demographics faqs what percentage of software engineers are female?
none how many software engineer are there in the us?there are over 329,559 software engineers in the united states.what percentage of software engineers are black?4.9% of software engineers are black or african americanwhat race are most software engineers?most a are white, with 52.3% of software engineers belonging to this ethnicity. 33.0% of software engineers are asian, 6.9% of software engineers are hispanic or latino, 4.9% of software engineers are black or african american, 2.8% of software engineers are unknown, and 0.1% of software engineers are american indian and alaska nativeare software engineer jobs male - dominated ? yes, software engineer jobs are male - dominated. 78% of software engineers are male, and 22% are female, so there are more male software engineers than female software engineers in the united states.how old is the average software engineer ? the average software engineer is 39 years old. 46% of software engineers are 40+ years old or older, 36% are between the ages of 30-40 years, and 18% are between 20-30 years oldhave more questions?
none search for software engineer jobsfind jobsrelated jobs demographics associate software engineer demographics
computer engineer demographics
contract software engineer demographics
embedded software engineer demographics
principal software engineer demographics
senior software development engineer demographics
senior software engineer demographics
senior systems software engineer demographics
software analyst demographics
software consultant demographics
software design engineer demographics
software developer demographics
software development engineer demographics
software engineer lead demographics
software engineer-consultant demographics software engineer related careers associate software engineer
computer engineer
contract software engineer
embedded software engineer
principal software engineer
senior software development engineer
senior software engineer
senior systems software engineer
software analyst
software consultant
software design engineer
software developer
software development engineer
software engineer lead
software engineer-consultant software engineer related jobs associate software engineer employment
computer engineer employment
contract software engineer employment
embedded software engineer employment
principal software engineer employment
senior software development engineer employment
senior software engineer employment
senior systems software engineer employment
software analyst employment
software consultant employment
software design engineer employment
software developer employment
software development engineer employment
software engineer lead employment
software engineer-consultant employment software engineer jobs by location software engineer jobs in arecibo, pr
software engineer jobs in baton rouge, la
software engineer jobs in buckingham, pa
software engineer jobs in caldwell, id
software engineer jobs in colorado springs, co
software engineer jobs in corpus christi, tx
software engineer jobs in dundalk, md
software engineer jobs in glenn heights, tx
software engineer jobs in jamestown, nd
software engineer jobs in jersey city, nj
software engineer jobs in kennewick, wa
software engineer jobs in los angeles, ca
software engineer jobs in lowell, ma
software engineer jobs in round lake beach, il
software engineer jobs in washington, dc previous:overviewnext: overview zippia careers
computer and mathematical industry
software engineer locations
software engineer software engineer demographicsupdated september 9, 2022 none zippia
about us
employer services
terms of use
privacy policy
contact us careers & jobs resume builder
job search q&a
none
copyright â© 2022 zippia, inc.


Link: https://cmpe.sjsu.edu/faculty-staff

faculty & staff directory | computer engineering | san josã© state university
skip to main content
sjsu
computer engineering
san josã© state university
college of engineering
toggle navigation
search here
search
search
none
about computer engineering
contact us
none
bs in computer engineering
bs in software engineering
ms in computer engineering
ms in software engineering
ms in artificial intelligence
cybersecurity certificates program
none
current students
class schedules
new class offerings
student forms
student organizations
useful links
fall 2022 schedule faq
request forms
none
directory
advisors
faculty & staff forms
office hours
none
ta positions
tenure track positions
technology showcase
computer engineering
san josã© state university
college of engineering
sjsu home
>
college of engineering
>
computer engineering
>
faculty & staff
> faculty & staff directory
faculty & staff directory
none
name
first
last
contact information
none
rod fatoohi
professor, chair
rod
fatoohi
chair-computer-engineering@sjsu.edu (408) 924-4150
eng 284a
sjsu people profile
office hours research interest:â computer networking and parallel processing.
none
magdalini
eirinaki
professor, associate chair
magdalini
eirinaki
magdalini.eirinaki@sjsu.edu (408) 924-3828
eng 283f
sjsu people profile
office hours research interests:â recommender systems,
machine learning/data mining, social network analysis,
social recommender systems, deep recommender systems,
data analytics/mining applications.
â
none
ahmet bindal professor
ahmet
bindal
ahmet.bindal@sjsu.edu (408) 924-4195
eng 277
sjsu people profile
office hours research interest:â vlsi design, computer architecture and robotics.
none
mohamed fayad professor
mohamed
fayad
m.fayad@sjsu.edu (408) 924-7364
eng 283i
sjsu people profile
office hours
none
jerry gao professor
jerry
gao
jerry.gao@sjsu.edu (408) 924-3904
eng 267b
sjsu people profile
office hours research interests:â cloud computing, smart city and big data computing,
taas, software engineering, test automation, mobile computing and cloud services.
none
donald hung
professor
donald
hung
donald.hung@sjsu.edu (408) 924-4087
eng 283a
sjsu people profile
office hours
advising information research interests:â design, verification and test
of digital/computing hardware; soc and multicore systems;
application-driven algorithms and architecture;
parallel programming; fpgas and reconfigurable computing.
none
harry li professor
harry
li
hua.li@sjsu.edu (408) 924-4060
eng 267a
sjsu people profile
office hours research interests:â embedded systems, multimedia computing,
vlsi design, wireless communications, computer vision and
computer graphics, neural networks, fuzzy logic and neural fuzzy control.
none
haluk ozemek professor
haluk
ozemek
haluk.ozemek@sjsu.edu (408) 924-3877
eng 271
office hours research interests:â embedded systems in cardiovascular systems.
none
simon shim professor
simon
shim
simon.shim@sjsu.edu (408) 924-7853
eng 269
sjsu people profile
office hours research interests:â internet computing, database management,
machine learning, and information retrieval.
none
xiao su
professor, associate dean for graduate studies and research
xiao
su
xiao.su@sjsu.edu (408) 924-7366
eng 284a
sjsu people profile
office hours
research interests:â computer networking,
multimedia communications, network security, and machine learning.
none
weider yu professor
weider
yu
weider.yu@sjsu.edu (408) 924-7365
eng 283g
sjsu people profile
office hours research interests:â distributed software,
big data and mobile engineering, systems and development,
tools and processes, distributed open software design technologies. quality.
none
kaikai liu associate professor
kaikai
liu
kaikai.liu@sjsu.edu (408) 924-7847
e283j
research interests:â mobile and cyber-physical systems,
internet-of-things, smart sensing, intelligent and autonomous systems,
oftware-defined computing and networking.
none
younghee park associate professor
younghee
park
younghee.park@sjsu.edu (408) 924-7854
eng 263
office hours
sjsu people profile research interests:â cybersecurity, iot security,
sdn/nfv, blockchain, ai security, biometric security, malware detection.
none
wencen wu
associate professor
wencen
wu
wencen.wu@sjsu.edu
eng187
research interests:â robotics, systems and control,
machine learning, and distributed parameter systems as applied to
cyber-physical systems and autonomous multi-robot systems.
none
gheorghi
guzun assistant professor
gheorghi
guzun
gheorghi.guzun@sjsu.edu (408) 924-4203
e181
research interests:â data management algorithms and
systems that accelerate big data analytics through scalable indexing;
ata compression; machine learning algorithms.
none
jorjeta
jetcheva
assistant professor
jorjeta
jetcheva
jorjeta.jetcheva@sjsu.edu
none
nima
karimian assistant professor
nima
karimian
nima.karimianbahnemiri@sjsu.edu
research interests:â security and privacy of biometrics,
internet of things and hardware security, computer vision,
and machine learning.
none
carlos rojas
assistant professor
carlos
rojas
carlos.rojas@sjsu.edu (408) 924-4131
e283j
none
gokay saldamli assistant professor
gokay
saldamli
gokay.saldamli@sjsu.edu (408) 924-2984
eng 179
research interest: blockchain, post-quantum cryptography, deep learning,
iot security and cybersecurity.
â
none
mahima
agumbe
suresh
assistant professor
mahima
suresh
mahima.agumbesuresh@sjsu.edu
research interests:â cyber-physical systems, internet of things,
nd data analytics for smart city applications.
augmented reality for safety and education.
none
stas
tiomkin assistant professor
stas
tiomkin
stas.tiomkin@sjsu.edu
research interests: artificial intelligence and life, reinforcement learning,â human-machine collaboration, information processing in dynamical control systems, intrinsic motivation and unsupervised learning, robotics, structured deep learning, geometric control, and information theory.
none
haonan wang
assistant professor
haonan
wang
haonan.wang@sjsu.edu
none
charley abboud lecturer
charley
abboud
charley.abboud@sjsu.edu
none
sithu aung lecturer
sithu
aung
sjsucmpecontact@gmail.com
engr 281
office hours
none
andrew bond lecturer
andrew
bond
andrew.bond@sjsu.edu
none
robert bruce lecturer
robert
bruce
robert.bruce@sjsu.edu
none
frank butt lecturer
frank
butt
frank.butt@sjsu.edu
none
shih yu chang lecturer
shih yu
chang
shihyu.chang@sjsu.edu
none
ishie eswar
lecturer
ishie
eswar
ishie.eswar@sjsu.edu (415) 545-8458
eng 279
office hours
advising information
none
john gash lecturer
john
gash
john.gash@sjsu.edu
eng 283k
office hours
none
jahan
ghofraniha lecturer
jahan
ghofraniha
jahan.ghofraniha@sjsu.edu
none
juan gomez lecturer
juan
gomez
j_carlos_gomez@yahoo.com
eng 281
office hours
none
dan harkey
lecturer, msse advisor
dan
harkey
dan.harkey@sjsu.edu (408) 924-4038
eng 283d
office hours
advising information
none
brett hartbeck lecturer
brett
hartbeck
brett.hartbeck@sjsu.edu
eng 250
none
preetpal kang lecturer
preetpal
kang
preetpal.kang@sjsu.edu
eng 281
office hours
none
michael larkin lecturer
michael
larkin
michael.larkin@sjsu.edu
none
kong li lecturer
kong
li
kong.li@sjsu.edu
eng 250
office hours
people profile
none
hungwen li lecturer
hungwen
li
hungwen.li@sjsu.edu
eng 281
office hours
none
frank lin lecturer
frank
lin
frank.lin@sjsu.edu
eng 367
office hours
none
ron mak lecturer
ron
mak
ron.mak@sjsu.edu
eng 250
sjsuâ people profile
office hours
none
anna meng lecturer
anna
meng
hsin-yi.meng@sjsu.edu
eng 250
office hours
none
faramarz mortezaie lecturer
faramarz
mortezaie
faramarz.mortezaie@sjsu.edu
none
kevin nguyen lecturer
kevin
nguyen
kevin.m.nguyen@sjsu.edu
none
paul nguyen lecturer
paul
nguyen
paul.nguyen@sjsu.edu
eng 281
office hours
none
vishnu pendyala lecturer
vishnu
pendyala
vishnu.pendyala@sjsu.edu
none
rakesh ranjan lecturer
rakesh
ranjan
ranjanr@us.ibm.com (408) 924-4132
eng 281
office hours
none
ammar rayes lecturer
ammar
rayes
ammar.rayes@sjsu.edu
none
arash shokouh lecturer
arash
shokouh
none
shai silberman
lecturer
shai
silberman
shai.silberman@sjsu.edu
office hours
none
richard sinn lecturer
richard
sinn
richardsinn@yahoo.com
eng 281
office hours
none
chao-li tarng lecturer
chao-li
tarng
chaoli.tarng@sjsu.edu
eng 259
office hours
none
bapi vinnakota lecturer
bapi
vinnakota
bapiraju.vinnakota@sjsu.edu
none
gopinath
k vinodh lecturer
gopinath
vinodh
gopinath.vinodh@sjsu.edu
none
chandrasekar vuppalapati lecturer
chandrasekar
vuppalapati
chandrasekar.vuppalapati@sjsu.edu
eng 281
office hours
none
charles zhang lecturer
charles
zhang
charles.zhang@sjsu.edu
eng 281
office hours
none
martin alvarezlopez
undergraduate advisor
martin
alvarezlopez
martin.alvarezlopez@sjsu.edu
e247
none
william
giallo
administrative analyst
william
giallo
william.giallo@sjsu.edu
e284
none
melissa mathews
administrative support coordinator
melissa
mathews
melissa.mathews@sjsu.edu
(408) 924-4105
eng 284
none
brandi rubino
administrative analyst
brandi
rubino
brandi.rubino@sjsu.edu (408) 924-4151
eng 284
none
monica serna
bs advisor
monica
serna
undergradadvisor-cmpe-se@sjsu.edu (408) 924-4150
e279
office hours
none
zhenyu (james) wu
system administrator
zhenyu
wu
zhenyu.wu@sjsu.edu (408) 924-3897
eng 278a
none
hotavya
chaudhuri student assistant
hotavya
chaudhuri
frontdesk-computer-engineering@sjsu.edu
none
isabella
garcia
front desk assistant
isabella
garcia
frontdesk-computer-engineering@sjsu.edu (408) 924-4150
e284
cmpe main office hours:m-th 9am-6pm
â â â â â â â  f 9am-5pm
(closed for lunch 12:00pm-1:30pm)
none
shubham
goswami student assistant
shubham
goswami
frontdesk-computer-engineering@sjsu.edu
cmpe main office hours:m-th 9am-6pm
â â â â â â â  f 9am-5pm
(closed for lunch 12:00pm-1:30pm)
none
jacqueline
toscano student assistant
jacqueline
toscano
frontdesk-computer-engineering@sjsu.edu
give to sjsu engineering
cmpe on facebook
cmpe on linkedin
navigate
about
academics
students
faculty & staff
career opportunities
technology showcase
directory
advisors
faculty & staff forms
office hours
none
none
none
information for
alumni
current students
donors
faculty & staff
future students
researchers
colleges
applied sciences & arts
business
education
engineering
humanities & the arts
international & extended studies
science
social sciences
quick links
academics
bookstore
budget central
canvas
careers & jobs
king library
parking & maps
contact us
contact
directory
report a problem with this website
none
san josã© state university
none
408-924-1000
none
charles w. davidsoncollege of engineering
none
none


Link: https://www.unr.edu/cse/undergraduates/prospective-students/what-is-software-engineering

what is software engineering | computer science & engineering | university of nevada, reno
skip to main content
none
apply
visit
news
give
search www.unr.edu
search www.unr.edu
none
search www.unr.edu
search www.unr.edu
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
accreditation
open faculty positions
none
what is computer science & engineering?
what is software engineering?
what are intelligent systems?
what is computer networking?
advising
how to get credit for your internship
none
accelerated b.s./m.s.
m.s. in computer science
ph.d. in computer science
graduate certificate in cybersecurity
cse graduate program handbook
fellowships and scholarships
none
none
cybersecurity & network systems
computer networking research projects
data & software systems
software engineering research projects
summer research experience for undergraduates
research projects
how to apply
intelligent & autonomous systems
robotics and computer vision research projects
summer research experience for undergraduates
how to apply
research projects
apply
visit
news
give
none
none
accreditation
open faculty positions
none
what is computer science & engineering?
advising
how to get credit for your internship
none
accelerated b.s./m.s.
m.s. in computer science
ph.d. in computer science
graduate certificate in cybersecurity
cse graduate program handbook
fellowships and scholarships
none
none
cybersecurity & network systems
data & software systems
intelligent & autonomous systems
none
/
none
/
none
/
none
/
what is software engineering?
none
none
accreditation
open faculty positions
none
what is computer science & engineering?
none
what are intelligent systems?
what is computer networking?
advising
how to get credit for your internship
none
accelerated b.s./m.s.
m.s. in computer science
ph.d. in computer science
graduate certificate in cybersecurity
cse graduate program handbook
fellowships and scholarships
none
none
cybersecurity & network systems
computer networking research projects
data & software systems
software engineering research projects
summer research experience for undergraduates
research projects
how to apply
intelligent & autonomous systems
robotics and computer vision research projects
summer research experience for undergraduates
how to apply
research projects
what is software engineering?
bjarne stroustrup, the creator of the c++ programming language, once said that "our civilization runs on software." this statement is impressively backed by reality, in which software controls a huge variety of devices, from cell phones and music players, to smart appliances such as microwave ovens and laundry machines, to personal computers that many people use at work and large mainframe computers that operate in governmental organizations. in fact, it is hard to imagine an area of human activity that does not rely at least partially on software, including professional work, home activities, and entertainment.
using a basic definition, software means computer programs and their associated documentation. computer programs, in turn, consist of algorithms (or procedures) applied to various types of data. software engineering emerged in the late 1960s as a new engineering discipline concerned with all aspects pertaining to software production. it encompasses concepts, principles, theories, techniques and tools that can be used for developing high-quality professional software. first introduced at the 1968 nato software engineering conference in garmisch, germany, software engineering emphasizes a systematic, disciplined approach to software development and evolution and typically applies to the construction of large software systems (or products) in which teams of numerous software engineers are involved.
high-quality software is characterized by:
high dependability (including safety, security and reliability)
efficiency
usability
accessibility
maintainability
a software product is said to have a life-cycle, or undergo a software process, which in software engineering terms consists essentially of two parts: development and evolution. both involve traditional engineering phases, software development consisting primarily of concept creation, requirements specification, design, implementation, integration, testing, and deployment. on the other hand, software evolution involves operation and maintenance as well as some limited development activities aimed at improving the software.
applications of software engineering
software engineering applications are practically unlimited. in fact, software engineering has grown so fast in the last several decades that it has become tightly connected with all other areas of computer science (e.g., artificial intelligence, parallel processing, computer graphics, human-computer interaction, database management systems, and many others) as well as with some areas outside the traditional computer domain (such as cognitive sciences and visual arts).
challenges in software engineering
current challenges in software engineering research and development include:
dealing with the increased complexity of software required in new applications
the diversity of software systems that need to communicate/operate with each other
the need to develop trustworthy software
increased market demands for a quick turnaround from concept to deployment and operation
the quest for increased efficiency in component-based reuse and automatic code generation
studying software engineering
students who want to focus on software engineering are expected to gain and integrate knowledge from various subject areas including computer programming, data structures, algorithms, numerical methods, statistics, design patterns, human-computer interaction, computer graphics, information visualization, database systems, web development, software project management, and software engineering.
internship and employment opportunities in software engineering
software engineers are in high demand nationally and abroad. the list of companies hiring software engineers is practically endless. while most jobs are in industry, research labs also hire skilled software engineers, either for research in software engineering itself or for supporting software development in research environments. furthermore, skilled software engineers are also hired by start-up companies, or are well prepared to start their own software development companies.
notably, under the umbrella of software engineering several specialized professions exist besides software engineer itself, including computer programmer, analyst, designer, developer, tester, consultant and others.
department contact information
location:
william n. pennington engineering building
room number: wpeb 401
mailstop: 0171
mailing address: 1664 n. virginia street
general questions:
cse@unr.edu
graduate program questions:
grad_director@cse.unr.edu
phone:
(775) 784-6974
directory:
faculty & staff directory
follow the university
none
none
none
none
none
none
none
none
1664 n. virginia street, reno, nv 89557
(775) 784-1110
employment & careers
non-discrimination statement
privacy
website help
commitment to diversity
commitment to accessibility
contact the university
equal opportunity and title ix


Link: https://www.shutterstock.com/search/software-engineering-people

25,545 software engineering people images, stock photos & vectors | shutterstock none
none
none
none
none
none
none
none
none
enterprise
none
none menu none
none
none
none
menu
none imageââsoftware engineering people royalty-free images25,545 software engineering people stock photos, vectors, and illustrations are available royalty-free.â  see software engineering people stock video clips
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none


Link: https://professionalprograms.umbc.edu/software-engineering/software-engineering-faculty/

software engineering faculty – office of professional programs
skip to content
none
none
professional programs home
biotechnology
college teaching & learning science
community leadership
cybersecurity
data science
engineering management
entrepreneurship, innovation, and leadership
geographic information systems
health information technology
industrial/organizational psychology
integrated product development and manufacturing
learning and performance technology
ma in education
organizational consulting
project management
software engineering
systems engineering
technical management
training and talent development
apply
contact
office of professional programs
software engineering
menumenu none
none
master's
graduate certificate
costs & financial aid
course descriptions
schedule of classes
none
master's application
certificate application
international students
accelerated program application
faculty
none
forms
explore job data
campus resources
scholarships & funding
covid-19 information
events
blog
contact us
software engineering faculty
mohammad samarah, ph.d. | professor of the practice and graduate program director
none
show more
dr. samarah is a computer scientist and engineering executive with experiences in teaching, administration, industry, and research. his area of interest is in the intersection of big data, intelligent applications, and real-time systems. dr. samarah received a bachelorâs in engineering from northern arizona university in computer science and engineering and holds a masterâs and doctorate degrees in computer science from florida institute of technology. dr. samarahâs industry and academic experiences include senior leadership positions at harris corporation (now l3harris) in melbourne, florida, senior engineering positions with emulex corporation in seattle, and a founding member of florida polytechnic university college of engineering and college of innovation and technology in lakeland, florida.
adam lippe, j.d. | faculty member
none
show more
mr. lippe, j.d. is a career prosecutor who serves as the chief of the economic of the cyber crimes unit for baltimore county state attorney office. mr. lippe and his staff oversee and works on complex fraud cases including identity theft, internet scams, and check and credit card frauds among others. he serves as an adjunctâ¯facultyâ¯at umbc teaching courses in ethics, cybercrime, and cyber security law and policy.â¯he taught at both maryland law schools and other local colleges and universities. he was a frequent lecturer at the national advocacy center in columbia, south carolina for the national district attorney association. he is licensed in both the state of maryland and new jersey. mr. lippe is a graduate of the university of maryland school of law and the johns hopkins university in baltimore, maryland.
rand obeidat, ph.d. | faculty member
none
show more
dr. obeidat has a ph.d. in information systems from umbc. her research interests lie in the area of data analytics, ranging from data collection to data wrangling, to analysis and interpretation. she acquired unique expertise in the prediction of infectious diseases through google trends and other surveillance tools. dr. obeidatâs recent papers, publications, and conference presentations include the following: can users search trends predict people scares or disease breakout? infectious skin diseases in the us as a case study; usersâ internet searches as proxies for disease escalation trends. her responsibilities include support curricula development, implementation, and training. she teaches structured systems analysis and design, data analytics courses including fundamentals of data science and analytics, data visualizations, and decision science and analytics.
carolyn seaman, ph.d. | faculty member
none
show more
none
looking for more info?
contact us
apply now
main office
1000 hilltop circle
sherman hall east 4th floor
baltimore, md 21250
410-455-2336
shady grove
9630 gudelsky drive
rockville, md 20850
301-738-6081 more information
locations
our programs
professional programs blog
umbc mic'd up podcast
get in touch!
connect with usmenumenu none
none
none
none
office of professional programs


Link: https://informationsystems.umbc.edu/home/research/areas-of-research/systems-and-software/

software engineering
–
department of information systems - umbc
skip to main content
none
department of information systems
menu
none
none
none
none
none
none
search
search context
this site
all of umbc
college of engineering and information technology
department of information systems
home
about
message from the chair
vision and mission
leadership team
advisory board
faq
events
employment opportunities
all opportunities
adjunct faculty recruitment
undergraduate
bachelorâs degree programs
business technology administration
information systems
accelerated programs – bs/ms & ba/ms
minor in information systems
entrepreneurship and innovation minor
spring 2020 grading exceptions
accelerated programs – bs/ms & ba/ms
bs & ms in information systems â on campus
bs & ms in information systems â online
ba & ms in human-centered computing
bs & ms in human-centered computing
certificate programs
is upper division certificates
management certificates
undergraduate course listing and internships
is 397 health it internship (credits: 3)
is 399 cooperative education in information systems (credits: 1 â 3)
is 478 cybersecurity internship (credits: 3)
mgmt 399
administrative internship (credits: 3)
undergraduate advising
undergraduate forms
academic honors, scholarships and resources
undergraduate research opportunities
technology requirements
graduate programs
masterâs programs
information systems – on campus
information systems – online
human-centered computing (hcc)
health it
software engineering
doctor of philosophy programs
doctor of philosophy in information systems
is comprehensive review policy
doctor of philosophy in human-centered computing (hcc)
human-centered computing comprehensive review policy
academic integrity policies for phd comprehensive exams (both is and hcc phd programs)
graduate program forms
course catalog
cpt approval process
opt approval process
technology requirements
people
leadership team
full-time faculty
part time faculty
new faculty spotlights
ian stockwell
zehra zaidi
lei zhang
student spotlights
jack lopez
maria lopez delgado
kayla tomas â23
special status faculty
staff
graduate and research assistants
coeit shared services request
research
research overview
areas of research
ai and machine learning
data science
health informatics
human-computer interaction
software engineering
externally funded projects
current projects
past externally funded projects
research seminar series
is student research symposium
dissertation defenses
none
none
none
none
none
none
in this section
research
research overview
areas of research
ai and machine learning
data science
health informatics
human-computer interaction
software engineering
externally funded projects
current projects
past externally funded projects
research seminar series
is student research symposium
dissertation defenses
location
none
contact
contact us
none
none
none
none
software engineering
systems and software group analyzes and studies real life systems, and the processes of adopting, designing, developing, testing, and maintaining software solutions to improve organizational productivity, efficiency, and outcomes. the importance of aligning the organizational missions and goals with those of software projects is well recognized which prompts a research focus on the people and organizational issues on both systems and software sides in addition to the technical ones.
faculty with a primary interest in systems & software:
mohammad samarah, ph.d., florida institute of technology ( msamarah@umbc.edu ) [professor of practice] [graduate program director, software engineering]
sreedevi sampath , ph.d., university of delaware ( sampath@umbc.edu ) [associate professor] [graduate program director, is]
carolyn seaman , ph.d., university of maryland ( cseaman@umbc.edu ) [professor]
ant ozok , ph.d., purdue university ( ozok@umbc.edu )â [associate professor]
lei zhang, ph.d., mcmaster university ( leizhang@umbc.edu ) [assistant professor]
location
none
contact
contact us
none
none
none
none
none
none
none
none
none
none
none
none
none
resources
alumni
career center
events
get help
news
visit campus
work at umbc
important contacts
online directory
contact umbc
request support
emergency info
umbc police :
410-455-5555
sign up for text alerts
contact us
request info
apply
top stories of the week
enter email to subscribe
go
â© umbc: a
university system of maryland
member institution
accreditation
equal opportunity
none
title ix
web accessibility
subscribe to umbc weekly top stories
first name
last name
email
i am interested in:
none
none
none


Link: https://devmountain.com/blog/software-developer-vs-software-engineer-whats-the-difference/

software developer vs. software engineer: whatâs the difference?
login
search for:
none
apply
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
about us
about devmountain
work for us
events
alumni
contact us
campuses
lehi, ut
dallas, tx
remote
request a tour
courses
coding basics
web development
java software engineering
python software engineering
data analytics
ios development
software qa
ux design
cybersecurity
self-study
all courses
compare courses
view upcoming course dates
free events
view upcoming events
affordability
tuition & financing
scholarships
housing
outcomes
outcomes
career support
alumni
application process
none
software developer vs. software engineer: whatâs the difference?
none
none
software developer vs. software engineer: whatâs the difference?
none
none
if youâre confused about the difference between software developers and software engineers, youâre not alone. not only is there an overlap in some of the skills required for both developers and engineers, but experts in the field disagree on whether or not the titles even matter. whatâs important to know is that software developers and software engineers arenât the same thing, and as long as employers keep searching for developers and engineers, itâs worth knowing the difference.
none
none
none
skills
none
none
okay, letâs explore the different skill-sets involved with becoming a software developer or software engineer. for instance, if you like working with people and finding creative solutions, you might want to consider becoming a software developer. on the other hand, if you feel more comfortable working with a wide range of engineering principles, software engineering might be better.
none
none
thatâs because the main difference between being a software developer vs software engineer is mainly in the job function itself. software engineers may take a hand in development, but developers seldom get too involved in the engineering side of things. of course, thereâs more to it than just this, but this distinction is probably the easiest way to differentiate the two positions.
none
none
none
none
more specifically, developers work directly with the client to figure out what they want, then lead a team to implement the design while keeping in contact with their clients throughout the life cycle of the project.
none
none
to do this, developers need a working knowledge of the software to be able to balance what the client wants with what the software can actually provide. they also need to have great attention to detail to ensure the project is running smoothly.
none
none
software engineers, on the other hand, are the ones who actually build the software systems. as such, they are much more hands-on during the development process, working to apply engineering principles to the creation and testing of the product.
none
none
where developers might help find solutions to specific problems, engineers are responsible for the system as a whole. engineers must look for solutions that will work across the entire program, rather than just one area.
none
none
it should be noted that because software engineers are required to have a higher level of technical skill than developers, itâs often easier for an engineer to work as a developer than the other way around.â
but thereâs another way to differentiate between the two as well.â
none
developers often work on the parts of code that deal directly with the clientâs experience. theyâre changing things like the color of the platform, the location of a particular button or data entry field, or what the website or application looks like when transitioning tasks.
none
all of these coded elements will be directly seen and noticed by the client or user.
software engineers are working on problems that wonât be necessarily seen by the client or end user but will affect their user experience.
theyâre deciding how userâs data should be collected, where and how it should be stored, how to recall that data when itâs needed later, and the most efficient ways to analyze or manipulate it.
no one is seeing all of this number-crunching going on, but if the code isnât right, the user is going to see it pretty quickly.
think of office software. if you worked at a hospital and needed to pull the data for everyone who ever worked with the 20-year hospital veteran, âdr. cho,â and you only got two results back, thatâd be a major red flag.
thereâs just no way that doctor has only ever seen 2 patients in 20 years.
none
this is also why there isnât a huge difference between backend developers and software engineers. there may be a slight difference between client interaction time, but other than that, title choice happens on a company-by-company basis.
none
none
training
none
none
whether theyâre looking to become a software engineer or developer, many prospective software professionals feel like their education has to start at the same: computer science degree programs.
none
none
a bachelorâs degree that focuses on coding and software â including, but not limited to, computer science â will not only provide the necessary software education, but the degree could help you get your foot in the door when it comes to employment.
none
none
none
none
none
none
none
one of the growing trends in tech-related education is coding bootcamps, which can provide a base-level education for a fraction of the cost and time. some bootcamps offer certification, another way to get your foot in the door. but, again, certificates arenât the only factor in getting a job, so donât let that limit your learning.
none
none
none
none
none
whether youâre in a degree program or a bootcamp, itâs also worth getting to know other coders. you can do this in person with friends or classmates, or you can find coding communities online. interacting with people can keep you motivated, help you learn outside of a classroom setting, and provide you with valuable advice.
none
none
furthermore, while learning concepts is important, youâll also want to spend time creating finished projects for a portfolio. for software engineers, this should include a wide variety of projects to showcase your range.
none
none
youâll want to show youâre not just adept in c++, but also java, ruby, python, etc. on the other hand, software developers are often encouraged to specialize. if you want to do website development, for instance, make sure you have several examples of your website work.
none
none
regardless of how you go about getting a coding education, what really matters is what you learn, what you create, and how you approach problem-solving.
who makes more? software developers or software engineers?
none
so whatâs the difference in salary between software developers and software engineers?
isnât that the question?
unfortunately, we donât have a good answer for that.
there are so many variables to take into account.
what does the local job market look like?
how developed is that department in the company?
what kind of work is the person doing?
are they client-side or working internally?
does the company distinguish between backend devs and software engineers?
what do other companies in the area pay for these kinds of positions?
all of these questions (and many many more) will affect that end salary.
none
these numbers wonât be perfect, but theyâll be better than any answer we could share with you.
none
none
interview
none
none
because of the overlap between software developers and software engineers, it should come as no surprise that there are often similarities in the interview process as well. you should definitely come prepared with a portfolio; employers like to see your past work.
and your resume should also reflect the kind of position youâre gunning for. most people make the mistake of having only one technical resume and applying to both developer and engineering jobs with it.
but if youâre applying for a software engineering job, your resume should highlight big, across-the-board problems that you solved. if youâre applying for a software developer job, then your resume should feature how you interacted with and solved specific issues in specific instances.
none
none
if youâre interviewing, you should also be prepared to tackle questions that test how you think. developers are often expected to prove they can think creatively, while engineers usually need to prove they can tackle problems using mathematical and scientific approaches.
none
none
you should also research what employers are expecting from your work in the posted job position.
none
none
because thereâs overlap between the fields of software development and engineering (remember, some experts no longer bother making a distinction between the two), what an employer expects you to do might not line up with what youâre anticipating.
none
none
if youâve trained to be a software engineer, for instance, are you prepared to dip your toe into the world of development? would you want to?
none
none
the best advice for individuals considering software development or engineering is to find their niche. with a little ingenuity and some hard work, making the jump between disciplines is possible so find what you like doing and make it work for you!
interested in getting into development or engineering?
thinking about breaking into tech but not sure what your focus should be?
none
this course is dedicated to helping you get your toe wet in the world of coding. if you think tech might be for you but want to try doing something before fully committing to a different career or learning and an entirely new skill set, this course is for you.
none
none
none
continue learning
none
none
how to become a software engineer: seven steps
none
none
hereâs how to become a software engineer without a degree
none
none
web development vs. software development: which is the better career choice?
none
see also:
career support ,
web development
related posts
none
none
none
none
company
home
about
contact
work for us
catalog & policies
press
students
approach login
apply
blog
beginners guide
faq
alumni
community
dm discord
strayer
instruct
events
shop
join us
none
none
none
none
none


Link: https://behrend.psu.edu/school-of-engineering/academic-programs/software-engineering/faculty

software engineering faculty | penn state behrend
skip to main content
none
hotline
contact us
visit us
apply now
menu
academics
majors and minors
graduate programs
open lab learning
research opportunities
black school of business
school of engineering
school of humanities and social sciences
school of science
nursing program
admissions
about penn state behrend
first-year students
transfer students
international students
change of campus students
adult learners
graduate students
applying to behrend
tuition and financial aid
student life
commuter life
residence life
dining on campus
athletics and recreation
clubs and activities
equity and diversity
student services
safety on campus
information for
future students
current students
faculty & staff
alumni
donors & friends
business & community partners
visitors
full site navigation menu
this dialog contains the full navigation menu for this site.
none
close
search
search
enter the terms you wish to search for.
search type:
penn state behrend
campus directory
penn state (all websites)
penn state directory
penn state departments
hotline
contact us
visit us
apply now
this is penn state behrend
about penn state behrend
behrend as an open lab
behrend: a best value
vision of a behrend graduate
college calendars
college leadership
people and departments
visit behrend
give to behrend
academics
majors and minors
exploratory (undeclared)
adult learner programs
graduate programs
academic advising
career services
college registrar
admissions and aid
penn state behrend at a glance
undergraduate admissions
graduate admissions
visiting behrend
applying to behrend
tuition and financial aid
student life
on-campus housing
off-campus housing
commuter resources
dining on campus
fitness and recreation
student activities
safety on campus
athletics
research and outreach
research
faculty research
student research
outreach
community and workforce programs
james r. meehl innovation commons
knowledge park
k-12 education outreach
pennsylvania sea grant
find information for:
future students
current students
faculty & staff
alumni
donors & friends
business & community partners
visitors
helpful links
campus map
virtual campus tour
directions to campus
parking on campus
safety on campus
behrend blog
calendars
directories
connect with us
facebook
twitter
linkedin
instagram
youtube
home
school of engineering
academic programs
software engineering
software engineering faculty
none
computer science and software engineering faculty
none
chair, computer science and software engineering
associate professor, computer science and software engineering
[email protected]
814-898-6184
173 burke
none
assistant professor, computer science and software engineering
[email protected]
814-898-6943
166 burke
none
director, youth education outreach and engineering k-12 outreach center
associate teaching professor, computer science and software engineering
[email protected]
814-898-6685
211 burke
none
assistant professor, computer science and software engineering
[email protected]
814-898-6944
159 burke
none
assistant professor, computer science and software engineering
[email protected]
814-898-6315
172 burke
none
lecturer in engineering, computer science and software engineering
[email protected]
814-898-6467
238 burke
none
assistant teaching professor, computer science and software engineering
[email protected]
814-898-7024
160 burke
none
lecturer in engineering, computer science and software engineering
[email protected]
814-898-6346
167 burke
none
lecturer, computer science and software engineering
[email protected]
814-898-6935
154 burke
none
associate professor, computer science and software engineering
[email protected]
814-898-6261
170 burke
none
associate professor, computer science and software engineering
[email protected]
814-898-6386
164 burke
none
associate professor, computer science and software engineering
[email protected]
814-898-6252
157 burke
part-time faculty
none
lecturer in engineering (part-time), computer science and software engineering
[email protected]
814-898-6634
136 burke
none
lecturer in engineering (part-time), computer science and software engineering
[email protected]
814-898-6634
136 burke
software engineering
objectives and outcomes
software engineering faculty
request more information
see also
curriculum
university bulletin
fasenmyer engineering design conference
none
penn state behrend
penn state erie, the behrend college, offers the learning opportunities of a major research university in a welcoming, student-centered campus environment.
facebook
twitter
linkedin
instagram
youtube
contact us
visit us
apply now
this is penn state behrend
behrend at a glance
vision of a behrend graduate
college calendars
college history
college leadership
college strategy
employment
people and departments
academics
majors and minors
graduate programs
bookstore
career services
college registrar
exploratory and pre-major advising
learning resource center
lilley library
student success
study abroad
admissions
undergraduate
graduate
adult learners
change of campus students
international students
transfer students
veterans
research/outreach
research
faculty research
student research
outreach
community and workforce programs
james r. meehl innovation commons
knowledge park
pennsylvania sea grant
plastics training academy
wpse radio
yahn planetarium
youth outreach
student life
dining on campus
housing and residence life
commuter student resources
international student services
equity and diversity
athletics and intramurals
student leadership and involvement
student services
academic schools
black school of business
school of engineering
school of humanities and social sciences
school of science
nursing program
tuition and financial aid
tuition and costs
financial aid
aid opportunities and deadlines
financial literacy
grants
scholarships
veterans benefits
helpful links
campus map
virtual tour
directions
parking
safety
behrend blog
calendars
people and departments
covid-19 information
none
4701 college drive,
erie,
pa
16563
814-898-6000
footer legal menu
privacy
non-discrimination
equal opportunity
accessibility
copyright
map
website feedback
the pennsylvania state university © 2022


Link: https://cse.ucsd.edu/faculty-research/research-areas/software-engineering

software engineering | computer science
none
none
about
people
our building
cse publications
cse news
cse events
contact us
administration
research
research areas
awards & accomplishments
associated centers
technical reports
cse fellows program
graduate
student awards
degree programs
graduating phds
admissions
courses
advising
financial opportunities
deepmind fellowships
undergraduate
undergraduate home page
prospective students
courses and enrollment information
degree programs
academic advising
faculty mentorship
tutors
cse honors program
opportunities and support
wasc educational learning
student awards
diversity
events
committee
office hours
leadership program
seminar series
book club
celebration of diversity
student organizations
department activities
outreach
videos & resources
volunteer
community
student organization
cse alumni board
cse alumni
cse founded companies
industry
giving
search
search
enter the terms you wish to search for.
software engineering
software engineering is concerned with discovering techniques for improving the cost, correctness, and usability of software systems. unfortunately, these goals are in continual tension with each other. indeed, most commercial software systems fail on all counts, threatening the health of the software companies and the well-being of software users.
a critical component of achieving these three goals is reducing the complexity of software systems through improved reasoning techniques, system structures, and analysis. a less complex system is less costly to build correctly and more predictable in use. the software engineering group's primary thrust is to cope with the crippling complexity of large systems and the processes that produce them.
requirements engineering
empirical studies show that most of the difficulties in producing large complex systems stem from problems with the requirements, which define what the system is supposed to accomplish. consequently, methods for acquiring and analyzing requirements can have very large economic leverage. studies also show that social, political and cultural factors very often lie behind failures in large system development efforts. our research in requirements is concerned with the use of social science methods and video to develop requirements that will allow the system to succeed in the environment where it will actually be used.
-->
software design and evolution
in the area of support for software development and evolution, the focus has been on the automation of key programming tasks to dramatically lower the bloated costs of software. to improve the programming task, a new generation of tools is using knowledge of a program's behavior to automate tasks. one example is a tool for assisting restructuring (remodularizing) a program without changing the program behavior, as a precursor to enhancement. such a restructuring can localize future changes, hence lowering the cost of those changes. the current focus of this work is on visualization and user interfaces for high-level restructuring, and improving tool support for widely used programming like c, and automating other program enhancement tasks. these investigations are now pointing to new ways to think about software modularity.
testing and analysis
in the area of software testing and analysis the focus has been on the development of methods for ensuring the dependability of software. previous work involved the development of a systematic, but informal method for analyzing software that was successfully used to verify the functional avionics on a navy airplane. this project, called the qda (quick defect analysis) project is now involved in the analysis of ada programs. current work has also resulted in the development of a new approach to the measurement of software dependability called trustability. a program has trustability t if we can be t confident that it is free of faults. the trustability research has both theoretical and practical aspects, and includes the development of a trustability measurement support tool.
-->
faculty
william griswold
bill howden
ingolf krueger
-->
laboratories
software evolution laboratory
research
associated centers
awards & accomplishments
research areas
technical reports
cse fellows program
information
prospective students
career connections
alumni
health & safety
none
quicklinks
faculty recruitment
cse diversity, equity & inclusion
cse brochure
stay connected
dept of computer science and engineering
university of california, san diego
9500 gilman drive
la jolla, ca 92093-0404  u.s.a.
social media
none
none
none
none
none
none
none
none


Link: https://www.usf.edu/engineering/cse/people/index.aspx

faculty | computer science and engineering | university of south florida
skip to main content
none
computer science and engineering
college of engineering
none
search for:
main navigation
none
none
about us
people
graduate
undergraduate
research & innovation
industry
myusf
directory
people
skip over breadcrumbs and secondary navigation
breadcrumb navigation
college of engineering
computer science and engineering
people
faculty
none
faculty
staff
faculty
fall 2022 office hours
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
adjunct faculty
none
none
none
emeritus faculty
none
none
none
none
none
none
none
none
none
courtesy faculty
none
none
none
none
none
jean-francois biasse
ankit shah
none
none
about usf
academics
admissions
locations
campus life
research
administrative units
regulations & policies
human resources
work at usf
emergency & safety
title ix
usf health
usf athletics
usf alumni
support usf
usf libraries
usf world
none
none
none
none
none
none
about this site
contact usf
visit usf
diversity
â


Link: https://80000hours.org/career-reviews/software-engineering/

software engineering - career review - 80,000 hours
none
toggle navigation
search for:
none
start here
none
none
read the full guide â
introduction your most important decision
summary
foundations a definition of impact
future generations & their moral significance
effective altruism
global priorities why problem selection is crucial
the case for reducing existential risks
this could be the most important century
our current list of pressing problems
contribution which careers let you contribute most?
some solutions are far more effective than others
our list of high-impact careers
personal fit fit is more important than you think
strategy what is career capital?
how much to explore?
coordination and impact
balancing impact and doing what you love
aim higher: a rational case for dreamingâ big
three career stages
conclusion how much do careers differ in impact?
read the full guide â
none
go to problems hub â
top areas to work on preventing an ai-related catastrophe
catastrophic pandemics
building effective altruism
global priorities research
nuclear war
epistemics and institutional decision making
climate change
great power conflict
other promising areas promoting positive values
space governance
see more â
go to problems hub â
none
see all our career reviews â
key categories of impactful careers government and policy
organisation-building at effective nonprofits
research
applying an unusual strength to a needed niche
communication
earning to give
list of top-recommended career paths ai safety technical research
long-term ai policy
founder of new projects
helping build the effective altruism community
grantmaker
operations management in high-impact organisations
research into global priorities
biorisk research, strategy, and policy
china-related ai safety and governance
forecasting research and implementation
sometimes-recommended paths high-impact but especially competitive
promising but under-researched
impactful if you're an especially good fit
recommended career capital steps to build your skills and network
making the most of your current job doing good in any career
how to invest in yourself
see all our career reviews â
none
see all planning resources â
create a high-impact career plan 8-week career planning course
summary
career plan template
annual career check-up
make good career decisions make an immediate decision
improve your decision-making skills
see all planning resources â
none
selected topics moral philosophy
skills
job satisfaction
anonymous advice
unconventional advice
what to study
advocacy
catastrophic risks
meta-causes
priority paths
see all topics â
top articles from outside our guides what makes for a dream job?
best charities to donate to
misconceptions about effective altruism
high-impact research questions
what are your chances of getting elected to congress, if you try?
how many lives does a doctor save?
what's the impact of voting?
advice for undergraduates
all articles â
2017 career guide all career guide pages â
read the full guide â
introduction your most important decision
summary
foundations a definition of impact
future generations & their moral significance
effective altruism
global priorities why problem selection is crucial
the case for reducing existential risks
this could be the most important century
our current list of pressing problems
contribution which careers let you contribute most?
some solutions are far more effective than others
our list of high-impact careers
personal fit fit is more important than you think
strategy what is career capital?
how much to explore?
coordination and impact
balancing impact and doing what you love
aim higher: a rational case for dreamingâ big
three career stages
conclusion how much do careers differ in impact?
read the full guide â
go to problems hub â
top areas to work on preventing an ai-related catastrophe
catastrophic pandemics
building effective altruism
global priorities research
nuclear war
epistemics and institutional decision making
climate change
great power conflict
other promising areas promoting positive values
space governance
see more â
go to problems hub â
see all our career reviews â
key categories of impactful careers government and policy
organisation-building at effective nonprofits
research
applying an unusual strength to a needed niche
communication
earning to give
list of top-recommended career paths ai safety technical research
long-term ai policy
founder of new projects
helping build the effective altruism community
grantmaker
operations management in high-impact organisations
research into global priorities
biorisk research, strategy, and policy
china-related ai safety and governance
forecasting research and implementation
sometimes-recommended paths high-impact but especially competitive
promising but under-researched
impactful if you're an especially good fit
recommended career capital steps to build your skills and network
making the most of your current job doing good in any career
how to invest in yourself
see all our career reviews â
see all planning resources â
create a high-impact career plan 8-week career planning course
summary
career plan template
annual career check-up
make good career decisions make an immediate decision
improve your decision-making skills
see all planning resources â
selected topics moral philosophy
skills
job satisfaction
anonymous advice
unconventional advice
what to study
advocacy
catastrophic risks
meta-causes
priority paths
see all topics â
top articles from outside our guides what makes for a dream job?
best charities to donate to
misconceptions about effective altruism
high-impact research questions
what are your chances of getting elected to congress, if you try?
how many lives does a doctor save?
what's the impact of voting?
advice for undergraduates
all articles â
2017 career guide all career guide pages â
job board
none our podcasts
the 80,000 hours podcast
80k after hours curated series
effective altruism: an introduction
effective altruism: ten global problems
get 1-1 advice
newsletter
book giveaway
new releases
all articles
community
none
aboutâ us
introduction
meet theâ team
ourâ donors
mediaâ coverage
contactâ us
supportâ us
take our survey
donate
stayâ updated
acknowledgements
work with us
ourâ impact & credibility
evaluations
ourâ mistakes
researchâ principles
endorsements
testimonials
home
career reviews
software engineering search for:
new releases
all articles
community
none
aboutâ us
introduction
meet theâ team
ourâ donors
mediaâ coverage
contactâ us
supportâ us
take our survey
donate
stayâ updated
acknowledgements
work with us
ourâ impact & credibility
evaluations
ourâ mistakes
researchâ principles
endorsements
testimonials software engineering none
none
none
none
none
none software engineering
none
none
none
none
none
none
on this page:
introduction
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
table of contents
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
on december 31, 2020, the four most valuable companies were: apple, microsoft, amazon, and google.
on december 31, 2019, the four most valuable companies were: apple, microsoft, google, and amazon.
and on december 31, 2018, the four most valuable companies were: microsoft, apple, amazon, and google.
if you’re anything like me, you’re starting to spot a pattern here.
none
software has an increasing and overwhelming importance in our economy — and everything else in our society. high demand and low supply makes software engineering well-paid, and often enjoyable.
none in a nutshell: software engineering could be a great option for having a direct impact on the world’s most pressing problems. if you have good analytical skills (even if you have a humanities background), you might consider testing it. basic programming skills can be easy to learn and extremely useful even if you decide not to go into software engineering, which means trying this out could be particularly low cost. prosgain a flexible skillset.make a significant direct impact, either by working on ai safety, or in otherwise particularly effective organisations.have excellent working conditions, high pay, and good job security.conslate-stage earnings are often lower than in many other professional jobs (especially high-paying roles such as quantitative trading), unless you help found a successful startup.likely only a small proportion of exceptional programmers will have a highly significant impact.initially, it could be relatively challenging to gain skills quickly compared to some other jobs, as you need a particular concrete skillset.key facts on fit willingness to teach yourself, ability to break problems down into logical parts and generate and test hypotheses, willingness to try out many different solutions, high attention to detail, quantitative degree useful but not required.
sometimes recommended â personal fit dependent this career will be some peopleâs highest-impact option if their personal fit is especially good. review status none
this review owes a lot to helpful discussions with (and comments from) andy jones, ozzie gooen, jeff kaufman, sasha cooper, ben kuhn, nova dassarma, kamal ndousse, ethan alley, ben west, ben mann, tom conerly, zac hatfield-dodds, and george mcgowan. special thanks go to roman duda for our previous review of software engineering, on which this was based. why might software engineering be high impact? none
none
none
none how to do good as a software engineer even for skilled engineers who could command high salaries, we think that working directly on a problem will probably be more impactful than earning to give.
some examples of projects where software engineering is central to their impactful work:
ought
is an ai research lab attempting to build systems that apply machine learning to the task of helping people think.the
secure dna project
is attempting to build a secure global screening system for dna sequences that could be used to engineer a
global pandemic . momentum
is a startup building donation pages that encourage recurring donations to the world’s
most effective charities . lightcone infrastructure
builds software-based infrastructure for
longtermist
projects. telis bioscience
is a startup attempting to radically accelerate drug development to mitigate risks from future pandemics. anthropic
is a research company working to build reliable, interpretable, and steerable ai systems. redwood research
conducts applied research into the
challenge of aligning artificial intelligence . wave
is a startup building a way for people in developing countries to access financial services. most organisations, even ones that don’t focus on developing large software products, need software engineers to manage computer systems, apps, and websites. for example:
effective altruism funds
provides expert-managed funds to facilitate donors maximising the impact of their donations. they use software engineers to design and maintain their online platform. our world in data , founded by
max roser , collects and presents data on many of the world’s most pressing problems. they use software engineers to maintain their website, analyse data, and develop their
open-source data visualisation tool .here at 80,000 hours,
our team
includes two software engineers working on our website and other technology.the
centre for effective altruism ‘s tech team supports a variety of projects across the
effective altruism community , such as the
effective altruism forum . none
none
none software engineers can help with ai safety none
none
none
these organisations are doing research directly with extremely large neural networks, which means each experiment can cost millions of dollars to run. this means that even small improvements to the efficiency of each experiment can be hugely beneficial.
none
none
none software engineer salaries mean you can earn to give none
none
none
none
none
it’s important to note that many nonprofit organisations, including those focusing on ai safety, will offer salaries and benefits that compete with those at for-profit firms.
none what does a software engineering career involve? ultimately, the best ways to have an impact with software engineering are probably things like working at an ai lab or a particularly effective nonprofit.
to get there, there are two broad paths that you could follow to build software engineering skills (and, given the high salaries in software engineering, you can earn to give along the way): working for a large, stable company (e.g. microsoft, google, amazon)working for a small, fast-growing startup none
working at a top-tier tech company also holds comparable prestige to working in finance or consulting, and gives you the opportunity to make connections with wealthy and influential people, many of whom are impact-minded and interested in doing good.
none working for a large software company none
top firms (e.g. microsoft, google, amazon) are particularly good at providing training to develop particular skillsets, such as management and information security. after talking with people who have experience in training at both tech giants and elsewhere, we think that this internal training is likely the best way to develop knowledge in software engineering (other than on-the-job practice), and will be better than training provided outside of these big tech companies.
however, it’s important to ensure that your role provides you with a variety of experiences: five years of software development experience is not the same as having the same year of experience five times over.
for example, it can be harder to gain full-stack or transferable front-end development experience at a large company. many large mature products have a large front-end team making many small tweaks and analysing their performance in experiments. this provides good training in experiment design and analysis, but often isn’t very transferable to the sorts of front-end work you’d do at smaller companies or nonprofits, where you’ll often be working in a much smaller team with a focus on developing the experience as a whole rather than running experiments on small changes.
it generally takes around two years for new starters at big tech companies to have the experience they need to independently work on software, and another two years to reach a position where they are able to give advice and support to others in the company and manage projects. key career stages at large tech companies none
none
once you’ve successfully demonstrated that you can work on projects without needing much support, you’ll be given more responsibility. for a couple of years, you’ll work on more complex projects (often in one or two languages in which you’ve specialised), and with less support from others.
none
none
none
none working for a startup as a software engineer none
none
however, the experience of working in small organisations varies wildly. you’ll be less likely to have many very senior experienced engineers around to give you the feedback you need to improve. at very small startups, the technical cofounder may be the only experienced engineer, and they are unlikely to provide the level of mentorship provided at big tech companies (in part because there’s so much else they will need to be doing). that said, we’ve spoken to some people who have had great mentorship at small startups.
you also gain responsibility much faster at a fast-growing startup, as there is a desperate need for employees to take on new projects and gain the skills required. this can make startups a very fertile learning ground, if you can teach yourself what you need to know.
none
none moving to a direct impact software engineering roleworking in ai safety none
if you have the opportunity to choose areas in which you could gain expertise, the experienced engineers we spoke to suggested focusing on: distributed systemsnumerical systemssecurity in general, it helps to have expertise in any specific, hard-to-find skillsets.
this work uses a range of programming languages, including python, rust, c++ and javascript. functional languages such as haskell are also common.
none
none
none
none working on reducing global catastrophic biological risks none
none
anyone with a good understanding of how to build software can be useful in these small organisations, even if they don’t have much experience. however, if you want to work in this space, you’ll need to be comfortable getting your hands dirty and doing whatever needs to be done, even when the work isn’t the most intellectually challenging. for this reason, it could be particularly useful to have experience working in a software-based startup.
none
there is also a big focus on security, particularly at organisations like securedna.
most code in biosecurity is written in python.
none other important direct work nonprofit organisations and altruistic-minded startups often have very few team members. and no matter what an organisation does, they almost always have some need for engineers (for example, 80,000 hours is not a software organisation, but we employ two developers). so if you find an organisation you think is doing something really useful, working as a software engineer for them might be an excellent way to support that work.
engineering for a small organisation likely means doing work across the development process, since there are few other engineers.
often these organisations are focused on front-end development, with jobs ranging from application development and web development to data science and project management roles. there are often also opportunities for full-stack developers with a broad range of experience.
none reasons not to go into software engineering none
none
none how much do software engineers earn? it’s difficult to make claims about software engineer earnings in general.
none
none
as a result, you should think of the figures below as representing salaries for early- to mid- career software developers.
none
none software engineering salaries in the us here are the median us salaries for software developers, from the us bureau of labor statistics:
none  meanmediancomputer programmers$95,640$89,190software developers and software quality assurance analysts and testers$114,270$110,140web developers and digital interface designers$85,490$77,200
#tablepress-183-no-2 from cache
none
median us salaries for software engineers in 2020 at different levels of progression stageusual experience requiredus (median salary + bonus)mountain view and palo alto, ca (median salary + bonus)software engineer i (entry level)0-2 years$75,000$94,000software engineer ii2-4 years$95,000$120,000software engineer iii4-6 years$120,000$150,000software engineer iv6-8 years$147,000$185,000software engineer v8-10 years$168,000$211,000software engineering manager10+ years$155,000$195,000software engineer director10+ years$226,000$284,000software engineer director15+ years$303,000$380,000
#tablepress-184-no-2 from cache
none
salaries also vary by location within the us; they are generally significantly higher in california (although web developers are best paid in seattle).
none  nationaltop-paying statetop-paying metro areacomputer programmers$95,640$107,300 (ca)$125,420 (san francisco)software developers and software quality assurance analysts and testers$114,270$137,620 (ca)$157,480 (silicon valley)web developers and digital interface designers$85,490$94,960 (wa)$138,070 (seattle)
#tablepress-185-no-2 from cache
none
notably, the differences between locations in salaries at the 90th percentile is much higher than the differences in median salaries.
none  median90th percentileatlanta$131,000$216,000new york city$182,000$365,000seattle$218,000$430,000san francisco bay area$222,000$426,000
#tablepress-186-no-2 from cache
none
if you want to estimate your own disposable income given different scenarios, you can try these tools:
estimate your post-tax income
find out the cost of living in different cities
calculate your donatable income software engineering pay in other countries none
none  median90th percentileaustraliaa$166,000 (us$123,000)a$270,000 (us$200,000)canadac$143,000 (us$115,000)c$270,000 (us$218,000)germanyâ¬86,000 (us$98,000)â¬145,000 (us$165,000)indiaâ¹3,123,000 (us$42,000)â¹7,435,000 us$100,000)irelandâ¬101,000 (us$115,000)â¬188,000 (us$214,000)israelâª533,000 (us$165,000)âª866,000 (us$268,000)netherlandsâ¬108,000 (us$123,000)â¬174,000 (us$198,000)russiaâ½2,991,000 (us$42,000)â½6,410,000 (us$90,000)singapores$143,000 (us$106,000)s$263,000 (us$195,000)switzerlandchf 177,000 (us$190,000)chf 355,000 (us$382,000)taiwannt$1,819,000 (us$65,000)nt$3,387,000 (us$121,000)united kingdomâ£90,000 (us$123,000)â£166,000 (us$228,000)
#tablepress-187-no-2 from cache
none
compensation across the world is often higher if you work from a major city.
none  median90th percentilebangalore, indiaâ¹3,569,000 (us$48,000)â¹7,583,000 (us$102,000)dublin, irelandâ¬106,000 (us$120,000)â¬189,000 (us$215,000)london, ukâ£95,000 (us$130,000)â£170,000 (us$233,000)toronto, canadac$149,000 (us$120,000)c$273,000 (us$220,000)vancouver, canadac$156,000 (us$126,000)c$306,000 (us$247,000)
#tablepress-188-no-2 from cache
none
there are some things that can make it easier to get a visa: having a degree in computer science or other field related to your jobapplying to companies with enough capital and flexibility to bear the time and financial costs of the visa processhaving a specific unusual skillset that may be hard to find in the us none
despite all of this, remote work in software development is becoming far more common. there’s a growing trend for a few companies to hire globally for remote roles, and pay us-market compensation. if you manage to get one of those roles, you can earn a lot from anywhere. software engineering job outlook none
none
the number of web development jobs is projected to grow by 13% from 2020â2030. the main reasons for this are the expected growth of e-commerce and an increase in mobile devices that access the web.
what does this mean for future salaries? strong growth in demand provides the potential for salary growth, but it also depends on how easily the supply of engineers can keep up with demand.
none software engineering job satisfaction the same high demand for software engineers that leads to high pay also leads to high bargaining power. as a result, job satisfaction among software engineers is high.
none
none
none examples of people pursuing this path none nova dassarma nova decided to move into software engineering — specifically large-scale systems architecture — when she realised she wasn’t a good fit for the lab benchwork she needed to do for her major in bioinformatics at the university of maryland, baltimore county.
none
none roman duda after studying philosophy at university, roman thought he would be a good fit for research and moved to 80,000 hours to become our director of content. but he found that our applied practical research into careers was more different from writing philosophy essays than he had anticipated. as a result, he decided to teach himself programming and has been a software engineer at 80,000 hours since 2018.
none how to predict your fit in advance the best way to gauge your fit is to try it out. you don’t need a computer science degree to do this. we recommend that you: try out writing code — as a complete beginner, you can write
a python program
in less than 20 minutes that reminds you to take a break every two hours. once you know the fundamentals, try taking an
intro to computer science and programming
class, or
work through free resources . if you’re in college, you could try taking cs 101 (or an equivalent course outside the us).do a project with other people — this lets you test out writing programs in a team and working with larger codebases. it’s easy to come up with programming projects to do with friends — you can see some examples
here .
contributing to open-source projects
in particular lets you work with very large existing codebases.take an internship or do a
coding bootcamp . none how to enter this field none
to enter, you need some basic programming skills and to be able to demonstrate a strong interest in software engineering. we’ve seen many people with humanities and social science degrees get junior software engineer jobs with high salaries, just through learning on their own or through coding bootcamps. learning to program basic computer programming skills can be extremely useful whatever you end up doing. you’ll find ways to automate tasks or analyse data throughout your career. this means that spending a little time learning to code is a very robustly useful option. learning on your own. there are many great introductory computer science and programming courses online, including:
udacity’s intro to computer science ,
mit’s introduction to computer science and programming , and
stanford’s programming methodology . don’t be discouraged if
your code doesn’t work the first time
— that’s what normally happens when people code!attending a coding bootcamp. we’ve advised many people who managed to get junior software engineer jobs in less than a year through going to a bootcamp. coding bootcamps are focused on taking people with little knowledge of programming to as highly paid a job as possible within a couple of months. this is a great entry route if you don’t already have much background, though some claim the long-term prospects are not as good because you lack a deep understanding of computer science.
course report
is a great guide to choosing a bootcamp. be careful to avoid
low-quality bootcamps . to find out more,
read our interview with an app academy instructor .studying computer science at university (or another subject involving lots of programming). if you’re in university, this is a great option because it allows you to learn programming while the opportunity cost of your time is lower. it will also give you a better theoretical understanding of computing than a bootcamp will (which can be useful for getting the most highly paid and intellectually interesting jobs), a good network, some prestige, and a better understanding of lower-level languages like c. having a cs degree also makes it easier to get a us work visa if you’re not from the us.doing internships. if you can find internships, ideally at your target employers (whether big tech companies or nonprofits), you’ll gain practical experience and the
key skills you otherwise wouldn’t pick up
from academic degrees (e.g. using version control systems and powerful text editors).getting your first job in software engineering none
large software firms can have long and in-depth interview processes. you will be asked about general software knowledge, and later rounds of interviews are likely to give you problems around coding and algorithms, during which you will be asked to collaborate with the interviewer to solve the problem.
none
none
none send a company your resume. make it as specific as possible to the job you’re applying for, and proofread it carefully. if you can get a referral from a friend, that will significantly increase your chances of success.speak to a recruiter. read up about the company in advance, and make sure you have questions. be nice — it’s going to help if the recruiter is on your side.have a technical phone interview. you’ll solve some problems together. make sure you ask questions to clarify the problem, and strategise about the best possible approach before you start writing code. finish by checking for bugs and make sure you’re handling errors correctly. when you’re done, ask the interviewer some questions!have a three- to six-hour on-site interview. it’s key to talk out loud as you work through a problem. and again, ask your interviewer some questions about them and the company.get an offer from the recruiter. you should make sure they think you are seriously considering the company or you may not get an offer. if you don’t get an offer, ask for feedback (though it’s not always possible for companies to give detailed feedback). if you need more time to think (or to apply elsewhere), tell them in advance, and they may choose to wait to give you details when you’re more ready to go through with an offer.accept the offer!want one-on-one advice on pursuing this path? if you think software engineering might be a great option for you, but you need help deciding or thinking about what to do next, our team might be able to help.
we can help you compare options, make connections, and possibly even help you find jobs or funding opportunities.
apply to speak with our team learn more more from 80,000 hours: our
problem profile on the importance of shaping the development of artificial intelligence our
problem profile on reducing the risk of future pandemics, and other global catastrophic biological risks our
review of careers in information security our
review of earning to give our
review of being a technical researcher in ai safety our
review of being an early employee at a startup our
review of founding tech startups our
review of founding high-impact organisations focusing on particularly pressing problems our
review of careers in data science
other reading: why
ai safety needs great engineers this post on
the importance of learning the basics of programming this post on
why confidence and conviction helps, especially at smaller organisations and startups
automate the boring stuff with python
by al sweigart, an introduction to programming for complete beginners things i wish someone had told me when i was learning how to code this post on the
10x developer , and whether and how you can be much better at software development than the average the missing semester of your cs education , on practical topics you won’t necessarily have learnt at university cracking the coding interview
by gayle laakmann mcdowellthis
guide to getting a high-paying software engineering job find a job in this path none
none
none
none
want to consider more paths? see our list of the highest-impact career paths according to our research.
continue → plus, join our newsletter and weâll mail you a free book none
none notes and references even if you’re not working at an organisation focused on a particularly pressing problem, there may still be opportunities to have direct impact as a software developer. we argue elsewhere that
improving institutional decision-making
could be an effective way of preventing costly mistakes. many important institutions â such as governments, international organisations like the
united nations , and the
world bank
â rely, as we all do, on software. improving this software and its use could be a reasonable way of improving their decisions. ↩
source:
staffeng
↩
bureau of labor statistics, us department of labor, occupational employment statistics
(visited jan 12, 2022). ↩
data from
salary.com , rounded to the nearest $1,000 (visited jan 12, 2022). ↩
bureau of labor statistics, us department of labor, occupational employment statistics
(visited jan 12, 2022). “silicon valley” is the san jose-sunnyvale-santa clara, ca metropolitan area. “san francisco” is the san francisco-oakland-hayward, ca metropolitan area. “seattle” is the seattle-tacoma-bellevue, wa metropolitan area. ↩
data from
levels.fyi
(visited jan 27, 2022). ↩
its cost of living index is 148.3 (100 = us national average), according to the
council for community and economic research
via
wolfram alpha . ↩
uk office for national statistics annual survey of hours and earnings, 2020.
↩
zã¼rich’s cost of living index is 184.2 (100 = us national average), tel aviv’s is 172.9 and silicon valley’s is 148.3, according to the
council for community and economic research
via
wolfram alpha . ↩
show all join our newsletter get regular updates featuring our latest research, events near you, and high-impact career opportunities.
get 1-1 advice none
speak to an advisor our research
overview: key ideas
especially pressing world problems
effective altruism
future generations
list of careers
career guide (2017)
all our research take action
plan your career
find a job
get 1-1 advice
join our community follow us
subscribe to our podcast
join our newsletter
follow us on twitter
join our linkedin group
follow us on facebook
follow us on youtube about us
why 80,000 hours?
meet the team
our donors
media coverage
our mistakes
none
none
none
we're affiliated with the future of humanity institute and the global priorities institute at the university of oxford.
none
none
we're affiliated with the future of humanity institute and the global priorities institute at the university of oxford.
we work closely with the centre for effective altruism and giving what we can.
none
none
none
none
none
none
none
none
none
none
none
none
none
none


Link: https://www.trio.dev/blog/software-engineer-role

what do software engineers do? - trio developers
none
home
hiring
management
engineering
none
services
none
none
resources
none
none
inside trio
none
none
none
none
home
staff augmentation
distributed team
about trio
careers
blog
podcast
hiring
management
engineering
hiring
what do software engineers do?
daniel alcanja
â¢
7 min read
these days you probably hear âsilicon valleyâ and âmark zuckerburgâ so much they feel like vocab words. but itâs not just about the glamour. software engineers have a drastic impact on how you and just about everyone else run their day-to-day lives.
from facebook to tiktok to your preferred word processor whether that be google docs or microsoft word, software engineers often help people connect with others and the space they occupy when it would otherwise be very difficult.
technology plays a large part in how humans navigate the world. while older generations often criticize the technology itself, human people â also known as software engineers â bear much of the responsibility for these tools.
and no matter what boomers might say, there are some objectively wholesome if not powerful things that can be accomplished with technology like reaching out to loved ones or spreading an important message.
keeping all this in mind, you might be wondering what exactly software engineers do? keep reading to find out.
what is the role of a software engineer?
none
to do this, professional software engineers will have mastery of several programming languages, depending on which ones they prefer or which ones are most in-demand in the industry.
none
none
of course, the programming languages a software engineer uses can largely differ depending on the specific type of work they do.
none
none
what does a software engineer do?
a software engineer does a number of things each day that ultimately culminate in building a software product. the specific day-to-day tasks of a software engineer include but are not limited to the following:
constantly communicating with the client to pinpoint specifications and software needs for the user
collaborating with other software engineers and divvying up roles and responsibilities accordingly
creating algorithms, models, and prototypes to better comprehend how to construct clean, maintainable code
writing, testing, and debugging code, ensuring that it is fully functional and bug-free
documenting procedures in order for future software engineers and other involved parties to streamline development processes
performing regular maintenance on the application and carrying out updates as needed
quite a few of these tasks revolve around the notion of effective communication. in fact, if this wasnât part of the process then software would be essentially useless.
while itâs important to have a software engineer who has expertise when it comes to technical skills, having soft skills are similarly crucial in the development process.
none
why is software engineering important?
none
humans these days use smartphones as an extension of their bodies. and the apps, user interface (ui), operating system, and all else of smartphones are developed by software engineers.
just about every person you know uses netflix or spotify for some quality downtime. these streaming services are due to software engineers as well.
even the hermit who has distanced themselves from all technologies might need to pick up some food at their local grocery store. well, contemporary cash registers rely on software engineering too.
none
what are the different types of software engineers
software engineers, alternatively called software developers, can be split up into two principal categories: applications software developers and systems software developers.
none
applications software developers
applications software developers build software that is client-focused. most of the applications and websites you use were and are maintained by applications software developers.
web developers and mobile developers fall under this definition as well as graphical user interface (gui) developers who build the ui from which users interact directly with computer functions.
none
systems software developers
none
operating systems and networks are developed by systems software engineers. applications software developers build user-facing applications that must work with these operating systems and networks.
as systems developers manage hardware needs as well, they tend to have careers in information technology (it) and enforce it standards.
7 qualities that make a great software engineer
as technology evolves, the demand for software engineering remains high and it doesnât look like it will decrease any time soon. software engineers have evolved from building it products to problem-solvers that address complex business and social challenges and develop essential solutions.
it is a popular career choice, not only because it has promising growth and high pay, but because it can be fulfilling in many ways. you get to change the world with your work, fix problems, and impact peopleâs lives.
the market is full of good professionals, but what skills and abilities separate great software engineers from good ones?
1. great software engineers are open-minded.
software engineering is a process and not a set of rules written in stone. being able to hear other peopleâs opinions, accept new ideas and technologies while not getting hung up on one thing leads to better engineering overall.
you may not always agree with your team members, but listening to their ideas and trying to understand before giving judgment will give you a chance to look at the problem from a different angle and come up with a viable solution.
2. great software engineers have a team mindset.
a good software engineer has high-level skills; a great software engineer should know that software development is a collaborative process and requires more than skill. this is not limited to leadership skills but implies overall teamwork.
every victory and failure is the result of teamwork. knowing how to make the team cooperate and align with the same goals defines a great engineer.
3. great software engineers are able to give and be receptive to constructive feedback.
a great engineer can distinguish between constructive feedback and baseless criticism. they also know how to communicate their opinions in a way that will be heard and understood.
feedback is a crucial part of engineering. itâs the most direct way of figuring out what is working for the client and the team and what is not. the software development process often needs to be adjusted and calibrated for the project to be completed in the right way and in the given timeframe.
4. great engineers make data-driven decisions.
putting personal preferences aside and leading the decision-making process with data is the only way of knowing what is best for the project and your clientâs business.
none
5. great engineers balance perfectionism and pragmatism.
too much of either perfectionism or pragmatism can hurt the workflow. finding the right balance of both will curb many problems that may arise in the software development process.
in the end, this balance will result in a high-quality product. great software engineers aim high but remember to keep their feet on the ground.
6. great engineers have an aptitude for business.
when you are developing a product, you are developing it for the end-user. understanding the audience that will use the product and how they use it is vital for making sure the product fits the userâs needs as well as business goals and requirements.
sometimes an app that looks perfect on the paper just wonât click with people. behaviour is often driven by emotions, not logic. a great software engineer knows how to create a product that will satisfy both the end-user and the clientâs business needs.
7. great engineers carry a healthy skepticism.
hope for the best but prepare for the worst. a great programmer knows to test and inspect every part of the program before trusting it.
where a good programmer may ignore an imperfection, a great one will make sure that it doesnât cause a bigger problem in the future by addressing it immediately.
how to hire software engineers
hiring software engineers starts with having a good grasp of what youâd require a software engineer to do for your business. run with this idea and write a good job description to attract potential candidates on job networks. hereâs what to do:
intro paragraph: your intro paragraph serves as an introduction to your company and a general summary of what youâre looking for. try to mention what the goal or mission of your business is. tell the candidate about the mobile app youâre building that will make life so much more convenient or how your website will allow easy access to the self-care products youâre selling.
job responsibilities: here, you can list the basic day-to-day tasks you expect your software engineers to do. this might include writing code, attending weekly meetings, or preparing flowcharts. you get the idea.
work specifications: what do you expect from your potential hiree and what can your potential hiree expect from you? offer reasonable compensation in the form of a salary, hourly wage, or commission. include perks and benefits if thatâs part of the deal. describe what capacity of work you want from your hire, whether itâs every weekday from 9-5 pm or as a freelancer on a single project.
qualifications: you will need to research a bit more about the exact skills you need from your hire. maybe thatâs a bachelorâs degree in computer science or at least three years of
writing javascript
with a portfolio to match. maybe itâs both.
cta: lastly, use a call to action. sum up anything else you need to say and end by drawing the candidate in. whatâs so great about working with you and your business? seriously.
none
how does trio hire software engineers
none
none
in looking for developers, trio hiring managers also maintain that they are keen on finding someone with a âcultural fitâ who can âtalk about their passionsâ. this is evidence that the potential hiree truly cares about growing in their field.
none
you could say that this is relevant to trioâs mission and definitely worth mentioning in the job description. developers who are just looking for a quick buck need not apply!
of course, getting to know the true intentions of a developer ties back into those communication skills that youâll get a glimpse of across the first couple of interviews. but an honest job description can weed out the worst apples.
conclusion
hopefully, seeing a bit of how trio hires software engineers gives you some assurance that weâre taking our own advice. weâve done our best to hire great software engineers so you can reap the benefits.
here at trio, we value the talent of our engineers. we have hand-picked a team of highly-skilled, knowledgeable, and experienced software engineers that weâre proud of.
none
table of contents
share
none
none
none
none
frequently asked questions
what is the role of a software engineer?
software engineering is a branch of computer science that includes developing software and computer systems. typically, writing code or programming is a large part of the development process. through programming, software engineers can design anything from games to operating systems.
what does a software engineer do?
a software engineer does a number of things each day that ultimately culminate in building a software product.
why is software engineering important?
software engineers have a direct role in building nearly every single great technology that humans know and use today. this sounds quite dramatic; but itâs true. without software engineers, youâd be living in a pre-50s era science fiction movie.
read next
none
engineering
what is a chatbot and how does it work?
chatbots are a clever way to enhance the user experience of your customers. stay tuned to learn more about how chatbots can help your business.
daniel alcanja
â¢
6 min read
none
engineering
what is digital transformation?
digital transformation is becoming essential and important for all businesses irrespective of their size and nature.
daniel alcanja
â¢
9 min read
none
engineering
what is edtech? 5 tech trends that will transform education
what is edtech and what technologies will shape its influence? continue reading to learn more!
daniel alcanja
â¢
8 min read
build possibility with trio
our partners are growing and innovating their businesses faster with trio.
none
none
none
services
staff augmentation
distributed team
resources
blog
faq
inside trio
about us
careers
our process
none
terms of use
privacy policy
manage cookies
follow us
none
none
none


Link: https://cse.engin.umich.edu/people/faculty/

faculty | computer science and engineering at michigan
none
menu
none
eecs
eecs
computer science and engineering
cse
electrical and computer engineering
ece
none
about
welcome to cse
by the numbers
advisory board
history
faculty hiring
giving
visit
bob and betty beyster building
leinweber computer science and information building â
emergency and safety info
resources
contact
community
our values: hacks
community news
are you new to cs?
resources for student support and inclusion
student groups and teams
cse action plan
dei and climate â
reporting concerns and misconduct
academics
graduate programs & admissions
undergraduate programs & admissions
for current students
course information
undergrad research opportunities
research
research areas
labs & centers
tech transfer & startups
industrial relations
reports & publications
people
faculty
phd students
postdocs
staff
alumni
honors and awards
hire our phds and postdocs
news
events
people
all faculty —
core cse faculty
tenure-track faculty
teaching faculty
research scientists and investigators
courtesy faculty
emeritus faculty
phd students +
grad student room directory
postdocs
staff
alumni +
alumni in academia
honors and awards +
all faculty awards +
awards by faculty
professorships
fellows
early career awards
staff awards
awarded graduate fellowships
alumni awards
kuck dissertation prize recipients
phds and postdocs on the job market
home
>
people
> all faculty
all faculty
abcdefghijklmnopqrstuvwxyzabney, stevenassociate professor, linguistics affiliate faculty, electrical engineering and computer scienceresearch interests: natural language processing, machine learning website email: phone: (734) 647-5588office: 412 lorchackerman, mark s.george herbert mead collegiate professor of human-computer interactionprofessor, electrical engineering and computer science; professor, school of informationprofessor of learning health sciences, medical school website
mentoring plan email: phone: (734) 763-5439office: 3645 beysteradar, eytanassociate professor, school of informationassociate professor (courtesy), electrical engineering and computer scienceresearch interests: human-computer interaction, visualization, text mining, and social network analysis website email: phone: (734) 647-8028office: 4368 north quadalmomani, raedlecturer i, electrical engineering and computer scienceemail: office: 2717 beysterandargie, fitsum assamnewadjunct assistant research scientist, electrical engineering & computer scienceemail: office: beyster bldg.arthur, williamlecturer iv, electrical engineering and computer science website email: phone: 734-763-3296office: 3640 beysteratkins, daniel e.professor emeritus, school of informationprofessor emeritus, electrical engineering and computer scienceresearch interests: library and information servicesemail: phone: (734) 647-7312office: 300 west hallaustin, todds. jack hu collegiate professor of computer science and engineeringprofessor, electrical engineering and computer sciencehe/him/hisresearch interests: computer architecture, robust and secure system design, hardware and software verification, and performance analysis tools and techniques. website email: phone: (734) 936-0370office: 4637 beyster bldg.banovic, nikolaassistant professor, electrical engineering and computer scienceresearch interests: computational interaction, human-centered explainable ai, behavior-aware interfaces website
mentoring plan email: phone: 734-764-4289office: 2630 beyster bldg.bansal, nikhilpatrick c. fischer professor of theoretical computer scienceprofessor, electrical engineering and computer scienceresearch interests: algorithms, optimization, machine learning, discrete mathematics. website
mentoring plan email: office: 3637 beyster bldg.baveja, satinder singhtoyota professor of artificial intelligenceprofessor, electrical engineering and computer scienceresearch interests: reinforcement learning, machine learning, computational game theory, adaptive human computer interaction. website email: phone: (734) 936-2831office: 3749 beyster bldg.beaumont, jonathanlecturer iii, electrical engineering & computer sciencehe/him/hisemail: phone: (734) 763-1557office: 3828 beyster bldg.bertacco, valeriaarthur f. thurnau professormary lou dorf collegiate professor of computer science and engineering, college of engineeringvice provost for engaged learning, office of the provost professor, electrical engineering and computer scienceresearch interests: improving the functional correctness of digital integrated circuits, by developing technology that attacks the issue at design time, in post-silicon, and throughout the lifetime of a digital integrated component, in face of the challenges posed by fragile silicon and extreme design complexity. website
mentoring plan email: phone: (734) 615-4047office: 4645 beyster bldg.bodwin, gregassistant professor, electrical engineering & computer scienceresearch interests: graph algorithms, data structures, sketching, game theory, and combinatorics. website
mentoring plan email: phone: (734)647-1902office: 3609 beyster bldgbondi-kelly, elizabethvisiting assistant professor (effective jan. 1, 2023), computer science & engineeringassistant professor (effective aug. 28, 2023), electrical engineering & computer scienceshe/her/hers website email: brehob, markkurt metzger collegiate lecturerlecturer iv, electrical engineering and computer sciencehe/him/his website email: phone: (734) 764-0525office: 4632 beyster bldg.budak, cerenassociate professor, school of informationassociate professor (courtesy), electrical engineering & computer science website email: phone: 734-763-2284office: 3336 north quadburdick, lauralecturer iii, electrical engineering & computer scienceresearch interests: natural language processing, data science, machine learningemail: phone: (734) 936-1312office: 3824 beystercafarella, michael j.adjunct associate professor, electrical engineering and computer science website email: chai, joyceprofessor, electrical engineering and computer scienceresearch interests: natural language processing, language grounding to vision and robotics, situated human-machine communication, interactive task learning. website
mentoring plan email: phone: 734-764-3308office: 3632 beysterchakraborty, mithunassistant research scientist, electrical engineering & computer sciencehe/him/hisresearch interests: multi-agent systems,â computational economics, algorithmic game theory and mechanism design, fair allocation, collective forecasting. website email: office: 2709 beyster bldg.cheraghchi, mahdiassociate professor, electrical engineering and computer sciencehe/him/hisresearch interests: all theoretical aspects of cs, especially the role of information and coding theory in cryptography, complexity, algorithms, and high-dimensional geometry. website
mentoring plan email: phone: (734) 763-9165office: 3603 beyster bldg.chesney, davidtoby teorey collegiate lecturerlecturer iv, electrical engineering and computer science website email: phone: (734) 763-1498office: 4624 beyster bldg.chowdhury, mosharafmorris wellman faculty development professor of computer science and engineeringassistant professor, electrical engineering & computer scienceresearch interests: networked systems and cloud computing. website
mentoring plan email: phone: 734-764-4148office: 4820 beystercollins-thompson, kevynassociate professor, school of informationassociate professor (courtesy), electrical engineering and computer science website email: phone: 734-615-2132office: 4360 north quadcompton, kevin j.associate professor emeritus, electrical engineering and computer scienceresearch interests: theory of computation, complexity of combinatorial and logical problems, analysis of algorithms, automata theory website email: phone: (734) 763-9165office: 3603 beyster bldg.conway, lynnprofessor emerita, electrical engineering and computer scienceresearch interests: tele-autonomous systems, collaboration technology and media integration, artificial intelligence, computer systems & hardware, vlsi program website email: phone: (734) 763-5509office: 2717 beyster bldg.corso, jasonprofessor, electrical engineering and computer scienceresearch interests: computer vision, robotics, artificial intelligence. website email: office: frb 3280darden, marcuslecturer iv, electrical engineering and computer scienceemail: phone: (734) 764-3643office: 2644 beyster bldg.das, reetuparnaassociate professor, electrical engineering and computer scienceresearch interests: computer architecture, and its interaction with software systems and device/vlsi technologies. specialized interests include on-chip interconnection networks, three-dimensional ic design, and multi-core memory systems. website
mentoring plan email: phone: (734) 764-4255office: 3624 beyster bldg.davidson, edward sprofessor emeritus, electrical engineering and computer scienceresearch interests: computer architecture, parallel and pipelined computing, performance modeling of computer systems website email: phone: (734) 973-0751office: 2717 beyster bldg.deorio, andrew w.lecturer iv, electrical engineering and computer sciencehe/him/his website email: phone: 734-763-5867office: 2705 beysterdereziåski, michaåassistant professor, electrical engineering and computer scienceresearch interests: machine learning and statistical learning theory, scalable stochastic and distributed optimization, randomized numerical linear algebra, dimensionality reduction. website
mentoring plan email: office: 2649 beysterdhillon, paramveerassistant professor, school of informationaffiliate faculty, computer science & engineeringresearch interests: machine learning, computational social science, natural language processing, information economics website email: phone: (734) 764-5876office: 105 s state stdiaz, kimberly khalsalecturer iii, electrical engineering and computer scienceshe/her/hersemail: phone: (734) 647-1355office: 3824 beysterdick, robertassociate professor, electrical engineering and computer scienceresearch interests: embedded systems. website email: phone: (734) 763-3329office: 2417e
eecsdillahunt, tawanna ruthassociate professor, school of informationassociate professor (courtesy), electrical engineering and computer science website email: phone: 734-647-8296office: 4340 north quaddorf, mary loucollegiate lecturer emerita, electrical engineering and computer scienceshe/her/hersemail: phone: (734) 615-9916office: 4636 beyster bldg.dreslinski, ronaldmiller faculty scholarassociate professor, electrical engineering and computer scienceresearch interests: novel architectures and design technologies for energy-efficient computing, including near-threshold computer design and experimental 3d computer chips. website
mentoring plan email: phone: 971-221-6554office: 2637 beyster bldgdurfee, edmund h.professor emeritus, electrical engineering and computer scienceresearch interests: multi-agent coordination and intelligent real-time systems website email: phone: (734) 936-1563office: 3745 beyster bldg.ensafi, royaassistant professor, electrical engineering and computer scienceresearch interests: computer and network security, surveillance and censorship measurement, privacy and tech policy. website
mentoring plan email: phone: 734-764-3184office: 4745 beysterericson, barbaraassistant professor, school of informationassistant professor (courtesy), electrical engineering & computer scienceshe/her/hersemail: phone: 734-763-2285office: 105 s. statefish, benjaminassistant professor, electrical engineering and computer scienceresearch interests: foundations of algorithmic fairness, ethics and justice in machine learning, theory of machine learning, learning with social context. website
mentoring plan email: office: 3812 beyster bldg.fouhey, davidassistant professor, electrical engineering and computer sciencehe/him/hisresearch interests: computer vision and machine learning, with a particular focus on scene understanding. website
mentoring plan email: phone: 734-764-8517office: 3777 beyster bldg.fu, kevinassociate professor, electrical engineering and computer scienceresearch interests: computer system security; ultra-low power computing; healthcare safety. website
mentoring plan email: office: 4628 beyster bldg.garcã­a-ramirez, hã©ctorlecturer ii, electrical engineering and computer sciencehe/him/his website email: phone: 734-647-4255 office: 3640 beystergenkin, danieladjunct assistant professor, electrical engineering & computer science
website email: office: remotegilbert, ericassociate professor, school of informationjohn derby evans professor of informationassociate professor (courtesy), electrical engineering & computer science website email: phone: (734) 763-2285office: 4385 north quadgraetz, emilylecturer ii, electrical engineering and computer sciencethey/them/theirsemail: phone: 937-314-1582office: 3917 beyster bldg.grubbs, paulassistant professor, electrical engineering & computer sciencehe/him/hisresearch interests: applied cryptography, computer security, privacy, systems security, and technology policy. website
mentoring plan email: office: 4709 beyster bldg.guo, anhongassistant professor, electrical engineering & computer scienceassistant professor (courtesy), school of informationhe/him/hisresearch interests: human-computer interaction, artificial intelligence, accessibility, augmented reality, human-ai interaction website
mentoring plan email: office: 3741 beystergurevich, yuriprofessor emeritus, electrical engineering and computer sciencepost-retirement appointment through october, 2021research interests: quantum computing, privacy and security, software engineering, and theoretical computer science website email: guzdial, markprofessor, electrical engineering & computer sciencedirector of the program in computing for the arts and sciences (pcas) he/him/hisresearch interests: computing education research, task-specific programming languages, learning sciences, education public policy, design methods, and public policy. website email: phone: 734-647-1320office: 3636 beysterhalderman, j. alexprofessor, electrical engineering and computer scienceresearch interests: computer security, electronic voting, digital rights management, information privacy, and tech policy. website
mentoring plan email: phone: (734) 647-1806office: 4717 beyster bldg.hayes, john p.claude e. shannon professor of engineering scienceprofessor, electrical engineering and computer scienceresearch interests: computer-aided design and testing, computer architecture, fault-tolerant design, vlsi circuits, stochastic computing. website email: phone: (734) 763-0386office: 4713 beyster bldg.hero, alfred o.john h. holland distinguished university professor of eecs; r. jamison and betty williams professor of engineeringprofessor, electrical engineering and computer scienceprofessor (courtesy), biomedical engineering; statisticsresearch interests: theory and algorithms underlying data science and machine learning. theory includes applied probability, statistical modeling, and optimization. applications include complex networks, spatio-temporal processes, computational biology, personalized health, and security. website video:
https://www.youtube.com/watch?v=znvmbwxaqi4 email: phone: (734) 763-0564office: 4417 eecshoneyman, peterresearch professor emeritus, electrical engineering and computer sciencelecturer, electrical engineering and computer scienceresearch interests: experimental distributed systems website email: phone: (734) 763-1156office: 4777 beyster bldg.hu, weiassistant professor, electrical engineering and computer scienceresearch interests: theoretical foundations of machine learning, including deep learning, representation learning, and optimization. website
mentoring plan email: huang, ryanassociate professor, electrical engineering & computer science(effective january 1, 2023)research interests: operating systems, distributed systems, cloud and mobile computing, software dependability, program analysis. website email: jagadish, h.v.bernard a. galler collegiate professor of electrical engineering and computer scienceedgar f. codd distinguished university professor of electrical engineering and computer scienceprofessor, electrical engineering and computer sciencedirector of the michigan institute for data scienceresearch interests: big data, data mining, database systems, and bioinformatics. website
mentoring plan email: phone: (734) 763-4079office: 4601 beyster bldg.jain, dhruvassistant professor, electrical engineering and computer scienceresearch interests: accessibility, human computer interaction, sound sensing, augmented & virtual reality, wearableâ computing. website email: office: 4765 beyster buildingjamin, sugihassociate professor, electrical engineering and computer scienceresearch interests: dynamic behaviors of large-scale systems, probabilistic distributed algorithms, computer network protocols and architectures, computer graphics. website email: phone: (734) 763-1583office: 4737 beyster bldg.jeannin, jean-baptisteassistant professor, aerospace engineeringassistant professor (courtesy), electrical engineering & computer sciencehe/him/his website email: phone: (734) 764-6792office: 3017 fxbjenkins, chadprofessor, college of engineering robotics instituteassociate director, michigan robotics instituteprofessor (courtesy), electrical engineering & computer scienceresearch interests: human-robot interaction, including exploration of methods that enable robots to learn human skills. website email: office: 2236 ford robotics buildingjohnson, justinassistant professor, electrical engineering & computer scienceresearch interests: vision and language, visual reasoning, and image generation. website
mentoring plan email: phone: 734-936-7829office: 4749 beyster bldg.juett, jameslecturer iv, electrical engineering and computer sciencehe/him/hisemail: office: 2641 beysterjurgens, davidassistant professor, school of informationassistant professor (courtesy), electrical engineering & computer science website email: phone: (734) 763-2285office: 3341 north quadkamat, vineetprofessor, civil & environmental engineeringprofessor (courtesy), electrical engineering & computer scienceemail: phone: (734) 764-4325office: 2008 ggbkamil, amirlecturer iv, electrical engineering and computer sciencehe/him/his website email: phone: 734-764-2138office: 2632 beysterkapritsos, manosassistant professor, electrical engineering and computer sciencehe/him/hisresearch interests: distributed systems, fault tolerance, formal verification, transaction processing. website
mentoring plan email: phone: 734-615-3343office: 4824 beyster kasikci, barisassistant professor, electrical engineering and computer sciencehe/him/hisresearch interests: operating systems, dependable systems, program analysis, system security website
mentoring plan email: phone: 734-763-1560office: 4753 beyster bldg.kieras, david e.professor emeritus, electrical engineering and computer scienceprofessor emeritus, psychology departmentresearch interests: human-computer interaction, user interface design, human cognition and performance, natural language processing website email: kloosterman, johnlecturer iii, electrical engineering & computer science he/him/his website email: phone: 764-2951office: 3611 beysterkoutra, danaimorris wellman faculty development professorassociate professor, electrical engineering and computer scienceassociate director of the michigan institute for data scienceresearch interests: data mining, graph summarization and visualization, and applied machine learning. website
mentoring plan email: phone: 734-764-4237office: 3633 beysterkuipers, benjaminprofessor, electrical engineering and computer scienceresearch interests: the representation of common sense and expert knowledge, with particular emphasis on the effective use of incomplete knowledge. website
mentoring plan email: phone: (734) 647-6887office: 3240 ford robotics buildingkutty, sindhulecturer iv, electrical engineering & computer scienceshe/her/hersemail: phone: 734-647-8821office: 2640 beysterlafortune, stã©phanen. harris mcclamroch professor of electrical engineering and computer scienceprofessor, electrical engineering and computer sciencehe/him/hisresearch interests: system and control theory; discrete event systems; application to computer and communication systems website video:
https://www.youtube.com/watch?v=rjcag5zckc4 email: phone: (734) 763-0591office: 4415 eecslaird, john e.john l. tishman professor of engineeringprofessor, electrical engineering and computer scienceresearch interests: artificial intelligence, cognitive architectures, machine learning, and computer games. website email: lee, euiwoongassistant professor, electrical engineering & computer scienceresearch interests: algorithms, computational complexity, graph theory, and convex optimization. a particular focus is on approximation algorithms for np-hard optimization problems. website
mentoring plan email: phone: (734)763-6739office: 3641 beyster bldglee, honglakassociate professor, electrical engineering and computer scienceresearch interests: machine learning, deep learning, artificial intelligence, computer vision website email: phone: (734) 764-3726office: 3773 beyster bldg.liu, jieassistant professor of computational medicine and bioinformatics, medical schoolassistant professor (courtesy), electrical engineering & computer scienceresearch interests: bioinformatics, machine learning website email: phone: (734) 615-5110office: 2035d palmer commonsliu, mingyanpeter and evelyn fuss chair of electrical and computer engineeringprofessor, electrical engineering and computer scienceshe/her/hersresearch interests: resource allocation, performance modeling, sequential decision and learning theory, game theory and incentive mechanisms, with applications to large-scale networked systems, cybersecurity and cyber risk quantification. website video:
https://www.youtube.com/watch?v=u6gwzdaozxy email: phone: (734) 764-9546office: 3401 eecsma, linvisiting assistant professor (effective jan. 1, 2023), computer science & engineeringassistant professor (effective aug. 28, 2023), electrical engineering & computer scienceemail: madhyastha, harshaassociate professor, electrical engineering and computer scienceresearch interests: distributed systems, networking, security and privacy, including internet-scale distributed services, cloud computing, online social networks, network measurement, web performance, distributed storage systems website
mentoring plan email: phone: 734-647-8086office: 4611 beystermahlke, scottprofessor, electrical engineering and computer science research interests: compilers, application-specific processors, computer architecture and microarchitecture, embedded systems website email: phone: (734) 936-1602office: 4633 beyster bldg.makar, maggiepresidential postdoctoral fellow/assistant professor, electrical engineering and computer scienceshe/her/hersresearch interests: causal inference, machine learning, healthcare website email: office: 3769 beyster bldg.manerkar, yatinassistant professor, electrical engineering and computer scienceresearch interests: automated formal methods for the specification, design, synthesis, and verification of hardware and software systems; computer architecture; ethical ai. website
mentoring plan email: office: 4816 beyster bldg.mao, zhuoqing morleyprofessor, electrical engineering and computer scienceresearch interests: mobile computing, security, networking, distributed systems, sdn, and cloud computing. website
mentoring plan email: phone: (734) 763-5407office: 4629 beyster bldg.mars, jasonassociate professor, electrical engineering and computer scienceresearch interests: cross-layer systems architectures for emerging applications, datacenter and warehouse-scale computer architecture, and hardware / software co-design. website
mentoring plan email: phone: 734-763-3229office: 4705 beyster bldg.mazumder, pinakiprofessor, electrical engineering and computer scienceresearch interests: vlsi circuit design, vlsi testing, and vlsi layout tools website email: phone: (734) 763-2107office: 4765 beyster bldg.mei, qiaozhuprofessor, school of informationprofessor (courtesy), electrical engineering and computer scienceresearch interests: information retrieval, text mining, social network analysis, and biomedical informatics website email: phone: (734) 763-0076office: 303d west hall meyer, john f.professor emeritus, electrical engineering and computer scienceresearch interests: fault-tolerant computing, model-based performability evaluation, computer and telecommunication networks website email: phone: (734) 763-0037office: 2717 beyster bldg.mihalcea, radajanice m. jenkins collegiate professor of computer science and engineeringprofessor, electrical engineering and computer scienceresearch interests: natural language processing, computational social sciences, multimodal tracking and understanding of human behavior. website
mentoring plan email: phone: 734-647-4088office: 3745 beyster bldg.molaei, somayehresearch fellow, computer science & engineeringleo intermittent lecturer, computer science & engineeringemail: office: 4644 beyster bldg.morgan, andrewlecturer ii, electrical engineering and computer scienceemail: office: 2641 beyster bldg.mower provost, emilyassociate professor, electrical engineering and computer sciencecse associate chair for graduate affairsshe/her/hersresearch interests: audio-visual modeling of human behavior focusing on emotion. focus on assistive speech-based technologies. website
mentoring plan email: phone: 734-647-1802office: 3629 beyster bldg.mozafari, barzanassociate professor, electrical engineering and computer scienceresearch interests: large-scale data-intensive systems, database-as-a-service clouds, distributed systems, and crowdsourcing. website
mentoring plan email: phone: (734) 763-3669office: 4769 beyster bldg.mudge, trevorbredt family professor of engineeringprofessor, electrical engineering and computer scienceresearch interests: computer systems design, low power computing, parallel processing, computer-aided design, impact of technology. website
mentoring plan email: phone: (734) 764-0203office: 4757 beyster bldg.nagarajan, viswanathassistant professor, industrial & operations engineeringaffiliate faculty, electrical engineering & computer science website email: phone: (734) 763-3459office: 2713 ioe 1205 beal avenajarian, kayvanprofessor, computational medicine and bioinformaticsprofessor (courtesy), electrical engineering and computer science website email: phone: 734/763-9388office: ncrc b10-a111narayanasamy, satishprofessor, electrical engineering and computer scienceresearch interests: computer architecture; program analysis; dependable systems; programmer productivity; parallel computing website email: phone: (734) 764-6984office: 4721 beyster bldg.nebeling, michaelassociate professor, school of informationassociate professor (courtesy), electrical engineering & computer science, computer science & engineering website email: phone: 734-764-4057office: 105 s. state st.new, maxassistant professor, electrical engineering and computer sciencehe/him/hisresearch interests: developing and using mathematical tools to ensure correctness, safety and security of programming languages and their implementations. website
mentoring plan email: office: 4640 beysternewman, mark wprofessor, school of informationprofessor (courtesy), electrical engineering and computer science website email: phone: 764-0020office: 4380 north quadnguyen, longassociate professor, statisticsaffiliate faculty website email: office: 456 west hallnoble, brianprofessor, electrical engineering and computer sciencehe/him/his website
mentoring plan email: phone: (734) 936-5983office: 4641 beyster bldg.olson, edwinprofessor, electrical engineering and computer scienceresearch interests: finding ways for robots to sense and understand their environment while coping with uncertainty and ambiguity, multi-autonomous systems. website email: phone: (734) 647-1049office: 2280 ford robotics buildingomar, cyrusassistant professor, electrical engineering & computer sciencehe/him/hisresearch interests: fundamentally improving the programming experience for computational and data scientists, web app programmers, students and educators, and for people with disabilities who cannot effectively use
other programming tools. website
mentoring plan email: phone: (734)647-4712office: 4773 beyster bldg.oney, stephenassociate professor, school of informationassociate professor (courtesy), electrical engineering & computer science website email: phone: 734-763-6284office: 4381 north quad, 105 s. state st.paoletti, david robertlecturer iv, electrical engineering and computer scienceemail: phone: 734-763-8205office: 2645 beysterpeikert, christopherprofessor, electrical engineering and computer scienceresearch interests: cryptography, lattices, coding theory, algorithms, and computational complexity. a particular focus is on cryptographic schemes whose security can be based on the apparent intractability of latticeâ problems. website email: phone: 734-936-2974office: 3601 beyster bldg.pendse, ravivice president for information technology and chief information officer, office of the presidentclinical professor of engineering practice (courtesy), computer science and engineeringemail: office: 4251 plymouth rd #2500perez-rosas, veronicaassistant research scientist, electrical engineering and computer scienceshe/her/hersresearch interests: natural language processing, multi modal and cross-cultural approaches for deception detection and sentiment analysis, behavioral signal processingemail: phone: 734-763-0503office: 2709 beyster bldg.pettie, sethprofessor, electrical engineering and computer scienceresearch interests: optimization algorithms, data structures, parallel and distributed computing, graph theory, and combinatorics. website email: phone: (734) 615-4210office: 3628 beysterprakash, atulprofessor, electrical engineering and computer sciencecse associate chair for academic affairshe/him/hisresearch interests: security policy management, software infrastructure to support collaborative work, privacy in pervasive computing, intrusion detection, group security, operating system security, scientific collaboratories. website
mentoring plan email: phone: (734) 763-1585office: 4741 beyster bldg.razak, saquibleo lecturer iii, electrical engineering & computer science(effective january 1, 2023)email: office: 2636 beysterringenberg, jeffrey s.lecturer iv, electrical engineering and computer scienceresearch interests: mobile learning software development, tactile programming, methods for bringing technology into the classroom, and studying the effects of social networking and collaboration on learning.email: phone: (734) 763-2751office: 2633 beyster bldg.romero, danielassistant professor, school of informationassistant professor (courtesy), electrical engineering and computer science website email: office: 4432 north quadrounds, billprofessor emeritus, electrical engineering and computer scienceemail: phone: (734) 764-9418office: 2717 beyster bldg.sakallah, karem a.professor, electrical engineering and computer scienceresearch interests: computer-aided design of electronic systems, boolean satisfiability, discrete optimization, and hardware and software verification. website
mentoring plan email: phone: (734) 936-1350office: 4603 beyster bldg.saleem, sofialecturer i, electrical engineering & computer scienceemail: sample, alansonassociate professor, electrical engineering & computer scienceresearch interests: human-computer interaction, wireless technology, and embedded systems, with the goal of tackling the critical bottlenecks that limit interactive sensing systems with an eye towards reducing deployment barriers and ensuring scalability. website
mentoring plan email: phone: (253) 642-7287office: 4812 beyster bldg.saranurak, thatchapholassistant professor, electrical engineering & computer scienceresearch interests: efficient graph algorithms and data structures, essentially for dynamic and distributed models. website
mentoring plan email: office: 3644 beysterschaub, florianassociate professor, school of informationassociate professor (courtesy), electrical engineering and computer science website email: office: 4344 north quadshin, kang g.kevin and nancy o’connor professor of computer scienceprofessor, electrical engineering and computer scienceresearch interests: wireless/mobile computation and networks, security and dependability, cyber-physical systems, embedded real-time systems. website
mentoring plan email: phone: (734) 763-0391office: 4605 beyster bldg.smith, matthewadjunct assistant professor, electrical engineering and computer sciencesenior engineeremail: phone: (734) 763-8164office: 3122 eecssoloway, elliotarthur f. thurnau professorprofessor, electrical engineering and computer scienceprofessor, school of information and school of educationresearch interests: artificial intelligence and software engineering, artificial intelligence and education. website email: phone: (734) 936-1562office: 3620 beyster bldg.stout, quentin f.co-director, center for space environment modelingprofessor, electrical engineering and computer scienceprofessor, climate and space research (clasp) (courtesy)research interests: parallel computing, algorithms, supercomputing applied to problems in science and engineering, optimizing clinical trials website
mentoring plan email: phone: (734) 763-1518office: 3605 beyster bldg.tang, lingjiaassociate professor, electrical engineering and computer scienceresearch interests: computer architecture and compiler and runtime systems, especially such systems for large scale data centers. website
mentoring plan email: phone: 734-763-2548office: 4609 beyster bldg.teneketzis, demosthenisprofessor emeritus, electrical engineering and computer scienceresearch interests: stochastic control, decentralized stochastic systems, communication and queueing networks, stochastic scheduling and resource allocation problems, discrete event systems, mathematical economics website email: phone: (734) 763-0598teorey, tobyprofessor emeritus, electrical engineering and computer scienceresearch interests: database design and data warehousing, olap, data mining, performance of computer systems website email: tewari, ambujprofessor, statisticsprofessor (courtesy), electrical engineering and computer science website email: phone: 734-615-0928office: 454 west hallthomason, richmond h.professor, linguisticsprofessor, philosophyprofessor (courtesy), electrical engineering and computer scienceresearch interests: logic in artifical intelligence, computational linguistics, especially natural language generation website email: office: 2251 angell halltorralva, benintermittent lecturer, electrical engineering & computer scienceemail: office: 2717 beystertzimpragos, georgiosassistant professor, electrical engineering & computer scienceresearch interests: computer architecture, new models of computation, computing with emerging devices website email: office: 4777 beyster bldg.wang, luassistant professor, electrical engineering & computer scienceshe/her/hersresearch interests: natural language processing, computational social sciences, machine learning website
mentoring plan email: phone: (734)764-6894office: 3757 beyster bldgwang, xinyuassistant professor, electrical engineering & computer sciencehe/him/hisresearch interests: the development of foundational program synthesis techniques that are applicable to automating real-world programming tasks and in developing and applying program analysis techniques in the context of software security and software engineering. website
mentoring plan email: office: 4620 beysterwang, xuassistant professor, electrical engineering & computer scienceresearch interests: human-computer interaction, artificial intelligence in education, computer supported collaborative learning and work, human-ai interaction, learning sciences and technologies, cognitive science. website
mentoring plan email: office: 3737 beysterweimer, westleyprofessor, electrical engineering and computer scienceresearch interests: programming languages; software engineering; medical imaging; program analysis, synthesis and improvement. website
mentoring plan email: phone: 734-615-9916office: 4636 beysterwelch, joshuaassistant professor, computational medicine and bioinformaticsassistant professor (courtesy), electrical engineering & computer scienceresearch interests: computational biology and machine learning. website email: wellman, michaelrichard h. orenstein division chair of computer science and engineeringlynn a. conway collegiate professor of computer science and engineeringprofessor, electrical engineering and computer sciencehe/him/hisresearch interests: artificial intelligence, electronic commerce website
mentoring plan email: phone: (734) 764-8504office: 3713 beyster bldg.wenisch, thomas f.adjunct research scientist, electrical engineering and computer scienceemail: office: remotewiens, jennaassociate professor, electrical engineering and computer scienceco-director, u-m precision healthresearch interests: artificial intelligence, machine learning, computational healthcare website
mentoring plan email: phone: 734-647-4832office: 3765 beyster bldg.winsor, donald c.departmental computing organization coordinatoradjunct professor, electrical engineering and computer sciencehe/him/his website email: phone: (734) 764-8543office: 4403 eecsyarger, austinlecturer ii, electrical engineering and computer sciencehe/him/hisresearch interests: – community development (founder and co-chair of
the igda ann arbor gamedev community )
– midwestern entrepreneurship (founder of the
michigan game studios database )
– game development / extended reality ( arbor interactive game studio )
– game development pedagogy ( eecs 494 : introduction to game development course )
– extended reality (xr) pedagogy ( eecs 498 : extended reality and society course ) website email: phone: (734) 763-2012office: 3611 beysterye, jiepingprofessor, computational medicine and bioinformaticsprofessor (courtesy), electrical engineering and computer scienceemail: office: 2035 palmer commonsyu, stellaprofessor, electrical engineering and computer scienceresearch interests: i study visual perception from multiple perspectives: human vision, computer vision, robotic vision, and artistic vision.
to me, visual perception presents not just a fascinating computational problem, but more importantly an intelligent solution for large-scale data mining and pattern recognition applications.
website email: office: 3753 beyster bldg.zhu, leqilecturer i, electrical engineering & computer scienceemail: office: 3959 beyster
none
michigan engineering
electrical engineering and computer science department
none bob and betty beyster building2260 hayward streetann arbor, mi 48109-2121 contact >
cse intranet >
none
none
none
none eecs building1301 beal avenueann arbor, mi 48109-2122 contact >
ece intranet >
none
none
none
none
none
â© 2022
the regents of the university of michigan
privacy policy
campus safety
non-discrimination policy
about
welcome to cse
by the numbers
advisory board
history
faculty hiring
giving
visit
bob and betty beyster building
leinweber computer science and information building â
emergency and safety info
resources
contact
community
our values: hacks
community news
are you new to cs?
resources for student support and inclusion
student groups and teams
cse action plan
dei and climate â
reporting concerns and misconduct
academics
graduate programs & admissions
undergraduate programs & admissions
for current students
course information
undergrad research opportunities
research
research areas
labs & centers
tech transfer & startups
industrial relations
reports & publications
people
faculty
phd students
postdocs
staff
alumni
honors and awards
hire our phds and postdocs
news
events


Link: https://www.prospects.ac.uk/job-profiles/software-engineer

software engineer job profile | prospects.ac.uk
none page navigation skip to site navigation
skip to main content
skip to footer
none
jobs and work experience
search graduate jobs
job profiles
work experience and internships
employer profiles
what job would suit me?
job sectors
apprenticeships
working abroad
gap year
self-employment
postgraduate study
search postgraduate courses
funding postgraduate study
universities and departments
study abroad
conversion courses
law qualifications
masters degrees
mba courses
phd study
postgraduate diplomas and certificates
professional qualifications
teacher training
careers advice
what can i do with my degree?
getting a job
cvs and cover letters
applying for jobs
interview tips
open days and events
applying for university
choosing a course
getting into university
student loans and finance
university life
changing or leaving your course
alternatives to university
log in
register
none
menu
jobs and work experience
search graduate jobs
job profiles
work experience and internships
employer profiles
what job would suit me?
job sectors
apprenticeships
working abroad
gap year
self-employment
postgraduate study
search postgraduate courses
funding postgraduate study
universities and departments
study abroad
conversion courses
law qualifications
masters degrees
mba courses
phd study
postgraduate diplomas and certificates
professional qualifications
teacher training
careers advice
what can i do with my degree?
getting a job
cvs and cover letters
applying for jobs
interview tips
open days and events
applying for university
choosing a course
getting into university
student loans and finance
university life
changing or leaving your course
alternatives to university
none on this profile responsibilities
salary
qualifications
skills
work experience
career prospects
related jobs and courses job profilesoftware engineeron this profile responsibilities
salary
qualifications
skills
work experience
career prospects
related jobs and courses
none
none job profilesoftware engineeron this profile responsibilities
salary
qualifications
skills
work experience
career prospects
related jobs and courses
none
none see how well you match this job profile and over 400 others. none
software engineers apply scientific and mathematical principles in order to create computer software and solve problems
as a software engineer, you'll work in a constantly evolving environment, due to technological advances and the strategic direction of the organisation you work for. you'll create, maintain, audit and improve systems to meet particular needs, often as advised by a systems analyst or architect, testing both hard and software systems to diagnose and resolve system faults.
the role also covers writing diagnostic programs and designing and writing code for operating systems and software to ensure efficiency. when required, you'll make recommendations for future developments.
none
none responsibilities as a software engineer, you'll need to: analyse user requirementswrite and test code, refining and rewriting it as necessary and communicate with any programmers involved in the projectresearch, design and write new software programs (e.g. business applications or computer games) and computer operating systemsevaluate the software and systems that make computers and hardware workdevelop existing programs by analysing and identifying areas for modificationintegrate existing software products and get incompatible platforms to work togethercreate technical specificationswrite systems to control the scheduling of jobs or to control the access allowed to users or remote systemswrite operational documentation with technical authorsmaintain systems by monitoring and correcting software defectswork closely with other staff, such as project managers, graphic artists, ux designers, other developers, systems analysts and sales and marketing professionalsconsult clients and colleagues concerning the maintenance and performance of software systems, with a view to writing or modifying current operating systemsinvestigate new technologiescontinually update technical knowledge and skills by attending in-house and external courses, reading manuals and accessing new applications.salarytypical graduate software engineer salaries start from â£18,000 a year.the average annual salary for a software engineer is between â£25,000 and â£50,000.at senior or management level, software engineers can earn â£45,000 to â£70,000 or more per annum. bonus schemes may be available. the exact salary you'll receive is dependent upon the company, location and nature of your employer's business. the highest salaries can be found in the finance, pensions and telecoms sectors in london and the south east.
income figures are intended as a guide only. working hours working hours are typically 9am to 5pm. however, longer hours are often necessary towards the end of projects as deadlines approach, as well as during the testing stage so that systems can be tested when they're not being used. in some cases, software engineers may be required to be on call to deal with problems. this can involve evening and weekend work in a shift pattern. allowances may be available in these cases.
self-employment and freelance or contract work is possible as there is an increasing market for contract software engineers with specialist knowledge. career breaks, on the other hand, may be difficult due to the need to keep technical knowledge up to date in a rapidly changing environment. related case studies none
none
none what to expectthe job involves spending many hours at the keyboard, so high levels of concentration are required. regular breaks are essential to minimise potential adverse health effects such as eye strain or back problems.the work is mainly office based or in computer laboratories, although full or part-time remote working is becoming increasingly common.projects may be undertaken alone or in small teams.women are currently underrepresented in this profession and gender imbalance across the it industry as a whole is a recognised issue. steps are being taken to redress the balance. women who want to work in technology should visit
women in technology
for information and jobs.depending on the nature of the business, travel within a working day or absence from home at night may be required. this is more likely with consultancy work. more travel is involved in installation and implementation work.want a career in the it industry? software engineering (conversion) msc
visit qualifications although this area of work is open to all graduates, applicants will be expected to have some technical ability. having studied one of the following subjects may increase your chances of employment: computer sciencecomputer software or computer systems engineeringelectronicsinformation systemsmathematicsphysics. many of the larger graduate recruiters will only employ graduates with proven technical skills and a good degree (2:1 or above) in a computing-related discipline.
smaller companies generally prefer degrees of a computing, scientific or numeric nature. in some cases, however, graduates with an unrelated degree may be considered if their technical knowledge and enthusiasm can be demonstrated.
none
an hnd in a computer-related subject may improve chances of entry and candidates with substantial systems development experience may be considered.
entry without a degree or hnd is unlikely, although it may be possible after gaining considerable experience in systems development as an assistant. skills you'll need to show evidence of the following: knowledge of computer systems and technologiestechnical competencythe ability to communicate with clients, colleagues and management to explain complex issues clearly and conciselya meticulous and organised approach to worka logical, analytical and creative approach to problemsthoroughness and attention to detailbusiness skills and commercial awarenessthe ability to work both in a team and alone and to manage your own workloadcareer motivation and a willingness to continue to further your knowledge and skillsan ability to learn new skills and technologies quicklyan awareness of current issues affecting the industry and its technologies.work experience relevant work experience is a good way of demonstrating a genuine interest in computing and is regarded favourably by employers. gain experience through course-related placements, opportunities to work shadow or a year in industry. advertisementemployers software engineers are employed in a range of sectors. specialist it firms - such as it consultancies, large it providers, software development, internet providers and training firms; organisations that use it software, systems and equipment, including retailers, law firms, business intelligence and market research organisations, education providers, the armed forces, the public sector and voluntary sector organisations.manufacturing industry - including automotive, navigation, telecommunications, manufacturing and construction companies.financial services - including global investment banks, financial/banking organisations, security market specialists and the pensions sector.public utilities - covering energy and water supply, energy extraction and transport. depending on the setting software engineering may be offered as part of a wider role, so look beyond the job title.
consultancy is another area where software engineer jobs arise. the role may include other elements, such as analysis, implementation and support. small to medium-sized enterprises (smes) are a growing part of the it industry and may also have opportunities.
look for job vacancies at:
ashdown group
bubble jobs
contractor uk
- specialises in contract jobs. cwjobs
jobserve
mcvjobs
technojobs
women in technology
none software engineer jobs none
none
none
view more information technology jobs professional development it's vital to keep up to date with changes and developments in the industry, which may involve using your initiative and taking responsibility for updating your technical skills and knowledge. software engineers will often take ownership of their training needs, particularly in smaller organisations where they may not be managed by someone with technical it knowledge.
large graduate employers often offer a structured programme, where you'll gain experience in a number of team-related projects in different work areas. most companies offer ongoing training, either in-house or via external courses.
if you're a freelance contractor or employed by a smaller company, you may need to consider the cost and time implications of taking responsibility for your own training.
you can complete courses to obtain a variety of software-specific certifications, likeâ microsoft learning, certifiedâ scrum master (csm) and certified ethical hacker (ceh). these courses can be expensive but are recognised throughout the industry and can enhance your career prospects when combined with experience.
none
none
to further your career progression, you may consider training in areas such as business, management and finance. career prospects there are different levels of software engineering and promotion is usually dependent upon both ability and experience.
an entry-level post typically involves working under supervision, formulating the scope of, and objectives, for systems and designing code. after around three years, you may progress to preparing detailed specifications from which programs may be written and be competent to work at the highest technical level.
a senior software engineer often supervises the activities of a team of developers for a large project or several smaller projects. this usually requires a minimum of five years' experience.
progression is mainly into management via team leadership and project management roles, or to designer/consultant via technical specialisation. transfer between organisations for advancement is often possible.
software engineers are specialists and may remain within one organisation, and frequently in one role, for much of their working lives. however, others expand and develop their roles to the extent that software engineering becomes part of a much wider role in positions such as technical writing, it training and education. they can also move on to the role of software architect.
both bcs and iap provide up-to-date information and advice on career development.
none
written by agcas editors
december 2021
none
none alternative careers none
none
none
none
none
none how would you rate this page? on a scale where 1 is dislike and 5 is like something went wrong. please try again.dislike1unhappy-very2unhappy3neutral4happylike5happy-verytell us why...do not fill this insendsuccess feedback thank you for rating the page related jobs and courses uni profile eu business school
view profile
event postgraduate open eventwrexham glyndwr universitywrexham view event
graduate scheme computer teacher training scholarshipsbcs. the chartered institute for it£27,001-£29,500various locations view job
work experience systems design engineer summer placement - stevenagembda  (22 other jobs) £19,501-£22,000stevenage view job
back to top
none get in touch none
none
none
none
none
none
none promote job vacancies, courses or events none
prices from â£350
none
none
none company about us
work for us
our publications
press office legal privacy
cookies
terms of use
accessibility
none
none made withlovein manchester none
none prospects is part of jisccompany informationregistered office4 portwall lane, bristol, bs1 6nb.registered number09316933 (england)prospects is part of jisccompany informationregistered office4 portwall lane, bristol, bs1 6nb.registered number09316933 (england) none
none


Link: https://www.cs.ucf.edu/research/software-engineering-and-systems/

software engineering and systems – department of computer science
skip to main content
department of computer science
navigation
about
chairâs message
history & background
computer science advantages
faculty from cs@ucf
faculty awards & honors
cs student of the year
cs@ucf newsletters
faculty & staff resources
student organizations
academics
academic advising
undergraduate degrees
undergraduate resources
computer science placement test
graduate admissions
current graduate students
graduate degrees
accreditation
research
research areas
research labs
faculty research profiles
publications
industry
people
faculty administrators
faculty
faculty by research area
staff
faculty awards & honors
contact
jobs
software engineering and systems
department of computer science
skip to section
overview
software engineering addresses the problem of how to produce quality software on time and within a specific budget. systems work addresses the problem of how to build large computer systems that accomplish some specific purpose. specific research problems in software engineering that we are investigating include: how best to describe what software systems are supposed to do (specification), how to ensure that computational systems behave correctly (verification), model checking of software and hardware systems with a particular emphasis on scalable formal verification of cyber-physical systems and quantitative computational models, how to parallelize systems for maximum efficiency, how to model, analyze, and optimize the performance of software, and how to build large, concurrent and distributed systems.
software engineering and systems faculty
none
none
thirteen research areas. unlimited possibilities.
none
innovative uses for computation
studies of issues surrounding computation
investigations into the nature of computation
none
none
none
none
none
none
none
none
none
none
none
none
none
department of cs, cecs, ucf
facebook
twitter
none


Link: https://distantjob.com/blog/software-developer-software-engineer/

software developer vs software engineer: the difference you need to know - distantjob - remote recruitment agency
none
hire now
remote tech jobs
blog
our podcast
about us
contact us
none
hire now
remote tech jobs
blog
our podcast
about us
contact us
none
evaluating remote tech candidates
software developer vs software engineer: the difference you need to know
none
jori hamilton
published july 4, 2022
-
3 min. to read
are you in a position to recruit a software developer for your new project? or do you need a software engineer? without a technical background, it is quite challenging to identify the difference between software engineers vs software developers.
these positions are similar but are responsible for very different parts of software creation and while there is some overlap, they have different responsibilities, focuses, and skills.
none
while both are necessary and have some requisite overlap, they are distinctly different.
software engineer: overview
none
software developer: overview
where engineers are most heavily involved in the process closer to the beginning of the sdlc, software developers are in the thick of it, building, testing, and iterating the program. each individual has less responsibility than the project engineers and, in larger companies, will work on a specific portion of the program.
none
software developer vs. software engineer
one of the reasons that people confuse software engineers vs software developers is because their jobs can have considerable overlap. this comes from the necessary skills and knowledge software engineers require, and the fact that many software developers become engineers over the course of their careers.
none
whatâs the difference?
the main difference is in the scope of their work and the level of responsibility that individual developers and engineers have.
a software engineer models software that can be built to specification by designing and building the structures necessary for software development. to do so, they must be able to understand the individual components of a design and their functional connections, as well as understand the extension of their developersâ abilities and software functionality.
a software developer will often be given a portion of a project to complete and will report to the engineer or a head developer who will interface with the engineer.
in small companies and startups, smaller teams can mean that an engineer will also take on developer responsibilities and vice-versa. this is the main reason why both roles often get confused.
roles, responsibilities, and practices of software developers
software developers are responsible for programming the software and its systems, as designed by an engineer. as such, their main responsibilities are:
programming: software developers should be knowledgeable of algorithms and programming structures that are commonly used in the field the software theyâre developing is aimed at. this helps develop code in accordance with best practices that can be used and easily integrated with the code authored by the rest of the team.code versioning: developers should be comfortable and proficient with a code versioning tool of the teamâs choice. itâs a standard practice that helps organize work, roll back any undesired changes with minimal effort, or develop parts of the code independently from the rest of the team to minimize disruption.use ides and their tools: ides nowadays are far from being a simple programs, and provide many tools that help improve and streamline a developerâs job, such as debugging, refactoring, and providing useful code statistics. savvy software developers should know how to use these tools to their advantage and deliver the best code possible.
roles, responsibilities, and practices of software engineers
software engineers are responsible for a more broad view of a software development project. as such, they have the following responsibilities:
design and problem-solving: an engineer is tasked first and foremost with designing the various systems and components a software needs to function. software is developed to solve a problem, and it can only do so with a thoughtful and coherent design.learn programming: much like a developer, an engineer should also know algorithms and programming structures, but with a different goal in mind. unlike the developer, they donât put that knowledge into actual practice, but rather learn it so they can design software in a way that is then doable and achievable by the projectâs programmers.communicate with the team: while a developer can be left to their own devices once their tasks have been set, an engineer needs to be in constant communication with the team to make sure they understand the design and develop it according to specifications.
none
comparison chart
parametersoftware engineersoftware developermain functiondesign the softwareâs systems and componentsprogram the softwareâs systems and componentsproject scopehas a constant overview of the whole projectworks on a local scale and in specific systems, but can have an overview of the project when needing to interface with other systemsmain outputdocumentationcodedesign and problem-solvingproject-wide, at a high levelsystem-wide, at a low levelprogrammingrequires knowledgerequires both knowledge and applicationteam interactionworks and communicates the design with the whole team constantlycan communicate with team members directly affected by their work, but will otherwise usually work by themselvessalary$110k /year on average$100k /year on average
conclusion
the organisational structure of any given company will vary, but in general, some elements can be counted on.
software developers may work on a team that falls under the umbrella of the engineering department or have their own separate department. developers report to project managers and engineers as the progress of their work dictates when the product will be ready. in this way, software developers are the most important component in software creation.
engineers are a must for any type of software creation. whether they are a developer who is expanding their skills and beginning to work at a higher level, or a dedicated engineer, without a person to lead the creation of purpose, design, and deliberation, there is no program to build. engineers interface with project managers, software developers, managers, and marketing teams. they keep other departments updated on timelines, help delineate work, and communicate expectations. in this way, software could not be created without engineers.
there may be overlap in the responsibilities of each of these positions, but ultimately they are both necessary for building new and improved programs.
none
1. is a software engineer the same as a software developer?
no. a software engineer can (and usually will) have a developer background, but they also have a much wider view of the project and define its architecture and thus more responsibilities. a developer is tasked by an engineer with building the systems that make part of the whole software.
2. which is better: software developer or software engineer?
none
3. who is paid more: software engineer or software developer?
none
subscribe to our newsletter and get exclusive content and bloopers
or share this post
none
none
none
none
table of contents
software engineer: overview
software developer: overview
software developer vs. software engineer
roles, responsibilities, and practices of software developers
roles, responsibilities, and practices of software engineers
frequently asked questions
comparison chart
software developer vs software engineer: which one to hire?
share
none
none
none
none
related articles
none
published october 26, 2022
database architect vs. database administrator: what’s the difference?
none
none
published october 4, 2022
8 skills to look for in a python developer
none
none
published september 12, 2022
pair programming interview: how to do it right
none
are you our next superstar remote developer?
you live, breathe and eat code, and have fun figuring out how to solve problems. and you love living in south america or eastern europe. but you donât feel as fulfilled as your friends in north america.
i need a job
none
distantjob: the worldâs first remote placement agencyâ®
connect
none
none
none
none
stay in touch
join our newsletter for the latest news and articles, twice a month!
<
by entering your email, you agree to our
privacy policy .
company
about us
hr services
hire developers
remote job openings
contact us
resources
the podcast
blog
how to hire
net developer
xamarin developer
php developer
wordpress developer
reactjs developer
clojure developer
remote developer
backend developer
developers for startups
â© 2022 distantjob all rights reserved.
privacy policy
ask about our hr services
none
i understand


Link: https://engineering.nyu.edu/academics/departments/computer-science-and-engineering/people

people | nyu tandon school of engineering
skip to main content
none
undergraduate
graduate
online learning
departments
applied physics
biomedical engineering
center for urban science and progress
chemical and biomolecular engineering
civil and urban engineering
computer science and engineering
electrical and computer engineering
finance and risk engineering
mathematics
mechanical and aerospace engineering
nyu tandon online
technology, culture and society
technology management and innovation
degrees & programs
bachelor of science
master of science
doctor of philosophy
online programs
certificate programs
nyu tandon bridge
industry partner programs
k12 stem
support & services
undergraduate services
graduate services
financial aid & fellowships
records & registration
online learning services
faculty innovations (fitl)
areas of excellence
research
centers & institutes
labs & groups
student research
entrepreneurship
makerspace
student life
experiential learning
career hub
support & resources
international students
alumni
giving
partnerships
overview
explore nyu tandon
fast facts
year in review
strategic plan
leadership
history
community
diversity & inclusion
brooklyn
visit
news & events
news
events
social media
podcast
media inquiries
search nyu tandon
fulltext search
common questions
none
none
admissions
+
academics
+
research & innovation
+
life at tandon
+
engage
+
about
+
admissions
undergraduate
graduate
online learning
academics
departments
applied physics
biomedical engineering
center for urban science and progress
chemical and biomolecular engineering
civil and urban engineering
computer science and engineering
electrical and computer engineering
finance and risk engineering
mathematics
mechanical and aerospace engineering
nyu tandon online
technology, culture and society
technology management and innovation
degrees & programs
bachelor of science
master of science
doctor of philosophy
online programs
certificate programs
nyu tandon bridge
industry partner programs
k12 stem
support & services
undergraduate services
graduate services
financial aid & fellowships
records & registration
online learning services
faculty innovations (fitl)
research & innovation
areas of excellence
research
centers & institutes
labs & groups
student research
entrepreneurship
makerspace
life at tandon
student life
experiential learning
career hub
support & resources
international students
engage
alumni
giving
partnerships
about
overview
explore nyu tandon
fast facts
year in review
strategic plan
leadership
history
community
diversity & inclusion
brooklyn
visit
news & events
news
events
social media
podcast
media inquiries
none
none
academics
departments
computer science and engineering
people
computer science and engineering
there is a practical and pragmatic mindset here. instead of teaching things on an esoteric level, we attempt to teach by doing. our program helps worldwide students to come together and obtain the very strong background and skills that lead them well into the job market â at wall st., major tech companies, or within the government."
â professor justin cappos
discover our commitment to teaching
quick links
doctoral students
quick links
quick links
doctoral students
quick links
doctoral students
jump to
core faculty
associated faculty
global network faculty
research faculty
affiliated faculty
emeritus faculty
staff
core faculty
none
none
professor & interim chair for the department of computer science and engineering
none
none
industry professor
none
none
professor
none
none
professor
none
none
associate professor
none
none
associate professor; director of the ms program
none
none
associate professor, computer science and engineering and biostatistics (global public health)
none
none
industry associate professor
none
none
industry assistant professor
none
none
assistant professor
none
none
industry associate professor
none
none
professor of computer science and data science , director of the vida center
none
none
institute professor
none
none
associate professor; interim director of the ph.d. program
none
none
associate professor
none
none
industry professor and director of undergraduate programs
none
none
associate professor
none
none
vice dean for student and academic affairs, tandon online; professor
none
none
assistant professor
none
none
industry professor
none
none
industry assistant professor
none
none
industry professor
none
none
industry associate professor
none
none
institute professor
none
none
industry professor
none
none
industry professor
none
none
institute associate professor
none
none
industry professor
none
none
assistant professor
none
none
industry associate professor
none
none
associate professor
none
none
professor
none
none
associate professor
associated faculty
none
none
assistant professor of computer engineering, nyu abu dhabi
global network faculty
none
none
global network professor
research faculty
none
none
distinguished research professor
none
none
research assistant professor of computer science
none
none
research assistant professor
none
none
research assistant professor
none
none
research professor
none
none
research assistant professor
none
none
research professor
none
none
research assistant professor
none
none
assistant research professor
affiliated faculty
none
none
visiting research professor
none
none
associate professor
none
none
assistant professor
none
none
institute associate professor
none
none
professor; co-founder and co-chair nyu center for cybersecurity; founder and organizer: annual csaw embedded security challenge
none
none
visiting assistant professor
none
none
professor; technology management and innovation department chair
none
none
assistant professor
none
none
assistant professor
emeritus faculty
none
professor emeritus
none
professor emeritus
none
professor emeritus
none
professor emeritus
none
professor emeritus
none
none
professor emeritus
staff
none
department administrator
none
none
special projects manager
none
none
program coordinator
none
none
senior grants manager
none
none
manager of academics
none
none
academic advisor
none
none
academic department manager
none
none
grants and proposals manager
none
none
academic advisor
none
none
program coordinator/hr analyst
none
none
department administrator
main menu
none
nyu tandon made in brooklyn
quick links
nyu libraries
nyu brightspace
nyu albert
accessibility
bulletin
tandon directory
login (faculty & staff)
information for
students
faculty
staff
alumni
parents
media
careers at tandon
contact
contact us
646-997-3600
nyu campuses
new york
shanghai
abu dhabi
nyu tandon made in brooklyn
make a gift
follow us
none
none
none
none
none
â© nyu tandon 2022


Link: https://engineering.tamu.edu/cse/research/areas/software.html

software, software engineering | texas a&m university engineering
skip to main content
departments
info for
giving
contact
none
search
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
none
search
search
none
menu
about
academics
admissions & aid
research
people
partner with us
search
search
search
about
academics
admissions & aid
research
people
partner with us
giving
contact
college of engineering home
about
about us
facts & figures
accreditations
maps and directions
news
contact us
faculty distinctions, awards and honors
academics
academics
advising
engineering honors
computer engineering
global programs
student organizations
peer teachers
fast track: optimizing the transition from undergraduate to graduate studies
admissions & aid
admissions and aid
entry to a major process
scholarships & financial aid
research
research
research areas
labs
undergraduate research
seminars and distinguished lectures
people
leadership
faculty
staff
partner with us
industry capstone program
industrial affiliates program
home
computer science and engineering
research
research areas
software, software engineering
software, software engineering
software and software engineering research studies everything related to engineering high-quality software, including (but not limited to) software requirements, design, testing, verification, analytics, evolution, productivity and social aspects of software engineering.
research faculty
dilma da silva
professor, computer science & engineering
ford motor company design professor ii
office:
petr 227 phone:
979-458-8008 email:
dilma@cse.tamu.edu
jeff huang
associate professor, computer science & engineering
office:
petr 236 phone:
979-845-5485 email:
jeff@cse.tamu.edu
robert lightfoot
associate professor of practice, computer science & engineering
office:
petr 422 phone:
979-845-2611 email:
rob.light@tamu.edu
abdullah muzahid
assistant professor, computer science & engineering
office:
petr 206 phone:
979-458-1059 email:
abdullah.muzahid@cse.tamu.edu
khanh nguyen
assistant professor, computer science & engineering
office:
petr 229 phone:
979-458-1904 email:
khanhtn@tamu.edu
lawrence rauchwerger
emeritus professor, computer science & engineering
office:
hrbb 417a phone:
979-845-8872 email:
rwerger@cse.tamu.edu
frank m. shipman
professor, computer science & engineering
office:
petr 335 phone:
979-862-3216 email:
shipman@cse.tamu.edu
pauline wade
associate professor of practice, computer science & engineering
office:
petr 108 phone:
979-458-0480 email:
paulinewade@tamu.edu
duncan m. "hank" walker
associate dean for graduate programs
professor, computer science & engineering
office:
petr 218 phone:
979-862-4387 email:
walker@cse.tamu.edu
research areas
algorithms and theory
artificial intelligence, intelligent systems, machine learning, natural language processing
machine learning, natural language processing
bioinformatics, computational biology
computational science
computer architecture
computer science education
computer vision
cyber-physical systems
cybersecurity
data science
databases, data mining, information retrieval systems
digital humanities
electronic design automation and vlsi
embedded systems
gaming
graphics and visualization and computational fabrication
health
human-centered systems
human-computer interaction
networks
parallel and distributed computing
programming languages,â compilers
robotics, human-robot interaction
software, software engineering
systems
systems and systems software
technical reports
the department of computer science and engineering
college of engineering
texas a&m university
department of computer science & engineeringtexas a&m university435 nagle street
college station, tx 77843-3112
phone: 979-458-3870
fax: 979-845-1420
cse-general@cse.tamu.edu
follow our department:
none
none
none
find us on campus
office:
peterson building
maps & directions
none
texas a&m university college of engineering, 3127 tamu,
college station, tx   77843-3127 (
zach )
easa@tamu.edu
(979) 845-7200
none
none
none
none
none
follow us:
none
none
none
none
none
the college of engineering is a member of
texas a&m university
texas a&m engineering is a member of
the texas a&m university system
copyright © 2022, texas a&m engineering communications, all rights reserved
state of texas
texas homeland security
open records
risk, fraud, & misconduct hotline
none
statewide search
texas crews
environmental health, safety, & security


Link: https://builtin.com/recruiting/software-engineer-vs-programmer

software engineer vs. programmer: 6 key differences | built in
skip to main content
recruiting
tech recruiter resources
recruiting +1software engineer vs. programmer: whatâs the difference?recruiters need to understand these key differences that set software engineers and programmers apart.written by kate heinz
kate heinz product marketing manager at built in none kate heinz is a built in product marketing manager who formerly covered career development, hr and tech recruiting topics. she previously worked as a content strategist for yakkety yak. heinz holds a bachelor of arts from the university of michigan. image: shutterstock
none
rose velazquez updates reporter at built in none updated by rose velazquez
| oct 12, 2022
none
none
none
none
none
none
none
â  what is a software engineer? none
none what does a software engineer do?software engineers evaluate client or company needs in conjunction with those of the user and methodically conceptualize a systematic solution. software engineers are known as the âsoftware architects,â meaning they create the guidelines â or blueprints â of the software framework. their designs are then passed on to programmers and software developers who translate the engineerâs directions into instructions the computer can read and understand, like lines of code.â
often working in teams, software engineers oversee the development process. they apply engineering best practices to create a stable system that mitigates unnecessary transactions and consists of interdependent programs and software. when the system is complete, software engineers are tasked with regularly testing and maintaining the software. their ultimate concern is the quality and stability of the system. when a bug is introduced, software engineers ask, âwhat are its implications and potential impact to the system?â
free toolkit: successfully onboard remote employees download this remote onboarding toolkit to access actionable resources you can implement and see the impact of immediately.
download now
â  what is a programmer? a programmer â also called a computer programmer â is the âsoftware contractor.â theyâre responsible for taking the software engineerâs guidelines and developing the programs and software. they are occasionally called âcodersâ or even âdevelopersâ as their primary focus is writing, evaluating and editing lines of code. programmers are involved in a single stage within the development life cycle and concentrate on one component at a time.
none what does a programmer do?programmers write code and debug errors in programs and software based on instructions from software engineers. they are involved in a single stage within the development lifecycle and concentrate on one component at a time. none
none
â  what is the difference between a software engineer and programmer? letâs take a look at six of the key differences between software engineers and programmers.
none
â  1. education none
none
â  2. responsibilities none
none
view jobs
none
â  3. role in the development lifecycle none
none
â  4. developmental approach none
none
â  5. skills none
none
none
â  6. work dynamic none
none image: built in none
free toolkit: employee retention rate calculator use our template to seamlessly calculate your own employee retention rate.
access now
none
none
none
none
none
recruiting
tech recruiter resources great companies need great people. that's where we come in. recruit with us
none built in is the online community for startups and tech companies. find startup jobs, tech news and events. none
none
none
none
about
our story
careers
our staff writers
content descriptions
company news
get involved
recruit with built in
subscribe to our newsletter
become an expert contributor
send us a news tip
resources
customer support
share feedback
report a bug
tech a-z
browse jobs
tech hubs
built in austin
built in boston
built in chicago
built in colorado
built in la
built in nyc
built in san francisco
built in seattle
see all tech hubs
â© built in 2022
learning lab user agreement
accessibility statement
copyright policy
privacy policy
terms of use
do not sell my personal info
ca notice of collection
none
none


Link: https://www.nature.com/articles/d41586-022-01516-2

why science needs more research software engineers
skip to main content
thank you for visiting nature.com. you are using a browser version with limited support for css. to obtain
the best experience, we recommend you use a more up to date browser (or turn off compatibility mode in
internet explorer). in the meantime, to ensure continued support, we are displaying the site without styles
and javascript.
advertisement
none
none
none
none
none
none
none
none
none
none
none
none
nature
career q&a
article
career q&a
31 may 2022
why science needs more research software engineers
ten years after their profession got its name, research software engineers seek to swell their ranks.
chris woolston
0
chris woolston
chris woolston is a freelance writer in billings, montana.
view author publications
none
none
none
none
you have full access to this article via your institution.
none
none
none
in march 2012, a group of like-minded software developers gathered at the university of oxford, uk, for what they called the collaborations workshop. they had a common vocation â building code to support scientific research â but different job titles. and they had no clear career path. the attendees coined a term to describe their line of work: research software engineer (rse).
none what do rses do?
fundamentally, rses build software to support scientific research. they generally donât have research questions of their own â they develop the computer tools to help other people to do cool things. they might add features to existing software, clear out bugs or build something from scratch. but they donât just sit in front of a computer and write code. they have to be good communicators who can embed themselves in a team. what sorts of projects do they work on?
almost every field of science runs on software, so an rse could find themselves working on just about anything. in my career, iâve worked on software for imaging cancer cells and modelling pedestrian traffic. as a postdoc, i worked on computational neuroscience. i donât know very much about these particular research fields, so i work closely with the oncologists or neuroscientists or whomever to develop the software thatâs needed.
none
why do so many universities support their own rse groups? some high-powered researchers at the top of the academic ladder can afford to hire their own rse. that engineer might be dedicated to maintaining a single piece of software thatâs been around for 10 or 20 years. but most research groups need â or can afford âan rse only on an occasional basis. if their university has an rse group, they can hire an in-house engineer for one day a week, or for a month at a time, or whatever they need. in that way, the rse group is like a core facility. the university tries to ensure a steady workflow for the group, but thatâs usually not a problem â thereâs no shortage of projects to work on. what else do rses do? a big part of the job is raising awareness about the importance of quality software. an rse might train a postdoc or graduate student to develop software on their own. or they might run a seminar on good software practices. in theory, training 50 people could be more impactful than working on a single project. in practice, itâs often hard for rses to find the time for teaching, mentorship and advocacy because theyâre so busy supporting research. do principal investigators (pis) appreciate the need for rses? itâs mixed. in the past, researchers werenât always incentivized to use or create good software. but thatâs changing. many journals now require authors to publish code, and that code has to be fair: findable, accessible, interoperable and reproducible. that last term is very important: good software is a crucial component of research reproducibility. we explain to pis that they need reliable code so they wonât have to retract their paper six months later. who should consider a career as an rse? many rses started out as phd students or postdocs who worked on software to support their own project. they realized that they enjoyed that part of the job more than the actual research. rses certainly have the skills to work in industry but they thrive in an environment of cutting-edge science in academia.
most rses have a phd â i have a phd in computer graphics â but thatâs not necessarily a requirement. some rses end up on the tenure track; i was recently promoted to professor. many others work as laboratory technicians or service staff. i would encourage any experienced developers with an interest in research to consider rse as a career. i would also love to see more people from under-represented groups join the field. we need more diversity going forward. whatâs your advice for rse hopefuls? try working on a piece of open-source software. if possible, do some training in a collaborative setting. if you have questions, talk to a working rse. consider joining an association. the uk society of research software engineering is always happy to advise people about getting into the field or how to stand out in a job application. people in the united states can reach out to the us research software engineer association.
none
if youâre a phd student or postdoc, give yourself a challenge: try to convince your supervisors or pi that they really need to embrace good software techniques. if you can change their minds, itâs a good indication that you have the passion and drive to succeed. what do you envision for the profession over the next 10 years? i want to see rses as equals in the academic environment. software runs through the entire research process, but professors tend to get most of the recognition and prestige. pieces of software can have just as much impact as certain research papers, some of them much more so. if rses can get the recognition and rewards that they deserve, then the career path will be that much more visible and attractive.
doi: https://doi.org/10.1038/d41586-022-01516-2
related articles
none
none
none
subjects
technology
software
careers
latest on:
technology
none
none
none
software
none
none
none
careers
none
none
none
none
research associate for software development in high performance computing (m/f/x)
technische universitã¤t dresden (tu dresden)
01069 dresden, germany
phd candidate in categorical probability theory
radboud university nijmegen
nijmegen, netherlands
postdoctoral researcher in computational neuroscience: effects of neuromodulation on balanced networks
radboud university nijmegen
nijmegen, netherlands
phd candidate in eco(toxico)logical modelling lab-field extrapolation (dc3)
radboud university nijmegen
nijmegen, netherlands
you have full access to this article via your institution.
none
none
related articles
none
none
none
subjects
technology
software
careers
none
sign up to nature briefing
an essential round-up of science news, opinion and analysis, delivered to your inbox every weekday.
email address
yes! sign me up to receive the daily nature briefing email. i agree my information will be processed in accordance with the nature and springer nature limited
privacy policy .
sign up
close banner
close
none
email address
sign up
i agree my information will be processed in accordance with the nature and springer nature limited
privacy policy .
close banner
close
get the most important science stories of the day, free in your inbox.
sign up for nature briefing
explore content
research articles
news
opinion
research analysis
careers
books & culture
podcasts
videos
current issue
browse issues
collections
subjects
follow us on facebook
follow us on twitter
none
none
none
about the journal
journal staff
about the editors
journal information
our publishing models
editorial values statement
journal metrics
awards
contact
editorial policies
history of nature
send a news tip
publish with us
for authors
for referees
language editing services
none
search
search articles by subject, keyword or author
show results from
all journals
search
advanced search
quick links
explore articles by subject
find a job
guide to authors
editorial policies
none
nature.com sitemap
about us
press releases
press office
contact us
none
none
none
discover content
journals a-z
articles by subject
nano
protocol exchange
nature index
publishing policies
nature portfolio policies
open access
author & researcher services
reprints & permissions
research data
language editing
scientific editing
nature masterclasses
nature research academies
research solutions
libraries & institutions
librarian service & tools
librarian portal
open research
recommend to library
advertising & partnerships
advertising
partnerships & services
media kits
branded content
career development
nature careers
none
none
regional websites
nature africa
nature china
nature india
nature italy
nature japan
nature korea
nature middle east
legal & privacy
privacy policy
use of cookies
manage cookies/do not sell my data
legal notice
accessibility statement
terms & conditions
california privacy statement
© 2022 springer nature limited


Link: https://www.spiceworks.com/tech/devops/articles/software-developer-vs-software-engineer/

software developer vs. software engineer: 10 key differences
none
news & insights
news & insights home
innovation
it careers & skills
cloud
cyber security
future of work
all categories
marketing
hr
finance
community
none
community home
spiceworks originals
cloud
collaboration
networking
water cooler
windows
all forums
how-tos
scripts
vendors
meetups
reviews
online events
none
none
none
none
devops
software developer vs. software engineer: top 10 differences
software developer vs. software engineer: top 10 differences
software developer vs. software engineer: top 10 differences
software developers differ from software engineers in 10 key ways, including their tools, salaries, and educational background.
none
chiradeep basumallick
technical writer
september 12, 2022
none
none
none
none
software developer and software engineer are the two most in-demand job roles today. however, the two jobs differ despite an overlap in skillsets and working conditions. this article explains the 10 ways in which software developers differ from software engineers. it also looks at four ways they are similar, which may contribute to a connected career path.â
table of contents
software developer vs. software engineer
10 key differences between software developers and software engineers
none software developer vs. software engineer
every age in history comes with its peculiarities. millions of people lose their jobs, yet new professions and subsequent job opportunities that were never in existence are created. this has been the story of humankind from the stone age through the industrial revolution and the computer age.â
none
none
who is a software developer?
a developer is a technical professional tasked with designing, creating, and launching computer programs which may be operating system software or application software. software developers are also involved in creating and developing games, business apps, cloud-based services, and enterprise apps for internal use, among other types of mobile and computer applications.â
software developers employ creativity to meet the clientâs and end usersâ needs and demands. a software developer can work as part of the companyâs permanent employees or as a freelancer for multiple clients.â
none
understanding client or user expectationsâ
developing and testing software to meet the desires of a specific client
maintenance and upgrading of the developed software
documentation for further referencing
working and communicating with other members of the team, like graphic designers, product managers, and business analysts
none
who is a software engineer?
a software engineer is a professional with some overlapping skills as a software developer, yet this professional has a distinct role to play in an organization. a software engineer is one who applies technological and scientific principles to the designing, implementation, testing, and documentation of the entire components of a software program.â
a software engineer goes beyond the role of the developer. although they know multiple programming languages, their strength lies in applying scientific and mathematical skills to systematically solving problems.
the engineer maps out the structure for developing a mobile application and the website, linking both to a server and ensuring seamless communication between all software parts. they do this by mapping out steps and delegating roles to the software developer while overseeing the entire system. a software engineer has the following functions and responsibilities:
design, develop and test software for a wide range of clients
work on existing software to improve the user experience, adapt it to new hardware or fix bugs
coordinate the system software for
blue-green or other types of deployment
and integrate it with the hardware components
oversee the function of the software developers and programmers
evaluate the needs of the user and fit them into the time frame and budget of the clientâ
oversee the completion of a project
none
none 10 key differences between software developers and software engineers
a software engineer can be regarded as a high-level software developer. this is the same way a software developer can be likened to an advanced computer programmer. this means that there exist differences and also similarities between these two job roles. let us first discuss the differences:
1. job role and description
a professional is guided by his job description. this outlines what his functions are and the expected results. in the same way, a software developer is one who makes use of their technical know-how to write and maintain software for a client. a software developer must be able to view the program they are writing from a holistic point of view. this makes software developers part of the entire life cycle of the program being written.â
on the other hand, a software engineer goes beyond creating software applications but applies engineering principles to develop a constellation of programs and manage the associated hardware. software engineers are also responsible for maintaining a good relationship between the various individuals associated with any software. software engineers do not just learn how to code but must also be skilled at algorithms, data structures, current best practices in web development, etc.
2. educational requirements
becoming a software developer or a software engineer requires you to have acquired a certain level of education and skills. educational requirements cover basic knowledge of computer science and go further depending on the profession the individual wants to specialize in.â
none
most software engineers also have a bachelorâs or masterâs degree in either computer science or software engineering. although it is possible to gain a similar level of knowledge from other educational sources and courses, it is likely not to meet the required standard a university college can give the software engineer.â
3. software building processâ
none
none
4. nature of activityâ
the nature of activity describes how software engineers and developers act and behave while carrying out their day-to-day activities. the expected job roles for a software developer are straightforward and can be done alone. therefore, software developers work primarily on their own. this does not eliminate the need for qualities like good communication skills and team spirit but reduces the influence of those skills on output.â
none
5. approach to work and problemsâ
members of an sdlc team approach their responsibilities differently. for software developers, their working style tends to be more artistic and creative. since they work on a limited scale, they can afford to think of various ways to approach a problem and come up with a solution.â
the software developer uses set down principles, past experiences in programming, and a creative mindset to create a unique set of codes for the software or part of the software they have been assigned to write while keeping in mind the desires and expectations of the client.â
the approach to work and problems for a software engineer are in sharp contrast. the software engineer usually has to solve problems on a large scale. as a result, there is little room for expressing creativity. instead, software engineers use engineering concepts, mathematical protocols, and scientific reasoning to study problems and create logical solutions.â
they delve directly into the heart of the assigned job, analyze it and produce results. this does not imply that software engineers work as robots to deliver identical solutions. it only means that they follow logical thinking patterns to create personalized solutions.
6. tools used in workingâ
every professional in all areas of life, from medicine to technology and the arts, must have a narrowed-down set of tools they frequently use. there would always be shared boundaries and overlap when using more universal tools, but specific tools are associated with each profession. the same applies to computer programming and software development.â
the software developer uses tools like rad studio, collaborator, linx, studio 3t, etc., to build and design programs. the software developer works with already created and readily available tools. they use these tools to build both mobile applications and desktop applications.
however, software engineers do not work with readily available tools. sometimes, the software engineer is responsible for creating the equipment used by other programmers to achieve the desired results. a software engineer creates tools that are used in turn by the software developers to build the software. some of these tools include visual studio and eclipse.â
7. skills and requirementsâ
a specific skill set is sought in either a software developer or an engineer. each must possess skills suited for the role they would play as part of an organization, agency or even as a freelancer to individual clients.â
none
a different skill set applies to the prospective software engineer. a software engineer must be acquainted with programming languages like python and java. they should have practical knowledge in computer science, pattern design, the cloud, advanced mathematics and logical reasoning, automated testing, etc.â
software engineers must have competencies to work with system hardware, servers, and multi-core central processors, among others. beyond this, soft skills like leadership, communication, managerial, and planning are essential. the software engineer will often have to present solutions to problems and must possess analytical skills to view problems and come up with solutions properly.â
none
8. career pathâ
none
none
9. salary structureâ
none
10. interaction with clientsâ
interacting with clients is vital to the software development life cycle. poor client interaction can lead to unacceptable or unsuitable results. the software, when launched, must conform to the needs of the client and the purpose of its creation. the software developerâs role is to discuss the details of a project with the client. they collaborate with the client on a smaller scale and ensure every feature is worked out to fulfill the clientâs vision.â
on the other hand, the software engineer also interacts with the client but with a different mindset. the interaction between the client and the software engineer is to get the overall idea for the project. just like an architect, this plan is used to map out strategies and smaller chunks of tasks making up the final project.â
none
similarities between a software developer and software engineerâ
now that we have discussed the differences let us consider the four ways software developers may be similar to software engineers.â
1. training and educationâ
although there are differences in the type of education and skillset a software engineer and software developer is expected to have, there are also large areas where their educational requirement and training overlaps.â
none
granted, a software engineer can study software engineering or a software developer to do the same. computer science courses still present themselves as a meeting point for both interests. any of these degrees should be able to give the individual the necessary software education. the skills acquired and the degree places a person at an advantage to become a highly paid professional. nevertheless, software engineers are expected to have a broader knowledge base than developers.â
apart from the formal university education, coding boot camps are also points of skill acquisition for prospective developers and engineers. they cost less in terms of time and money and some even offer recognized certifications. some individuals, developers and engineers alike, have done without a formal bachelorâs or masterâs degree but are well regarded as skilled software developers and engineers.â
2. the ability to codeâ
none
none
3. problem-solving skillsâ
none
4. similar working conditionsâ
none
none
takeawayâ
as our personal and professional lives become increasingly digitized, the reliance on software apps will grow. this means an uptick in demand for both software developers and engineers, with the latter bringing a more value-adding and problem-solving mindset to the table. they are both clear career paths for a technical professional with knowledge of programming languages, product development methodologies, and deployment strategies. one should aspire to start in a developer role and then progress towards software engineer and beyond.â
none
more on devops
what is devops? definition, goals, methodology, and best practices
what is devops lifecycle? definition, key components, and management best practices
what is devsecops? definition, pipeline, framework, and best practices for 2022
top 18 azure devops interview questions in 2022
what is an api (application programming interface)? meaning, working, types, protocols, and examples
devops
share this article:
none
none
none
none
chiradeep basumallick
technical writer
none
none
chiradeep is a content marketing professional, a startup incubator, and a tech journalism specialist. he has over 11 years of experience in mainline advertising, marketing communications, corporate communications, and content marketing. he has worked with a number of global majors and indian mncs, and currently manages his content marketing startup based out of kolkata, india. he writes extensively on areas such as it, bfsi, healthcare, manufacturing, hospitality, and financial analysis & stock markets. he studied literature, has a degree in public relations and is an independent contributor for several leading publications.
do you still have questions? head over to the spiceworks community to find answers.
none
popular articles
top 10 data analysis tools in 2022
top 5 reasons to migrate databases to the cloud
what is data mining? definition, techniques, and tools
recommended reads
none
devops
whatâs next for devops? four devops predictions for 2023
none
devops
microservices architectures and magic clouds: evolving cloud-native java virtual machines
none
artificial intelligence
why you should apply caution when using ai in code development
none
devops
five things low-code users need to know
none
devops
java vs. javascript: 4 key comparisons
none
devops
kanban vs. scrum: 10 key differences
none
toolbox is now
none
join the spiceworks community
go to mobile version


Link: https://www.rit.edu/computing/department-software-engineering

department of software engineering | golisano college of computing and information sciences | rit
skip to main content
rit logo with text
✕
request info
visit
apply
give
mobile main navigation
about
overview
leadership
accreditation
facilities
student resources
centers and institutes
diversity initiatives office
national council
none
none
academics
undergraduate degrees
graduate degrees and advanced certificates
ph.d. program
minors
immersions
departments and schools
academic advising
tutoring center
academic support
deanâs lecture series
none
experiential learning
admissions and aid
faculty
research
key research areas
research news
faculty scholarship
search people by areas of expertise
none
none
contact
myrit
news
directory
none
none
none
none
none
✕
future students
current students
parents
faculty and staff
alumni
partners
request info
visit
apply
give
future students
current students
parents
faculty and staff
alumni
partners
request info
visit
apply
give
none
none
news
directory
myrit
about
overview
leadership
accreditation
facilities
student resources
centers and institutes
diversity initiatives office
national council
none
none
academics
undergraduate degrees
graduate degrees and advanced certificates
ph.d. program
minors
immersions
departments and schools
academic advising
tutoring center
academic support
deanâs lecture series
none
experiential learning
admissions and aid
faculty
research
key research areas
research news
faculty scholarship
search people by areas of expertise
none
none
contact
none
none
department of software engineering
none
breadcrumb rit / golisano college of computing and information sciences / academics
none / departments and schools /department of software engineering
overview
research
faculty / staff
degree programs
current students
prospective & incoming students
latest news
alumni & industrial advisory board
facilities
department contact
se office manager: 585-475-4921
â
â
it supportâ
none
none
overview
the department of software engineeringâs mission is the development of professionals who can produce high-quality, cutting-edge, and cost-effective software systems. the department provides a forward-thinking approach in an inclusive environment that encourages students to become pioneers in the field by developing in-depth knowledge through hands-on design of innovative products. as real-world construction of complex software systems is done by engineering teams, our curriculum focuses on team-based activities with an emphasis on collaboration and the design process. students receive mentorship to become world-class engineers and to conduct world-class research by closely collaborating with both faculty and industry.
none
from classes to co-ops: experience se at rit
â
â â
design
collaboration
real-world software
process
none
approval rating for our academic advisors in student surveys
none
median starting salary for our graduates, with some graduates starting at more than $100k
none
in college research funding since 2017
none
research
none
software engineering research at rit's global cybersecurity institute
â â
none
none
none
faculty
none
none
none
none
none
staff
none
none
none
none
none
undergraduate programs
as software becomes ever more common in everything from airplanes to appliances, there is an increasing demand for professionals who can develop high-quality, cost-effective software systems. students learn principles and techniques for the construction of complex and evolving software systems as well as issues affecting software architecture, design, and implementation. additional topics include project management, planning, quality assurance, and product maintenance.
none
a software development degree that encompasses technical issues affecting software architecture, design, and implementation as well as process issues that address project management, planning, quality assurance, and product maintenance.
none
none
graduate programs
the master of science in software engineering or data science assures that graduates possess both breadth and depth of knowledge of their program's content. special topics courses and electives provide students with the opportunity to match their graduate education with their professional goals, from pursuing groundbreaking researchâ to developing game-changing products.
none
demand is high for professionals skilled in both analytics and computing. enhance your skill set by learning to manage large-scale data sets in this data science master's.
none
none
gain hands-on experience through team-based and individual projects in this master's in software engineering, all while you further your understanding of the development and implementation of modern software systems.
none
none
minors and immersions
none
students in disciplines with a heavy reliance on software applications may be interested in pursuing a minor in software engineering. the minor provides a broad view of the software engineering landscape including introductory material and fundamentals in design and process. students deepen their software design skills and learn techniques for working on a productive software engineering team by choosing electives in design or process to gain a deeper understanding of one of these areas, or they may choose to balance their courses for a broad view of both topics.
none
none
current students
none
none
none
none
none
none
none
none
none
none
none
prospective & incoming students
none
none
none
none
none
none
none
top 10 reasons to choose software engineering at rit:
none
none
learn more about co-op & careers at rit
none
learn more about sse
none
none
none
recruiters from companies like microsoft and united technologies aerospace systems visit us frequently. they hold info sessions targeted at se students and members of sse, collect resumes and schedule interviews on the spot!
none
none
none
none
"it's easy to make appointments, it's easy to get answers to questions via email (and prompt!), and the staff in the office is very knowledgeable." -current se student
learn more about our academic advising services
none
learn more about our facilities
none
none
learn more from the us dept of labor statistics
none
learn more about our bs/ms programs
none
none
none
none
latest news
november 2, 2022
none
none
november 2, 2022
none
none
october 22, 2022
none
none
none
none
alumni & industrial advisory board
are you an se alum that wants toâ stay involved? here's how:
join us onâ  facebook â andâ  linkedin .
sponsor aâ  senior project .
recruit throughâ  society of software engineers â -â  email the se department â for more information.
attend alumni events. watch theâ  ritâ alumni page â for details.
keep in touch and let us know what you are up to!
view the department directory â for contact information. you can also take a look at what
research projects
faculty are involved in!
none
none
facilities
the department provides a variety of facilities where students collaborate on projects, polish their skills, and consult with faculty. outfitted with the latest hardware and software technology, our facilities reflect our commitment to teamwork, interactive learning, and professional education.
the departmentâs facilities include three student instructional studio labs, a specialized embedded systems lab, and a collaboration lab. in addition, freshmen are encouraged to take advantage of the departmentâs mentoring lab. staffed by advanced software engineering students, this lab offers new students an environment where they can learn from those who have successfully fulfilled most of the major's academic requirements.
students enrolled in software engineering courses also can use any of the departmentâs eleven team rooms. equipped with a computer and projector, network connections, a meeting table, seating for six, and generous whiteboard space, these rooms support the departmentâs commitment to teamwork, both inside and outside the classroom.
none
none
none
none
none
address and phone
none
site social media
none
none
none
sign up for our newsletter
footer main navigation
about
overview
leadership
accreditation
facilities
student resources
centers and institutes
diversity initiatives office
national council
key facts
news
academics
undergraduate degrees
graduate degrees and advanced certificates
ph.d. program
minors
immersions
departments and schools
academic advising
tutoring center
academic support
deanâs lecture series
visit campus
experiential learning
admissions and aid
faculty
research
key research areas
research news
faculty scholarship
search people by areas of expertise
computing and information sciences ph.d.
esl global cybersecurity institute
contact
none
address and phone
none
none
none
none
none
none
none
sign up for rit news
website feedback
about
academics
experiential learning
admissions and aid
research
rit life
athletics
news
none
search rit
close  x


Link: https://blog.pragmaticengineer.com/what-silicon-valley-gets-right-on-software-engineers/

what silicon valley "gets" about software engineers that traditional companies do not - the pragmatic engineer
menu
none
home
newsletter
my books
jobs board
talent collective
reading list
popular articles
ethics statement
sponsoring
investing
now
send me scoop
about
the tech resume book
mobile apps at scale book
rss feed
twitter
youtube
linkedin
interview preparation
templates
stats
subscribe
home
newsletter
my books
jobs board
talent collective
reading list
popular articles
ethics statement
sponsoring
investing
now
send me scoop
about
the tech resume book
mobile apps at scale book
rss feed
twitter
youtube
linkedin
interview preparation
templates
stats
none
menu
what silicon valley "gets" about software engineers that traditional companies do not
i've worked at various tech companies: from "traditional" shops and consultancies, through an investment bank, to high-growth tech firms. i've also talked with software engineers working at startups, banking, automotive, big tech, and more "traditional" companies. this mix had a healthy sample of silicon-valley companies and ones headquartered outside this region.
none
none
here are the key things these companies "get" better than many others. 1. autonomy for software engineers in "traditional" companies, developers get work items assigned to them - most often jira tickets. these tickets are vetted by the product - or project - manager, and they have most key details to do the work. and they're expected to do just that. there's little need for questions unless it's about clarifying a detail in the ticket.
none
engineers taking initiative is something "sv-like" companies celebrate. it's common to see services and features built that engineers suggested or have teams spend dedicated time paying off tech debt that people on the team advocated for. and it is uncommon for managers to tell engineers what exactly to do, to break down their work into small chunks or to micromanage them. people self manage.
none
at traditional companies, the notion of devs do what they are told often ends up with a hierarchical setup. i've talked with people at a bank that had six levels of project management. developers were at the bottom two. decisions were allowed to be done from level three. basically, those doing the work did not have a say - by design. need i add that this bank was struggling with how their software department was (not) working? a hierarchical view of the world. some traditional companies still work like this. compare this with places where engineers are recognized to have the ability to solve problems on the ground better than anyone else. leaders know that it's in the best interest of the business to share all relevant business context with them, and give space for execution. passing context down and giving autonomy to make decisions is how efficient organizations pull ahead.2. curious problem solvers, not mindless resources traditional companies tend to think of an engineer's time of 8 hours to spend on coding. any time that is not in front of a computer, and doing coding, is often thought of as waste. and they justify this with the high cost. i've heard someone describe the reasoning like this: software engineers get paid more than many other functions. we need to utilize them accordingly. we can't have them run empty. "sv-like" companies think of software engineers as the people best suited to solve the problems that the organization has. they hire not only for technical skills but communication and problem-solving ability. their thinking is a bit more like this: software engineers are among the highest-paid people in our company. this is because they can bring some of the highest leverage through coding and problem solving. we want to expose them to the business, so while they are doing their "normal" work, they can also find more impactful opportunities for the business. none "i did a bit of digging, and though we could do x, if we can reduce the scope by this feature that won't make a difference for the business impact, we could ship this without any code changes, just changing a few config files.""i am concerned if we could ship the project, and think we should put a pause on it. i checked what our competitors are doing, and one of them launched a similar feature, but reversed it, after they got investigated by the regulator. have we checked with the legal team if we could ship this at all?""i looked at our backlog, and project y is really similar. if we combined project x and project y, we could ship two things, with very little overhead.""we could either build this project on the legacy infrastructure now, but then we have migrate to the new infra that will be complete in a month. can we delay the project by a month, until the new infra is ready, to avoid double work? if there's no strong business reason to launch in a month, i'd really suggest we do this" in an environment that encourages problem solving and results over following directions, better decisions are made. 3. internal data, code, and documentation transparency transparency is big at sv companies. though there are exceptions - apple or palantir supposedly taking great care to give as little information to engineers as needed - i've observed most "sv-like" companies sharing as much as they can. they do this in a way that is in line with gdpr, pii, and other regulations that apply to them.
none
none 4. exposure to the business and to business metrics at sv companies, it's expected that each team member understands what part of the business their work impacts and how. the team goals are rarely just to ship a feature: it's to decrease customer churn by 2% by launching feature1, or to increase revenue by a predicted $10m/year by shipping projectx.
none
none
when an engineer at a traditional company builds relationships outside their team, they'll often get told they are "not focusing enough", "wasting time" or doing things that is "not their business". this kind of "unusual" activity would often be recorded as a negative in their performance review.
none 5. engineer-to-engineer comms over triangle-communication when you're an engineer and have a question about how another team does something, you go about it differently at traditional, and at "sv-like" companies.
none communicating in a "traditional" / hierarchical organization "sv-like" companies encourage engineer-to-engineer communication, cutting out middlemen. this is faster in all cases. and in cases where the engineer on the other team cannot help, this process can fall back to the "traditional" model of the manager helping out facilitating the discussion: communicating done (far more) efficiently6. investing in a less frustrating developer experience developing in 2020 can be frustrating. not because of writing code - that's the easy part! - but the surrounding things. setting up dependencies. deploying to production or test environments. ci/cd. monitoring and alerting. these are not that big of a deal while you're on a team of a few people. still, they'll come up every now and then.
none
frameworks and tooling change quickly, and the tooling rarely keeps up. companies that care about engineers focusing on solving problems quickly set up various infra, platform and sre teams, who reduce the developer experience churn.
while it might sound counter-intuitive to hire software engineers who only focus on other software engineers working faster: at many places, it's not. it's a great return that helps these companies move faster, and developers stay happier.
none 7. higher leverage --> higher {autonomy, pay} any sv-like company who wants to compete in pay for engineers needs to create high leverage where the value brought in by these engineers exceed their salaries. this leverage can come both at scale, and at growing the business. reducing time wasted on things like unnecessary comms, and tooling all add to this leverage. giving enough autonomy for engineers to (over) contribute to the business is how you can keep this leverage high.
none higher autonomy --> higher leverage --> higher value created --> higher pay (all while the company still makes a profit) none
had any of the people mentioned above worked at a "traditional" environment, their ideas would have stayed exactly that: ideas. "sv-like" startups incentivize engineers to come forward with business ideas, and implement them, while they are at it. everyone is better off for it: the people with the idea and the business.
none tech is a profit center, â not a cost center another way of looking at the differences between how "sv-like" companies operate is how they treat tech as a profit center, not a cost center. looking at 12 most valuable companies in the world as of july 2022, there are trends that are visible: the worldâs 12 most valuable companies as of july 2022, and whether software engineering is a profit center. correlation or causation? i investigated
in this article . none the biggest overall difference none
this divide in thinking is what leads to forward-thinking companies being able to both pay engineers better, while giving them more autonomy. a factory worker has a very well-defined added value, that you can plan for. a creative problem solver, on the other hand, can bring in 10x that value, when utilized properly. it makes sense to pay them more, give them more freedom, and as this is how you enable them to contribute more value business value.
once you've worked in a sv-like environment, you also struggle to go back to the "traditional" workplace, where everyone has their well-defined role, and eyebrows are raised when you step out of it.
as a software engineer, pleasant places to work at is where you are a problem solver, not a factory worker. which one are you today?
none
none
none
featured pragmatic engineer jobs
founding engineer
at renterra. $140-180k + equity. remote (global).
senior lead software engineer - kubernetes
at akamai technologies. remote (us).
software engineer
at devzero. $150-175k. seattle, washington.
senior backend developer
at founda health. amsterdam, netherlands.
senior backend engineer
at vital. $70-140k + equity. remote.
principal backend enginee
at pento. â£120-135k. remote.
founding senior fullstack engineer (javascript)
at playht. $150-200k + equity. san francisco or remote.
staff software engineer
at qualified.com. san francisco or remote.
infrastructure team lead
at ometria. â£90-150k. united kingdom or portugal.
full stack engineer, video & messaging
at betterup. remote (us).
staff full stack engineer
at betterup. remote (us).
none
none
none
newsletter
none
none
newsletter
none
none
gergely orosz
last updated 12 september 2022. first published in 2020.
writing the pragmatic engineer newsletter and advisor at mobile.dev. previously at uber, microsoft, skype, skyscanner.
amsterdam, netherlands
share this post
none
none
by gergely orosz
menu
none
home
newsletter
my books
jobs board
talent collective
reading list
popular articles
ethics statement
sponsoring
investing
now
send me scoop
about
the tech resume book
mobile apps at scale book
rss feed
twitter
youtube
linkedin
interview preparation
templates
stats
subscribe
home
newsletter
my books
jobs board
talent collective
reading list
popular articles
ethics statement
sponsoring
investing
now
send me scoop
about
the tech resume book
mobile apps at scale book
rss feed
twitter
youtube
linkedin
interview preparation
templates
stats
subscribe via email
subscribe in a reader
the pragmatic engineer
© 2020
published using
ghost
none
none


Link: https://www.onlineengineeringprograms.com/features/benevolent-software-engineering-careers

software engineering for good: benevolent careers for engineers
none
specializations
architecture
biomedical engineering
chemical engineering
civil engineering
environmental engineering
water systems engineering
computer engineering
computer science
cybersecurity
data science
software engineering
ux design
electrical engineering
electrical and computer engineering (ece)
nanoengineering
power systems engineering
engineering management
construction management
engineering mba
operations management
project management
engineering technology
geographic info systems
industrial engineering
information technology
materials engineering
mathematics
financial engineering
mechanical engineering
nuclear engineering
quality engineering
systems engineering
healthcare systems
degree types
short courses
bachelor’s degrees
bachelor of engineering
bachelor of science (bs)
master’s degrees
master of engineering
master of science (ms)
graduate certificates
features
faq
online engineering programs
>
features
> software engineering for good: benevolent careers for engineers
software careers in service to society: a guide for engineers who want to improve the world
find schools
select your current degree
in high school / some hs
hs diploma
some college
associate
bachelor's
master's
current degree is required
select a specialization
biomedical engineering
civil engineering
computer engineering
computer science
cybersecurity
data science
electrical engineering
engineering management
engineering technology
environmental engineering
industrial engineering
mechanical engineering
software engineering
systems engineering
specialization is required
select your state
- outside of u.s.
alabama
alaska
arizona
arkansas
california
colorado
connecticut
delaware
district of columbia
florida
georgia
hawaii
idaho
illinois
indiana
iowa
kansas
kentucky
louisiana
maine
maryland
massachusetts
michigan
minnesota
mississippi
missouri
montana
nebraska
nevada
new hampshire
new jersey
new mexico
new york
north carolina
north dakota
ohio
oklahoma
oregon
pennsylvania
puerto rico
rhode island
south carolina
south dakota
tennessee
texas
utah
vermont
virginia
washington
west virginia
wisconsin
wyoming
state is required
*sponsored
finding meaning in oneâs work is a challenge for many people, even in lucrative careers such as software engineering. the worldâs leading tech companies offer perks such as free organic cafeterias, climbing walls, and in-house masseuses, but the luster fades quickly as programmers and developers become habituated to their working environments. for tech workers with optimistic designs on the world, connecting oneâs daily tasks to philanthropic ends can be a struggle.
none
none
this guide opens with three exclusive interviews with experts in the field: an aerospace engineer (formerly at nasa) and self-taught programmer, a postdoctoral researcher in stanford universityâs virtual human interaction lab, and a world-renowned professor of big data from northeastern university. finally, this guide examines four pathways to create technology in service to society. read on to discover the humanitarian applications of artificial intelligence, virtual reality, big data, and robotics.
three interviews on the future of benevolent engineering careers
for software engineersâboth students and working professionalsâit can be challenging to determine which technologies will exact positive change in society. these three industry leaders and programming experts graciously agreed to an oep interview. they share their unique experiences, discuss the future of benevolent tech careers, and offer advice to aspiring engineers who want to improve the world.
none
â[genuinely intelligent software] would certainly force a complete rethinking of our notions of work, productivity, and economics, not to mention personhood. it's hard to even imagine what this world looks like; i like to compare it to an 18th century observer describing the post-industrial revolution economy.â
none
what do you think will be the most important careers in the future of software engineering?
none
what are the trends in cs, ai, and robotics which excite you most?
technically i'm most impressed by the advances in computer vision, neural networks, and the general paradigm shift toward more concurrent, parallelized, and distributed processing of the last decade. but in a bigger sense, i think i'm most impressed and inspired by the progress of the open source community, of which i was not originally a big believer. the projects that can get off the ground today in a week of tinkering with a raspberry pi and a handful of open-source python libraries are amazing. this is incredibly enabling for small startups and academia, who in prior generations faced much steeper barriers to entry.
who are your greatest role models?
my role models tend to boil down into two categories: âbig thinkersâ and âstop whining and get shit done-ers.â i've always admired the relentlessness of wernher von braun, the original âjust do it, if it blows up... then we'll learn something tooâ badass. the astronomer carl sagan is to whom i've looked for big-picture inspiration. i have a lot of mixed feelings about elon musk, but i'm incredibly proud of what he's doing to advance the human cause in space. i had a professional mentor once who was a great combination of engineering brilliance, fearlessness bordering on reckless, with a kind heart and an allergy to micromanaging me. he, my father, and grandfather are whom i try most to model myself after. and tony stark, obviously.
what advice would you give to software engineering students who want to improve the world?
cliche: on your free time, get involved. the internet makes it so easy these days. whatever it is that interests you, i guarantee there are a half-dozen open-sourced projects on github looking for source code contributors. you might even brush shoulders with some movers and shakers in that field, or be offered a job. there are also meetups (hackathons) in most metropolitan areas for engineers who want to donate their time to good causes. these can be a lot of fun. if you're talking professionally, the most important thing in my mind is to find the right group of people pursuing something you're passionate about. and what i mean by this is the group of people most likely to move the ball forward for this cause. it's not necessarily the guy with the best ted talk or the most inspiring mission statement. or the most funding. it's the group of people who have the goal you believe in, and more importantly the means to accomplish it. the right people, with the right attitude, properly connected. this all sounds overly businesslike for âimproving the world,â i know, but to me there's a big difference between feeling like you're making a difference, and actually making a difference. most importantly, put your ego aside and do whatever these teams need of you. maybe you see yourself as more of a data scientist, but a great team needs someone to help with their database interaction. do it. find a way to help. pathways and opportunities present themselves to people who demonstrate an ability to get after whatever needs getting after.
dr. bireswar laha, postdoctoral scholar at stanford universityâs virtual human interaction lab
âthe qualities in people that inspire me, which include scientific curiosity and a focus on knowledge for career success, but at the same time humility, kindness and patience...become more and more important as one becomes successful in life. progressânot perfectionâis important.â
dr. laha has conducted research at several prestigious institutions, including ibmâs watson research center and nasaâs center of higher learning. after receiving his phd from virginia tech, dr. laha joined the department of computer science at stony brook university as a postdoctoral associate. now at stanford university, dr. lahaâs research focuses on the applications of virtual reality to research in neuroscience, embodied cognition, environmental conservation, and encouraging prosocial behavior. heâs one of the leading global researchers in the philanthropic applications of virtual reality.
what do you think will be the most important careers in the future of software engineering?
importance will vary from person to person. if money is important, then picking up coding or programming skills and improving logical reasoning are the key. software engineering is booming and big and small companies in many businesses are looking to hire the best programmers right out of college. on the other hand, if knowledge is the focus, then a ms and phd is the way to go. again, software engineering is a highly sought-after skillset which is valued in many disciplinesâpick the one you like and go for it.
what are the trends in cs and vr which excite you most?
none
who are your greatest role models?
at different points and levels of my life, i was inspired by many different people as role models. so to pick a few will be disregarding the rest. even the names i would choose right now will surely change in a few years from now. i think a more consistent thing for me has been the qualities in people that inspire me, which include scientific curiosity and a focus on knowledge for career success. and at the same time, humility, kindness, and patience to become a well-rounded person in life who cares for others...progressânot perfectionâis important.
what advice would you give to cs students who want to improve the world?
choose what is important in your life, and keep clear of all dogma and biases in your choosing. almost all of us love to make a difference by contributing directly to society...others may be driven more by their passion for science and go for higher learning. but to keep inspiring yourself as you acquire skills, and gradually converge on the important qualities that will define you as a person. it may not be the initial path that you choose...but stay focused until you know when and how to change it for better.
none
âthe opportunities for scientific discovery from innovative, advanced data analysis makes it uniquely attractive for those who want to add value to society. the potential is endless!â
none
what do you think will be the most important careers in the future of software engineering?
modern internet applications can be described as hyperscale systems. hyperscale means the systems must grow their capacity exponentially while keeping their costs growing linearly. this requires software engineers to be constantly aware of the associated costs of their solutions, as at massive scale, small efficiency gains can translate to very large cost reductions. so now more than ever before, engineers need to carefully understand the time and space complexity of their algorithms, and utilize effective techniques to optimize their solutions. importantly though, the majority of applications build upon foundations provided by robust open source and commercial platforms for storing data, communications, security, and many other functions. this requires engineers to diligently comprehend and assess the appropriateness of the platform-level technologies they select. in an engineering world with so many competing technologies and products, this is a major challenge and a skill that differentiates high quality engineers from their peers.
what are the trends in cs and big data which excite you most?
big data has driven a seismic shift in database technologies. a decade ago, relational databases ruled the application world. now, there's literally several hundred so-called nosql and newsql database technologies that provide a rich palette for building highly scalable, distributed, cloud-based systems. like any exploding segment, at first we saw great diversity in the approaches that each database made available for storing and analyzing data. now, after several years of experience, vendors are striving to innovate on techniques that make building applications against these databases easier, while still maintaining their ability to scale. i suspect in 10 years time we'll be building applications in a small number of sql-like languages. this will ease the burden of engineering with such databases, helping us to scale our systems faster and more cost-effectively, a necessary ingredient for hyperscalability.
who are your greatest role models?
my heroes have always been people who manage to carefully traverse the fine line between industry and academia. both worlds are demanding on their own, but gaining credibility in both takes extra hard work. my old friend len bass, formerly of the cmu software engineering institute and nicta, fits this bill perfectly, with work that has been widely influential. similarly, professor philippe kruchten from the university of british columbia, who has been massively influential in his work in software architecture and the development of uml.
what advice would you give to cs students who want to improve the world?
work in science. the opportunities for scientific discovery from innovative, advanced data analysis makes it uniquely attractive for those who want to add value to society. the potential is endless!
four benevolent sectors of software engineering
âthere's a big difference between feeling like you're making a difference, and actually making a difference. most importantly, put your ego aside and do whatever these teams need of you. maybe you see yourself as more of a data scientist, but a great team needs someone to help with their database interaction. do it. find a way to help. pathways and opportunities present themselves to people who demonstrate an ability to get after whatever needs getting after.â
-chris sullivan, dronedeploy aerospace engineer & programmer
for students and professionals in software engineering interested in technology in service to society, here is a detailed discussion of four cutting-edge sectors to consider with the power to change the world. please note that these sectors are not mutually exclusive and share some fundamental principles. for example, deep learning refers to computers teaching themselves, the ability to auto-program based on the input of large quantities of data. this process simulates an elementary neuron network of the brain and allows the machine to pick up on patterns. notably, itâs used across all four sectors of software engineering profiled below: artificial intelligence, robotics, virtual reality, and big data.
1. artificial intelligence
âto me, the march towards âgeneral aiâ will be the most important pursuit of computer science and software engineering of the 21st century.â
-chris sullivan, dronedeploy aerospace engineer & programmer
none
none
none
education & skills to work in ai
while education and skills vary by position, here is a rough breakdown of some of the most sought-after qualifications to secure a position in ai and machine-learning:
education:
bachelorâs (masterâs preferred) degree in software engineering, electrical engineering, computer science, mathematics, or another relevant field
knowledge & skills:
working understanding of concepts such as machine learning, deep belief networks (dbns), deep neural networks (dnns), natural language processing, computational cognitive science, probabilistic reasoning, automated systems, data mining, and knowledge representation
facility with programming languages (e.g., python, java, node, perl, c/c++, scala) and various toolkits (e.g., tensorflow, caffe, theano, etc.)
closely related to the field of artificial intelligence is robotics, which is also changing the world for the better.
2. robotics
none
none
education & skills to work in robotics
none
education:
at least a bachelorâs degree in robotics, mechanical engineering, computer science, or a related field
knowledge & skills:
knowledge of concepts such as bayesian logic, probability theory, algorithms, computer vision, embedded systems & firmware, light detection and ranging (lidar) technologies, pattern recognition, programmable logic controller (plc) software, human machine interface (hmi) software, communication data protocols (e.g., tcp, ip), version control systems (subversion and mercurial), and/or pid controls
facility with python, c/c++, c#, javascript, .net, linux, robot operating system (ros), simultaneous localization and mapping (slam), gazebo, opencv, and/or others
3. virtual reality
âi think cs, driven by the wave of vr, is becoming increasingly interdisciplinary. itâs now hard, or almost impossible to limit any cs project just to csâcollaborations between cs people and researchers and scientists from medicine, natural sciences and humanities are now very common.â
-dr. bireswar laha, postdoctoral scholar at stanford university
none
education & skills to work in vr
none
education:
at least a bachelorâs degree in software engineering, computer science, vr, or a related field
knowledge & skills:
knowledge of interactive modeling software, telemetry, graphics programming & rendering, vr systems (vive, oculus, psvr), matlab
facility with c/c++, c#, unity, unreal, javascript, robot operating system (ros), opengl, opencv, directx, autodesk, maya, adobe creative cloud, audacity, and/or final cut pro
none
what are the social implications of using vr communication?
how can researchers leverage vr as a tool to study human interaction?
how can the developments in vr improve peopleâs lives in realms such as environmental conservation, empathy, and methods of communication?
4. big data
âthe majority of applications build upon foundations provided by robust open source and commercial platforms for storing data, communications, security, and many other functions. this requires engineers to diligently comprehend and assess the appropriateness of the platform-level technologies they select. in an engineering world with so many competing technologies and products, this is a major challenge and a skill that differentiates high quality engineers from their peers.â
-dr. ian gorton, northeastern university
none
education & skills to work in big data
similar to other sectors of software engineering, some big data professionals may substitute experience architecting data systems or contributing to open-sourced projects in lieu of having an advacned degree. here are some of the typical requirements to work in big data:
education:
at least a bachelorâs degree (masterâs preferred) in software engineering, computer science, data science, or a related field
knowledge & skills:
knowledge of data mining, building stream-processing systems & algorithms, nosql database technologies, etl databases & workflows, lambda architecture, object-oriented design, statistical modeling
facility with hadoop-based technologies (e.g., mapreduce, mongodb, cassandra, hbase), data-querying tools (e.g., pig, impala, hive, teradata, oracle), messaging systems (e.g., kafka, rabbitmq), programming languages (e.g., python, c++, linux, java, ruby), big data machine-learning tools (e.g., mahout, h2o), and other tools such as storm, spark, sqoop, flume, cloudera and hortonworks
none
mcse: business intelligence
ccdp:ds: cloudera certified professional: data scientist
emcds: emc data science associate
oracle business intelligence certification
sas business intelligence certifications
conclusion: promoting technology in service to society
for software engineers who want to do right by the world, there is a wealth of benevolent projects available tapping the tools of artificial intelligence, robotics, virtual reality, and big data.
none
separating healthcare insurance, pensions, and disability benefits from employment
establishing a guaranteed minimum income
rewarding volunteerism
reworking public education to better prepare students for the ascendancy of stem fields
promoting arts and culture for leisure time, ensuring that working less translates into mind-expanding pursuits
these are a few possible policy solutions to combat the growing pains of adopting evermore sophisticated technologies into our daily lives. as the developments in ai, robotics, vr, and big data continue to restructure our existence in unalterable ways, we need to examine how to best use technology for philanthropy. above all, software engineers enjoy the privilege and responsibility to design systems which benefit people, and they may find their own lives richer and more meaningful as a result of exacting positive change in the world.
none
jocelyn blore - chief content strategist
none
related programs
computer engineering
computer science
cybersecurity
information technology
software engineering
related faqs
1. are there any no gmat / no gre online computer science programs?
2. computer science vs. computer engineering
3. computer science vs. data science
4. computer science vs. software engineering
5. how do i become a computer engineer?
related features
automotive cybersecurity: connected & self-driving vehicles
this guide, intended for students and working professionals interested in entering the nascent field of automotive cybersecurity, describes some of the challenges involved in securing web-enabled vehicles, and features a growing number of university programs, companies, and people who are rising to meet those challenges.
women in cybersecurity: challenges, opportunities, and the future of the field
by 2020, there will be a need for 1.5 million new employees in the global information security workforce, and experts in the field are expressing concern that new entrants will fall short of this quota.
artificial intelligence systems & specializations: an interview with microsoftâs sha viswanathan
the ability of a computer to learn and problem solve (i.e., machine learning) is what makes ai different from any other major technological advances weâve seen in the last century. more than simply assisting people with tasks, ai allows the technology to take the reins and improve processes without any help from humans.
careers in digital marketing: big data & social analytics
the field of digital marketing intersects with many other tech industries and grew out of traditional theories of advertising, marketing, and sales. just like traditional marketing, the goal is to reach your target customer base, build brand awareness, and make a meaningful, data-generating connection.
tech 2020: what's next in software engineering
the personal computer, the laptop, and the smartphone are all just chunks of raw material until theyâre enlivened by software engineering. the modern world canât run without it, and the future depends on it. so whatâs next?
home
about us
privacy
contact us
facebook
twitter
â© copyright
2015-2022 sechel ventures


Link: https://www.simplethread.com/20-things-ive-learned-in-my-20-years-as-a-software-engineer/

20 things i've learned in my 20 years as a software engineer - simple thread
skip to content
none
simple thread
primary menu
close
work
process
services
our story
blog
contact us
none 20 things i’ve learned in my 20 years as a software engineer
none
justin etheredge
/
@justinetheredge
/ october 7, 2021october 14, 2021 none
worried youâll miss us?
subscribe to get our articles and updates in your inbox.
email address
important, read this first none
âyou just need to charge more!â says the company who has been in business for 20 years and spent years charging âtoo littleâ to gain customers and become successful.
âyou need to build everything as microservices!â says the company who built a quick monolith, gained thousands of customers, and then pivoted into microservices as they started running into scaling issues.
without understanding the context, the advice is meaningless, or even worse, harmful. if those folks had followed their own advice early on, they themselves would likely have suffered from it. it is hard to escape this trap. we may be the culmination of our experiences, but we view them through the lens of the present.
so to give you a little context on where my advice comes from, i spent the first half of my career as a software engineer working for various small businesses and startups, then i went into consulting and worked in a number of really large businesses. then i started simple thread and we grew from a team of 2 to a team of 25. 10 years ago we worked with mostly small/medium businesses, and now we work with a mix of big and small businesses.
my advice is from someone whoâ¦ has almost always been on small, lean teams where we have to do a lot with very little.values working software over specific tools.is starting new projects all the time, but also has to maintain a number of systems.values engineer productivity over most other considerations my experiences over the last 20 years have shaped how i view software, and have led me to some beliefs which iâve tried to whittle down to a manageable list that i hope you find valuable. on with the list1. i still donât know very much âhow can you not know what bgp is?â âyouâve never heard of rust?â most of us have heard these kinds of statements, probably too often. the reason many of us love software is because we are lifelong learners, and in software no matter which direction you look, there are wide vistas of knowledge going off in every direction and expanding by the day. this means that you can spend decades in your career, and still have a huge knowledge gap compared to someone who has also spent decades in a seemingly similar role. the sooner you realize this, the sooner you can start to shed your imposter syndrome and instead delight in learning from and teaching others. 2. the hardest part of software is building the right thing i know this is cliche at this point, but the reason most software engineers donât believe it is because they think it devalues their work. personally i think that is nonsense. instead it highlights the complexity and irrationality of the environments in which we have to work, which compounds our challenges. you can design the most technically impressive thing in the world, and then have nobody want to use it. happens all the time. designing software is mostly a listening activity, and we often have to be part software engineer, part psychic, and part anthropologist. investing in this design process, whether through dedicated ux team members or by simply educating yourself, will deliver enormous dividends. because how do you really calculate the cost of building the wrong software? it amounts to a lot more than just lost engineering time. 3. the best software engineers think like designers great software engineers think deeply about the user experience of their code. they might not think about it in those terms, but whether it is an external api, programmatic api, user interface, protocol, or any other interface; great engineers consider who will be using it, why it will be used, how it will be used, and what is important to those users. keeping the userâs needs in mind is really the heart of good user experience. 4. the best code is no code, or code you donât have to maintain all i have to say is âcoders gonna code.â you ask someone in any profession how to solve a problem, and they are going to err on the side of what they are good at. it is just human nature. most software engineers are always going to err on the side of writing code, especially when a non-technical solution isnât obvious. the same goes for code you donât have to maintain. engineering teams are apt to want to reinvent the wheel, when lots of wheels already exist. this is a balancing act, there are lots of reasons to grow your own, but beware of toxic ânot invented hereâ syndrome. 5. software is a means to an end the primary job of any software engineer is delivering value. very few software developers understand this, even fewer internalize it. truly internalizing this leads to a different way of solving problems, and a different way of viewing your tools. if you really believe that software is subservient to the outcome, youâll be ready to really find âthe right tool for the jobâ which might not be software at all. 6. sometimes you have to stop sharpening the saw, and just start cutting shit some people tend to jump into problems and just start writing code. other people tend to want to research and research and get caught in analysis paralysis. in those cases, set a deadline for yourself and just start exploring solutions. youâll quickly learn more as you start solving the problem, and that will lead you to iterate into a better solution. 7. if you donât have a good grasp of the universe of whatâs possible, you canât design a good system this is something i struggle with a lot as my responsibilities take me further and further from the day to day of software engineering. keeping up with the developer ecosystem is a huge amount of work, but it is critical to understand what is possible. if you donât understand what is possible and what is available in a given ecosystem then youâll find it impossible to design a reasonable solution to all but the most simple of problems. to summarize, be wary of people designing systems who havenât written any code in a long time. 8. every system eventually sucks, get over it bjarne stroustrup has a quote that goes âthere are only two kinds of languages: the ones people complain about and the ones nobody usesâ. this can be extended to large systems as well. there is no ârightâ architecture, youâll never pay down all of your technical debt, youâll never design the perfect interface, your tests will always be too slow. this isnât an excuse to never make things better, but instead a way to give you perspective. worry less about elegance and perfection; instead strive for continuous improvement and creating a livable system that your team enjoys working in and sustainably delivers value. 9. nobody asks âwhyâ enough take any opportunity to question assumptions and approaches that are âthe way things have always been doneâ. have a new team member coming on board? pay attention to where they get confused and what questions they ask. have a new feature request that doesn’t make sense? make sure you understand the goal and what is driving the desire for this functionality.â if you donât get a clear answer, keep asking why until you understand. 10. we should be far more focused on avoiding 0.1x programmers than finding 10x programmers none 11. one of the biggest differences between a senior engineer and a junior engineer is that theyâve formed opinions about the way things should be nothing worries me more than a senior engineer that has no opinion of their tools or how to approach building software. iâd rather someone give me opinions that i violently disagree with than for them to have no opinions at all. if you are using your tools, and you donât love or hate them in a myriad of ways, you need to experience more. you need to explore other languages, libraries, and paradigms. there are few ways of leveling up your skills faster than actively seeking out how others accomplish tasks with different tools and techniques than you do. 12. people donât really want innovation people talk about innovation a whole lot, but what they are usually looking for is cheap wins and novelty. if you truly innovate, and change the way that people have to do things, expect mostly negative feedback. if you believe in what youâre doing, and know it will really improve things, then brace yourself for a long battle. 13. your data is the most important part of your system iâve seen a lot of systems where hope was the primary mechanism of data integrity. in systems like this, anything that happens off the golden path creates partial or dirty data. dealing with this data in the future can become a nightmare. just remember, your data will likely long outlive your codebase. spend energy keeping it orderly and clean, itâll pay off well in the long run. 14. look for technological sharks none 15. donât mistake humility for ignorance there are a lot of software engineers out there who wonât express opinions unless asked. never assume that just because someone isnât throwing their opinions in your face that they donât have anything to add. sometimes the noisiest people are the ones we want to listen to the least. talk to the people around you, seek their feedback and advice. youâll be glad you did. 16. software engineers should write regularly software engineers should regularly blog, journal, write documentation and in general do anything that requires them to keep their written communication skills sharp. writing helps you think about your problems, and helps you communicate those more effectively with your team and your future self. good written communication is one of the most important skills for any software engineer to master. 17. keep your processes as lean as possible none 18. software engineers, like all humans, need to feel ownership none 19. interviews are almost worthless for telling how good of a team member someone will be interviews are far better spent trying to understand who someone is, and how interested they are in a given field of expertise. trying to suss out how good of a team member they will be is a fruitless endeavor. and believe me, how smart or knowledgable someone is is also not a good indicator that they will be a great team member. no one is going to tell you in an interview that they are going to be unreliable, abusive, pompous, or never show up to meetings on time. people might claim they have âsignalsâ for these thingsâ¦ âif they ask about time off in the first interview then they are never going to be there!â but these are all bullshit. if youâre using signals like these youâre just guessing and turning away good candidates. 20. always strive to build a smaller system none what is your story? so there you have it, 20 years of software distilled down into 20 pithy pieces of wisdom. iâd love to hear it if something resonated with you. iâd also love to hear if you have a piece of wisdom that youâve picked up over your career that youâd like to share. feel free to leave it down in the comments.
loved the article? hated it? didnât even read it?
weâd love to hear from you.
reach out
comments (104)
none
none
you talk about interesting topics about software development process. it’s clear to understand how important are the communicational skill nowadays.
i love the ownership point, i totally agree with it.
great post!
reply
dom says:
none
i’m glad i clicked this article even though i felt i’ll probably regret it as most listicles with similar titles are bound to disappoint.
this one though, this was a true gem. brown painted gold so to say.
and i want to thank you for it. will try to keep your advice close to heart in the future, just started my first engineer position this spring.
reply
justin etheredge says:
none
thank you dom, i appreciate it!
reply
none
none
dom sums up my thoughts precisely – this is just about the first “list of n things” i’ve seen which i’ve actually thought worthwhile to spread to my networks. it would have saved us a lot of time if we’d had this when creating our principal engineers charter ð
reply
giovanny quimbayo says:
none
none
by the way, i would i appreciate any help in my job search if anyone can help me. thank you guys.
none
reply
joey defrancesco says:
none
are there any aspects of the interview process you struggle with? getting your first position can be tough because they donât have the portfolio available to them as they would if you have years of experience. my advice? create them that portfolio. most jobs i have landed started because recruiters and such were browsing my git hub. there is enough value in that, some use it as their primary metric for determining competency.
reply
thesleaze says:
none
gio – i’m sending an email your way too, but want to make this public as well.
i am in no way affiliated, and honestly used it only a few times, however this is without a doubt the best tool i ever encountered when trying to level up my interviewing (which is different than working, as we all know).
interviewing.io
i never paid a dime for the service, so again, ymmv, but live interviews and studying other live interviews is where it truly is at.
good luck
reply
netherton says:
none
“the only way someone can be a 10x programmer is if you compare them to 0.1x programmers. someone who wastes time, doesnât ask for feedback, doesnât test their code, doesnât consider edge cases, etcâ¦”
this resonated very strongly iwth me. it’s me, i’m the 0.1 programmer :/
reply
jan says:
none
i am currently working on two projects, one that i enjoy and another one that i hate. i am a 2x programmer on the first and a 0.1x programmer on the second, and i am not able to change this, even though i try to.
reply
anonymous says:
none
hey, take it easy. at work i’m sometimes a 0.1x programmer too. i felt pretty bad about it to be honest, like my coworkers were just a lot better than me. i started working on some things outside of work that i was really really interested in, and i noticed i was committing 10-15x more code per unit of time than i do at work — and it was good code, carefully written code that i was proud of and felt i wouldn’t be confused by at all if i came back to it in 2 years.
don’t get yourself down, just keep looking for the role that brings out the best in you.
reply
none
none
i think that probably the very fact that, you called yourself out as a “0.1x” programmer, means you could not possibly be ð
reply
makach mouchkil says:
none
thank you for this great article! it resonates very well with my own experiences from having worked as a developer. many of these lessons applies to the entire field of software – one thing i missed was, to stop fixing someone else’s errors. that creates technical debt. if you make the error you have to fix it. it is an excellent learning opportunity. also, if a vendor introduce a bug, we don’t make a workaround on behalf of the vendor. use appropriate channels and make sure they clean up their issues.
reply
none
none
perfect. i’m signing it ð
reply
none
none
amazing insights
reply
none
none
what a great post! i could relate to most of the points. it is for sure one of the best articles i’ve read which covers this particular topic. thanks justin for putting in the time and effort for sharing your thoughts.
reply
jeremie says:
none
super insightful and totally true in my own 20yrs exp. it is the best 20yrs career advice in software engineering i ever read, i cant think of anything else… thank you very much!
reply
alec says:
none
> biggest differences between a senior engineer and a junior engineer is that theyâve formed opinions about the way things should be
i disagree with this: junior are more likely to repeat other’s opinions with convinction even though they haven’t experienced the issue that opinion was formed upon.
also let’s remember that opinions are always subjective: humility and open-mindness are definitely something i want in senior peers and those quality are so rare that cannot be taken for granted.
none
none
none
none
reply
justin eloff says:
none
> biggest differences between a senior engineer and a junior engineer is that theyâve formed opinions about the way things should be
you are right, but also that’s not really the essence of what he was saying. i’m sure you probably realise this as well. sure juniors have “opinions”, but they won’t hold up to any amount of interrogation. most seniors will have reasons, backed by experience.
it’s usually easy to figure out the difference between someone who was told an opinion and someone who formed one. so i still think the authors sentiment holds.
none
i don’t think the idea is that your current set of tools are the problem. it’s more that you haven’t looked around at all. now if you love your tools and their productive, by all means. however, i would say it’s accurate that you can’t say whether or not your tools are good or bad if you haven’t tried others and started understanding the pros and cons. so in that sense it can show seniority in the sense that, you have enough experience with multiple tools to form opinions regarding when they are good/bad.
none
here i think you’re just taking his hyperbole too literal. i’m the author doesn’t actually advocate for violence. we’re all allowed some hyperbole, otherwise writing, reading and general communication would become rather dull.
i too would rather prefer disagreeing with someone, than having someone always go “yea sure, that’s cool”. some of the best ideas in software i’ve ever had came from “aggressively” arguing about solutions. most of us are professionals and can separate the heated debates from personal matters.
reply
edgar says:
none
unless you get written up for aggressively arguing like i did
reply
moyin says:
none
none
reply
matt says:
none
alec, stick in the word passionately for violently. do you still disagree? sorry, i think that was a silly critique.
reply
jason laferrera says:
none
what a fun treat to see your name on the byline! hope you’re doing well friend.
reply
justin etheredge says:
none
hey! good to hear from you. hope you’re doing well!
reply
anders says:
none
none
reply
v says:
none
thanks justin, great article!
as from 20y experience as a software engineer myself, i can add one more thing which i have learned.
none
bottom line: be aware of your social environment, you will only produce and feel happy about it when the environment allow you to do so! if the environment does not allow this, find a better environment that fits you!
take this from a simple guy that have created software that is valued billions on nasdaq today!
reply
s says:
none
you’re actually deluded. you want people to be impressed at your worst code, and if not then they are toxic and you’ll just leave?
i think the real lesson here is to pamper your introvert coding magicians, they need to be protected from reality or they will stop working for you
reply
a comment says:
none
well, yes, in fact we will. the opportunities in software are too hot to pander to toxic engineering managers like you. ever stopped to question why the average tenure in this field is like 2-3 years?
if you want to retain quality talent, respect is essential. i doubt your performance evaluation by higher management will be stellar in a few cycles if this is how you see engineers under you.
reply
matt says:
none
i think the primary reason for that average (well at least for the first 5 years anyway) is because they can get big pay increases by moving to the next job.
reply
v says:
none
oops, correction: not billions, sorry for getting carried away for a second there. it’s actually just a few $100 millions ð
reply
none
none
awesome article! iâve been working on transitioning to software for a while now and i like to listen/read to seasoned professionals so that i can be more effective and take into account things i might be missing.
this is probably best article i have read in this topic and iâm glad i stumble upon it. will share it with all my friends going thru the same motion of transitioning to tech.
reply
jim says:
none
as someone who “transitioned to software” shortly after i learned to walk, here’s an observation & suggestion.
so many people learn formulas or recipes and think they know technology. a monkey can see something done and repeat it. a parrot can hear something and repeat it. but they will be lost and frustrated if the parameters are changed slightly, or worse, if they need to combine elements of multiple skills into something new. you can be much more than a parrot or monkey if you choose to engage your human brain.
so i suggest this: learn what you need to know, and then find out what that is built upon, and learn that too. go as deep as you can. why does it work? when might it fail? who knows about it? answer these questions for yourself.
but don’t just focus on depth. explore to the edges of your area, and look a little beyond them. what technical areas border your area of interest? what techniques do they have that might be useful in your area? what if you could combine areas? is someone already doing that? what do you think is wrong with their approach, and can you improve upon it?
you mentioned reading what “seasoned professionals” write. this is a very good way to learn. take a look at stack overflow, hacker news, and similar sites, and just binge-read the answers or comments from high-scoring people. there are also practice websites like project euler and hackerrank where you can test your skills against others and again learn from those who are further along on their journey.
best of luck to you. this can be the most fun in the world, if you let it.
reply
oakwoody says:
none
as a fellow 20 year journeyman developer i can definitely subscribe to these. #11, the difference between a junior developer and a senior developer is that a senior developer has already made all the mistakes a junior developer will make. a corollary to points #2, #5 and #13: always strive to fully understand the business/problem domain before you write a single line of code. the flipside of #19, when changing jobs, one of the main questions you should ask from a company is to describe their onboarding processes — how much effort they’re willing to expend on training you is a good indication of whether they are hiring someone to make a contribution or a warm body to fill the headcount.
reply
none
none
hard to find anything in here that *doesn’t* resonate. this is one of the smartest, most useful blog posts on software development i’ve ever seen.
reply
john says:
none
having been at a few companies where the ‘big refactor’ to get rid of ‘tech debt’ was attempted, a lot of what you wrote resonated. i came to the saying, “every line of code you write, that doesn’t eliminate more than one line of code, is you building your tech debt”. its too easy to point to the ‘legacy’ system as ‘bad’ and start building the ‘good’ replacement and end up with 2x the code to maintain. this usually happens when you get to the final 5% of what the legacy system does, and just run out of time. i’ve been at companies where there are more than three systems, the legacy, the first refactor, the attempt at microservices and the team is busy working on the ‘final refactor’.
reply
aw says:
none
none
reply
sangd says:
none
very well written points. i like all of these. i went through many of these and i understand how it feels.
thank you.
reply
mgbielski says:
none
i’ve been in the industry for over 20 years and #14 really hits home for me. i can’t count how many times someone with an affliction for “bright, shiny, new” things has wasted the time of the team and often the company while trying to make their favorite new technology of the week solve a problem that would have taken less time and effort to solve with what the team is already using. what these people are often lacking is the ability to really, thoroughly think things through to the end. the other thing that i see far too often is stagnation in learning. as you’ve said, to be in this field requires continual learning and people that refuse to accept that effectively tie themselves to the past and get left behind.
reply
tim says:
none
i personally refrain from using terms like “cutting shit”, those who use such words and speak this way believe it makes them sound cool or real (not sure what exactly) but to the receiving end it sounds disgusting and communicates disregard of others and quickly erodes the respect and opens the door wide open for even bigger (cool and real) things to occur
reply
sam says:
none
the more you think about a problem the better the solution. the better the why’s the smaller the solution. the more code you write the more the refactoring. you would at times be digging a hole to fill another and you need to come out sought of “unclutter” focus on the project otherwise you’ll scream micro service to every problem and keep at it till eventually you don’t understand what’s happening (possibly create a microservice to manage your microservice manager.. pun intended) …… perfect read. best developer blog i’ve read. resonates to what’s happening in the field/industry even to devops engineers.
reply
roy says:
none
hey there, this spurred a lot of discussion in my group. may i use it as part of a survey with quotes and attribution back to your site?
reply
none
none
none
i can’t help but think that one reason why my learnings overlap so much with your points is i have been recently involved in creating an agnostic platform from scratch to build several projects, which rings similar to “starting new projects all the time, but also has to maintain a number of systems.” you are pressured into keeping things lean and focusing on engineer productivity. otherwise you can’t easily bring in new people, nor can experienced people juggle multiple projects at once with minimal context switching. one day of onboarding for any newbie to take any change in several projects live, with the same confidence of a “git push” (literally, because we were doing gitops… without knowing that’s what you call it :d)
anyways, thanks for writing this. i’m framing it!
none
reply
qqqq says:
none
“the 10x programmer is a silly myth. the idea that someone can produce in 1 day what another competent, hard working, similarly experienced programmer can produce in 2 weeks is silly”
i’m doing this all the time and i know at least one other developer doing the same :). it’s not related to amount of code, but how fast can someone solve problems and is building structures that allows do things faster and more performant.
regarding juniors i have same opinion like someone else here in comments, juniors are more likely to repeat otherâs opinions and do things like they read in tutorial, but didn’t battle test solution first.
reply
none
none
i am retired after 35 years in the software trenches.
great list.
#18 – ownership is particularly important, and drives many of the other areas.
there was a reason that the developers of the original
macintosh computer (amazing things done by small groups of people) had their signatures embossed inside the case.
imagine if the splash screen that starts off a piece of software said “created by: developers names” so the creators names (signatures) were a public part of the product.
that simple thing would lead to better code!
(now i build musical instruments where every little thing is public.
immediately obvious how good that joint is.)
reply
justin etheredge says:
none
itâs so true, it really does all come back to people taking pride and ownership of their work.
reply
none
none
you are absolutely right! ð
reply
boyong says:
none
thank you for this great article justin
reply
mtsay says:
none
i’m intrigued by #19. what do you suppose are the values in interviewing a candidate? what would you pay attention to while interviewing a candidate? and how would you decide on casting a must-hire/maybe/veto vote?
a little about myself: i have around 10 years of experience working at small companies and startups; these companies and teams are lean and focused. i’ve been on both sides of table when it comes to interviewing and hiring.
on the hiring side, i agree that looking for certain signals seems futile, but i have a hard time finding or coming up with a better approach.
reply
timothy says:
none
+1
is there some other way to tell if someone will be a good team member before hiring or is it impossible?
reply
jeremy pulcifer says:
none
none
reply
prasanna says:
none
your points innovation & interviews stood out for me. thank you for taking time to share your experience with us.
reply
justin etheredge says:
none
youâre welcome!
reply
none
none
we need to venture more job opportunities in this sector and create a workable environment for the work..since the technology in computer is really taking us to another level in the coming years.
reply
koreth says:
none
the “10x programmer” concept is the “0.1x programmer” concept, just from a different baseline. the original studies where the idea came from were measuring the productivity spread between the best and the worst performers, not between the best and the average.
reply
none
none
fantastic article.
whilst i agree with your opening statement about context being hugely important, i think the sheer volume of comments talking about how much this resonates shows you’ve hit on some fairly universal software advice.
my favourite point was on 0.1x vs 10x. it reminded me of the advice that up until a certain point you will win more tennis matches by stopping your own unforced errors than you will beating your opponent.
i feel like too many developers strive to reach this mythical 10x status without thinking about what small improvements could make them a better team member.
reply
justin etheredge says:
none
i love the tennis analogy, thank you!
reply
none
none
hey, this is an awesome list thankyou. as a 50 year old who still loves working as a senior developer, all of this resonated with me, you’ve really captured a lot of important points here succinctly. on your point 7, i’d recommend having a read of a fairly new book called fundamentals of software architecture which has a great chapter about knowledge depth vs. knowledge breadth – in summary, as you get more experience and do more design level type work, you need to increase the breadth of your knowledge – to know what is possible and what is out there. at the same time you’ll find you can’t have a depth of knowledge about everything, otherwise you’ll run yourself ragged. you can still focus on a few different specialist areas or frameworks which you keep up to date with, but you need to supplement this with knowledge breadth – a shallow and wide knowledge about as much as possible.
reply
jeremy says:
none
awesome article! thank you very much!
none
reply
justin etheredge says:
none
agreed, that is something i struggled with early in my career, and sometimes still do when under time pressure.
reply
nihal srivastava says:
none
wondering about the design of this site, why the comment is at the end of the page and why not just down below the post?
reply
vitus says:
none
thanks so much for the insight. this is really great ðð½
reply
nonny says:
none
point 9 really irks me about a lot of companies. i see it at my job and i hear about it from friends who also work in it in varying capacities. in an industry that’s built on change, maximizing efficiency, and finding new ways to do things it astounds me that so many companies refuse to charge the way things get done.
i understand that some upgrades require massive restructuring that doesn’t always make practical or financial sense, but there’s just no excuse for certain things. no one questions why we’re still using this horribly buggy software from 1995, or why we haven’t automated a tedious but very simple manual process, or identified the source of a break in the process flow that confuses both the users and the devs who maintain the software. it’s maddening.
great points overall.
reply
johnyking says:
none
nice
reply
dmitriy rogatkin says:
none
a big problem of modern software development that people continuously rewrite existing systems to use the new technologies. for example, i have ipad of the first generation,
it is fully functional, however less than 20% sites still work on it. sure, sites i developed still work great. i can’t say that new software offers something completely different, for example gmail stopped working on the ipad as six months, although i didn’t notice any new functionality in it. when developer will focus on creation something really new, then just try new technologies for old things?
reply
none
none
i am reading this on monday morning , there is so much to think about and take from. with that i am going to start my day.thanks for writing this. happycoding.
reply
a comment says:
none
the 10x engineer (or more) *absolutely* exists – that this is even for debate with someone with 20 years of seniority is concerning, to put it mildly.
ever hear about dudes called linus and bjarne…? ever hear about other guys that literally create their own oses and game engines for fun…?
reply
justin etheredge says:
none
none
reply
none
none
none
none
reply
hasan says:
none
thanks for tips
reply
moti mashiah says:
none
great article as a software engineer over 10 years. i can feel every point.
thank you.
reply
none
none
this is something i should have read some 25 years ago. excellent mate..
none
reply
justin etheredge says:
none
thank you!
reply
diego guidi says:
none
none
ps: just discovered right now that this blog post has a comment section ð i use a comment blocker so often i miss this sections…
reply
don denoncourt says:
none
none
reply
justin etheredge says:
none
ha! thanks don. ð
reply
david reynolds says:
none
this year is 40 years of programming for me, as well, and i agree. this was an excellent list, probably the best of its kind i’ve seen.
reply
ben wood says:
none
great list, thanks! folks should also check out the work of marty cagan at the silicon valley product group (svpg.com). he has a lot to say about all this and has distilled his wisdom into a couple of excellent books too (“inspired” and “empowered”).
reply
justin etheredge says:
none
agreed, inspired is a great book! i havenât had a chance to read empowered yet.
reply
bruno says:
none
great article! amazing points. i have 15+ years in development, i can relate (in some way) to every single point.
reply
hitesh says:
none
none
reply
yuri says:
none
really loved the intro – this is a very good point, very inspiring article – thank you!
reply
gaurav says:
none
none
reply
none
none
always understand the business goals youâre setting out to achieve.
when iâm outlining a project, in a briefing or a requirements doc, i always start with the goal: âwe need to email customers real-time tracking updates from usps and ups.â or, âwe want to find out which products are most frequently sold together.â
making sure the business goal is clear right at the top helps reduce scope creep and dead ends. and if the stakeholders canât agree on the business goal, well, you canât even get started.
another thought: thereâs this gem from the terry pratchett novel making money, about the igors (race of steampunk surgical/technological inventor geniuses), paraphrasing: âigors didnât build what you asked for. they built what you wanted.â
if youâre clear on the goals, you can build whatâs wanted regardless of whatâs asked for.
reply
bill says:
none
it’s hard to choose just one point, they’re all good. i’d roll with 2, 4 and 18.
#2: i just had a conversation with someone; the company built an incredible (and expensive) software product that then produced almost zero income. why? as ingenuitive as the product was, decision makers had no need for it. asking a client questions about what they want, we really do have to read between the lines to give them what they need. and i’ll second what george tucker said about igors – that was funny.
#4: tech debt is a major topic – part of reducing it is avoiding it. i’ve seen some companies rewrite a product rather than maintain it. one lesson learned – figure out your assumptions and then question their validity.
#18: i had to laugh when i saw tautology. i thought the first sentence worked both grammatically (though debatable) and mathematically (definitely).
reply
chris bartley says:
none
just wanted to say thanks and give a big thumbs up. and extra thanks for the time it must have taken to put it together…that dedication to caring and trying to make the path easier for others speaks volumes.
i’m in the 25+ years experience camp, and found zero points of disagreement. there’s a ton of wisdom here–hard earned, i’m sure–and it’s something i wish had been required reading when i started. very well done.
reply
justin etheredge says:
none
thank you chris! i greatly appreciate it!
reply
sean barton says:
none
iâm a new software engineer and love to read articles like this that offers practical wisdom in bite sized chunks. it makes it easier to digest.
point number 6 stood out to me. because of my lack of experience, i tend to overthink things which extends project deadlines, sometimes by a huge factor. iâve been learning to just âcut shitâ even if it feels like iâm making âmud piesâ with my code. it sometimes helps just to get something working, and then think about how to improve it after. in most cases i end up iterating on the concept and producing something really great, which could only have happened by just starting.
thanks for distilling your experience, it is so valuable for people like me just starting out.
reply
perit bezek says:
none
just the introduction part is valuable enough and even if the whole list was useless, it would have worth my time. i tried to pick which item is my “that’s it” one, but they are all so spot on that it’s impossible for me to favor one to others. thank you for the brilliant article and kudos on your 20 years.
reply
none
none
none
reply
xxrey says:
none
verry good article, thanks!
reply
none
none
none
thank your for the lesson.
reply
none
none
just the introduction part is valuable enough and even if the whole list was useless, it would have worth my time. i tried to pick which item is my âthatâs itâ one, but they are all so spot on that itâs impossible for me to favor one to others. thank you for the brilliant article and kudos on your 20 years.
reply
none
none
many thanks for the condensed experience of which many i could find myself in after more than 20 years of programming myself. i pretty much like the designer approach and call for simplicity. team culture also is a big factor to success. responsibility is another.
none
users don’t miss and cannot complain on features that are not existing. however, features that are out there available to the users must be solid, really solid. in addition, any features not existing don’t need to be maintained. this means cost savings on upgrades, customer support and time savings for focussing on the essentials.
in context, from an inner programmers view this means, less external libraries included can be more. which is not meant to reinvent the wheel.
none
reply
steve says:
none
this is a great post with very solid and helpful insight.
i would love to share it more widely across my organization.
it would benefit so many.
none
consider a few edits and you might change the world.
reply
none
none
fantastic article. i feel like too many developers strive to reach this mythical 10x status without thinking about what small improvements could make them a better team member.
reply
andrew says:
none
justin, thank you for sharing your experience. i’m still studying to get my first job in this field, but i re-read this article periodically to keep me in the right mind set. thanks for helping me start off on the right foot.
reply
none
none
awesome article! i feel identified!
reply
none
none
thank you for sharing.
none
none
reply
mihai says:
none
none
reply
none
none
i agree with most of the important points in this article. it is definitely worth a read if you’re interested in this topic. delusion, the author, thanks for taking the time to share your knowledge.
reply
drew lytle says:
none
thanks for reading, sakshi!
reply
jesse brightman says:
none
thank you for writing this fantastic article.
you have accurately described the way i feel after 10+ years designing and building software and have re-inspired me to keep learning even though i am very close to giving up the profession.
businesses and bosses need to read and understand this in order to better understand the role of software and developers in todays business environment.
reply
darin l. whitlock says:
none
this list is very adroit. i spent 1998-2014 at a keyboard writing code.
i feel like i could have written this list. these are the topics, that when properly addressed, make solid software.
in my view, there’s one big old problem: financiers. they pay. you do as they say. the people in finance will always destroy at least half of the goals in the above list, every. single. time.
so i quit programming. why? because i like doing the old-fashioned, blue-collar type job; whether i’m sweeping up saw dust or writing cad software for uav designers.
i’m allowed to do my best job on the pile of saw dust.
programmers are never allowed to do their best job.
never.
reply
jan says:
none
i just want to take a minute to say thank you for putting this out there. your points are all extremely valid and valuable, and essentially timeless. and a good starting point for anybody who wants to reflect on his current project or job and see what he/she can improve. enjoyed it immensely!
reply
none
none
the 10x dev is the one that stops you from reinventing wheel. or the one that tells you a project is doomed when it is.
reply
leave a commentleave a reply
cancel reply
none
none
none
none
none
none
none
none leave a commentmore insights
view all
none
none
none
none
joshua mobley
none
none
none
none
nick agliano
/
@nickagliano
none
none
none
none
al tenhundfeld
/
@alric reach outwe're here to help. tell us a bit about your project or idea and we can help you figure out your next steps.
your email* tell us about your project or idea*commentsthis field is for validation purposes and should be left unchanged.
none
none read our whitepaper none
hello@simplethread.com
careers
privacy
none
none
none
none
none
none
virginia map icon
© 2022 simple thread, llc.


Link: https://www.cis.udel.edu/research/software-engineering/

software engineering - computer & information sciences
none
engineering
computer & information sciences
none
welcome
faculty awards
working at ud cis
diversity & inclusion
contact
none
none
ms in computer science
phd in computer science
bioinformatics ms/phd
4+1 bachelors/cs masters program
graduate certificates
graduate admissions
professional development awards
graduate resources
none
ba computer science
bs computer science
bs information systems
independent study
undergraduate research
undergraduate faqs
undergraduate resources
visit
apply
student organizations
none
faculty directory
staff
faculty and staff resources
none
none
artificial intelligence and machineâ learning
bioinformatics
computer networks
computer science education
computer vision/graphics/robotics
cybersecurity
high performance computing
human-computer interaction
natural language processing
quantum computing
software engineering
theory of computation
research matrix
facilities
none
news
events
none
2021 cis honors day awards
2020 cis honors day awards
grace hopper celebration
newsletters
undergraduate newsletter
none
make a gift
what engineering needs
ud connection
home
|
research
| software engineering
software engineering
software engineering is a broad field of computer science including models, languages, methods, mechanisms, and tools for the elaboration, evaluation, and evolution of products and processes all along the software lifecycle – from requirements specification to software maintenance and reengineering. at the university of delaware, software engineering is an increasing area of research and graduate study.
research in software engineering at university of delaware currently focuses on software testing methodology and tools customized for web applications, systematic testing of program-based security mechanisms, techniques and tools for aspect mining, applying natural language processing to aid program understanding and navigation, and exploiting dynamic compilation technology for dynamic program analysis useful in software tools.
current faculty
james clause , assistant professor: software engineering; program analysis; debugging; green software engineering; software privacy.
lori pollock , professor: program analysis for building better software maintenance tools; optimizing compilers for modern computer architectures; software testing.
stephen f. siegel , associate professor: analysis and verification of concurrent and distributed software systems, model checking, scientific computing, parallel computation.
courses
cisc 611/cpeg 611 software process management
cisc 612/cpeg 612 software design
cisc 613/cpeg 613 software requirements engineering
cisc 614/cpeg 614 formal methods in software engineering
cisc 615/cpeg 615 software testing and maintenance
cisc 675 software engineering principles and practices
cisc 862 advanced software design
cisc 872 advanced program analysis and transformations
software engineering laboratories
software analysis and compilation laboratory
213 smith hall, professor lori pollock.
our research focuses on program analysis to automate and semi-automate tedious and error-prone tasks typically performed by software engineers, testers, and scientists. current research projects include applying natural language processing techniques to perform textual analysis of software artifacts and using that information for automatically generating documentation from source code, improving code search and feature location, and improving other software maintenance tools. we are also investigating various aspects of green software engineering to enable software designers to make energy-conscious design decisions. in software testing, we are developing techniques to automatically generate tests for web applications. other projects focus on optimizing compilers for modern parallel architectures.
program analysis and debugging laboratory
429 smith hall, professor james (jim) clause.
this research group focuses on developing tools and techniques to improve software quality by simplifying the detection and debugging of software faults. current projects include investigating how dynamic tainting can be used to help guide developers in fixing common programming mistakes such as memory leaks and other types of failures. the group is also investigating how information can be safely and efficiently collected from software users and how such information can be used to improve the software development process.
verified software laboratory
421 smith hall, professor stephen siegel.
the vsl conducts research into one of the most important problems in software engineering: how to develop verifiably correct complex software systems. currently, the vsl is focusing on parallel programs used for scientific computation and is developing tools that can find defects in these programs or establish their correctness. these tools are based on techniques from logic, compiler theory, symbolic computation, and model checking.
department resources
undergraduate resources
graduate resources
faculty and staff resources
cis building key request approval form
ud events calendar
college resources
college of engineering
faculty & staff resources site
it help
contact none
none
none
none
none
none
none
none
â©2021 university of delaware
comments
legal notices
accessibility notice


Link: https://blog.tryexponent.com/learn-software-engineering-levels-to-advance-your-career/

learn software engineering levels to advance your career
none
interview courses
interview coaching
blog
company guides
learn software engineering levels to advance your career and climb the ladder
last updated on
sep 29, 2022
hey there! this article is part of our series on software engineering. for even more help and resources, check out our complete
software engineering interview course . none
of course, itâs not all just for you! levels also help employers in the hiring and promotion process.
software engineering levels create a clear ladder of progression. understanding the responsibilities and expectations for each level will help you to climb that ladder.
what you can expect from this article is a look at a standard level system. we'll break down the value of levels and then a zoom in on how levels work at different tech companies.
by the end, youâll have the information and tools you need to see how you need to get where you want to be as a software engineer. standard software engineer career levelssource:
edvard alexander rã¸lvaag
on unsplash.com none level 1 - software engineerlevel 2 - senior engineerlevel 3 - staff engineer (alternate: senior staff â  â  â engineer)level 4 - principal engineerlevel 5 - distinguished engineer / fellow individual companies often use personalized leveling systems that contain more tiers, but they generally follow this basic outline.
keeping in mind that this is a generalized list, letâs look at whatâs expected for each level. level 1 - software engineer none
engineers at this level are not expected to take much ownership over the companyâs product.
instead, they work on assignments given to them by people who have decided on the direction of the product.
the general order of operations looks like this:
the highest level engineers find problems and focus teams on those problems. mid-level engineers take those problems and find solutions. mid-level software engineers then explain the solution to junior engineers. and junior engineers work on coding one piece of that solution.
none
the company knows that thereâs going to be a learning process, and they know youâll even mess up sometimes. thatâs fine.
they want someone who is a quick learner, a creative thinker, and can work well on a team.
entry-level software engineer compensation
of course, compensation packages have a wide range depending on who youâre working for and where youâre working!
none
none
advancing your career to senior engineer
on top of experience, getting to the next level will require proven competence across a wide range of tools and types of problems.
basically, the ability to ride the bike after taking off the junior software engineer training wheels.
to get there, learn and practice as much as you can.
learn about new programs. learn about solving problems youâre unfamiliar with.
keep notes on things youâve had to ask for help with. practice those issues so you can do it independently next time.
donât shy away from asking for helpâmentoring is one of the best ways to learn.
but youâll want to eventually show that you can work well with minimal supervision in order to get to the next level. level 2 - senior software engineer senior software engineers typically boast 3 or more years of full-time engineering experience. t doesnât necessarily have to be at the same company.
while the scope of this position is not significantly larger than that of a junior engineer, the position carries higher expectations.
itâs not a manager position. a senior engineer will still be working on solutions given to them by their engineering manager or a product director.
but management will expect that a senior engineer can complete the solution with little or no guidance.
senior software engineers are also expected to have at least some kind of role in guiding the junior engineers.
senior engineers are knowledgeable people on the team. itâs expected that they can help get junior engineers up to speed.
senior software engineer compensation
none
advancing to staff engineer
on top of experience and technical skills, the next level requires people skills. as a staff engineer, youâre either moving towards management or becoming an independent contributor.
none
this doesnât require you to go over the top with forced small talk at every available moment. in fact, doing so is more likely to annoy coworkers than to endear them!
take a genuine interest in the people around you. remember that success at a job requires honing your skills, but it also requires supporting your team.
additionally, getting to the next level requires an understanding of the big picture.
learn how systems come together when developing an app. what's are the company's 5 and 10-year goals? level 3 - staff engineer none
we mentioned before that junior engineers arenât deciding on the problems nor are they coming up with the solutions, but instead they are given solutions to work on by managers. a staff engineer is likely that manager giving the solution. a staff engineer will often act as a go-between for the higher management who are making the company-wide decisions and the engineers who are writing the actual code.
a staff engineer will sometimes help decide on a problem to focus on and sometimes a staff engineer will spend time writing in code, but the primary role of a staff engineer is to ensure the team produces a strong solution for the problem upper management wants to focus on.
none
none level 4 - principal engineer the vast majority of engineers will not progress to this level. these positions are rare, requiring a long track record of proven success as well as a good deal strategyâor luckâwith being in the right place at the right time.
the higher one goes into management, the more difficult it is to say that this position will come after x years, especially when different companies are using different level systems. however, this position is usually 10 or so years down the line.
while the staff engineer ensures success on their team, the principal engineer begins to transcend teams. the focus is now on the company as a whole. and rather than finding solutions to problems, the principal engineer is now working on finding what those problems are in the first place.
this is a significant shift in scope of oneâs work. this position is far less about coding, and far more about business and theoretical ideas.
none
none
none level 5 - distinguished engineer / fellow this is essentially the top of the totem pole. these are computer science gurus who have imagined, built, launched, and maintained multiple massively successful projects. their influence trickles down throughout the entire company. if the company is influential enough, that influence likely extends throughout the entire industry.
for example, sebastian thrun is someone who has held the honor of being a google fellow. he co-developed google street view.
none the value of levelssource:
sam mgrdichian
on unsplash.com overall, levels help both you and the employer because they create clear expectations, thus avoiding misunderstandings. to set the stage, letâs first discuss why companies use levels. then weâll look at how you can make the level system work for you.
for companies although this article will focus on software engineering levels, the concept of a multi-tiered leveling system is not unique to software engineering positions. lots of fields and companies use levels to add structure to their workforce.
none
one situations states: frank wants a promotion to a âseniorâ title, but we donât feel heâs ready yet; he asks why not? â we need a way to explain the difference between levels, and give frank guidance on which skills to develop. another hypothetical situation he gives is: we hired karen a few years ago at $85k/year. we hired noreen this summer â after a bidding war with facebook, her salary wound up being $120k/year. karen and noreen do the same work. over drinks, karen finds out how much noreen is paid. â this is a disaster. we canât afford to pay everyone $120k. but karen has every right to call foul. these are nightmare scenarios for any manager or hr department. it leads to conflict, and conflict leads to a disgruntled team. things start to fall apart all because the company had no satisfying answer to give for why this employee wasnât ready for a promotion or why that employee earns less than a coworker. using levels gives companies that satisfying answer.
on the flip side, a company might be able to get by with paying some employees less if they didnât use a structured level system. however, the level system helps companies to avoid a world of headache.
itâs like the difference between haggling over the price of an apple at a farmerâs market versus buying it for the listed price at target. i might save a few cents by haggling, but iâd rather not debate the price of produce every time i want an apple. for you employers use levels because it helps them, but it also helps you as an employee. the main reason is that it provides clarity to your career path.
suppose youâre in the position of frank, engineer from the scenario a few paragraphs prior. heâs an engineer looking for a promotion, but he works at a level-less company. his promotion is denied and heâs left without knowing what he could do better to ensure the promotion next time. was his work not good enough? did he not have enough years of experience? do the managers only give promotions to their personal friends?
none
likewise, levels can make the process simpler if youâre applying to a company that you know uses levels. gone are all those worries over which position to apply for, constantly wondering if youâre selling yourself too short or overselling yourself. levels show clear expectations so that you know exactly for which position you should apply.
none to provide clarity on what our understanding of growth is, we have a level system (as many other companies do). this system defines our engineering culture by giving guidance to people on how to increase their impact within soundcloud, facilitating career discussions between engineers and their managers, providing a framework for setting salaries, and last but not least, encouraging and rewarding certain behaviors.transparency around everyoneâs level at a company helps people identify their role models. additionally, an explicit level structure is beneficial for people who are underrepresented, as non-explicit hierarchies tend to favor the people who form the majority (which, most of the time, is white men).level variety a good exercise is to spend some time on levels.fyi comparing companies to each other. look at the structure of their level system, and also click on the first few levels to get a general idea for that levelâs compensation and how many years of experience it requires.
what youâll often see is that while using levels provides structure, it still has flexibility. it becomes even more flexible the higher up the ladder one goes. the more control over the company a position has, the more inclined a company is to take a personal approach instead of following an assembly line promotion process.
googleâs level system is certainly the most influential throughout the industry. many smaller tech companies and departments use a similar system. still, variety exists. one can see this just by looking at five of the biggest tech companies. source: levels.fyi a quick glance gives you a rough idea of what progressing through the company would feel like. google, facebook, and amazon all use similar tracks. they donât have notable variation, and what variation exists is generally towards the higher end of the ladder.
none
variety can go even further than that. in the image below, one of these is not like the others: source: levels.fyi netflix chooses to operate without a level system. all of their software engineers are senior software engineers.
the lack of levels seems appropriate for a company like netflix. they arenât developing a hundred different projects like other tech giants. instead, they have their streaming platform, and all they want is to work on that one project.
none in short companies use levels because it provides structure, and you can use that structure to make your climb easier. every company will have a leveling system thatâs slightly different, but the basic idea will remain the same. learn the levels, learn whatâs expected for the next level, and then direct your energy in that direction. this is the best strategy to advance your career.
none
none
none
none
none
exponent â© 2022
powered by ghost
none


Link: https://www.mcgill.ca/undergraduate-admissions/program/software-engineering-faculty-engineering

software engineering (faculty of engineering) | undergraduate admissions - mcgill university
email
office 365
minerva
mycourses
mymcgill
askmcgill
maps
staff directory
column 3
about us
about mcgill
administration & governance
admissions
alumni resources
campus life
employment opportunities
faculties & departments
mcgill in the community
research & innovation
teaching & learning
column 2
for faculty & staff
human resources
workday
academic personnel office
libraries
it services
financial services
directory of resources
what's new
news
events
mcgill reporter
other publications
column 1
for students
programs & courses
libraries
tuition & fees
financial aid
athletics
important dates
career planning
it services
directory of resources
askmcgill
quick links
none
fr
undergraduate admissions
enter your keywords
main navigation
home
apply
programs
why mcgill
finances
visit
events
join our mailing list
home
software engineering (faculty of engineering)
see the complete requirements
apply now
overview
software engineers design, develop and test the software programs that apply computer technology to everyday processes. things as fundamental to our daily lives as downloading e-mails or scanning barcodes at the grocery store would not be possible without software engineers. the needs and opportunities are endless.
this program offers foundational knowledge in computer and electrical engineering. you will develop the skills needed to design, create and troubleshoot complex software systems. our programs allow you to round out your education with complementary courses in the social sciences, management, humanities and law.
software engineering is offered through the faculty of engineering and the school of computer science. you can also pursue this program in the faculty of arts if you want to learn the principles, techniques and methodology of software engineering while exploring a range of other subjects.
note:â the software engineering minor will prepare engineering students for a career in software engineering. it will provide a foundation in basic computer science, computer programming, and software engineering practice. the minor program does not carry professional recognition.
careers
as a software engineer, you can do essential, exciting and cutting-edge work. software engineers design computer software and web applications, create flight navigation software, develop video games, and write automation programs for robotics.
software engineers are in high demand â they offer a critical area of expertise in the rapidly evolving it sector.
you could become a professional:
software development engineer
web developer
game developer
database administrator
it specialist
courses
as a software engineering student, you can take courses like:â
none
none
none
none
none
learn more about software engineering course work
possible minors
minors are a great way to customize your academic experience. many students use minors to pursue interests outside their major, while others choose minors to complement their degree.
minors that complement this program:
management â â
physics
statistics
technological entrepreneurship
learn more about how majors and minors work
related majors
discover these related majors:
electrical engineering
computer science
computer engineering
ready to apply?
none
none
get ready to apply
back to top
department and university information
welcome centre
3415 rue mctavish
mclennan library building
montrã©al qc
h3a 0c8
undergraduate viewbooks
column 1
visit us
welcome centre
book a campus tour
join our mailing list
getting to montreal
column 2
applying
access your application
step-by-step guide
application support
admissions contacts
column 3
additional resources
for parents
for counsellors and advisors
accepted applicants
first-year students
terminology guide
instagram
facebook
twitter
mcgill university
copyright © 2022 mcgill university
accessibility
none


Link: https://www.monash.edu/it/ssc/software-engineering/our-people

our people - software engineering
none
courses
monash online
library
donate
previous menu
toggle navigation
software engineering
our research
our research
our people
our people
industry collaboration
industry collaboration
join us
join us
icse 2019
icse 2019
education
education
none
close notificationclose notification
close notification
skip to content
skip to navigation
none
monash university
monash australia
monash indiamonash indonesiamonash malaysiamonash pratomonash suzhou
courses
monash online
library
donate
staff
staff
my.monash
intranet
workplace
the insider
students
students
my.monash
student website
monash connect
alumni
alumni
alumni portal
alumni website
search
none
menu
software engineering
our research
our people
industry collaboration
join us
icse 2019
education
none
toggle search
none
closeclose
search
search
you are here:
home
|
our people
our people
faculty staff in software engineering
none
none
none
none
none
none
none
none
none
none
none
none
affiliated members
none
none
none
none
none
current phd students charaka kapugamawasangamagedon main supervisor:  dr marcel bã¶hmeassociates: dr aldeida aleti, prof john grundy charaka's research is in the area of software security for internet of things (iot). he is developing methods for identifying and fixing security issues in iot systems.
anjana perera main supervisor: dr aldeida aletiassociates: dr marcel bã¶hme, prof john grundy anjana is working in the area of search-based software testing, and focusing on designing fitness functions that are appropriate in guiding the search algorithms towards
promising areas of the search space.
semini wijekoon main supervisor: dr aldeida aletiassociates: dr simon dunstall (res-endusr) dr kaveh rajab khalilpour , assoc prof ariel liebman  semini is addressing the problem of climate change and the uncertain energy future, by developing techniques that
help mitigate these risks.
shuang (sherry) yu main supervisor: dr aldeida aletiassociates: prof bernd meyer, dr andy song  swarm robot collaboration is not a trivial task especially when there is no central controller. the state space and action space scales massively with factors like the
number of robots, the number of sensors and sensor complexity, a framework that allows multiple robots to perform reinforcement learning over a pool of algorithms, and gives a q-learning based implementation of the framework. we then show through the application of cooperative self-assembling in changing
environments that under the self-organising swarm assumptions, performing reinforcement learning over algorithms has an advantage over learning actions. sherry is working on a framework that allows multiple robots to perform reinforcement learning over a pool of algorithms, using different machine learning
algorithms such as q-learning.
none
none
none
none
none
community
faculties
locations
diversity and inclusion
safety and security
sustainable development
resources
important dates
how to apply
a-z index
policy bank
faqs
contact
contact us
campus maps
jobs at monash
recruit a student
pay online
news
latest news
monash lens
podcasts
a different lens
monash life
on our site
contact us
course information
how to apply
staff intranet
community
faculties
locations
diversity and inclusion
safety and security
sustainable development
resources
important dates
how to apply
a-z index
policy bank
faqs
contact
contact us
campus maps
jobs at monash
recruit a student
pay online
news
latest news
monash lens
podcasts
a different lens
monash life
on our site
contact us
course information
how to apply
staff intranet
registered higher education provider
abn 12 377 614 012
cricos provider number
none
authorised by
none
maintained by
none
none
accessibility
disclaimer & copyright
terms & conditions
data privacy & cyber security
data consent settings
copyright © 2022 monash university


