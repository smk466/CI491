Link: https://www.allengineeringschools.com/engineering-careers/computer-software-engineer/famous-software-engineers/

Ten Famous Software Engineers & Their Apps | All Engineering Schools
Skip to content
Research Schools & Careers
TEN FAMOUS SOFTWARE ENGINEERS AND THEIR APPLICATIONS
Read about 10 famous software engineers, the applications they created and the software engineering degree they earned.
By Jennifer Wegerer
Software, like a novel or film, can leave some people remarkably pleased and others utterly disappointedâif not at the application itself, then at the software engineer behind it.More likely than not, we have all sat at a keyboard feeling frustrated, and wondering why an application didn't work this way or that.Then again, we may have felt truly in awe, using a piece of software that was so swift and seamless that we'd like to shake the hand of the software engineer who wrote it and thank that person for making it so understandable and so easy to use.
Ten Famous (or Infamous) Software Engineers
Here's a list of some of the most famous software applications and the software engineers who created them. Depending on your point of view, this list might include some of your unsung heroes, or perhaps a few people with whom you'd like to have a few words. Nevertheless, these software engineers have built world-famous applications, whether we like it or not.
Software Engineer
Degree Held
Company
Application
Application Type
Tim Bray
Bachelor of Science degrees in math and computer science
Entrepreneur; co-founded Open Text Corporation, Textuality and Antarctica Systems
XML
Developer's tool
Paul Buchheit
Bachelor's degree in computer science
Entrepreneur; worked for Intel and Google
Gmail
Webmail service
John Carmack
None
Entrepreneur; co-founded id Software
Doom, Quake
Computer games
Dave Cutler
Bachelor's degree
DEC, Microsoft; co-founded Agrippa-Ord
Windows NT
Operating System
Max Levchin
Bachelor's degree in computer science
Entrepreneur; co-founded NetMeridian Software, SponsorNet New Media and Confinity
PayPal
E-commerce
Pierre Omidyar
Bachelor's degree in computer science
Claris; as an entrepreneur, co-founded Ink Development and created eBay
eBay
Online auction and shopping website
Alexey Pazhitnov
Degree in computer software engineering
Microsoft; as an entrepreneur, co-founded The Tetris Company
Tetris
Computer game
Jimmy Wales
Bachelor's and master's degrees in finance
Teacher and Internet entrepreneur; co-founded Wikipedia
Wikipedia
Web-based encyclopedia
Michael Widenius
None
Entrepreneur; co-founded MYSQL AB
MySQL
Open-source database
Jamie Zawinski
None
Lucid Inc.; Netscape Communications
Netscape Navigator
Web browser
Source: Softwaresecretweapons.com
Software Engineering Degree & Career Guide
Software Engineering Home
Software Engineering Degree Programs
Software Engineering Online Degrees
Careers in Software Engineering
Software Engineer Salary
Related Reading
Famous Software Engineers and Their Applications
Software Engineering Career Snapshot
Program outcomes vary according to each institution's specific curriculum and employment opportunities are not guaranteed.
© All Star Directories, Inc. All Rights Reserved. | Important Information | Privacy Policy | Terms of Use


Link: https://hbr.org/2021/07/career-crush-what-is-it-like-to-be-a-software-engineer

Career Crush: What Is It Like to Be a Software Engineer?
Navigation Menu
Subscribe
Sign In
Account Menu
Search Menu
Close menu
Search
CLEAR
SUGGESTED TOPICS
Explore HBR
Diversity
Latest
The Magazine
Ascend
Most Popular
Podcasts
Video
Store
Webinars
Newsletters
Popular Topics
Managing Yourself
Leadership
Strategy
Managing Teams
Gender
Innovation
Work-life Balance
All Topics
For Subscribers
The Big Idea
Data & Visuals
Reading Lists
Case Selections
HBR Learning
Subscribe
My Account
My Library
Topic Feeds
Orders
Account Settings
Email Preferences
Log Out
Sign In
Subscribe
Diversity
Latest
Podcasts
Video
The Magazine
Ascend
Store
Webinars
Newsletters
All Topics
The Big Idea
Data & Visuals
Reading Lists
Case Selections
HBR Learning
My Library
Account Settings
Log Out
Sign In
Your Cart
Your Shopping Cart is empty.
Visit Our Store
Guest User
Subscriber
My Library
Topic Feeds
Orders
Account Settings
Email Preferences
Log Out
Reading List
Reading Lists
You have 2 free articles left this month.
You are reading your last free article for this month.
Subscribe
for unlimited access.
Create an account
to read 2 more.
Where your work meets your life.
Career planning
Career Crush: What Is It Like to Be a Software Engineer?
And how do you become one?
by
Kelsey Alpaio
by
Kelsey Alpaio
July 21, 2021
Tweet
Post
Share
Save
Print
Tweet
Post
Share
Save
Print
Loading...
Leer en espaÃ±ol
Ler em portuguÃªs
Where your work meets your life. See more from Ascend here.
I am fascinated by coding. Itâs everywhere! Every single one of the digital experiences we enjoy is the result of code.
But honestly, I know almost nothing about how it works or how the people behind the code â software engineers â do what they do. To find out, I spoke with Lindsey Redd. Lindsey has coded for some of the coolest tech companies in the world: Slack, Lyft, and now Stripe. She shared with me the details about her journey â from wanting to be a doctor, to studying computer science at Stanford, to thriving in the top echelons of software engineering. We also talked about some common misconceptions about software engineers, what itâs like to work in a predominately white and male industry, and how to nail an interview for a job like hers.
Can you tell me a little bit about what your job entails? What does the day-to-day look like?
It can be different depending on the day. But usually, it starts with looking through what I have to do for the day. I know a lot of software teams use task management tools. My team specifically uses Jira as a ticketing system, and we have sprints.
A sprint will be a week or two. In that amount of time, youâre supposed to get âx, y, and zâ done. Iâll look through those to-dos and make sure Iâm on track â look at the tasks I need to do for the day, and do them.
Then coding, of course. But thereâs a lot more to software engineering than coding. You code. You test. You deploy your code. You monitor your code, and make sure things are working properly. But then, there can also be a lot of meetings around product development or new features that need to be built on the team, and how weâre going to build those features. I meet with engineers a lot on the plan for implementation. Thereâs also a lot of pair programming, or working together with another coder to solve problems.
Did you always know that you wanted to be a software engineer?
No, not at all. I didnât even know what it was until I was in college. I wanted to be a doctor in high school or a biomechanical engineer. My dadâs a doctor. My momâs a chemical engineer. So something with STEM, I knew, was going to be my path. But I didnât feel super inspired by the pre-med track or a lot of my engineering classes â I couldnât really see how any of those skills or any of the things I was learning would be applied. I was looking for something else in the STEM field that would be a bit more interesting and motivating to me.
I went to Stanford. And Stanfordâs a huge computer science school. A lot of my friends were taking intro computer science courses. I had never coded. I just really didnât know what it was. But everyone was having a great time and seemed to find it really interesting. So around my sophomore year, I decided to take a class in computer science. My mentality was, if I like this class, Iâll take the next class. And then after that, if I like that class, then Iâll major in it. And thatâs basically what happened. It was at that point I realized this is what I wanted to do.
What were those classes like? When you first started doing it, was it something that you were scared of or intimidated by? Or was it more accessible?
If I hadnât seen other kids taking the classes, other people who didnât know how to code, I would have been a lot more intimidated. But the introductory computer science courses at Stanford are super accessible. I even think theyâre available publicly. They really start from the basics. You donât have to know how to code at all to take the class. The professors were really great and they really walk you through, from the very, very basics, of what you need to know in order to code.
I enjoyed the classes because a lot of it is coding. And that is what I currently do right now on the job. I like that direct application of skills. I am learning things that I will eventually use in my career.
At first itâs a lot of puzzles. You code a little robot that navigates a maze. Itâs simple stuff. I think my final project in my first class was building an extremely basic âFacebook.â They start you off simple and gradually ramp up the intensity.
When you were in college, you interned at both Lyft and Slack. Can you talk a little bit about how you landed those internships and what the experience was like for you?
I had a very interesting path to my first internship. Stanford does a lot of job fairs specifically for computer science students where tech companies in Silicon Valley show up and recruit. I had no idea how to navigate those spaces. I had zero clue how to land a computer science internship.
I got one interview for front-end web development, which I had never done. A lot of Stanfordâs introductory courses focus on back-end work, like algorithms and data structures. So they were asking me questions about web development I just couldnât answer. It was terrible. I was really lost. I had no idea how I was going to get a job for the summer.
Then, I remembered some of my friends were applying to an organization called Code2040. Code2040 is an organization that helps Black and Latinx students who study computer science enter the software engineering tech field. They have partnerships with companies that take on Code2040 interns. And itâs a pretty intense process. You have to do a technical interview to even get into the Code2040 program. You have to do a writing interview and a video interview, as well.
Once you make it into Code2040, at that point you can start interviewing with their partner companies. At the time, Lyft was a partner company with Code2040. I interviewed and the interview process was really hard. But Code2040 definitely helps you navigate that process, as well. So it was a good program for me, as someone who had no clue how to get into tech at all.
I interviewed with Lyft and then eventually got a job offer. Code2040 is a summer-long program. You go to workshops, you network with a lot of other people who are in the program, you work with other companies who are also partner companies. Slack is a partner company who I networked with during my first summer interning and then was able to use that connection when it came to getting an internship the next summer.
Tell me more about the interview process. What was difficult about it? What was that process like?
Now, having worked at Lyft full time, I know that their interview process is very different. But at the time, it was very similar to a lot of other tech companies, where they ask you random coding questions that donât really simulate what itâs like to be a software engineer on the job. Like, I canât tell you the last time, on the job, I used a âbreadth-first search algorithm.â But Iâm pretty sure that was one of my interview questions for Lyft. And you have to code on a whiteboard, which I never really did â usually all of your coding happens on a computer.
The interview test was just not very indicative of what I would be doing on the job. And I really had to study for it. I think studying for software engineering interviews is a whole ordeal in and of itself. And at the time, I didnât really understand that, so I didnât study well. Luckily, I had some skills under my belt that served me in my interview. But it made it difficult because I was very confused about how this was going to translate into my job.
You have to study for software engineer interviews? What does that look like?
The best advice I was given was to buy this book called âCracking the Coding Interview,â which basically goes through all of the different kinds of questions that a lot of the big tech companies use â like Google, Facebook, and Microsoft. A lot of mid-size and smaller companies base their interview models off of those large tech companies.
Thereâs a lot of new innovation thatâs happening in that space, which will make the process less of a test that you have to study for. But you usually do. And there are a lot of resources online, like Meetcode. Basically you have to do practice problems, like practice math problems as if youâre studying for a test, except itâs practice coding questions that test you on your knowledge about data structures and different kinds of algorithms â all kinds of things that you have to brush up on in order to do the interviews.
I know a lot of people who give themselves several months to study for interviews before even starting the process with any company. In college, I was definitely studying for at least two months before I would interview. When it came to interviewing for full time, I also started studying a few months before I started interviewing.
So you have to basically start studying before you even know if you have an interview lined up?
Yeah, and a lot of companies understand that that is part of the process. Recruiters are very, in my experience, flexible in giving you as much time as you want to study. For my current job, I remember asking my recruiter if I could have four or five weeks to study before I actually did the interview. And they were like, âOh, yeah, I totally get it.â But a lot of people, once they decide that theyâre going to switch jobs, they know that means itâs time to start studying.
When youâre answering these questions, are you coding live in front of the interviewer?
Yes, in most cases. Lyft does an interview where you get an hour to code a small project on your own. The interviewer doesnât have to be there, so you can focus. But I think in all other interviews that Iâve been in, youâre coding in front of someone or pair programming with someone during the interview. Itâs a lot of pressure.
You do pair program on the job. So interviews that involve pair programming I think are really great. But coding with someone watching and judging your performance is not typical on the job. A lot of it youâre just doing on your own. Itâs definitely something to get used to because itâs not something that you do normally while youâre studying computer science or working as a software engineer.
Tell me more about pair programming. Is it just programming with another person on your team?
Pair programming is when you work with someone on your team or another team on a problem that either you need help on or that you two are solving together. Thereâs usually someone whoâs the âdriverâ and then someone who is in the âpassenger seat.â
The driver is the one whoâs actually typing. But youâre problem solving together. Itâs a very collaborative experience, which I like. I think Iâve learned a lot doing that process, even in interviews. You tend to solve problems a bit better and faster when youâre working with someone in that way.
So you interned at Lyft and then were able to get a full-time gig there. How were you able to turn that internship into a full-time position?
Generally, if you do well during your internship, the company will give you a full-time offer. So the big question is, how do you do well during the internship?
There are a lot of pieces to that. My misconception going in was that I needed to get my project done perfectly and completely, which I didnât do when I was interning at Lyft. I think what people are really looking for when youâre an intern on a team is your ability to communicate, both verbal and written communication, and your ability to problem solve and work your way about an abstract problem. So even if youâre not able to finish the project, demonstrating those communication, organization, and project management skills, and figuring out how to implement them â thatâs a lot of what people are looking for when youâre an intern.
What kind of questions do you ask? Do you make sure you ask questions to solve your problems? How fast are you able to ramp up and learn new technologies, skills, and languages quickly? What kind of energy do you bring to the team? What is it like working with you?
Now, being on the other side and having been an intern mentor, it definitely helps when your intern is super excited and super curious. Thatâs whatâs so fun about having interns. Not only are you helping to bring more people into the company, but you want to make sure that those people are positive and fun to work with.
Exuding that during your internship, that curiosity, that spice and passion for what youâre doing, it definitely helps leave a positive, lasting impression on your team. If you have that, plus youâre able to problem solve and get stuff done, youâre pretty set up to get a full-time offer at the end of it.
I know very little about coding languages. How many coding languages have you learned over the years? And how long does it take to learn a new coding language?
In college, we were learning C and Assembly, which are extremely low-level computer systems languages that you donât usually need to know. I also learned Java and C++. But I donât use those very actively anymore.
In my professional career, I have learned Python, Golang, PHP, React, and Ruby. But every company uses something a little bit different. Or they introduce new languages that do different things. And so thatâs why I mentioned during your internship itâs a good thing if youâre able to exhibit that you can learn quickly.
When I started my internship at Lyft, I didnât know Python. I had no idea what it was. Luckily Python is a pretty approachable language. I think Iâm forever learning these languages. Itâs like learning an actual spoken language in that way, where thereâs things that are changing all the time. Thereâs just a huge mix of things that these languages can do, and so youâre constantly learning what those new things are.
For me, to actively code in a language and feel comfortable in it probably takes four weeks. But even at that point, youâre still Googling a lot of stuff. I feel like I Google how to do âfor loopsâ in certain languages, which is a very basic thing. But each language has different syntax for even simple things. So luckily Google or any search engine is a great resource for learning how to do whatever you need to do in whatever language.
I Google the simplest things all the time. I remember there was some Twitter thread recently where a lot of senior engineers were tweeting the things that they still have to look up. And it just helped a lot with my own imposter syndrome, knowing that these people who I admire a lot because theyâre really great engineers are also looking up very simple things.
How did you get your current job at Stripe?
LinkedIn, honestly. I know LinkedIn is not for everybody. But I definitely use it as a tool for my career. I keep my LinkedIn up to date. I have my email on there. People can reach out.
My current manager at Stripe reached out to me on LinkedIn. She just sent me a message and was like, âHey, Iâm hiring. Do you have any interest?â And Stripe had always kind of been on my radar. I wasnât really planning on leaving Lyft when I did. But I feel strongly that if there is an opportunity that seems interesting to you, you should at least have the conversation. So I did, and it went really well.
From there, I was like, Iâm going to just interview and see where it goes. Maybe it wonât work out, and thatâs fine. So then, I started to study. I did the interview. You do a phone screen interview, which is usually just one or two questions with one person. And then you do an on-site, which now is just all virtual. But the on-site interview involves about five interviews. After that, you find out if you got the job or not, and then you go into negotiations.
I think the hardest part a lot of the time is just getting your foot in the door, getting your resume recognized. I definitely use LinkedIn to help me make those connections.
Do you tend to get reached out to a lot by recruiters?
There are definitely more open software engineering roles than there are software engineers. That gap will continue to grow unless we do a lot more to get more people educated in computer science. A lot of people will reach out to me about their open roles. When I was job hunting, I was very proactive in reaching out to companies that I thought were interesting, even if they hadnât reached out to me. So itâs not all inbound.
But, Iâm very privileged in the sense that I have my Stanford degree. I have Lyft, Slack, and now Stripe all on my resume. And these are really well-respected organizations and institutions. I think I get a lot of inbound traffic because of these names that are on my LinkedIn, and on my resume. I know that thatâs not necessarily the case for a lot of other engineers â great engineers; better engineers than I am â just because they donât have these brand names on their resume. So while there are a lot of open roles, I think that thereâs also a lot of elitism in the industry.
I know of companies that are like, âOh, we only hire from the top five computer science schools,â which is ridiculous. I think thereâs still that weird tension in that there are actually a lot of people who can do this work. There are a lot of open roles. But then people have unreal expectations of what a resume is supposed to look like.
And of course the interviews are intense, as I was describing. Not everyone has the resources to prepare for three months for an interview. So there needs to be some bridging of those gaps there, in my opinion.
When you do have a ton of opportunities like that coming your way, how do you decide which ones are worth your time?
I think it depends a lot on what you want to do. There are a lot of different kinds of software engineering. So when my manager at Stripe reached out to me, it was for a full-stack, more product-engineering role. I was doing a lot of infrastructure engineering at Lyft and was interested in what it would be like to work on a product team.
Stripe is also just super well-known and has a reputation for being a good place for engineers and developers. That was a particular combination that was interesting to me. But someone who wants to work on a lot of AI and machine-learning stuff might not be super interested in a product role at Stripe. So when I get inbound requests for the hot new AI startup, itâs not going to peak my interest as much because thatâs not necessarily where my interests lie.
There are all other kinds of factors, like what size company do you want to work at? Are you interested in a Google-size or a five-person startup?
The company choices Iâve made so far are all pretty on par with each other. Slack, Lyft, and Stripe are all similarly sized, and have similarly sized engineering organizations. Valuations are in a similar realm. They were all pre-IPO when I started working at these companies, which is something that I was particularly looking for.
In the future, that might change. I might look for something completely different. And I think that I probably should at some point just to widen my range of experiences.
But thatâs how I narrow it down. I have a pretty clear idea of what I am looking for when I start a job hunt. And so Iâll filter out based off of those requirements I have.
Youâve mentioned a few types of software engineering? Can you tell me a little more about all the different types?
There are a lot of different types of software engineering. I probably donât even know all of them. Iâm forever learning about new areas where people are innovating.
The basics are front-end, which is more like web development or what you see on your computer screen. Back-end is more like servers and algorithms and things that you donât see as a user but that help power the front-end. And then there are people who are full-stack, who do both of those things.
Thereâs infrastructure engineering, which is building out services, like microservices, servers, monolithic servers, or observability pipelines â things that need to sit underneath the back-end layer in order for it to work. A lot of developer tooling is considered infrastructure, things that keep the upper layers working. Thatâs a lot of what I did at Lyft.
Thereâs machine learning and artificial intelligence engineers. Thereâs data engineering. Thereâs SRE, which is site reliability engineers â they keep the lights on and make sure everythingâs working properly. There are QA engineers, who test the quality of the things that other engineers are building. And they build automated systems in order to test the quality of products. And thereâs mobile engineering â people who build iOS apps, Android apps, which is a whole different kind of skill set.
Anywhere your interests lie, thereâs probably a kind of software engineering that fits that.
Is it challenging to switch between those different types?
I think the most difficult part is just learning the new technology. Hiring managers are pretty open â like if youâve only worked in infrastructure, they are pretty willing to hire you on to a product team or vice versa. That can be good because they have a different perspective than people whoâve only worked in infrastructure.
The biggest thing you have to do is learn the new language and learn the new technologies. And there are a lot of resources in order to learn. There are Udemy courses, books, and online projects or tutorials you can follow to understand how to do something.
I think the parts that are a bit more difficult to learn are maybe AI and machine learning because they require a very specific, more math-based education. Otherwise itâs pretty straightforward to lean into a different area of computer science or software engineering.
If I wanted to become a software engineer, what are the most important skills that I should be developing right now?
Definitely building, testing, and maintaining software is the core skill set. Getting your foot in the door and getting a job is a lot about developing those interview skills, which there are a lot of resources for developing those skills, as well. Iâd say a lot of the skills that people donât really talk about that you need to be a good software engineer are more of the soft skills, like verbal and written communication, organization, and project management skills.
Can you talk a little bit about some of the misconceptions of this career path?
A big misconception is that software engineers just code, which is not true. A lot of my job is writing documentation to explain things to people or communicate or pitch ideas. A lot of it is meetings where we figure out the direction of a particular piece of software or a product. And those all involve a lot of other skills that are not coding.
I think people have this vision of software engineers that weâre in a dark room coding by ourselves all the time, which is the vibe sometimes. Iâm not going to lie. Sometimes thereâs a problem you need to hammer out with code. But a lot of the job is very collaborative and not solo work at all â a lot of planning, being a team player, communicating what youâre doing, and asking questions you might have so that people can help you.
Another piece thatâs huge that people donât really consider is how important mentoring people is in software engineering. That can mean mentoring people who are younger than you or just people who are new to your team. Software engineering is such a team sport, and I think a big skill is making sure that new people who are introduced to whatever it is that youâre working on can work on it, be productive, and be an active member of the team. That involves getting people ramped up, helping them, answering a lot of questions, and being able to communicate your ideas.
Software engineering and the tech industry in general, itâs predominantly white. Itâs predominantly male. Would you mind talking a little bit about what itâs like to navigate an industry like that?
Itâs hard. Itâs definitely a struggle. I have a lot of privilege in that I am able to navigate the field with the school I went to and the jobs Iâve had previously. And even with that, you definitely get people who doubt your skills, doubt your skill set, and undermine your work, which sucks. Itâs hard and not fair and definitely needs to change.
A lot of navigating it, for me, has been my own internal work of staying confident, sure of myself, sure of my skills, my education, and everything that I bring to the table, even if not everyone sees that. Itâs definitely clear that a lot of people, companies, and teams do see the skills that everyone can bring to the table despite their background or the school they went to or company they previously worked at. But depending on the culture of the company, the specific makeup of the company, and your manager, itâs definitely a daily grind to do it. I think itâs more work than the white dude software engineer has to go through to find a team and find a company that will work for you.
One of the things I ask when Iâm vetting companies and teams is, what does diversity look like at the company? How does your company think about or treat diversity and inclusion? Are there other people at the company who look like me who are doing well and feel good? Thatâs definitely a piece of my research. And itâs hard work in and of itself to vet those things and figure those things out. But itâs necessary in order for me to be the best employee or engineer that I can be.
What are some of the other obstacles and challenges of this career path?
It can be different depending on who you are and what you struggle with in particular. For me, I struggle with imposter syndrome. So one of my struggles on a daily basis is just feeling like Iâm doing a good job. It really helps me when people give me feedback at all just so I know how Iâm doing. And also it helps when I get some positive reinforcement.
Because engineering is a space thatâs so male dominated and white male dominated, it often can feel like Iâm not measuring up because I think a lot of people sometimes donât recognize the skills that I have because of my different identity. So staying confident and staying sure of myself has been a particular challenge for me in software engineering.
Thereâs also this notion of the 10x engineer â the engineer who just gets the work done of 10 other engineers and is super productive. That is an ideal that people expect out of engineers. But itâs just not true and not actually attainable, and it can affect work-life balance. Maintaining those boundaries, understanding what youâre able to get done in a day, and knowing that thatâs OK is also something that feeds into imposter syndrome. Itâs something that I have struggled with and that Iâve had to deal with.
What really helps is having a community of people who are doing what youâre doing, either at your company or outside of it, or ideally both, who you can talk to about whatever struggles you have. Because 10 times out of 10, when Iâve asked someone else in my community or in my support group of other software engineers, âHave you struggled with this?â the answer is yes.
And whether they figured out the solution or not, it does feel better to know that other people are dealing with the same things that you are. I would suggest that for any career path, whether it be software engineering or not.  Having your people, having your community, helps with any kind of struggle you may face.
Letâs talk money. What should I expect to get paid in a software engineering role?
It depends on a lot of different factors. Your location â if youâre a software engineer in Alabama, your salary will look different than a software engineer in San Francisco because of the different costs of living. Company size also matters, and what stage of growth theyâre at. The Googles and the Facebooks will have the higher offers. Companies that are maybe pre-IPO and going through a lot of growth, theyâll also have high offers. Companies that are maybe pre-seed startups or seed-stage/Series A startups will have lower salaries. But there are a lot of upsides when you think about equity and stock.
If youâre in one of the coastal locations â San Francisco, New York, LA â some of these larger, more established tech hubs, if you are not making $100,000 out of college, youâre probably being underpaid or could at least find a company that would pay you more. Iâm not sure what that looks like if youâre finding a job in Atlanta, for example. It might look very different.
There are resources online to help you figure out, if you just got an offer, if itâs fair, depending on your location, your level, and the size of the company. I would recommend looking at websites like Levels.fyi and Glassdoor to figure out salary information.
I would also say talk to your friends. People donât talk about how much they make enough, which I think leads to a lot of pay inequity in the industry. I would straight up ask people, âHow much do you make?â When I have seen people realize that they are not being paid fairly, it is because people around them have been honest about what they make and they realize somethingâs not adding up. So I would talk to people and encourage them to be transparent because itâs what needs to happen in order to hold these companies, that a lot of times donât want to pay you fairly, accountable.
What do you love about software engineering?
Itâs the mix of teamwork, collaboration, pair programming, and problem solving with the ability to do a lot of solo work and figure problems out on your own. I enjoy the process of coding and not knowing whatâs really going on, but testing and working through an issue, Googling whatever I need to, and then getting to a solution. That feeling, that gratification of figuring out how to do something or solving a bug, is unmatched.
I enjoy my teams. I enjoy working with people, and I enjoy doing my own thing a little bit. Software engineering definitely allows you to do both and, depending on what kind of company you work at, allows you to do more of one or the other based on what you want. Thereâs a lot of flexibility in that way, too.
Is there anything that you wish youâd known about this career path before you started?
When I started and majored in computer science, I did not know the intensity of interviews and how much you had to study for them. Even if youâre 10 years into your career, if you want to switch jobs, you have to study. I did not know that.
I also wish I would have known all the different kinds of engineering that you can do. When I started my full-time job at Lyft, I didnât really care which part of the stack I was working on. In my head it was kind of all the same. My first two internships were different in what I was working on. But that wasnât what I was really paying attention to at the time. I was just trying to do a good job but not really thinking about, what is it that I want to work on? What are the kinds of problems that I think are interesting and want to solve? Is it infrastructure problems? Is it product problems? Is it front-end? Is it back-end?
For example, I really wish I had invested more time in learning mobile engineering. I could switch into doing that and probably will at some point because I find it interesting. But I just didnât even think about any of those things. It can really change your day-to-day. It can really change the kind of work you do, depending on what kind of team youâre on, what their stack looks like, and what kind of product that they produce. I wish I had known those differences and how those kinds of teams differ in how they operate.
Okay, last question: Who is your career crush?
I really look up to Erica Joy Baker. She is a software engineer. She worked at Slack at the time that I was interning there, and I had known of her before that. She was at Google for a really long time. And now she has transitioned into management and is the Chief Technology Officer for the Democratic Congressional Campaign Committee. I just really like the way that she shows up. I had the opportunity to speak with her a few years ago about her work and about how she approaches her work. She also writes a lot online to give you more insight into how sheâs thinking.
She is someone who brings her whole self to work and uses her unique qualities to lead. I really admire that and would love to exude more of that at work. She seems to be super confident in herself and her skills. And people are super confident in her because of that. And I also admire that.
Also, transitioning into management and moving up that career ladder into a director of engineering is also something thatâs super interesting to me and I think something that I will eventually pursue. I think theyâre solving a higher level of engineering questions about organization and how people work together, which is super interesting to me.
New!
HBR Learning
Career Management Course
Accelerate your career with Harvard ManageMentor®. HBR Learningâs online leadership training helps you hone your skills with courses like Career Management. Earn badges to share on LinkedIn and your resume. Access more than 40 courses trusted by Fortune 500 companies.
What's your next career move? Learn how to set yourself up for success.
Start Course
Learn More & See All Courses
Read more on
Career planning
or related topics
Careers
and
Job search
KA
Kelsey Alpaio
is an Associate Editor at Harvard Business Review.
kelseyalpaio
Tweet
Post
Share
Save
Print
New!
HBR Learning
Career Management Course
Accelerate your career with Harvard ManageMentor®. HBR Learning’s online leadership training helps you hone your skills with courses like Career Management. Earn badges to share on LinkedIn and your resume. Access more than 40 courses trusted by Fortune 500 companies.
What's your next career move? Learn how to set yourself up for success.
Start Course
Learn More & See All Courses
Read more on
Career planning
or related topics
Careers
and
Job search
Partner Center
Diversity
Latest
Magazine
Ascend
Topics
Podcasts
Video
Store
The Big Idea
Data & Visuals
Case Selections
HBR Learning
Subscribe
Explore HBR
The Latest
Most Popular
All Topics
Magazine Archive
The Big Idea
Reading Lists
Case Selections
Video
Podcasts
Webinars
Data & Visuals
My Library
Newsletters
HBR Press
HBR Ascend
HBR Store
Article Reprints
Books
Cases
Collections
Magazine Issues
HBR Guide Series
HBR 20-Minute Managers
HBR Emotional Intelligence Series
HBR Must Reads
Tools
About HBR
Contact Us
Advertise with Us
Information for Booksellers/Retailers
Masthead
Global Editions
Media Inquiries
Guidelines for Authors
HBR Analytic Services
Copyright Permissions
Manage My Account
My Library
Topic Feeds
Orders
Account Settings
Email Preferences
Account FAQ
Help Center
Contact Customer Service
Follow HBR
Facebook
Twitter
LinkedIn
Instagram
Your Newsreader
About Us
Careers
Privacy Policy
Cookie Policy
Copyright Information
Trademark Policy
Harvard Business Publishing:
Higher Education
Corporate Learning
Harvard Business Review
Harvard Business School
Copyright ©
Harvard Business School Publishing. All rights reserved. Harvard Business Publishing is an affiliate of Harvard Business School.


Link: https://www.coursera.org/articles/software-engineer

What Does a Software Engineer Do? | Coursera
Individuals
Business
Campus
Government
ExploreOnline DegreesDegrees Online DegreeExplore Bachelorâs & Masterâs degrees
MasterTrackâ¢Earn credit towards a Masterâs degree
University CertificatesAdvance your career with graduate-level learning
Find your New Career
Browse
Top Courses
Log In
Join for Free
Individuals
Business
Campus
Government List
Articles
Development What Does a Software Engineer Do?What Does a Software Engineer Do?Written by Coursera â¢ Updated on Oct 31, 2022 Software engineers design and create computer systems and applications to solve real-world problems.
Software engineers, sometimes called software developers, create software for computers and applications. If youâre an analytical thinker who enjoys solving problems and making digital products easier to use, you may find a career as a software engineer rewarding. What is software engineering? Software engineering is the branch of computer science that deals with the design, development, testing, and maintenance of software applications. Software engineers apply engineering principles and knowledge of programming languages to build software solutions for end users.
Software engineer tasks and responsibilities Successful engineers know how to use the right programming languages, platforms, and architectures to develop everything from computer games to network control systems. In addition to building their own systems, software engineers also test, improve, and maintain software built by other engineers.Â
"I get excited about anything that involves solving problems, whether it be figuring out how to optimize a certain part of an existing application or entirely coming up with new applications to solve certain needs," says Murtadha Al-Tameemi, a software engineer at Meta. "Problems in general stimulate my brain and give me a great sense of satisfaction."
In this role, your day-to-day tasks might include:
Designing and maintaining software systems
Evaluating and testing new software programs
Optimizing software for speed and scalability
Writing and testing code
Consulting with clients, engineers, security specialists, and other stakeholders
Presenting new features to stakeholders and internal customers
professional certificate IBM DevOps and Software Engineering Launch your DevOps and Software Engineering Career. Master DevOps, Agile, Scrum, CI/CD and Cloud Native with hands-on job-ready skills.
4.7
(1,186 ratings)
17,124 already enrolled
BEGINNER level
Learn More
Average time: 15 month(s)
Learn at your own pace
Skills you'll build:
Cloud Native, Devops, CI/CD, Application development, Software Engineering, Test-Driven Development, Behavior-Driven Development, Iaas PaaS Saas, Hybrid Multicloud, Cloud Computing, Agile Software Development, Scrum Methodology, Zenhub, Kanban, Sprint Planning, Shell Script, Bash (Unix Shell), Linux, Distributed Version Control (DRCS), open source, Version Control Systems, Github, Git (Software), Data Science, Python Programming, Data Analysis, Pandas, Numpy, Artificial Intelligence (AI), Kubernetes, Docker, Containers, Openshift, Serverless Computing, Microservices, Function As A Service, Cloud Applications, Test Case, Software Testing, Automated Testing, Continuous Integration, Continuous Development, Automation, Infrastructure As Code, Open Web Application Security Project (OWASP), Observability, security, Monitoring, logging, agile Systems developer vs. application developer Software engineers will usually fall into one of two categories, systems developers or application developers.Â
As a systems developer (sometimes called a backend engineer), youâll build things like computer systems and networks that front-end (user-facing) applications will need. You can do this by:
Ensuring that different types of software programs communicate with each other on one platform
Creating and enforcing IT standards within an infrastructureÂ
Maintaining documentation of IT systemsÂ
Updating to new technologies as needed
Collaborating with development teams, senior systems architects, and data science professionalsÂ
Working as an application developer is more client-focused. You may work on either the front or back end of the system, designing software that the end user will interact with. Tasks might include:
Developing applications for iOS, Android, Windows, or other operating systems
Conducting an analysis of requirements and tweaking software as needed
Releasing software updates
Working with graphic designers, customer service staff, project managers, and other customer-facing departmentsÂ
professional certificate IBM Full Stack Software Developer Kickstart your career in application development. Master Cloud Native and Full Stack Development using hands-on projects involving HTML, JavaScript, Node.js, Python, Django, Containers, Microservices and more. No prior experience required.
4.5
(2,377 ratings)
20,950 already enrolled
BEGINNER level
Learn More
Average time: 14 month(s)
Learn at your own pace
Skills you'll build:
Cloud Native, Devops, Iaas PaaS Saas, Hybrid Multicloud, Cloud Computing, Cascading Style Sheets (CSS), HTML, Git (Software), JavaScript, Cloud Applications, Distributed Version Control (DRCS), open source, Version Control Systems, Github, NoSQL, Cloud Infrastructure, Json, Web Development, back-end development, Server-side JavaScript, express, Computer Science, Kubernetes, Docker, Containers, Openshift, Data Science, Python Programming, Data Analysis, Pandas, Numpy, Application development, Artificial Intelligence (AI), Django (Web Framework), Database (DBMS), SQL, Serverless Computing, Microservices, Function As A Service, Web Application, Node.Js
Read more: What Is an iOS App Developer? A 2022 Guide Why should I pursue a career as a software engineer? If you enjoy solving problems and have strong analytical skills, a career as a software engineer can be both fun and challenging. And as technology continues to evolve, the need for software developers continues to grow much faster than the national average [1].Â
Choosing a career as a software engineer gives you opportunities to work in many different industries and fields, as nearly all businesses use software. Whether you enjoy finances, entertainment, sports, real estate, or some other industry, thereâs a good chance there are jobs for software engineers.Â
Itâs also a career that allows flexibility in where you work. You may be able to work from home for companies in other states or even other countries. The important thing is that youâre able to meet deadlines and deliver a project on time. Software engineer salary Working as a software engineer can be challenging and engaging, and it also tends to pay well. The annual median salary for a software engineer in 2021 was $109,020, according to the US Bureau of Labor Statistics [1]. Jobs in software publishing tend to draw the biggest salaries.Â  Career paths in software engineering Once you become a software engineer, you can choose which path you want to take (applications or systems) and how far you want to progress with it. You can decide to advance toward a role as a senior software engineer, or you can continue gaining certifications and experience to advance to roles like project manager or systems manager. As a software engineer, you have both flexibility and mobility to create the career experience that is most appealing to you.Â
specialization Applied Software Engineering Fundamentals Build the foundation of your career in Software. Develop hands-on experience with Git, GitHub, Linux, and Python, and learn the fundamentals of Software Engineering.
4.8
(122 ratings)
1,953 already enrolled
BEGINNER level
Learn More
Average time: 5 month(s)
Learn at your own pace
Skills you'll build:
Linux, Software Design and Architecture, Python Programming, Git and GitHub, Software Development Lifecycle (SDLC), Basic programming concepts, Careers in software engineering, Programming languages and frameworks, The Software Development Lifecycle (SDLC), Software Architecture, Shell Script, Bash (Unix Shell), Distributed Version Control (DRCS), open source, Version Control Systems, Github, Git (Software), Data Science, Data Analysis, Pandas, Numpy, Application development, Artificial Intelligence (AI) How to become a software engineerÂ  Getting a job as a software engineer typically involves building the right technical and workplace skills. Some jobs might also require a certain degree or certification to validate your skills. However, there are many ways to enhance your skill set. "Although I did have a formal education, taking online classes on how to build mobile apps, doing internships where I work on projects at a company, and trying to build my own side projects was the most helpful," says Laila Rizvi, a software engineer at Meta.
Letâs take a closer look at some of the requirements for becoming a software engineer. Software engineering skills As a software developer, youâll be designing software to help solve problems that real people face. This requires a combination of technical know-how and solid communication skills. If youâre considering this as a career, here are some skills you should focus on building:
Coding languages like Python, Java, C, C++, or Scala
Object-oriented programming
Database architecture
Agile and Scrum project management
Operating systems
Cloud computing
Version control
Design testing and debugging
Attention to detail
Read more: How to Become a Software Developer | 9 Tips Software engineering certifications By earning a certification, you can build new skills and validate those skills to potential employers. Some jobs might require a specific certification, so itâs a good idea to research some job listings of roles youâre interested in before preparing for a certification exam. Here are some common options:
Certified Software Development Professional (CSDP)
Certified Software Engineer
C Certified Professional Programmer (CLP)
C++ Certified Professional Programmer (CPP)
AWS Certified Developer
Microsoft Certified: Azure Fundamentals
specialization Microsoft Azure Fundamentals AZ-900 Exam Prep Launch your career in cloud computing. Prepare for the Microsoft AZ-900 certification exam.
4.6
(1,444 ratings)
41,006 already enrolled
BEGINNER level
Learn More
Average time: 5 month(s)
Learn at your own pace
Skills you'll build:
Describe the benefits of cloud computing in Microsoft Azure, Explain core cloud concepts, Describe core Microsoft Azure services, Describe core Microsoft Azure architecture components, Describe Microsoft Azure management tools, Choose the correct Microsoft Azure Artificial Intelligence service to address different kinds of business challenges, Choose the best Microsoft Azure IoT service for a given business scenario, Choose the best Microsoft Azure software development process tools and services for a given business scenario, Describe Microsoft Azure security solutions, Understand what it means to build a cloud governance strategy in Microsoft Azure, Estimate and manage your cloud spend in Microsoft Azure, Describe how Microsoft Azure adheres to common regulatory and compliance standards, Explain how Microsoft Azure's service-level agreements (SLAs) can impact your application design decisions, Secure access to cloud resources in Microsoft Azure, AZ-900 exam preparation, Practice certification exams Do I need a degree to be a software engineer? A bachelorâs degree in computer science or a related degree program is the most common entry-level requirement for software engineers. But a degree isnât the only path toward a development job. According to a 2020 Stack Overflow survey, 16 percent of surveyed software developers believe that formal education is not at all important or necessary. Another 23 percent believe itâs only somewhat important [2]. Get started with Coursera Take the next step in your career as a software engineer by polishing up some essential skills with some professional certificates from industry leader, Meta. With Meta Front-End Developer Professional Certificate and Meta Back-End Developer Professional Certificate gain hands-on experience with industry tools.
professional certificate Meta Front-End Developer Launch your career as a front-end developer. Build job-ready skills for an in-demand career and earn a credential from Meta. No degree or prior experience required to get started.
4.7
(3,725 ratings)
64,099 already enrolled
BEGINNER level
Learn More
Average time: 7 month(s)
Learn at your own pace
Skills you'll build:
Cascading Style Sheets (CSS), HTML, UI/UX design, React, JavaScript, Web Development Tools, User Interface, Front-End Web Development, HTML and CSS, Responsive Web Design, Test-Driven Development, Object-Oriented Programming (OOP), Linux, Web Development, Bash (Unix Shell), Github, Version Control, Debugging, React (Web Framework), Web Application, Application development, Web Design, User Experience (UX), Accessibility
professional certificate Meta Back-End Developer Launch your career as a back-end developer. Build job-ready skills for an in-demand career and earn a credential from Meta. No degree or prior experience required to get started.
4.7
(1,447 ratings)
33,517 already enrolled
BEGINNER level
Learn More
Average time: 8 month(s)
Learn at your own pace
Skills you'll build:
Cloud Hosting, Application Programming Interfaces (API), Python Programming, Data Structure, Computer Programming, Django (Web Framework), Linux, Web Development, Bash (Unix Shell), Github, Version Control, MySQL, Database (DBMS), database administration, Debugging, Authentication and authorization, REST APIs, Filtering and ordering, Serializers and deserializers
Article sources1.Â  US Bureau of Labor Statistics. "Software Developers, Quality Assurance Analysts, and Testers, https://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm." Accessed October 21, 2022. 2.Â  Stack Overflow. "2020 Developer Survey, https://insights.stackoverflow.com/survey/2020#developer-profile-formal-education-importance-professional-developers3." Accessed October 21, 2022. View all sources
Written by Coursera â¢ Updated on Oct 31, 2022 This content has been made available for informational purposes only. Learners are advised to conduct additional research to ensure that courses and other credentials pursued meet their personal, professional, and financial goals. Learn without limitsJoin for Free
Coursera FooterStart or advance your career Google Data Analyst
Google Project Management
Google UX Design
Google IT Support
IBM Data Science
IBM Data Analyst
IBM Data Analytics with Excel and R
IBM Cybersecurity Analyst
IBM Data Engineering
IBM Full Stack Cloud Developer
Facebook Social Media Marketing
Facebook Marketing Analytics
Salesforce Sales Development Representative
Salesforce Sales Operations
Intuit Bookkeeping
Preparing for Google Cloud Certification: Cloud Architect
Preparing for Google Cloud Certification: Cloud Data Engineer
Launch your career
Prepare for a certification
Advance your career Browse popular topics Free Courses
Learn a Language
Python
Java
Web Design
SQL
Cursos Gratis
Microsoft Excel
Project Management
Cybersecurity
Human Resources
Data Science Free Courses
Speaking English
Content Writing
Full Stack Web Development
Artificial Intelligence
C Programming
Communication Skills
Blockchain
See all courses Popular courses and articles Skills for Data Science Teams
Data Driven Decision Making
Software Engineering Skills
Soft Skills for Engineering Teams
Management Skills
Marketing Skills
Skills for Sales Teams
Product Manager Skills
Skills for Finance
Popular Data Science Courses in the UK
Beliebte Technologiekurse in Deutschland
Popular Cybersecurity Certifications
Popular IT Certifications
Popular SQL Certifications
Marketing Manager Career Guide
Project Manager Career Guide
Python Programming Skills
Web Developer Career Guide
Data Analyst Skills
Skills for UX Designers Earn a degree or certificate online MasterTrackÂ® Certificates
Professional Certificates
University Certificates
MBA & Business Degrees
Data Science Degrees
Computer Science Degrees
Data Analytics Degrees
Public Health Degrees
Social Sciences Degrees
Management Degrees
Degrees from Top European Universities
Master's Degrees
Bachelor's Degrees
Degrees with a Performance Pathway
Bsc Courses
What is a Bachelor's Degree?
How Long Does a Master's Degree Take?
Is an Online MBA Worth It?
7 Ways to Pay for Graduate School
See all certificates Coursera About
What We Offer
Leadership
Careers
Catalog
Coursera Plus
Professional Certificates
MasterTrackÂ® Certificates
Degrees
For Enterprise
For Government
For Campus
Become a Partner
Coronavirus Response Community Learners
Partners
Developers
Beta Testers
Translators
Blog
Tech Blog
Teaching Center More Press
Investors
Terms
Privacy
Help
Accessibility
Contact
Articles
Directory
Affiliates
Modern Slavery Statement Learn Anywhere
Â© 2022 Coursera Inc. All rights reserved.


Link: https://www.fullstackacademy.com/blog/what-do-software-engineers-do

What Do Software Engineers Do? Job Types & Training
Skip to main content
Program Finder
Blog
Programs
Programs Navigation
Coding
Full-Time Coding
Full-Time Software Engineering Bootcamp
Part-Time Coding
Part-Time Software Engineering Bootcamp
Beginner Coding
Beginner Web Development Bootcamp
Online Coding
Online Coding Bootcamp
Women in Tech
Coding Bootcamp for Women and Non-Binary Students
Data Analytics
Data
Data Analytics Bootcamp
Cybersecurity
Cyber
Cybersecurity Bootcamp
Product Management
Product Management
Product Management Bootcamp
Bootcamps for NYC Residents
Future Code: Diversifying the Future of Web Development
Data Analyst Training Accelerator (DATA)
Start Your Application
Prep Courses
Prep Courses Navigation
Coding
Intro to Coding
Bootcamp Prep
Cyber
Intro to Cyber
Intermediate Cyber Prep
Product Management
Intro to Product Management
Admissions
Admissions Navigation
Admissions Process
Events
FAQs
Tuition & Dates
Tuition & Dates Navigation
Tuition & Dates
Payment Options
Why Fullstack
Why Fullstack Navigation
Hiring Outcomes
Student Stories
Reviews
About
About Navigation
About Fullstack Academy
Careers
Partner With Us
For University Partners
For Employer Partners
Apply
06.16.2021
Job & Career Advice
Coding Bootcamp FAQs
Industry Listicles
What Do Software Engineers Do? Job Types, Training, and Salary
By The Fullstack Academy Team
This blog post was updated in February 2022.
Anytime you visit a webpage or use an internet-powered application, youâre engaging with the end result of a software engineerâs work.
What is a Software Engineer?
Software engineers are computer science professionals who use knowledge of engineering principles and programming languages to build software products, develop computer games, and run network control systems.
According to the US Department of Labor, there were well over 1 million people employed as software developers in 2020.
As more and more of us rely on smart devices, the number of software developers will only increase, with job outlook predicted to grow at 22 percent by 2030.
To help you learn more about careers in software development, this article will cover the following topics:
What Does a Software Engineer Do and Types of Software Engineers
Software Engineering Jobs and Salaries
How to Become a Software Engineer What Does a Software Engineer Do & Types of Software Engineers The software engineering field is broad. Developers have different sets of technical expertise, from building computer information systems to maintaining network security to creating customer-facing web pages.
There are two primary types of software engineers: applications software developers and systems software developers. Applications Software DevelopersOverviewClient-focusedDesign software for the end user to interact withDevelop applications for iOS, Android, Windows, Linux, and moreConduct requirements analysisTweak software and release updates regularlyFront-end or back-end?BothWho they work withGraphic designers, project managers, marketers, and customer success staffSystems Software DevelopersOverviewBuild operating systems and networks for user-facing applicationsResponsible for both the hardware and software needsIntegrate disparate software products onto one platformOften serve as general IT managers or systems architectsDesign and enforce IT standardsMaintain IT documentation and update to new technologiesFront-end or back-end? Mostly back-end Who they work with Data science professionals, senior systems architects, development teams, and senior management Software Engineering Jobs and Salaries Thanks to strong industry demand and their own technical expertise, skilled software engineers on both the applications and the systems sides are compensated well for the value they deliver. The Bureau of Labor Statistics lists the median annual salary for applications developers at $105,310 and at $110,140 for systems developers.
Of course, applications and systems developer jobs are not the only two positions available in the field of software engineering. Other common roles include mobile developers, applications architects, quality assurance analysts, and database administrators. How to Become a Software Engineer Completing a two- or four-year computer science degree has, until recently, been the only path to successfully launching a career as a software engineer. Other math- and science-related degrees in fields like information systems, electronics, and civil engineering or even community college courses have also enabled people to transition into software development.
But a formal degree or some college coursework are no longer the only paths to becoming a web developer. Coding bootcamps are an increasingly popular option for those who want to quickly transition into software engineering.
Coding bootcamps are intensive eight- to 30-week programs that focus on practical, language-specific programming skills but also typically cover information technology fundamentals. Most bootcamps are designed to prepare students to enter the IT job market ASAP and focus on the skills most in-demand within online or in a certain geography (check out these online coding bootcamps).
Before you choose a program, consider which type of job you are looking for and which language you should therefore learn. Based in New York? Check out these 10 Free Coding Classes in NYC.
Once your training is complete, youâll need to build up your portfolio and touch up your software engineer rÃ©sumÃ©. Every Industry Needs Software With the proper qualifications, a software engineer can work in almost any industry with any type of organization. While IT firms lead the pack in hiring software developers, government agencies, nonprofit organizations, healthcare facilities, transit and logistics companies, and every other business needs software.
Curious about which programming language to learn? Here are the best recent programming languages.
Previous
04.15.2021
How to Get a Job in Cybersecurity
Read More
Next
09.08.2021
4 Reasons Why Winter Session Coding Bootcamp is Worth It
Read More
Programs
Full-Time Coding
Part-Time Coding
Beginner Coding
Woman in Tech
Cybersecurity Analytics
Data Analytics
Product Management
About Us
About Fullstack Academy
Careers
For University Partners
For Employer Partners
Fullstack Academy HQ
5 Hanover Square, Floor 6
New York, NY 10004
Copyright © 2022, Fullstack Academy, LLC.
Fullstack Academy is licensed by the New York State Education Department.
Regulatory Information
Privacy Policy
Browser Incompatible
You're using an outdated browser. Please use a modern, updated browser to use this site.
Install Firefox
Install Chrome
Install Edge


Link: https://hub.packtpub.com/18-people-in-tech-every-programmer-and-software-engineer-needs-to-follow-in-2019/

18 people in tech every programmer and software engineer needs to follow in 2019 | Packt Hub
Subscription
News
Tutorials
Search
Packt Hub
Subscription
News
Tutorials
Web Development
Front-End Web Development
Full-Stack Web Development
Server-Side Web Development
Web Design
CMS & E-Commerce
Data
Past Issues
Tutorials
News
Interviews
Podcasts
Mobile
Past Issues
Tutorials
News
Interviews
Podcasts
Programming
Application Development
Languages
Design Patterns
High Performance
Microservices
Cloud & Networking
DevOps
Cloud Computing
Networking
Servers
Virtualization
Security
Penetration Testing
Cybersecurity
Cryptography
Forensics
Malware Analysis
Game Development
3D Game Development
2D Game Development
Game AI
Game Design
Game Optimization
IoT & Hardware
Home Automation
Robotics
Single Board Computers
3D Printing
Embedded Systems
Sign in
Welcome! Log into your account
your username
your password
Forgot your password? Get help
Password recovery
Recover your password
your email
A password will be e-mailed to you.
Home
Cloud & Networking
DevOps
18 people in tech every programmer and software engineer needs to follow...
Cloud & Networking
DevOps
Programming
Insights
News
18 people in tech every programmer and software engineer needs to follow in 2019
By
Richard Gall
-
January 2, 2019 - 10:03 am 7746
0
8 min read After a tumultuous 2018 in tech, it’s vital that you surround yourself with a variety of opinions and experiences in 2019 if you’re to understand what the hell is going on.
While there are thousands of incredible people working in tech, I’ve decided to make life a little easier for you by bringing together 18 of the best people from across the industry to follow on Twitter.
From engineers at Microsoft and AWS, to researchers and journalists, this list is by no means comprehensive but it does give you a wide range of people that have been influential, interesting, and important in 2018.
(A few of) the best people in tech on Twitter
April Wensel (@aprilwensel)
April Wensel is the founder of Compassionate Coding, an organization that aims to bring emotional intelligence and ethics into the tech industry. In April 2018 Wensel wrote an essay arguing that “it’s time to retire RTFM” (read the fucking manual). The essay was well received by many in the tech community tired of a culture of ostensible caustic machismo and played a part in making conversations around community accessibility an important part of 2018.
Watch her keynote at NodeJS Interactive:
Liz Fong-Jones (@lizthegrey)
Liz Fong-Jones is an SRE and Dev Advocate at Google Cloud Platform, but over the last couple of years she has become an important figure within tech activism. First helping to create the NeverAgain pledge in response to the election of Donald Trump in 2016, then helping to bring to light Google’s fraught internal struggle over diversity, Fong-Jones has effectively laid the foundations for the mainstream appearance of tech activism in 2018.
In an interview with Fast Company, Fong-Jones says she has accepted her role as a spokesperson for the movement that has emerged, but she’s committed to helping to “equipping other employees to fight for change in their workplacesâwhether at Google or not âso that Iâm not a single point of failure.”
Ana Medina (@Ana_M_Medina)
Ana Medina is a chaos engineer at Gremlin. Since moving to the chaos engineering platform from Uber (where she was part of the class action lawsuit against the company), Medina has played an important part in explaining what chaos engineering looks like in practice all around the world.
But she is also an important voice in discussions around diversity and mental health in the tech industry – if you get a chance to her her talk, make sure you take the chance, and if you don’t, you’ve still got Twitter…
Sarah Drasner (@sarah_edo)
Sarah Drasner does everything. She’s a Developer Advocate at Microsoft, part of the VueJS core development team, organizer behind Concatenate (a free conference for Nigerian developers), as well as an author too.
Some thoughts as we carry into the new year:– It usually takes a few tries at something to improve– Respect is earned, not given– You don't have do everything at once, small changes over time can add up– Pay more attention to a person's actions then what is said about them
— Sarah Drasner (@sarah_edo) December 30, 2018
Although Drasner specializes in front end development and JavaScript, she’s a great person to follow on Twitter for her broad insights on how we learn and evolve as software developers. Do yourself a favour and follow her.
Mark Imbriaco (@markimbriaco)
Mark Imbriaco is the technical director at Epic Games. Given the company’s truly, er, epic year thanks to Fortnite, Imbriaco can offer an insight on how one of the most important and influential technology companies on the planet are thinking.
Corey Quinn (@QuinnyPig)
Corey Quinn is an AWS expert. As the brain behind the Last Week in AWS newsletterÂ and the voice behind the Screaming in the Cloud podcast (possibly the best cloud computing podcast on the planet), he is without a doubt the go-to person if you want to know what really matters in cloud.
The range of guests that Quinn gets on the podcast is really impressive, and sums up his online persona: open, engaged, and always interesting.
Yasmine Evjen (@YasmineEvjen)
Yasmine Evjen is a Design Advocate at Google. That means that she is not only one of the minds behind Material Design, she is also someone that is helping to demonstrate the importance of human centered design around the world.
As the presenter of Centered, a web series by the Google Design team about the ways human centered design is used for a range of applications. If you haven’t seen it, it’s well worth a watch.
Suz Hinton (@noopkat)
Suz Hinton works on IoT programs at Microsoft. That’s interesting in itself, but when she’s not developing fully connected smart homes (possibly), Hinton also streams code tutorials on Twitch (also as noopkat).
Chris Short (@ChrisShort)
If you want to get the lowdown on all things DevOps, you could do a lot worse than Chris Short. He boasts outstanding credentials – he’s a CNCF ambassador, has experience with Red Hat and Ansible – but more importantly is the quality of his insights.
A great place to begin is with DevOpsish, a newsletter Short produces, which features some really valuable discussions on the biggest issues and talking points in the field.
Dan Abramov (@dan_abramov)
Dan Abramov is one of the key figures behind ReactJS. Along withÂ @sophiebits,@jordwalke, andÂ @sebmarkbage, Abramov is quite literally helping to define front end development as we know it.
If you’re a JavaScript developer, or simply have any kind of passing interest in how we’ll be building front ends over the next decade, he is an essential voice to have on your timeline.
As you’d expect from someone that has helped put together one of the most popular JavaScript libraries in the world, Dan is very good at articulating some of the biggest challenges we face as developers and can provide useful insights on how to approach problems you might face, whether day to day or career changing.
Emma Wedekind (@EmmaWedekind)
As well as working at GoTo Meeting, Emma Wedekind is the founder of Coding Coach, a platform that connects developers to mentors to help them develop new skills.
This experience makes Wedekind an important authority on developer learning. And at a time when deciding what to learn and how to do it can feel like such a challenging and complex process, surrounding yourself with people taking those issues seriously can be immensely valuable.
Jason Lengstorf (@jlengstorf)
Jason Lengstorf is a Developer Advocate at GatsbyJS (a cool project that makes it easier to build projects with React).
His writing – on Twitter and elsewhere – is incredibly good at helping you discover new ways of working and approaching problems.
Bridget Kromhout (@bridgetkromhout)
Bridget Kromhout is another essential voice in cloud and DevOps. Currently working at Microsoft as Principal Cloud Advocate, Bridget also organizes DevOps Days and presents the Arrested DevOps podcast with Matty Stratton and Trevor Hess.
Follow Bridget for her perspective on DevOps, as well as her experience in DevRel.
Ryan Burgess (@burgessdryan)
Netflix hasn’t faced the scrutiny of many of its fellow tech giants this year, which means it’s easy to forget the extent to which the company is at the cutting edge of technological innovation.
This is why it’s well worth following Ryan Burgess – as an engineering manager he’s well placed to provide an insight on how the company is evolving from a tech perspective.
His talk at Real World React on A/B testing user experiences is well worth watching:
Anil Dash (@anildash)
Okay, so chances are you probably already follow Anil Dash – he does have half a million followers already, after all – but if you don’t follow him, you most definitely should.
Dash is a key figure in new media and digital culture, but he’s not just another thought leader, he’s someone that actually understands what it takes to actually build this stuff. As CEO of Glitch, a platform for building (and ‘remixing’) cool apps, he’s having an impact on the way developers work and collaborate.
6 years ago, Dash wrote an essay called ‘The Web We Lost‘. In it, he laments how the web was becoming colonized by a handful of companies who built the key platforms on which we communicate and engage with one another online. Today, after a year of protest and controversy, Dash’s argument is as salient as ever – it’s one of the reasons it’s vital that we listen to him.
Jessie Frazelle (@jessfraz)
Jessie Frazelle is a bit of a superstar. Which shouldn’t really be that surprising – she’s someone that seems to have a natural ability to pull things apart and put them back together again and have the most fun imaginable while doing it.
Formerly part of the core Docker team, Frazelle now works at GitHub, where her knowledge and expertise is helping to develop the next Microsoft-tinged chapter in GitHub’s history.
I was lucky enough to see Jessie speak at ChaosConf in September – check out her talk:
Rachel Coldicutt (@rachelcoldicutt)
Rachel Coldicutt is the CEO of Doteveryone, a think tank based in the U.K. that champions responsible tech. If you’re interested in how technology interacts with other aspects of society and culture, as well as how it is impacting and being impacted by policymakers, Coldicutt is a vital person to follow.
Kelsey Hightower (@kelseyhightower)
Kelsey Hightower is another superstar in the tech world – when he talks, you need to listen. Hightower currently works at Google Cloud, but he spends a lot of time at conferences evangelizing for more effective cloud native development.
.@kelseyhightowerâs #KubeCon demo showed us– docker as a compiler– what multicloud really looks like– what serverless really looks like– what FaaS really looks like
But most of all he nailed the human element. And reminded us of the big picture. A brilliant storyteller.
— Matt Rickard (@mattrickard) December 13, 2018
If you’re interested in anything infrastructure or cloud related, you need to follow Kelsey Hightower.
Who did I miss?
That’s just a list of a few people in tech I think you should follow in 2019 – but who did I miss? Which accounts are essential? What podcasts and newsletters should we subscribe to?
Share
Facebook
Twitter
Linkedin
Richard Gall Co-editor of the Packt Hub. Interested in politics, tech culture, and how software and business are changing each other.
MobilePro
Past issues
Tutorials
News
Interviews
Podcasts
datapro
Past issues
Tutorials
News
Interviews
Podcasts
Programming
Application Development
Languages
Design patterns
High performance
Microservices
Subscribe to our newsletter
Monthly digest of what's new and exciting from us.
JOIN
ApocryphTechnology news, insights and tutorials from Packt
Â© 2022 Company, Inc. All rights reserved.
Facebook
Instagram
Twitter


Link: https://goremotely.net/blog/how-many-software-engineers-are-there/

New Intel - How Many Software Engineers Are There in 2022?
Find a Job
Blog
Post a Job
Find a Job
Blog
Post a Job
Blog
New Intel - How Many Software Engineers Are There in 2022?
New Intel - How Many Software Engineers Are There in 2022?
Written by
Ana Djurovic
Last Updated
January 28, 2022
Have you ever found yourself wondering just how many software engineers are there in the US? And if this is a solid career choice? Who are these software developers, and where are they based?
If so, youâre not alone, as many people wonder the same thing. Our software engineer statistics have the answers to all of these questions - and more.
Letâs dive right in.
Spectacular Software Development Statistics
The US is home to more than 4.4 million software developers.
88% of software engineers are male.
There are 1,365,500 software developer jobs available.
Employment for software developers is expected to grow by 21%.
The employment rate amongst software developers is 87%.
The demand for blockchain engineers increases by 517% every year.
Samsung alone employs 40,506 operations software engineers.
In 2017, there were less than 50,000 Computer Science graduates and over 500,000 open positions.
Stats on How Many Software Engineers Are there in the US?
And what countries should the US be keeping its eye on to make sure its talent remains on their turf?
Letâs find out.
1. The US has more than 4.4 million software developers.
Itâs estimated that more than 4.4 million software developers call the US home. Software engineer statistics show that this makes the US home to the most software engineers. But not for longâ¦
2. India will overtake the USâs number of software developers by 2023.
By the time 2023 is over, India will have the biggest concentration of software developers. Back in 2017, India had around 2.75 million. But by 2023, this number will skyrocket to 5.2 million.
3. 837,000 devs are based in Germany.
Europe is home to a bunch of software developers, too! If you were wondering how many software engineers are there in Europe, hereâs the data: more than 813,000 live and work in the UK, 467,454 are based in France, and 368,291 get their development done in Russia.
4. Chinaâs software developer industry is growing at 6% to 8%.
Other countries may be ahead, but no country's pool of software developer talent is growing as fast as Chinaâs.
How many developers are there in the world? Well, youâll have to make it all the way to the end of this article to find out. We like keeping you on your toes like that.
US Software Engineering Demographics
Now that we know how many software engineers are in the US, itâs time to take a closer look at who these people are.
5. 89% of software engineers are men.
When it comes to the number of male vs female software engineers, women sure do get the short end of the stick. In fact, women make up only 11% of the entire software engineering workforce.
6. 41% of software engineers are white.
Software engineer race demographics are an interesting topic since many races are underrepresented. But still, we like the inclusivity and hope to see it continue. The bulk (41%) of engineers are white, 24% are South Asian, 12% are East Asian, 9% are âother,â 6% are Hispanic, 5% are black, and 3% are Arab.
7. 71% of software developers are married.
Why is it surprising to discover that over two-thirds of software developers are married? Perhaps it has something to do with the mediaâs depiction of software developers being skinny, pale, greasy-haired computer nerds with a fear of sunlight and terrible social skills.
Clearly, thatâs not the case.
8. The average age of software developers is 43.1 years.
You may think that software engineering is a young personâs game, but the average age is actually 43.1 years. The most common ages for people in this field are 30 and 34 years of age.
US Software Developer Employment Statistics
Now that you know a little more about the US software engineering demographics, letâs take a look at the job outlook of these people by diving into these US software developer employment statistics.
9. Employment for software developers is expected to grow by 21%.
According to software engineer labor statistics, the employment outlook for 2018 to 2028 is growing at a steady rate of 21% which is MUCH faster than average across a multitude of industries.
10. There are 1,365,500 software developer jobs.
In 2018, there were a whopping 1,365,500 software developer jobs available. And in the period from 2018 to 2028, this number is set to increase by 284,100.
11. 78% of software engineers change jobs for higher compensation.
The question of âHow often do software engineers change jobs?â is tough to answer, as it varies from person to person. What we can tell you is WHY they would want to leave. Close to eight in ten would change jobs for higher compensation. Other reasons include growth opportunities, location and commute, company culture, as well as not enjoying the type of work they do.
12. The employment rate among software developers is 87%.
If you ever wonder whether or not a career in software development or engineering is a safe bet, consider the fact that the vast majority of all software developers are employed.
But just where are they employed?
US Software Engineers Hubs Statistics
What are the states with the highest number of programmers? What are the best cities for software engineers in US? Are certain areas better than others?
So many questions, so little time!
13. California is home to 628,414 programmers.
California is one of the best USA IT hubs. The states with the highest number of programmers are California, Texas (324,717), New York (218,041), and Virginia (204,699), also including remote programming jobs and positions.
Now that we know the states with the highest number of programmers, letâs discover the best cities for software engineers in US.
14. Seattle is the best city for software engineers.
Seattle, WA, is undoubtedly amongst the best cities for software engineers in US. With big tech companies like Microsoft, Salesforce, Adobe, and DocuSign driving the industry at a rate of 47.7%, itâs easy to see why.
15. The San Jose tech industry is growing at 79.6%.
The number of tech jobs in San Jose has grown by 80% in the last decade, and the industry is currently growing at 79.6%, making it another one of the best cities for software engineers in US.
16. Dallas is the 11th best-paying city for software engineers.
Dallas is one of the states with the highest density of programmers. But while many choose to settle there, itâs only the 11th best-paying city for software engineers.
Software Developer Shortage Statistics
As you may know, there is a shortage of software developers. How severe is this shortage? Weâll let these software developer shortage statistics and general developer talent facts answer this one.
17. There are 5 jobs for every 1 software developer.
Jeez! Itâs pretty clear that there is a massive supply and demand problem when it comes to software developers.
And thatâs not all:
18. The demand for blockchain engineers increases by 517% every year.
Year over year the demand for software engineers increases massively. The latest startup statistics indicated that the demand for software engineers in the blockchain field is particularly intense.
19. In 2017, there were less than 50,000 Computer Science graduates and over 500,000 open positions.
With less than 50,000 graduates and more than 500,00 positions that need filling, itâs clearly a sellerâs market, not a buyerâs market.
When we average things out:
There are less than 30,000 Computer Science students who graduate each year. At that rate it will take 8 years to fill the open positions available today.
20. It takes an average of 35 days to hire a software engineer.
Maybe one of the reasons we find ourselves in a software developer shortage is because it takes over a month to hire one.
Most Popular Software Engineering Fields
So, just what are the software engineers who form part of the workforce up to these days?
Letâs take a look at the most popular software engineering fields that employ a large portion of qualified professionals.
21. There are 20 million registered iOS developers.
Mobile application development sure does keep developers busy. On the App Store alone, there are 20 million software developers who cater to the 500 million app users who visit the Store weekly.
22. Samsung alone employs 40,506 operations software engineers.
This is huge! In contrast, Google employs only 18,593 people spread across its research and development sectors.
23. There are approximately 421,300 jobs for computer systems software engineers.
These jobs are spread out across various industries. Computer services provide the bulk of jobs (31%), the manufacturing industry offers 19%, the finance and insurance sector employs 6%, and the remainder is made up of software publishers and engineering services.
24. There are 67,180 computer hardware engineers.
While this job may not be the most popular, there are currently 64,400 jobs available for computer hardware engineers.
How Much Software Developers Make in the US
Have you been wondering how much software developers make in the US? Or if thereâs a pay gap between male vs female software engineers? And if working in an office or from home has an impact on salary?
Letâs find out.
25. The median pay for software developers is $105,590 per year.
In 2018 the software engineer average salary was $105,590 per year or $50.77 per hour. Not bad at all, is it?
26. ...But not all states pay the same. Washington software developers earned $131,790 last year, while Wyoming devs earned $72,210.
The software engineer average salary in Washington was a whopping $131,790. In California, it was $127,950, and the figure for New York was $116,830. In Wyoming, software developers earned $72,210. In South Dakota, they earned $75,000, and those in Louisiana earned $81,640.
27. Female software developers make 83 cents to the dollar men earn.
Working the exact same job, women earn quite a bit less than men. That works out to $16,640 less per year.
28. Freelance software engineers earn around $104,463 per year.
While freelance software engineer rates vary according to states, most earn around $104,463 per year.
Speaking of freelance software engineersâ¦
Freelancer Software Engineers Statistics
How many software engineers work from home? And should you opt for a freelance software engineer or one that is employed by an agency? Letâs find out.
29. 12% of software engineers
work remotely full-time .
Slightly more than one in ten software engineers work from home 100% of the time.
30. 57.9% of freelance software engineers prefer working in an office environment.
Somewhat surprisingly, more than half of all freelance software engineers actually prefer working in an office. 33.2% prefer working from home, and the remaining 8.8% prefer working from co-working spaces or coffee shops.
31. Freelance software engineer rates are typically 203% lower than the rates of software agencies.
If youâve been wondering whether to give your development work to a freelancer or an agency, you should know that freelance software engineer rates can be up to 203% lower. We just made that decision a little easier--youâre welcome.
32. Toptal, Upwork, Guru, and Gigster are the top sites for freelancers.
The software engineer job market 2019 saw was largely online. Toptal, Upwork, Guru, and Gigster had the most freelance dev jobs according to freelancer software engineer statistics.
And on that note...
To Sum Up
How many software engineers are there in the US? A LOT, thatâs how many. On a serious note, we hope that you recognize that being a software engineer is a great career option.
The software development statistics donât lie:
The talent shortage is no laughing matter.
So, if you have an appreciation for engineering, developing or maintaining software we urge you to act on your appreciation and make a career out of it.
Table of Contents
Spectacular Software Development StatisticsÂ
Stats on How Many Software Engineers Are there in the US?
US Software Engineering Demographics
US Software Developer Employment Statistics
US Software Engineers Hubs Statistics
Software Developer Shortage Statistics
Most Popular Software Engineering Fields
How Much Software Developers Make in the US
Freelancer Software Engineers Statistics
To Sum Up
Frequently Asked Questions
How many developers are there in the world?
Now that you know how many developers there are in the US, you probably want to know how many developers are there in the world?  As of 2018, there are 23 million developers worldwide. By 2023, this number will be sitting around 27.7 million.
What are the most popular software engineer jobs in US?
Are you looking for software engineering jobs in 2020? Based on the software engineer market 2019, the most popular jobs are blockchain engineers, data engineers, backend developers, machine learning engineers, and full stack engineers.
What are the most popular programming languages in the software industry?
The 10 most popular languages are Java, C, Python, C++, C#, Visual Basic NET, JavaScript, PHP, Objective-C, and SQL. In that order.
Sources
1.
Bureau of Labor Statistics
2.
Bureau of Labor StatisticsÂ
3.
Built InÂ
4.
Business of Apps
5.
Business Insider
6.
Brainhub
7.
Career Explorer
8.
C# Corner
9.
College Grad
10.
DAXX
11.
Data USA
12.
Full Scale
13.
Forbes
14.
Glassdoor
15.
Info World
16.
Inc.
17.
Narrow the Gap
18.
Pearson Frank
19.
Rentberry
20.
Stack Overflow Talent
21.
Stack Overflow Insights
22.
Wikipedia
23.
Woven Teams
Recent Posts
November 16, 2022
Why Do You Want To Work Here? Tips on How To Answer
Aleksandar Dimovski
Author
October 12, 2022
How Did You Hear About Us? Answering the Popular Interview Question
Elma Mrkonjic
Author
October 12, 2022
How To Answer "Tell Me About Yourself" in a Job Interview
Aleksandar Dimovski
Author
Login
Register
Home
About
Us
Pricing
Contact
Privacy Policy
Terms
of Use
Â© 2022 GoRemotely.. All rights
reserved.
Your experience on this site will be improved by allowing cookies.
Allow cookies


Link: https://se.iastate.edu/people/

People â¢ Software Engineering â¢ Iowa State University
Skip to main content
iastate.edu
Index
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
Directory
Maps
Safety
Sign Ons
Iowa State University
Software Engineering
Menu Toggle
Search Toggle
Search
CoE homepage
LAS homepage
Academic Program
About SE
External Advisory Council
ABET Accreditation
Future Students
Undergrad Admissions
Apply
Request Info
Schedule a Visit
Transfers
Scholarships
College of Engineering Scholarships
University Scholarships
FAQ
Current Students
Curriculum
Software Engineering Learning Community
Student Advisory Council
Student Services
Resources
FAQ
People
Faculty/Staff
Expertise
Careers
Career Resources for Students
Open Positions
Internships & Co-ops
People
JavaScript Required
Visit main
directory site to view profiles without JavaScript.
Software Engineering
Donate to Software Engineering
Software Engineering
2520 Osborn Drive
2215 Coover Hall
Ames, IA 50011
se_program@iastate.edu
515-294-9993 phone
Facebook
Instagram
Twitter
Snapchat
Copyright © 1995-
Iowa State University
of Science and Technology
All rights reserved.
Non-discrimination Policy
Privacy Policy
Digital Access & Accessibility
Loading...


Link: https://www.computerscience.org/software-engineering/careers/software-engineer/day-in-the-life/

Day in the Life of a Software Engineer : Work & What They Do
Label
Computer Science Programs
Computer Science Degrees
Bachelor's Degrees in Computer Science
Master's Degrees in Computer Science
Computer Science Ph.D
Best Associate Degrees in Computer Science
Best Online Bachelor's in Computer Science
Best Online Master's in Computer Science
Affordable Online Bachelor's in Computer Science
Affordable Online Master's in Computer Science
Computer Science Certifications
View All
Engineering Degrees
Computer Engineering Online Masters
Computer Engineering Masters
Computer Engineering Bachelor's
Software Engineering Associate
Software Engineering Online Bachelor's
Explore Other Degrees
Computer Programming Associate
Computer Programming Bachelor's
Web Development Degree Programs
Data Science PhD Online
Computer Forensics Master's
Information Technology Bachelor's
Information Technology Associate
Information Technology Master's
Computer Forensics Bachelor's
Resources
Degree
Programming Languages Guide
Learn Computer Science With MOOCs
Guide to K-12 Computer Science Education
Is Computer Science Hard?
Actuarial Science vs. Data Science
Career
Women in Computer Science
Secure a Remote Internship
Get Hired in Artificial Intelligence
Get Hired in Computer Science
Software Developer vs. Software Engineer
Financial
Find Scholarships and Financial Aid For Your Degree
Find Scholarships for Women in Tech
Paying for Your Degree
Companies That Pay For Your Degree
By State
Washington
California
Florida
Texas
North Carolina
Georgia
Maryland
New York
Kentucky
Tennessee
Illinois
New Jersey
Ohio
Find More States
Choose A Career
Video Game Designer
Software Developer
Web Developer
Network Administrator
Database Administrator
Computer Programmer
Software Engineer
Information Security Analyst
Computer Hardware Engineer
Data Scientist
Information Technology Architect
Systems Analyst
Computer Information Researcher
Explore More Careers
Bootcamps
Best Bootcamps
Best Coding Bootcamps
Best Online Bootcamps
Best Value Online Bootcamps
Best Free Coding Bootcamps
Bootcamp Concentrations
Data Science Bootcamps
Python Bootcamps
UX/UI Bootcamps
Software Engineering Bootcamps
Full-Stack Web Development Bootcamps
Cybersecurity Bootcamps
Bootcamp Resources
Ultimate Guide to Bootcamps
Bootcamp Types
How to Pay for a Bootcamp
Using the GI Bill to Pay for Bootcamps
How to Get Into a Bootcamp
View All
Search Programs
Share this article
Facebook
LinkedIn
Twitter
Email
SMS
Copy link
Day in the Life of a Software Engineer
by
Audrey Webster
Written by
Audrey Webster
Contributing Writer
Audrey Webster graduated from the University of Oregon in 2017 with a bachelor of arts in English and has been professionally writing for over four years. Her writing specialties include education, wellness, and travel. In addition to writing, Audrey...
Learn about our editorial process.
Updated November 4, 2022
Job Responsibilities
A Typical Day
Interview with a Software Engineer
Where to Work
Should You Become a Software Engineer?
FAQ
Interested in becoming a software engineer? Learn about a software engineer's typical day, and hear from a professional in the field.
Credit: Maskot / DigitalVision / Getty Images
ComputerScience.org is an advertising-supported site. Featured or trusted partner programs and all school search, finder, or match results are for schools that compensate us. This compensation does not influence our school rankings, resource guides, or other editorially-independent information published on this site.
Are you ready to discover your college program?
Credit: Maskot / DigitalVision / Getty Images
Software engineers and developers work on computer applications and programs. These professionals identify problems by running extensive tests. They then correct the issues and build new programs. Now is a lucrative time to start a software engineering career.
The Bureau of Labor Statistics (BLS) projects a 25% growth for software developer positions from 2021-2031. This projected growth rate is much higher than the national average projection for all occupations. The BLS projects 162,900 annual openings for software developers, testers, and quality assurance analysts over the next decade.
The page explores a software engineer's typical day. We unpack the qualifications for computer science jobs and look at where software engineers work.
What Is a Software Engineer?
Software engineers create web applications, mobile apps, robots, operating systems, and network systems. They develop software solutions that meet their companies' needs and expectations. Note that the terms "software engineer" and "software developer" are used interchangeably in the industry, but these positions' responsibilities vary slightly.
Software engineers design software solutions, while software developers build those solutions to make them ready for consumers. Depending on the type of company they work for, software engineers will create original code for software and applications. They also build reusable code for future use.
Read more about software engineers
What a Software Engineer Does
A standard day for a software engineer involves a lot of coding. These professionals rarely spend their day sitting at a desk fixing technical issues. At any given moment, a software engineer is managing several software projects, developing new code, and collaborating with coworkers to solve problems.
Software engineers also spend time revising and rewriting other peopleâs code as needed. Building prototypes for clients is another common task. This entails understanding client expectations and developing prototypes accordingly.
Software engineers do not always work independently. They collaborate with project managers, UI or UX designers, data scientists, and other team members. They also attend meetings and manage emails.
Software engineers enjoy solving problems. They pay close attention to detail, since a small error can cause a program to collapse.
Main Duties of Software Engineers
System Design:
System design involves defining the outline for web applications and products efficiently and clearly. These designs provide information and data in the coding framework for the software developer to make the product.
Establish New Documentation:
All new technology requires documentation for people to understand its functionality. This might look like creating or updating products and supporting documentation. The software engineer writes this supporting documentation.
Maintain Software Functionality:
Software engineers maintain existing software and create new software. This includes making updates to align with the latest industry and company standards, troubleshooting problems, and brainstorming future improvements. Maintenance is equally as important as writing new code.
Troubleshoot and Upgrade Existing Systems:
Along with maintaining existing systems, software engineers also troubleshoot problems when they arise. Both internal company systems and clients may need help solving problems. Software engineers also make updates as needed to ensure existing systems remain usable.
Comply with Company and Industry Standards:
Technology is a rapidly changing field. Products and systems must keep up with these changes. Software engineers usually oversee these updates. They must match industry trends and ensure their systems align with industry standards.
Nonstandard Duties for Software Engineers
Work with Clients:
Many software engineers do not work directly with clients. However, working at a small company or startup can change this dynamic. If a software developer leads a project, they might regularly consult with the client to ensure the final product meets their expectations.
Manage Internal Teams and Projects:
Software engineers might manage internal teams and projects depending on the company and their roles. Experienced software engineers in a senior-level role at the company typically oversee teams.
Interview and Hire for New Positions:
If a new hire is being interviewed for their team, software engineers might speak with the job candidate to ensure a good fit. The final selection to fill roles usually falls on upper management. Still, a software engineerâs feedback is taken into consideration.
Collaborate with Front-end Developers:
Software engineers do not usually handle front-end development, but they might partner with front-end developers on some projects. In some cases, the front-end developer needs feedback from the software engineer to ensure they create a great product.
Build Software with Code:
A software engineer writes the code and creates the framework then a software developer executes the build. However, depending on the company and job description, software engineers might create new software with the developer.
Top Online Programs
Explore programs of your interests with the high-quality standards and flexibility you need to take your career to the next level.
A Software Engineer's Typical Day
A software engineerâs typical day begins either in the office or at home, if they work remotely. Each engineer is different. Their routine usually depends on their employer and personal work preferences. However, a typical day for a software engineer might look something like this:
Software engineers start their day by working on their coding projects. Ideally, engineers set aside time every day to enter a âmental flowâ state, which allows them to focus on solving problems and developing reliable solutions.
Software engineers may attend meetings interspersed throughout the day. The afternoon might involve reviewing emails and checking in with colleagues on shared projects. Engineers often meet with peers to ask questions or work through a project's challenging aspect before returning to their desk for more independent work.
Reviewing and revising code is a good habit of software engineers. This task can occur in the afternoon before they wrap up their day. Software engineers conclude their workday between 5 and 6 p.m.
Professional Spotlight: Sergii Zhuravel, Lead Software Engineer
What previous computer science-related (or STEM) experience(s) did you have, if any, and what prompted your journey to become a software engineer?
When I was learning applied mathematics and system analysis at university, I liked programming courses very much. After my graduation, I had a proposition to stay in the university as a teacher, but I decided to become a software engineer.
If you specialize in a particular subject or work in a particular industry, what prompted this choice and/or how did it evolve?
At first I started as a web developer, as it was very popular. But later, I also learned mobile development. I like everything in IT, so I usually learn what is required right now on the project and donât specialize in something particular.
For whom do you think this career is a good fit? Why?
I think everyone can become a software engineer. But of course, there are some skills or human traits that can make the learning process much easier and adoption to the profession much smoother. I think itâs good if one has good memory, for example, likes learning new stuff and can spend tons of time with a computer.
ComputerScience.org is an advertising-supported site. Featured or trusted partner programs and all school search, finder, or match results are for schools that compensate us. This compensation does not influence our school rankings, resource guides, or other editorially-independent information published on this site.
Match me with a bootcamp.
Find programs with your skills, schedule, and goals in mind.
MATCH ME TO A BOOTCAMP
What educational path did you take to become a software engineer? Did you pursue additional education at any point? What was your educational experience like?
I got a master's degree in applied mathematics, and this helped me to understand logic and programming easier. It took about five or six years for me. After that, I also spent 2-3 months learning Java myself, before I got my first job as a programmer. Today, there are a lot of different courses and bootcamps that can prepare a new developer in a few months, maximum in one year, I think. But I think that if possible, itâs better to get a decent education to have a good base in CS.
What certifications or tests did you need to pass, if any, to enter the field and/or progress in your career?
I had no certifications and didnât pass any tests when I got my first IT job. But during my career, I often take some courses and pass exams and tests. For example, right now Iâm preparing for the AWS exam to get an AWS developer associate certificate.
How did you prepare for them?
There are a lot of online courses on the internet. So, usually I prepare by taking some courses and reading books, then I practice a lot.
What were they like?
For example, I took a Scrum Master online course one time. I passed the course. I read a lot of additional materials (like the official scrum guide that is available on the internet). Then I passed simple tests during the course, and I got a certificate.
What's a typical day like for you?
In our company, we use Scrum (itâs very popular these days), so usually we start our day from the daily meeting. In the daily meeting, we discuss what we did yesterday, what we plan to do today, and do we have any issues/blockers or not.
Then if I have some tasks in the tracking system, I work on the task or I pick a new one. I can communicate with the product owner or with a QA if I have any questions about requirements or if I have some ideas for improvements for the feature Iâm working on.
When the feature is coded, I also work on the tests (unit tests mostly) because we try to have good test coverage.
When the feature is ready, I publish it using Git to our repository (we use GitLab), and CI/CD tests the changes and publishes them to a Dev or QA environment, where our QA can test the feature or fix. If there is feedback from the QA that something doesnât work or works not as expected, I investigate the issue and fix it.
Some days we have grooming sessions where we review existing tickets with features or bugs to better understand what we need to do and to be on the same page with all the team.
What's your favorite part of being a software engineer?
I think itâs a possibility to create something new every day. When you write the code, itâs like writing a poem. I mean that itâs a creation process and is very close to the art. And of course, itâs a âsuperpowerâ to solve problems. As a software engineer, you have a lot of tools that allow you to resolve a lot of different (and usually quite complex) problems, like sending starships to Mars.
The most challenging part?
I think for most people, itâs to keep motivated. Because a lot of times when we dream about complex problems, at work we can be asked just to program another form or spreadsheet. For me personally, I think the most challenging part is to keep the right balance between work and personal life. Working with the computer can take you fully and eat all your time.
What advice do you have for individuals considering becoming a software engineer?
Today is the best time to become a software engineer. If you really like this, jump into it. Itâs a cool profession that will give you a real superpower to solve complex problems. Who knows, maybe you will have the world.
What do you wish you'd known before becoming a software engineer?
If I knew that React would be so popular, I would invent it myself. I think nothing could change my desire to become a software engineer. But maybe it would be cool to know in advance what technologies (libraries, frameworks) will be popular in the future. Thatâs why I think there are a lot of articles on the Internet about âthe frameworks of the futureâ that try to predict what next libraries and frameworks will be built and will be popular.
Sergii Zhuravel
Sergii is a lead software engineer. He holds a master's degree in applied mathematics and more than 10 years of experience in IT. Sergii has worked with different back-end and front-end technologies. Now, he works mostly with the front end (for example, with React and Redux), which he enjoys a lot. He likes to share his knowledge, so he conducts programming courses (JavaScript), writes articles, and participates in different events, like hackathons.
Where Software Engineers Work
Software engineers find work at large corporations and startups or as freelancers. They can work at a standard tech company or in finance, software publishing, or manufacturing. Each of these industries requires software engineers, but most jobs are in computer systems design.
Location is another factor for software engineers to consider. Software engineers can expect to find more lucrative job opportunities in large cities. According to the BLS, California has the highest number of software developer positions in the country, with 228,240 workers employed. Texas and Washington follow in second and third place.
Most software developers work in Silicon Valley in California, earning a average annual salary of $146,770. Only Washington, mainly the Seattle area, pays their software developers a comparable wage ($ 145,150 annually on average).
The BLS also reports that over 450,000 software developers work in computer systems design. The next highest industry is software publishing, with 133,340 workers. Each company has a unique culture that affects how software engineers work. These engineers might work independently with flexible hours or stay heavily involved in decisions with regular meetings.
See how location affects salary for software engineers
Top Online Programs
Explore programs of your interests with the high-quality standards and flexibility you need to take your career to the next level.
Should You Become a Software Engineer?
Software engineers remain in high demand. Computer science majors can usually pursue jobs after graduation without a problem. Computer engineers typically possess excellent problem-solving skills. They think analytically and approach problems strategically to find the best solutions possible.
Software engineers implement new strategies to discover creative ways of executing their tasks. Technology is an industry that moves fast and software engineers must also keep up with the latest coding requirements.
In many environments, engineers complete coding independently. Software engineers must find motivation and take initiative to accomplish tasks. They should stay patient and focused while writing code.
Discover how to become a software engineer
Explore software engineering degrees
How to Prepare for a Career as a Software Engineer
Preparation for a software engineer career starts as early as high school. Students can take computer science classes or coding bootcamps to begin developing their skills before they start college.
Most software engineers earn their college degrees in computer science or software engineering from an accredited college. However, some might complete a software engineering certification program or bootcamp to learn the necessary skills.
While in college, students should complete internships. This helps build connections with professionals in the industry and provides students with real-world coding experience. Those who opt to take a certification course or bootcamp learn the basics of coding for less time than earning a degree.
Learn More About Software Engineers
What Is a Software Engineer?
Learn about the skills and interests necessary to become a software engineer plus regular daily tasks.
Learn More
How to Become a Software Engineer
Find out about the educational path for students looking to become software engineers, along with degree and skill requirements.
Learn More
Salary and Career Outlook for Software Engineers
Learn about industry and job growth projections for software engineers, including the average salary for specific roles and locations.
Learn More
Software Engineer Certificates
Review certificate programs available to software engineers, including topics covered and eligibility requirements.
Learn More
Frequently Asked Questions About Software Engineers
What is a typical day for a software engineer?
Software engineers spend their day solving problems in web applications and programs, writing code, attending meetings, and collaborating with their peers. They usually work on several projects at once.
What is life like as a software engineer?
Software engineers spend much of their time finding solutions. They try to improve products by paying close attention to detail and making small adjustments that have a large impact.
Is being a software engineer fun?
Those who like technology, solving complex problems, and working with their peers may enjoy working as software engineers. Depending on the company, software engineers might have flexible work hours or work remotely.
Do software engineers have flexible hours?
This depends on where they work. Large corporations, startups, and small companies might set different expectations for their software engineers.
Recommended Reading
Take the next step toward your future.
Discover programs youâre interested in and take charge of your education.
Footer
Rankings
Certifications
Bachelor's Degree
Master's Degree
Doctorate Programs
See All
Degrees
Bachelor's in IT
Doctorate Programs in IT
Associate in Computer Programming
Associate in Software Engineering
See All
Careers
Computer Information Researcher
Data Science
Health Information Technician
Systems Analyst
See All
States
Texas
California
Virginia
Michigan
See All
Resources
Women in Computer Science
Coding Bootcamps
Jobs in Computer Science
Computer Programming Languages
See All
Â© 2022 ComputerScience.org, a Red Ventures Company
About Us
Sitemap
Privacy Policy
Advertising Disclosure
Advertise
Contact
Methodology
Do Not Sell My Info
Cookie Settings
Terms of Service


Link: https://seedscientific.com/software-engineering-statistics/

Software Engineering Statistics: 21 Figures You Should Know About
Skip to content
Menu
Blog
Science Jobs
Menu
Blog
Science Jobs
Software Engineering Statistics: 21 Figures You Should Know About
September 12, 2022July 5, 2022 by
Kristina Trajkovska
Software engineering encompasses the development of computer system software and application software. The main principles of software engineering are designing, developing, testing, maintaining, and evaluating computer software.Â So, if youâre interested in software engineering statistics, this article will tell you everything you need to know.
Top Software Engineering Statistics: Editorâs Choice
There are
4.3 million
software engineers in the US.One of the
most famous software engineers
is the creator of XML, Tim Bray.Only
10%
of software engineers are part-time employees.
73%
of software engineers have a bachelorâs degree.Only
22%
of all software engineers are female.
General Software Engineering Facts
Software engineering is currently in high demand due to an ever-increasing need for new software and mobile applications. On the other hand, people are drawn to software engineering due to good salaries and low unemployment rates. Knowing all this, here are some general stats and facts about software engineers.
1. The average base software engineer salary in the US is $120,000 a year.
The average additional cash compensation for a software engineer is $14,649, which makes the total compensation for a software engineer in the US $134,588. Furthermore, the lowest salaries for software engineers can be around $36,000, and the highest salaries can go up to $265,000 per year.
2. The unemployment rate for software engineers was only 1.9% in 2019.
Other than a slight rise from 2014 to 2016, when the unemployment rate was 2.1% to 2.3%, the unemployment rate for software engineers has slowly been decreasing since 2010, when it stood at 4.6%.
3. As of 2021, there are 4.3 million software engineers in the US.
The answer to âhow many software engineers are there in the USâ is a complicated one. The actual number is closer to 3.4 million people in the US because the 4.3 million we previously mentioned includes hardware engineers, CAD programmers, and others whose job is reading code on a daily basis.
4. The top-paying metropolitan area in the US is San Jose-Sunnyvale-Santa Clara, CA, with an average annual salary of $145,730.
The San Francisco-Oakland-Hayward, CA area is a very close second, with an average annual salary of $145,250. Third place goes to the Seattle-Tacoma-Bellevue, WA area, with a yearly salary of $134,090. According to software engineering statistics, the fourth place goes to the New York-Newark-Jersey City, NY-NJ-PA area, with an average annual salary of $122,230. And lastly, the fifth place goes to Battle Creek, MI, with an annual average wage of $121,160.
5. The most used programming language worldwide as of 2021 is JavaScript, with 64.96% of developers and engineers using it.
The second most used programming language is HTML/CSS, with 56.07% of programmers using it. After that, we have Python with a 48.24% share and SQL with a 47.08% share.
6. One of the interesting facts about software engineering is that in 2020 and 2019, with 58% demand, the backend was the most sought-after role in the field.
The second most sought-after role was full-stack development, with 57% of dedicated companies looking for specialists in the field. Front-end developers came next with 30% demand. These numbers come from more than 10,000 companies and 245,000 job seekers in North America and Europe.
7. The top-paying non-metro area is the North Valley-Northern Mountains Region of CA, with an average annual salary of $125,010.
The second highest software engineer salary in non-metro areas is in West Central-Southwest New Hampshire, with an annual amount of $115,990. The third area on the list is Southwest Colorado, with a yearly salary of $113,280. Western Washington is fourth with $111,910, followed by Hawaii/Kauai, with a yearly salary of $111,740.
8. In 2020, 69% of US employers struggled to fill positions, with tech positions being among the most challenging roles to fill.
The COVID-19 pandemic affected the American tech market. Since it accelerated the digitization process, 92% of companies increased their cloud workloads. That resulted in a demand for a larger number of software engineers in the US.
9. The most numerous subspeciality of software engineers is frontend developers, with a talent pool of over 463,000 members.
Mobile app development comes next with more than 224,000 members, followed by quality assurance with more than 220,000 members. Furthermore, software engineering facts show that infrastructure and cloud devs are fourth on the list with around 175,000 members. The fifth category includes embedded and application devs with approximately 58,000 members, followed by machine learning and data science with 56,000 members.
10. Tim Bray, who made the developerâs tool XML, is one of the most famous software engineers.
While we canât say that there is a single best software engineer in the world, we can say for sure that this list has some of the best engineers the world has ever seen:
Paul Buchheit developed the webmail service Gmail.John Carmack developed the computer games Doom and Quake.Dave Cutler developed Windows NT.Max Levchin created PayPal.Pierre Omidyar created eBay.Alexey Pazhitnov developed the computer game Tetris.Jimmy Wales made Wikipedia.Michael Widenius made the open-source database MySQL.Jamie Zawinski developed the web browser Netscape Navigator.
If you want to know how an average person in the field lives, read about one day in the life of a software engineer.
11. There were over 26.2 million software developers in 2020.
To further answer the question, âhow many software engineers are there in the world,â we have these stats that show that out of all software developers, 13.5 million were full-time devs, 7.8 million were part-time devs, and 4.9 million were non-compensated devs. This statistic also shows that application developers account for 72.3% of full-time and 26.2% of part-time developers.
Conversely, infrastructure developers account for 27.7% of full-time and 73.8% of part-time developers. As of 2022, only 10% of software engineers are part-time employees. Therefore, as software engineering statistics show, a vast majority of software engineers work as full-time employees.
12. As of 2021, the most sought-after cloud platform is AWS, with 40.35% of devs expressing interest in using this technology.
Google Cloud ranked second, with 22.6% of software developers wanting to work with it. Microsoft Azure is next with 21.12%, followed by Digital Ocean with 8.46% of developers wanting to work with that technology. Furthermore, we have Heroku with 7.31%, IBM Cloud or Watson with 3.24%, and Oracle Cloud Infrastructure with 2.6% of people interested in developing with that technology.
13.  Germany has 901,000 software developers.
These are the number of software developers by country in Europe:
849,000 developers in the UK533,000 developers in France412,000 developers in Russia323,000 developers in Spain20,000 developers in The Netherlands314,000 developers in Italy295,000 developers in Poland200,000 developers in Ukraine 179,000 developers in Sweden
14. Employment for software engineers, developers, analysts, and testers is projected to grow by 22% from 2020 to 2030.
This growth is much faster than the average for most other jobs. This means that the software engineer job growth and opportunities will be plentiful, with over 189,200 job positions for developers, testers, and analysts opening every year. Some job opportunities will result from people switching jobs or retiring.
15. The most sought-after software engineers are those that specialize in machine learning and data science.
The demand for this specialization is very high, but there is a low talent supply. That means that if you specialize in machine learning and data science, it would be easy for you to find a job in the current market. Furthermore, the software engineer employment rate for this specialization is favorable for another reasonâthe average salary is $129,000 a year.
16. The top programming tool for all developers is Visual Studio, with 46.2% of developers using it in their projects.
Sublime Text is a close second, with 38.5% of developers using it. GitHub is the third favorite, with 23.1% of all developers using this web-hosting software, followed by WebStorm, with 15.4% of developers using it. Finally, software development statistics for 2022 round up the five most used software with Ruby on Rails, with only 7.7% of developers using it.
17. In 2021, the enterprise application software market made $271 billion worldwide.
This statistic shows that the global software market has been steadily growing since 2017 when the revenue was $172.1 billion. This survey also shows that global revenue will almost double by 2025, reaching an estimated $421 billion.
Software Engineering Demographics
Software engineering is a male-dominated industry, like most jobs in STEM, but women are more and more interested in jobs in this field. So, from this global developer population and demographic study, you will be able to see all the different demographics and how software engineers fit into them.
18. 73% of software engineers have a bachelorâs degree.
The second most common degree is a masterâs degree, with 20% of all engineers having that level of education. Furthermore, 4% of all software engineers have an associateâs degree, 1% have a high school diploma, and 2% have other degrees.
19. 22% of software engineers are women.
With the remaining 78% being male, it shows that this field is male-dominated. Furthermore, software engineer statistics also show that women earn 92Â¢ for every $1 earned by a man.
20. The average age of a software engineer is 34â44.
A very close second is the 25â34 age group, accounting for 36.6% of people employed as software engineers. Statistics further show that the majority of software engineers are in the 34â44 age range. Finally, 45â54-year-olds account for 16.2% of software engineers.
21. Software engineer demographics show that 52.3% of all software engineers in the US are White.
Moreover, 33% of all software engineers in the US are Asian, 6.9% are Hispanic, 4.9% are African American, 0.1% are American Indian and Alaska Native people, and 2.8% are classified as Unknown.
Software Engineering Statistics: Our Takeaway
Software engineers are in high demand, especially in some fields like machine learning and data science. Although more and more women are interested in STEM positions, software engineering statistics show that this field is still very much male-dominated. Furthermore, with high starting salaries and fantastic job prospects, software engineering will only grow in the next decade.
Frequently Asked Questions
What percentage of software engineers have masterâs degrees?
In the United States, 20% of software engineers have a masterâs degree. The majority of software engineers have a bachelorâs degree, which is 73% according to the latest statistics.Â
What is the average salary of software engineers?Â
The average base salary of software engineers in the United States is $119,939, with an additional $14,649, bringing the total compensation for a software engineer in the US to $134,588.
How old are software engineers at Google?
Googleâs software engineering statistics show that the average age of all its employees is 29. What is interesting about this is that the average age of programmers in the United States is 42.8. Therefore, Googleâs workforce is younger than average.
Table of Contents
Top Software Engineering Statistics: Editorâs Choice
General Software Engineering Facts
Software Engineering Demographics
Software Engineering Statistics: Our Takeaway
Frequently Asked Questions
About Us
Privacy and Cookie Policies
Terms of Use
SeedScientific Â© 2022 Â· All Rights Reserved


Link: https://scai.engineering.asu.edu/software-engineering-faculty/

Software Engineering Faculty - School of Computing and Augmented Intelligence
Skip to Content
Report an accessibility problem
ASU Home
My ASU
Colleges and Schools
Sign In
Search ASU
Ira A. Fulton Schools of Engineering
School of Computing and Augmented Intelligence
Home
Degree Programs
Undergraduate
Graduate
Online Programs
Accelerated 4+1
Students
Admissions Admission Requirements
Apply Now - Undergraduate
Apply Now - Graduate
Tuition and Paying for College
Request Info
New Graduate Student Information Prospective Prospective Graduate Students
Talk to an Advisor
Visit Campus
Housing
First-Year and Transfer Students
Parent Resources Current Courses and Override Policies
Undergraduate Policies and Procedures
Graduate Policies and Procedures
Undergraduate Advising
Graduate Advising
GSA Positions, Teaching Assistantships and Fellowships
SCAI CPT Application Process
Study Abroad Resources Entrepreneurship
Student Orgs
Career Center
Career Services for Online Students
Study Abroad
Tutoring Centers
Inner Circle: News and Events for Students
Undergraduate Resources
Graduate Resources
Skill Verification Letter
People
Leadership
Faculty
Computer Engineering (Computer Science) Graduate Faculty
Computer Science Graduate Faculty
Data Science, Analytics and Engineering Graduate Faculty
Industrial Engineering Graduate Faculty
Staff
SCAI Mentors
Directory
Research
Research Advancement
Research Centers
Research Labs
Research Briefs
Giving
Contact
About
About the Ira A. Fulton Schools of Engineering
Our Vision and Mission
Annual Reports
Enrollment and Degrees Granted
Rankings
SCAI News
Faculty Awards
Hiring
Summer Camps
ASU Home
My ASU
Colleges and Schools
Sparky Sign Out
Software engineering faculty
AllComputer science and engineeringIndustrial engineeringSoftware engineering
All
Computer science and engineering
Industrial engineering
Software engineering
Faculty by rank
Ruben Acuna
Ruben AcunaLecturer
Research InterestsAlgorithm development, bioinformatics, data analysis
[email protected]Polytechnic campus, PRLTA 230K
Ajay Bansal
Ajay BansalAssistant Professor
Research interestsLogic programming, constraint programming, answer set programming, data mining, machine learning, semantic computing, service-oriented architecture.
[email protected]
(480) 727-1647
Polytechnic campus,Â PRLTA 230V
Research website
Srividya Bansal
Srividya BansalAssociate ProfessorProgram Chair, Software Engineering
Research interestsSemantic computing, big data integration, semantics-based solutions for outcome-based instruction design in STEM education, delivery models for software engineering education; web service description, discovery and composition.
[email protected]
(480) 727-5107
Polytechnic campus,Â PRLTA 230G
Research website
Tyler Baron
Tyler BaronLecturer
[email protected]â(480) 727-3713Polytechnic campus
Michael Findler
Michael FindlerLecturer
[email protected](480) 965-3190Polytechnic campus, Peralta 230L
Kevin Gary
Kevin GaryAssociate Professor
Research interestsSoftware architecture and design, open source software, agile methods, applications in healthcare and e-learning.
[email protected](480) 727-1373Polytechnic campus, PRLTA 230C
Javier Gonzalez-Sanchez
Javier Gonzalez-SanchezLecturer
Research interestsEngineering self-adaptive software, intelligent interactive systems, human computer Interfaces, and affective computing.
[email protected]Polytechnic campusÂ
Robert Heinrichs
Robert HeinrichsLecturer
[email protected]Polytechnic campus
Tim Lindquist
Tim LindquistProfessor Emeritus
Research interestsSoftware engineering, distributed and mobile systems, web applications and programming languages
[email protected]
(480) 727-2783
Polytechnic campus, PRLTAÂ 230
Research website
Christopher Mar
CM
Christopher MarInstructor
Research interestsEngineering education, embedded systems
[email protected]Polytechnic campus
Alexandra Mehlhase
Alexandra MehlhaseLecturer
Research interestsSoftware development methodologies, modeling and simulation
[email protected]Polytechnic campus
Anshuman Razdan
Anshuman RazdanProfessor Emeritus
[email protected](480) 727-1672PRLTA 230A, Polytechnic campus
Douglas Sandy
Douglas SandyLecturer
Research interestsComputer systems performability, structured machine architecture, and embedded systems engineering
[email protected]480-727-1253Polytechnic campus
Vijay Suthar
Vijay SutharLecturer
[email protected]Tempe Campus
Ayca Tuzmen
Ayca TuzmenLecturer
[email protected]
Stephen Yau
Stephen YauProfessor
Research interestsTrust management and security, software engineering, distributed systems, service based systems, ubiquitous/pervasive computing
[email protected](480) 965-2647Tempe campus, BYENG 488
School of Computing and Augmented Intelligence
Contact Us
Contribute
Maps and Locations
Jobs
Directory
Contact ASU
My ASU
Copyright and Trademark
Accessibility
Privacy
Terms of Use
Emergency
COVID-19 Information


Link: https://www.uopeople.edu/blog/how-to-become-a-software-engineer/

How to Become a Software Engineer: Your Complete Guide - University of the People
Skip to content
Request Info
Login
UoPeople Portal
Online Campus
UoPeople Arabic
Apply Now
Academic Programs
Masterâs Degree
Business Administration
Information Technology
Education
Bachelorâs Degree
Business Administration
Computer Science
Health Science
Associateâs Degree
Business Administration
Computer Science
Health Science
Non-Degree Programs
Business Administration
Computer Science
Health Science
English as a Second Language (ESL)
Student Experience
UoPeople Quality
Accreditation
Academic Leadership
Academic Experience
UoPeople Difference
Online Learning at UoPeople
Global Network
Career Development
Student Life
Ask A Student
Program Advising
Student Stories
[email protected]
Become A Student
Admissions
Undergraduate Admission
Graduate Admission
Transfer Credits
English Proficiency
How To Apply
Prepare for UoPeople
Foundation Courses
First Courses Prep
The American Education System
Tuition-Free
What is Tuition-Free?
Fees
Scholarships
About
About UoPeople
In Brief
Mission
UoPeople Data
Milestones
Leadership
Presidentâs Council
Board of Trustees
Academic Leadership
Academic Team
Partners
Academic Partners
UN Cooperation
Corporate Partners
Charitable Partners
Media
UoPeople in the Media
Newsletters
Press Releases
Donors
Why UoPeople
More Ways to Give
Pay It Forward
Apply Now
APPLY NOW
Request Info
Login
UoPeople Portal
Online Campus
Search
< Back to Blog
Academic Degrees, Computer Science News
How to Become a Software Engineer: Your Complete Guide
Share:
Every industry relies on software engineers to help run their backend systems, as well as mobile devices, databases and more. Software engineers are experts in the field of Computer Science and they use their knowledge to help businesses run by creating consumer-facing products and user-friendly systems. The path for how to become a software engineer is paved with education, technical ability, programming languages and more.
We will take a look at what it takes to achieve your goal of becoming a software engineer, as well as how to plan ahead efficiently.
Photo byÂ  Danial RiCaRoS Â onÂ  Unsplash
What Does a Software Engineer Do?
Software engineers take the electronic hardware of a computer and/or mobile device and makes it useful by employing computer engineering practices to design, develop and implement software that will run. Software engineers must first understand the business needs and then create the necessary programmed tools to achieve such goals.
In practice, software engineers blend together their understanding and abilities in the realms of computer science, engineering, project management, and software development. From the creation of functioning programs to the testing, they ensure the userâs digital environment runs smoothly.
The broad field can be broken down into two specializations, namely software development and applications development. Software and systems engineers use programming languages to develop functioning systems, whereas application developers code applications based on the userâs needs across various platforms, including desktops, laptops and mobile devices.
Since the two specializations require different job duties, their average salaries are also slightly different.
According to the U.S. Bureau of Labor and Statistics, their average salaries are as follows:
Software Developers ( Applications ): $108,080
Software Developers ( Software ): $111,780
Become a Software Engineer
The software engineering field is highly technical and specialized. As such, although there isnât a single way to accomplish the goal of working in the industry, the common path begins with formal education.
1. Study Computer Science
A degree in Computer Science is a good place to start to begin your journey. You can choose to get your associateâs degree, bachelorâs degree or higher, depending on your career goals.
Associateâs Degree:
For entry-level positions, associateâs degrees will suffice and can be earned in about 2 years. The curriculum will provide you with the core foundational knowledge such as programming languages and modern ways to develop software.
Bachelorâs Degree:
For those seeking a position with any big or well-known company, a bachelorâs degree is often the minimum requirement. Bachelorâs degrees generally take 4 years to complete (if enrolled full-time). Along with the foundational knowledge that an associateâs degree offers, a bachelorâs degree will also provide coursework in mathematics, software testing and software architecture.
Coding Bootcamp:
For those who donât want to attend a formal institution or online university to receive a minimum of an associateâs degree, coding bootcamps exist. They offer intense training for the span of about 8-12 weeks, and upon graduating, students are meant to be prepared for entry-level positions in the field.
Earning Your Degree: Online Options:
Itâs important to note that your education level will impact your salary and likelihood of obtaining a job in the competitive field of software engineering. As such, itâs useful to weigh your costs and benefits of obtaining a degree. If financial constraints feel like they are a big part of your decision, you should know that you can always attend high-quality, accredited and online universities to pursue your dream of becoming a software engineer.
For example, University of the People is a 100% online institution that offers associateâs and bachelorâs degrees in Computer Science that are tuition-free.
The benefits of attending an online university include the flexibility of choosing when to study, the widened accessibility of having everything online and being able to study from anywhere in the world, and the lowered cost of obtaining your higher education degree. Additionally, online programs provide a simpler way to study part-time and continuing to manage preexisting responsibilities, whether it means raising a family or holding down a job, etc.
2. Start Programming and Building Software
When you start programming, youâll have to choose which languages to learn. Depending on the type of products you want to create, one may be more useful than another. There are hundreds of programming languages out there to learn, but hereâs a quick look at some of the most popular:
Java – Based on an object-oriented programming model, Java is intended to be easy to use. The language is used for complete applications that can be accessed from a single computer or network.
Python – Python is used for computer software programming, as well as machine learning, browser automation, scientific computer, and robotics.
C++ – C++ is a general purpose programming language that can be used for small programs or large applications.
C# – C# is a general purpose programming language that is designed to create apps on the Microsoft platform. It is considered to be a blend of C and C++.
PHP – PHP once stood for Personal Home Page, but now it stands for PHP: Hypertext Preprocessor. It can be embedded into HTML and was originally designed for web development.
Once you have a grasp on programming languages, you can try your hand at developing and testing software or applications. These can serve as use cases to land an internship or showcase to a prospective client as part of your portfolio.
3. Get an Internship
While youâre still in school, itâs always a good idea to get an internship to start making connections within the industry. Whether you choose to intern at a small startup or a well-established company, the internship will help make your resume stronger upon graduation and will expand your networking opportunities.
Photo byÂ  HIVAN ARVIZU @soyhivan Â onÂ  Unsplash
4. Attend Conferences and Networking Events
The industry is always evolving because technology and usersâ needs change. As such, itâs important to stay up-to-date with your knowledge of the field. Industry events and conferences can help provide you with information about new products, changing regulations, and best business practices.
5. Apply for Jobs
Upon graduation or the culmination of a Coding Bootcamp, youâll want to create a killer CV or resume and start applying to positions that interest you. Thereâs always the option of continuing your education to earn a graduateâs degree, but with your undergraduate education and internship and coding experience, you should have accumulated enough examples of your work to secure a position in the field.
The Bottom Line
Software engineers are integral pieces of every industry. They bring software systems and applications into existence and ensure they are properly working and safe for users. Software engineers must be team players, have strong communication skills, be logical and solution-oriented, and are always willing to learn more.
From earning your degree to creating products, networking, interning and ultimately landing a job in the field, software engineering will provide you with a lucrative and rewarding career.
Related Articles
Basics of Cloud Computing and Cloud Storage
We’ve all heard about “the cloud,” and various...
Soft Computing vs. Hard Computing
As computing advances, the world of algorithms continues...
Artificial intelligence, Machine learning, Deep learning: Explained
The terms artificial intelligence (AI), machine learning...
Academic Programs
Student Experience
Become a Student
Tuition-Free
About
Donors
Calendars
Essential Documents
UoPeople Policies
Catalog
Contact Us
Volunteer
FAQ
Administration
Blogs
Events / Webinars
Email Preferences
Copyright @ 2022 University of the People
Privacy Policy
Terms of Service
Sitemap
We use cookies on our website to give you the most relevant experience by remembering your preferences and repeat visits. By clicking âAccept Allâ, you consent to the use of ALL the cookies. However, you may visit "Cookie Settings" to provide a controlled consent. Cookie Settings
Accept All Manage consent
Close
Privacy Overview
This website uses cookies to improve your experience while you navigate through the website. Out of these, the cookies that are categorized as necessary are stored on your browser as they are essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may affect your browsing experience.
Necessary
Necessary
Always Enabled
Necessary cookies are absolutely essential for the website to function properly. These cookies ensure basic functionalities and security features of the website, anonymously.
CookieDurationDescriptioncookielawinfo-checkbox-analytics11 monthsThis cookie is set by GDPR Cookie Consent plugin. The cookie is used to store the user consent for the cookies in the category "Analytics".cookielawinfo-checkbox-functional11 monthsThe cookie is set by GDPR cookie consent to record the user consent for the cookies in the category "Functional".cookielawinfo-checkbox-necessary11 monthsThis cookie is set by GDPR Cookie Consent plugin. The cookies is used to store the user consent for the cookies in the category "Necessary".cookielawinfo-checkbox-others11 monthsThis cookie is set by GDPR Cookie Consent plugin. The cookie is used to store the user consent for the cookies in the category "Other.cookielawinfo-checkbox-performance11 monthsThis cookie is set by GDPR Cookie Consent plugin. The cookie is used to store the user consent for the cookies in the category "Performance".viewed_cookie_policy11 monthsThe cookie is set by the GDPR Cookie Consent plugin and is used to store whether or not user has consented to the use of cookies. It does not store any personal data.
Functional
Functional
Functional cookies help to perform certain functionalities like sharing the content of the website on social media platforms, collect feedbacks, and other third-party features.
Performance
Performance
Performance cookies are used to understand and analyze the key performance indexes of the website which helps in delivering a better user experience for the visitors.
Analytics
Analytics
Analytical cookies are used to understand how visitors interact with the website. These cookies help provide information on metrics the number of visitors, bounce rate, traffic source, etc.
Advertisement
Advertisement
Advertisement cookies are used to provide visitors with relevant ads and marketing campaigns. These cookies track visitors across websites and collect information to provide customized ads.
Others
Others
Other uncategorized cookies are those that are being analyzed and have not been classified into a category as yet.
SAVE & ACCEPT


Link: https://careerdiscovery.sciencebuddies.org/science-engineering-careers/math-computer-science/computer-software-engineer

Computer Software Engineer | Science & Engineering Career
Menu
Start Career Discovery
Careers Index
Translate This Page
Sign Up
Log In
Search
Search
Close
Computer Software Engineer
Please ensure you have JavaScript enabled in your browser.
If you leave JavaScript disabled, you will only access a portion of the content we are providing.
Here's how.
Overview and Key Facts
Education
Bachelor's degree
Median Pay
$107,510
Job Growth
21.50%
(Above US Average)
Jobs in 2029
1,785,200
What Do They Do?
A computer software engineer could...
Write the software that controls the movement of assembly-line robots.
Create the artificial intelligence that controls characters in video games like The SimsTM.
Develop software for a portable global positioning system (GPS) so drivers don't get lost.
Write software that allows people to communicate over great distances.
Overview
Listen to this section
Are you interested in developing cool video game software for computers? Would you like to learn how to make software run faster and more reliably on different kinds of computers and operating systems? Do you like to apply your computer science skills to solve problems? If so, then you might be interested in the career of a computer software engineer.
Software Engineer
In this video, Jessica Mong explains how fixing a broken computer when she was a child in Nigeria eventually inspired her to earn a computer engineering scholarship in the U.S. and start her career as a software engineer.
https://www.youtube.com/watch?v=xoSGg6db6hs
Do You Have the Skills and Characteristics of a Computer Software Engineer?
Programming:
?
Writing computer programs for various purposes.
Active Listening:
?
Giving full attention to what other people are saying, taking time to understand the points being made, asking questions as appropriate, and not interrupting at inappropriate times.
Complex Problem Solving:
?
Identifying complex problems and reviewing related information to develop and evaluate options and implement solutions.
Critical Thinking:
?
Using logic and reasoning to identify the strengths and weaknesses of alternative solutions, conclusions or approaches to problems.
Original Thinking:
?
Seeking new and creative ways to solve problems or invent solutions.
More skills...
User Needs Focus:
?
Applying an understanding of what people want from their computers.
Mathematics:
?
Using mathematics to solve problems.
Quality Control Analysis:
?
Conducting tests and inspections of products, services, or processes to evaluate quality or performance.
Core Tasks
Think about if you'd like the typical tasks a Computer Software Engineer might do:
Analyze information to determine, recommend, and plan installation of a new system or modification of an existing system.
Analyze user needs and software requirements to determine feasibility of design within time and cost constraints.
Confer with data processing or project managers to obtain information on limitations or capabilities for data processing projects.
Confer with systems analysts, engineers, programmers and others to design systems and to obtain information on project limitations and capabilities, performance requirements and interfaces.
Consult with customers or other departments on project status, proposals, or technical issues, such as software system design or maintenance.
Coordinate installation of software system.
Design, develop and modify software systems, using scientific analysis and mathematical models to predict and measure outcomes and consequences of design.
Determine system performance standards.
Develop or direct software system testing or validation procedures, programming, or documentation.
Modify existing software to correct errors, adapt it to new hardware, or upgrade interfaces and improve performance.
Monitor functioning of equipment to ensure system operates in conformance with specifications.
Obtain and evaluate information on factors such as reporting formats required, costs, or security needs to determine hardware configuration.
Prepare reports or correspondence concerning project specifications, activities, or status.
Recommend purchase of equipment to control dust, temperature, or humidity in area of system installation.
Specify power supply requirements and configuration.
Store, retrieve, and manipulate data for analysis of system capabilities and requirements.
Supervise and assign work to programmers, designers, technologists, technicians, or other engineering or scientific personnel.
Supervise the work of programmers, technologists and technicians and other engineering and scientific personnel.
Train users to use new or modified equipment.
Tasks 1/3
Salary & Job Openings
Steps to Get There: Becoming a Computer Software Engineer
Try it Out with an Activity or Project
On the Job
More Information
Please create a free account to view this career and access our full library of over 160 STEM careers.
Students
Teachers / Parents
With a free account you will have access to our full library of over 160 STEM careers. Each career profile includes detailed information to help you learn about a career and the requirements to get there. You can explore:
salary information by state
recommended high school coursework
fun projects and activities to test out a career
videos and interviews with professionals in the field
details on what a day on the job is like
Support provided by:
COMPANY
Science Buddies Home
Sponsors
Contact Us
Privacy Policy
Image Credits
Pricing
GET INVOLVED
Create a FREE Science Buddies Account
FIND US HERE
Join us on Facebook
Follow us on YouTube
Follow us on Twitter
Follow us on Pinterest
Email Us
Copyright 2010-2022 Science Buddies. All rights reserved.
Reproduction of material from this website without written permission is strictly prohibited.
Use of this site constitutes acceptance of our
Terms and Conditions of Fair Use .
Top
Quick Links
X
We use cookies and those of third party providers to deliver the best possible web experience and to compile statistics.
By continuing and using the site, including the landing page, you agree to our
Privacy Policy
and
Terms of Use .
OK, got it
Free science fair projects.


Link: https://80000hours.org/career-reviews/software-engineering/

Software engineering - Career review - 80,000 Hours
Toggle navigation
Search for:
Start here
Guides
Key ideas
Understand what makes for a high-impact career.
Read the full guide â
Introduction
Your most important decision
Summary
Foundations
A definition of impact
Future generations & their moral significance
Effective altruism
Global priorities
Why problem selection is crucial
The case for reducing existential risks
This could be the most important century
Our current list of pressing problems
Contribution
Which careers let you contribute most?
Some solutions are far more effective than others
Our list of high-impact careers
Personal fit
Fit is more important than you think
Strategy
What is career capital?
How much to explore?
Coordination and impact
Balancing impact and doing what you love
Aim higher: a rational case for dreamingÂ big
Three career stages
Conclusion
How much do careers differ in impact?
Read the full guide â
Problem profiles
Find out about the world's biggest and most neglected problems.
Go to problems hub â
Top areas to work on
Preventing an AI-related catastrophe
Catastrophic pandemics
Building effective altruism
Global priorities research
Nuclear war
Epistemics and institutional decision making
Climate change
Great power conflict
Other promising areas
Promoting positive values
Space governance
See more â
Go to problems hub â
Career reviews
Learn about high-impact career paths.
See all our career reviews â
Key categories of impactful careers
Government and policy
Organisation-building at effective nonprofits
Research
Applying an unusual strength to a needed niche
Communication
Earning to give
List of top-recommended career paths
AI safety technical research
Long-term AI policy
Founder of new projects
Helping build the effective altruism community
Grantmaker
Operations management in high-impact organisations
Research into global priorities
Biorisk research, strategy, and policy
China-related AI safety and governance
Forecasting research and implementation
Sometimes-recommended paths
High-impact but especially competitive
Promising but under-researched
Impactful if you're an especially good fit
Recommended career capital
Steps to build your skills and network
Making the most of your current job
Doing good in any career
How to invest in yourself
See all our career reviews â
Planning & decision making
Use our tools to make concrete plans.
See all planning resources â
Create a high-impact career plan
8-week career planning course
Summary
Career plan template
Annual career check-up
Make good career decisions
Make an immediate decision
Improve your decision-making skills
See all planning resources â
Browse all our content
Pick a topic to explore or check out our most popular pieces.
Selected topics
Moral philosophy
Skills
Job satisfaction
Anonymous advice
Unconventional advice
What to study
Advocacy
Catastrophic risks
Meta-causes
Priority paths
See all topics â
Top articles from outside our guides
What makes for a dream job?
Best charities to donate to
Misconceptions about effective altruism
High-impact research questions
What are your chances of getting elected to Congress, if you try?
How many lives does a doctor save?
What's the impact of voting?
Advice for undergraduates
All articles â
2017 career guide
All career guide pages â
Read the full guide â
Introduction
Your most important decision
Summary
Foundations
A definition of impact
Future generations & their moral significance
Effective altruism
Global priorities
Why problem selection is crucial
The case for reducing existential risks
This could be the most important century
Our current list of pressing problems
Contribution
Which careers let you contribute most?
Some solutions are far more effective than others
Our list of high-impact careers
Personal fit
Fit is more important than you think
Strategy
What is career capital?
How much to explore?
Coordination and impact
Balancing impact and doing what you love
Aim higher: a rational case for dreamingÂ big
Three career stages
Conclusion
How much do careers differ in impact?
Read the full guide â
Go to problems hub â
Top areas to work on
Preventing an AI-related catastrophe
Catastrophic pandemics
Building effective altruism
Global priorities research
Nuclear war
Epistemics and institutional decision making
Climate change
Great power conflict
Other promising areas
Promoting positive values
Space governance
See more â
Go to problems hub â
See all our career reviews â
Key categories of impactful careers
Government and policy
Organisation-building at effective nonprofits
Research
Applying an unusual strength to a needed niche
Communication
Earning to give
List of top-recommended career paths
AI safety technical research
Long-term AI policy
Founder of new projects
Helping build the effective altruism community
Grantmaker
Operations management in high-impact organisations
Research into global priorities
Biorisk research, strategy, and policy
China-related AI safety and governance
Forecasting research and implementation
Sometimes-recommended paths
High-impact but especially competitive
Promising but under-researched
Impactful if you're an especially good fit
Recommended career capital
Steps to build your skills and network
Making the most of your current job
Doing good in any career
How to invest in yourself
See all our career reviews â
See all planning resources â
Create a high-impact career plan
8-week career planning course
Summary
Career plan template
Annual career check-up
Make good career decisions
Make an immediate decision
Improve your decision-making skills
See all planning resources â
Selected topics
Moral philosophy
Skills
Job satisfaction
Anonymous advice
Unconventional advice
What to study
Advocacy
Catastrophic risks
Meta-causes
Priority paths
See all topics â
Top articles from outside our guides
What makes for a dream job?
Best charities to donate to
Misconceptions about effective altruism
High-impact research questions
What are your chances of getting elected to Congress, if you try?
How many lives does a doctor save?
What's the impact of voting?
Advice for undergraduates
All articles â
2017 career guide
All career guide pages â
Job board
Podcast
Our podcasts
The 80,000 Hours Podcast
80k After Hours Curated series
Effective Altruism: An Introduction
Effective Altruism: Ten Global Problems
Get 1-1 advice
Newsletter
Book giveaway
New releases
All articles
Community
About
AboutÂ us
Introduction
Meet theÂ team
OurÂ donors
MediaÂ coverage
ContactÂ us
SupportÂ us
Take our survey
Donate
StayÂ updated
Acknowledgements
Work with us
OurÂ impact & credibility
Evaluations
OurÂ mistakes
ResearchÂ principles
Endorsements
Testimonials
Home
Career reviews
Software engineering Search for:
New releases
All articles
Community
About
AboutÂ us
Introduction
Meet theÂ team
OurÂ donors
MediaÂ coverage
ContactÂ us
SupportÂ us
Take our survey
Donate
StayÂ updated
Acknowledgements
Work with us
OurÂ impact & credibility
Evaluations
OurÂ mistakes
ResearchÂ principles
Endorsements
Testimonials Software engineering By Benjamin Hilton · Published February 2022
Like
Tweet
Share
Email
Print Software engineering
By Benjamin Hilton · Published February 2022
Like
Tweet
Share
Email
Print
On this page:
Introduction
1 Why might software engineering be high impact?
1.1 How to do good as a software engineer
1.2 Software engineers can help with AI safety
1.3 Software engineer salaries mean you can earn to give
2 What does a software engineering career involve?
2.1 Working for a large software company
2.2 Working for a startup as a software engineer
2.3 Moving to a direct impact software engineering role
3 Reasons not to go into software engineering
4 How much do software engineers earn?
4.1 Software engineering salaries in the US
4.2 Software engineering pay in other countries
4.3 Software engineering job outlook
5 Software engineering job satisfaction
6 Examples of people pursuing this path
7 How to predict your fit in advance
8 How to enter this field
8.1 Learning to program
8.2 Getting your first job in software engineering
9 Want one-on-one advice on pursuing this path?
10 Learn more
11 Find a job in this path
Table of Contents
1 Why might software engineering be high impact?
1.1 How to do good as a software engineer
1.2 Software engineers can help with AI safety
1.3 Software engineer salaries mean you can earn to give
2 What does a software engineering career involve?
2.1 Working for a large software company
2.2 Working for a startup as a software engineer
2.3 Moving to a direct impact software engineering role
3 Reasons not to go into software engineering
4 How much do software engineers earn?
4.1 Software engineering salaries in the US
4.2 Software engineering pay in other countries
4.3 Software engineering job outlook
5 Software engineering job satisfaction
6 Examples of people pursuing this path
7 How to predict your fit in advance
8 How to enter this field
8.1 Learning to program
8.2 Getting your first job in software engineering
9 Want one-on-one advice on pursuing this path?
10 Learn more
11 Find a job in this path
On December 31, 2021, the most valuable company on Earth was Apple, worth around $3 trillion. After that came Microsoft, at $2.5 trillion, then Google (officially Alphabet) at $1.9 trillion, then Amazon at $1.5 trillion.
On December 31, 2020, the four most valuable companies were: Apple, Microsoft, Amazon, and Google.
On December 31, 2019, the four most valuable companies were: Apple, Microsoft, Google, and Amazon.
And on December 31, 2018, the four most valuable companies were: Microsoft, Apple, Amazon, and Google.
If you’re anything like me, you’re starting to spot a pattern here.
Revenue in software has grown from $400 billion in 2016 to $500 billion in 2021, and is projected to reach $800 billion by 2026.
Software has an increasing and overwhelming importance in our economy — and everything else in our society. High demand and low supply makes software engineering well-paid, and often enjoyable.
But we also think that, if you’re trying to make the world a better place, software engineering could be a particularly good way to help. In a nutshell: Software engineering could be a great option for having a direct impact on the world’s most pressing problems. If you have good analytical skills (even if you have a humanities background), you might consider testing it. Basic programming skills can be easy to learn and extremely useful even if you decide not to go into software engineering, which means trying this out could be particularly low cost. ProsGain a flexible skillset.Make a significant direct impact, either by working on AI safety, or in otherwise particularly effective organisations.Have excellent working conditions, high pay, and good job security.ConsLate-stage earnings are often lower than in many other professional jobs (especially high-paying roles such as quantitative trading), unless you help found a successful startup.Likely only a small proportion of exceptional programmers will have a highly significant impact.Initially, it could be relatively challenging to gain skills quickly compared to some other jobs, as you need a particular concrete skillset.Key facts on fit Willingness to teach yourself, ability to break problems down into logical parts and generate and test hypotheses, willingness to try out many different solutions, high attention to detail, quantitative degree useful but not required.
Sometimes recommended â personal fit dependent This career will be some peopleâs highest-impact option if their personal fit is especially good. Review status Based on an in-depth investigation
This review owes a lot to helpful discussions with (and comments from) Andy Jones, Ozzie Gooen, Jeff Kaufman, Sasha Cooper, Ben Kuhn, Nova DasSarma, Kamal Ndousse, Ethan Alley, Ben West, Ben Mann, Tom Conerly, Zac Hatfield-Dodds, and George McGowan. Special thanks go to Roman Duda for our previous review of software engineering, on which this was based. Why might software engineering be high impact? Software engineers are in a position to meaningfully contribute directly to solving a wide variety of the world’s most pressing problems.
In particular, there is a shortage of software engineers at the cutting edge of research into AI safety.
We’ve also found that software engineers can contribute greatly to work aiming at preventing pandemics and other global catastrophic biological risks.
Aside from direct work on these crucial problems, while working for startups or larger tech companies you can gain excellent career capital (especially technical skills), and, if you choose, earn and donate substantial amounts to the world’s best charities. How to do good as a software engineer Even for skilled engineers who could command high salaries, we think that working directly on a problem will probably be more impactful than earning to give.
Some examples of projects where software engineering is central to their impactful work:
Ought
is an AI research lab attempting to build systems that apply machine learning to the task of helping people think.The
Secure DNA Project
is attempting to build a secure global screening system for DNA sequences that could be used to engineer a
global pandemic . Momentum
is a startup building donation pages that encourage recurring donations to the world’s
most effective charities . Lightcone Infrastructure
builds software-based infrastructure for
longtermist
projects. Telis Bioscience
is a startup attempting to radically accelerate drug development to mitigate risks from future pandemics. Anthropic
is a research company working to build reliable, interpretable, and steerable AI systems. Redwood Research
conducts applied research into the
challenge of aligning artificial intelligence . Wave
is a startup building a way for people in developing countries to access financial services. Most organisations, even ones that don’t focus on developing large software products, need software engineers to manage computer systems, apps, and websites. For example:
Effective Altruism Funds
provides expert-managed funds to facilitate donors maximising the impact of their donations. They use software engineers to design and maintain their online platform. Our World in Data , founded by
Max Roser , collects and presents data on many of the world’s most pressing problems. They use software engineers to maintain their website, analyse data, and develop their
open-source data visualisation tool .Here at
80,000 Hours ,
our team
includes two software engineers working on our website and other technology.The
Centre for Effective Altruism ‘s tech team supports a variety of projects across the
effective altruism community , such as the
Effective Altruism Forum . Many people we’ve spoken to at these and other organisations have said that they have real difficulty hiring extremely talented software engineers. Many nonprofits want to hire people who believe in their missions (just as they do with operations staff), which indicates that talented, altruistic-minded software engineers are sorely needed and could do huge amounts of good.
Smaller organisations that don’t focus on engineering often only have one or two software engineers. And because things at small organisations can change rapidly, they need unusually adaptable and flexible people who are able to maintain software with very little help from the wider team.1
It seems likely that, as the community of people working on helping future generations grows, there will be more opportunities for practical software development efforts to help. This means that even if you don’t currently have any experience with programming, it could be valuable to begin developing expertise in software engineering now. Software engineers can help with AI safety We’ve argued before that artificial intelligence could have a deeply transformative impact on our society. There are huge opportunities associated with this ongoing transformation, but also extreme risks — potentially even threatening humanity’s survival.
With the rise of machine learning, and the huge success of deep learning models like GPT-3, many experts now think it’s reasonably likely that our current machine learning methods could be used to create transformative artificial intelligence.
This has led to an explosion in empirical AI safety research, where teams work directly with deep neural networks to identify risks and develop frameworks for mitigating them. Examples of organisations working in empirical AI safety research include Redwood Research, DeepMind, OpenAI, and Anthropic.
These organisations are doing research directly with extremely large neural networks, which means each experiment can cost millions of dollars to run. This means that even small improvements to the efficiency of each experiment can be hugely beneficial.
There’s also often overlap between experimental results that will help further AI safety and results that could accelerate the development of unsafe AI, so it’s also important that the results of these experiments are kept secure.
As a result, it’s likely to remain incredibly valuable to have talented engineers working on ensuring that these experiments are as efficient and safe as possible. Experts we spoke to expect this to remain a key bottleneck in AI safety research for many years.
However, there is a serious risk associated with this route: it seems possible for engineers to accidentally increase risks from AI by generally accelerating the technical development of the field. We’re not sure of the more precise contours of this risk (e.g. exactly what kinds of projects you should avoid), but think it’s important to watch out for. That said, there are many more junior non-safety roles out there than roles focused specifically on safety, and experts we’ve spoken to expect that most non-safety projects aren’t likely to be causing harm. If you’re uncertain about taking a job for this reason, our team may be able to help you decide. Software engineer salaries mean you can earn to give In general, if you can find a job you can do well, you’ll have a bigger impact working on a problem directly than you would by earning money and donating. However, earning to give can still be a high-impact option, especially if you focus on donating to the most effective projects that could use the extra funds.
If you’re skilled enough to work at top companies, software engineering is a well-paid career. In the US, entry-level software engineer salaries start at around $110,000. Engineers at Microsoft start at $150,000, and engineers at Google start at around $180,000 (including stock and bonuses). If you’re successful, after a few years on the job you could be earning over $500,000 a year.
Pay is generally much lower in other countries. Median salaries in Australia are around 20% lower than salaries in the US (approximately US$80,000), and around 40% lower in the UK, Germany, Canada, and Japan (approximately US$60,000). While much of your earnings as a software engineer come from bonuses and equity, rather than just your salary, these are also lower outside the US.
If you do want to make a positive difference through donating part of your income as a software engineer, you may be able to increase your impact by using donation-matching programmes, which are common at large tech companies (although these are often capped at around US$10,000 per year).
You can read more about salaries at large tech companies below.
It’s important to note that many nonprofit organisations, including those focusing on AI safety, will offer salaries and benefits that compete with those at for-profit firms.
If you work at or found a startup, your earnings will be highly variable. However, the expected value of your earnings — especially as a cofounder — could be extremely high. For this reason, if you’re a particularly good fit, founding a tech startup and donating your earnings could be hugely impactful, as you could earn and donate extraordinary amounts. What does a software engineering career involve? Ultimately, the best ways to have an impact with software engineering are probably things like working at an AI lab or a particularly effective nonprofit.
To get there, there are two broad paths that you could follow to build software engineering skills (and, given the high salaries in software engineering, you can earn to give along the way): Working for a large, stable company (e.g. Microsoft, Google, Amazon)Working for a small, fast-growing startup In general, you will gain broadly transferable skills through either of these options. To gain experience as quickly and effectively as possible, look for roles that offer good management and mentorship opportunities. You should also make sure you gain a really deep understanding of the basics of software development.
Working at a top-tier tech company also holds comparable prestige to working in finance or consulting, and gives you the opportunity to make connections with wealthy and influential people, many of whom are impact-minded and interested in doing good.
You’ll need different skills, and work at different jobs, depending on whether you want to be a front-end, back-end (including machine learning), or full-stack developer. Working for a large software company The best way to develop software skills is to practise writing code and building software through years of experience. Direct one-on-one mentorship is extremely valuable when developing skills, and this is often provided through software engineering jobs at large tech companies.
Top firms (e.g. Microsoft, Google, Amazon) are particularly good at providing training to develop particular skillsets, such as management and information security. After talking with people who have experience in training at both tech giants and elsewhere, we think that this internal training is likely the best way to develop knowledge in software engineering (other than on-the-job practice), and will be better than training provided outside of these big tech companies.
However, it’s important to ensure that your role provides you with a variety of experiences: five years of software development experience is not the same as having the same year of experience five times over.
For example, it can be harder to gain full-stack or transferable front-end development experience at a large company. Many large mature products have a large front-end team making many small tweaks and analysing their performance in experiments. This provides good training in experiment design and analysis, but often isn’t very transferable to the sorts of front-end work you’d do at smaller companies or nonprofits, where you’ll often be working in a much smaller team with a focus on developing the experience as a whole rather than running experiments on small changes.
It generally takes around two years for new starters at big tech companies to have the experience they need to independently work on software, and another two years to reach a position where they are able to give advice and support to others in the company and manage projects. Key career stages at large tech companies First you’ll need some basic experience. You can get this from a relevant degree; working on a job at a smaller, less prestigious company; or from a bootcamp (see how to enter below for more).
New graduates, and other people with a couple of years of relevant experience, will start out as junior engineers. As a junior engineer, you’d complete small, clearly specified tasks and gain a preliminary understanding of the software development lifecycle. You’ll generally be given lots of guidance and support from more experienced engineers. You usually stay in this role for around three years, gradually expanding your scope. In the US, you’d be paid an entry-level compensation of $100,000 to $200,000 (as of early 2022).
Once you’ve successfully demonstrated that you can work on projects without needing much support, you’ll be given more responsibility. For a couple of years, you’ll work on more complex projects (often in one or two languages in which you’ve specialised), and with less support from others.
After five to eight years2, you’ll generally progress to a senior engineer position. As a senior engineer, you write complex applications and have a deep understanding of the entire software lifecycle. You may lead small teams or projects, and you’ll be expected to provide mentorship and guidance to junior engineers. You can stay in this role for much of your career, though it becomes harder to compete with younger talent as you get older. Compensation in 2022 at this level is around $300,000 to $400,000 in the US.
At this point you may have the skills to leave and become a technical founder or CTO of a startup. This is a highly variable option (since most startups fail), but could be one of the highest expected value ways to earn to give given a chance of wild success.
Progressing past senior engineers, you’re typically responsible for defining as well as doing your job. You may go into management positions, or could become a staff engineer. Staff engineers, while still building software, also set technical direction, provide mentorship, input an engineering perspective to organisational decisions, and do exploratory work. At this level, at top firms in the US, you can earn upwards of $500,000 and sometimes more than $1,000,000 a year.
Software engineering is unusual in that you can have a senior position without having to do management, and many see this as a unique benefit of the career. (To learn more about post-senior roles, we recommend The Staff Engineer’s Path by Tanya Reilly and the StaffEng website.) Working for a startup as a software engineer Working for a startup can give you a much broader range of experience, including problem-solving, project management, and other ‘soft’ skills — because unlike in large companies, there is no one else at the organisation to do these things for you. You can gain a strong understanding of the entire development process as well as general software engineering principles.
Startups often have a culture that encourages creative thinking and resourcefulness. This can be particularly good experience for working in small software-focused nonprofits later in your career.
However, the experience of working in small organisations varies wildly. You’ll be less likely to have many very senior experienced engineers around to give you the feedback you need to improve. At very small startups, the technical cofounder may be the only experienced engineer, and they are unlikely to provide the level of mentorship provided at big tech companies (in part because there’s so much else they will need to be doing). That said, we’ve spoken to some people who have had great mentorship at small startups.
You also gain responsibility much faster at a fast-growing startup, as there is a desperate need for employees to take on new projects and gain the skills required. This can make startups a very fertile learning ground, if you can teach yourself what you need to know.
Pay at startups is very variable, as you will likely be paid (in large part) in equity, and so your earnings will be heavily tied to the success of the organisation. However, the expected value of your earnings may be comparable to, and in some cases higher than, earnings at large companies.
Many startups exit by selling to large tech companies. If this happens, you may end up working for a large company anyway. Moving to a direct impact software engineering roleWorking in AI safety If you are looking to work in an engineering role in an AI safety or other research organisation, you will probably want to focus on back-end software development (although there are also front-end roles, particularly those focusing on gathering data from humans on which models can be trained and tested). There are recurring opportunities for software engineers with a range of technical skills (to see examples, take a look at our job board).
If you have the opportunity to choose areas in which you could gain expertise, the experienced engineers we spoke to suggested focusing on: Distributed systemsNumerical systemsSecurity In general, it helps to have expertise in any specific, hard-to-find skillsets.
This work uses a range of programming languages, including Python, Rust, C++ and JavaScript. Functional languages such as Haskell are also common.
We’ve previously written about how to move into a machine learning career for AI safety. We now think it is easier than we previously thought to move into an AI-safety-related software engineering role without explicit machine learning experience.
The Effective Altruism Long-Term Future Fund and the Survival and Flourishing Fund may provide funding for promising individuals to learn skills relevant to helping future generations, including new technologies such as machine learning. If you already have software engineering experience, but would benefit from explicit machine learning or AI safety experience, this could be a good option for you.
If you think you could, with a few weeks’ work, write a new feature or fix a bug in a major machine learning library, then you could probably apply directly for engineering roles at top AI safety labs (such as Redwood Research, DeepMind, OpenAI, and Anthropic), without needing to spend more time building experience in software engineering. These top labs offer pay that is comparable to pay at large tech firms.
If you are considering joining an AI safety lab in the near future, our team may be able to help. Working on reducing global catastrophic biological risks Reducing global catastrophic biological risks — for example, research into screening for novel pathogens to prevent future pandemics — is likely to be one of the most important ways to help solve the world’s most pressing problems.
Through organisations like Telis Bioscience and SecureDNA (and other projects that might be founded in the future), there are significant opportunities for software engineers to contribute to reducing these risks.
Anyone with a good understanding of how to build software can be useful in these small organisations, even if they don’t have much experience. However, if you want to work in this space, you’ll need to be comfortable getting your hands dirty and doing whatever needs to be done, even when the work isn’t the most intellectually challenging. For this reason, it could be particularly useful to have experience working in a software-based startup.
Much of the work in biosecurity is related to handling and processing large amounts of data, so knowledge of how to work with distributed systems is in demand. Expertise in adjacent fields such as data science could also be helpful.
There is also a big focus on security, particularly at organisations like SecureDNA.
Most code in biosecurity is written in Python.
If you’re interested in working on biosecurity and pandemic preparedness as a software engineer, you can find open positions on our job board. Other important direct work Nonprofit organisations and altruistic-minded startups often have very few team members. And no matter what an organisation does, they almost always have some need for engineers (for example, 80,000 Hours is not a software organisation, but we employ two developers). So if you find an organisation you think is doing something really useful, working as a software engineer for them might be an excellent way to support that work.
Engineering for a small organisation likely means doing work across the development process, since there are few other engineers.
Often these organisations are focused on front-end development, with jobs ranging from application development and web development to data science and project management roles. There are often also opportunities for full-stack developers with a broad range of experience.
Founding an organisation yourself is more challenging, but can be even more impactful. And if you’ve worked in a small organisation or a startup before, you might have the broad skills and entrepreneurialism that’s required to succeed. See our profile on founding new high-impact projects for more. Reasons not to go into software engineering We think that most people with good general intelligence will be able to do well at software engineering. And because it’s very easy to test out (see the section on how to predict your fit in advance), you’ll be able to tell early on whether you’re likely to be a good fit.
However, there are lots of other paths that seem like particularly promising ways to help solve the world’s most pressing problems, and it’s worth looking into them. If you find programming difficult, or unenjoyable, your personal fit for other career paths may be higher. And even if you enjoy it and you’re good at it, we think that will be true for lots of people, so that’s not a good reason to think you won’t be even better at something else!
As a result, it’s important to test your fit for a variety of options. Try taking a look at our other career reviews to find out more. How much do software engineers earn? It’s difficult to make claims about software engineer earnings in general.
For a start, almost all of the official (especially government) data on this is on salaries rather than total compensation. By the time you’re a senior engineer, less than half of what you earn will be from your salary — the rest will be from bonuses, stock, and other benefits.
Most government data also reports median salaries, but as we saw when looking at progression in big tech firms, very senior software engineers can earn seven-figure compensations. So we should expect the distribution of total compensation to be positively skewed, or possibly even bimodal.
As a result, you should think of the figures below as representing salaries for early- to mid- career software developers.
Even given all these caveats, the figures we present here are instructive for understanding the relative salary levels (e.g. between locations), even if the absolute values given aren’t perfect.
More data is available at Levels.fyi, which collects data from people self-reporting their total compensation, and also has data on the distribution of what people earn, rather than just averages. Software engineering salaries in the US Here are the median US salaries for software developers, from the US Bureau of Labor Statistics:
Median US salaries for software engineers in 2020 (excluding bonuses)3  MeanMedianComputer programmers$95,640$89,190Software developers and software quality assurance analysts and testers$114,270$110,140Web developers and digital interface designers$85,490$77,200
Here are the median salaries at different levels of progression, both in the US as a whole and in Mountain View and Palo Alto (i.e. Silicon Valley).4 In general, salaries rise quite rapidly in the early stages of the career, but then level off and grow by only a few percent per year after around a decade. However, this is probably offset by increases in other forms of compensation.
Median US salaries for software engineers in 2020 at different levels of progression StageUsual experience requiredUS (median salary + bonus)Mountain View and Palo Alto, CA (median salary + bonus)Software engineer I (entry level)0-2 years$75,000$94,000Software engineer II2-4 years$95,000$120,000Software engineer III4-6 years$120,000$150,000Software engineer IV6-8 years$147,000$185,000Software engineer V8-10 years$168,000$211,000Software engineering manager10+ years$155,000$195,000Software engineer director10+ years$226,000$284,000Software engineer director15+ years$303,000$380,000
For figures on total compensation, especially at top companies, we can again look at Levels.fyi. These figures are far higher. Entry-level compensation is around $150,000, rising to $300,000 to $400,000 for senior engineers, and above $500,000 for late-career engineers. The top compensation levels reported are over $1,000,000.
Salaries also vary by location within the US; they are generally significantly higher in California (although web developers are best paid in Seattle).
Mean salary by US region in 20205  NationalTop-paying stateTop-paying metro areaComputer programmers$95,640$107,300 (CA)$125,420 (San Francisco)Software developers and software quality assurance analysts and testers$114,270$137,620 (CA)$157,480 (Silicon Valley)Web developers and digital interface designers$85,490$94,960 (WA)$138,070 (Seattle)
These data are supported by Levels.fyi data on various locations in the US (e.g. Atlanta, New York City, Seattle, and the Bay Area).
Notably, the differences between locations in salaries at the 90th percentile is much higher than the differences in median salaries.
Compensation by US region in 20206  Median90th percentileAtlanta$131,000$216,000New York City$182,000$365,000Seattle$218,000$430,000San Francisco Bay area$222,000$426,000
It’s worth noting, however, that the cost of living in Silicon Valley is higher than in other parts of the US (Silicon Valley’s cost of living is 1.5 times the US national average7), reducing disposable income. (In general, data on average cost of living is particularly representative of the costs you’d expect to pay if you have a family or want to own a house.)
If you want to estimate your own disposable income given different scenarios, you can try these tools:
Estimate your post-tax income
Find out the cost of living in different cities
Calculate your donatable income Software engineering pay in other countries Software engineers are paid significantly less outside the US. The UK Office for National Statistics found that the mean salary for “programmers and software development professionals” in 2020 was Â£46,000 (US$59,000 in 2020).8 Even when looking at full compensation, we see similar trends across the world.
Software engineer compensation outside the US6  Median90th percentileAustraliaA$166,000 (US$123,000)A$270,000 (US$200,000)CanadaC$143,000 (US$115,000)C$270,000 (US$218,000)Germanyâ¬86,000 (US$98,000)â¬145,000 (US$165,000)Indiaâ¹3,123,000 (US$42,000)â¹7,435,000 US$100,000)Irelandâ¬101,000 (US$115,000)â¬188,000 (US$214,000)Israelâª533,000 (US$165,000)âª866,000 (US$268,000)Netherlandsâ¬108,000 (US$123,000)â¬174,000 (US$198,000)Russiaâ½2,991,000 (US$42,000)â½6,410,000 (US$90,000)SingaporeS$143,000 (US$106,000)S$263,000 (US$195,000)SwitzerlandCHF 177,000 (US$190,000)CHF 355,000 (US$382,000)TaiwanNT$1,819,000 (US$65,000)NT$3,387,000 (US$121,000)United KingdomÂ£90,000 (US$123,000)Â£166,000 (US$228,000)
The only countries with earnings as high as the US are Israel and Switzerland, and no countries have earnings as high as Seattle or the San Francisco Bay Area. The cost of living in major cities in Israel and Switzerland is around 20% higher than in Silicon Valley.9
Compensation across the world is often higher if you work from a major city.
Software engineer compensation in major cities outside the US6  Median90th percentileBangalore, Indiaâ¹3,569,000 (US$48,000)â¹7,583,000 (US$102,000)Dublin, Irelandâ¬106,000 (US$120,000)â¬189,000 (US$215,000)London, UKÂ£95,000 (US$130,000)Â£170,000 (US$233,000)Toronto, CanadaC$149,000 (US$120,000)C$273,000 (US$220,000)Vancouver, CanadaC$156,000 (US$126,000)C$306,000 (US$247,000)
It can be difficult to get a visa to work in the US. For example, US immigration law mandates that a maximum of 65,000 H-1B visas (one of the most common types for software engineers) are issued a year. Also, because of the cost of flying you out for an interview, there will often be a higher bar for international applicants passing phone interviews.
There are some things that can make it easier to get a visa: Having a degree in computer science or other field related to your jobApplying to companies with enough capital and flexibility to bear the time and financial costs of the visa processHaving a specific unusual skillset that may be hard to find in the US Take a look at this blog to find out more.
Despite all of this, remote work in software development is becoming far more common. There’s a growing trend for a few companies to hire globally for remote roles, and pay US-market compensation. If you manage to get one of those roles, you can earn a lot from anywhere. Software engineering job outlook The future demand for software engineers is promising. The US Bureau of Labor Statistics projects 22% growth in US employment of software engineers from 2020â30, which is much higher than the growth rate for all occupations (8%). The main reason given for this growth is a large projected increase in the demand for software for mobile technology, the healthcare industry, and computer security.
The number of web development jobs is projected to grow by 13% from 2020â2030. The main reasons for this are the expected growth of e-commerce and an increase in mobile devices that access the web.
What does this mean for future salaries? Strong growth in demand provides the potential for salary growth, but it also depends on how easily the supply of engineers can keep up with demand.
Software engineering job satisfaction The same high demand for software engineers that leads to high pay also leads to high bargaining power. As a result, job satisfaction among software engineers is high.
Many software engineers we have spoken to say the work is engaging, often citing the puzzles and problems involved with programming, and being able to enter a state of flow (which is one of the biggest predictors of job satisfaction). On the other hand, working with large existing codebases and fixing bugs are often less pleasant. Read our five interviews with software engineers for more details.
Work-life balance in software engineering is generally better than in jobs with higher or comparable pay. According to one survey, software engineers work 8.6 hours per day (though hours are likely to be longer in higher-paid roles and at startups).
Tech companies are progressive, often having flexible hours, convenient perks, remote working, and a results-driven culture. The best companies are widely regarded as among the best places to work in the world. Examples of people pursuing this path
Nova DasSarma Nova decided to move into software engineering — specifically large-scale systems architecture — when she realised she wasn’t a good fit for the lab benchwork she needed to do for her major in bioinformatics at the University of Maryland, Baltimore County.
After moving through various institutions and startups (originally focusing on work in computational biology), Nova realised that, through her focus on high-compute infrastructure, she had built a unique and important skillset for working on AI safety. With funding from Open Philanthropy, she cofounded Hofvarpnir Studios, a nonprofit providing support and GPU clusters for AI safety researchers. While working at Hofvarpnir, she is now also a Senior Systems Infrastructure Engineer at Anthropic, an AI safety research company. Read more
Roman Duda After studying philosophy at university, Roman thought he would be a good fit for research and moved to 80,000 Hours to become our director of content. But he found that our applied practical research into careers was more different from writing philosophy essays than he had anticipated. As a result, he decided to teach himself programming and has been a software engineer at 80,000 Hours since 2018.
He has continued to learn as much as he can and went to a Codeworks software engineering bootcamp in 2021. He found that he was a much better fit for software engineering than research — in part because of the rapid feedback loops common in software roles — and was surprised by how useful he has continued to be at 80,000 Hours as a software engineer. How to predict your fit in advance The best way to gauge your fit is to try it out. You don’t need a computer science degree to do this. We recommend that you:
Try out writing code
— as a complete beginner, you can write
a Python program
in less than 20 minutes that reminds you to take a break every two hours. Once you know the fundamentals, try taking an
intro to computer science and programming
class, or
work through free resources . If you’re in college, you could try taking CS 101 (or an equivalent course outside the US). Do a project with other people
— this lets you test out writing programs in a team and working with larger codebases. It’s easy to come up with programming projects to do with friends — you can see some examples
here .
Contributing to open-source projects
in particular lets you work with very large existing codebases. Take an internship or do a
coding bootcamp
. It seems likely that a few software engineers could be significantly better than average. These very best software engineers are often people who spend huge amounts of time practising. This means that if you enjoy coding enough to want to do it both as a job and in your spare time, you are likely to be a good fit. How to enter this field While a degree in computer science or a quantitative subject is often helpful, many entry-level jobs don’t require one, meaning that software engineering is open to people with backgrounds in humanities and social sciences.
To enter, you need some basic programming skills and to be able to demonstrate a strong interest in software engineering. We’ve seen many people with humanities and social science degrees get junior software engineer jobs with high salaries, just through learning on their own or through coding bootcamps. Learning to program Basic computer programming skills can be extremely useful whatever you end up doing. You’ll find ways to automate tasks or analyse data throughout your career. This means that spending a little time learning to code is a very robustly useful option.
Learning on your own.
There are many great introductory computer science and programming courses online, including:
Udacity’s Intro to Computer Science ,
MIT’s Introduction to Computer Science and Programming , and
Stanford’s Programming Methodology . Don’t be discouraged if
your code doesn’t work the first time
— that’s what normally happens when people code! Attending a coding bootcamp.
We’ve advised many people who managed to get junior software engineer jobs in less than a year through going to a bootcamp. Coding bootcamps are focused on taking people with little knowledge of programming to as highly paid a job as possible within a couple of months. This is a great entry route if you don’t already have much background, though some claim the long-term prospects are not as good because you lack a deep understanding of computer science.
Course Report
is a great guide to choosing a bootcamp. Be careful to avoid
low-quality bootcamps . To find out more,
read our interview with an App Academy instructor . Studying computer science at university (or another subject involving lots of programming).
If you’re in university, this is a great option because it allows you to learn programming while the opportunity cost of your time is lower. It will also give you a better theoretical understanding of computing than a bootcamp will (which can be useful for getting the most highly paid and intellectually interesting jobs), a good network, some prestige, and a better understanding of lower-level languages like C. Having a CS degree also makes it easier to get a US work visa if you’re not from the US. Doing internships.
If you can find internships, ideally at your target employers (whether big tech companies or nonprofits), you’ll gain practical experience and the
key skills you otherwise wouldn’t pick up
from academic degrees (e.g. using version control systems and powerful text editors).Getting your first job in software engineering Larger companies will broadly advertise entry-level roles. For smaller companies, you may have to reach out directly and through your network. You can find startup positions on job boards such as AngelList, and many top venture capital firms have job boards for their portfolio companies.
Large software firms can have long and in-depth interview processes. You will be asked about general software knowledge, and later rounds of interviews are likely to give you problems around coding and algorithms, during which you will be asked to collaborate with the interviewer to solve the problem.
It’s worth practising software engineering interview questions in advance; often this means apply for companies you are less likely to want to work at first, and use these applications to get used to the process. This can be a stressful process (in part because you might face some early rejections, in part because it’s tricky to navigate applying if you don’t really want the job that much), so it’s important to take care of your mental health throughout the process.
It will also probably help to study the most popular interview guide, Cracking the Coding Interview. You can also practise by doing TopCoder problems.
We think that this guide to getting a software engineering job is particularly helpful. There are six rough steps:
Send a company your resume.
Make it as specific as possible to the job you’re applying for, and proofread it carefully. If you can get a referral from a friend, that will significantly increase your chances of success. Speak to a recruiter.
Read up about the company in advance, and make sure you have questions. Be nice — it’s going to help if the recruiter is on your side. Have a technical phone interview.
You’ll solve some problems together. Make sure you ask questions to clarify the problem, and strategise about the best possible approach before you start writing code. Finish by checking for bugs and make sure you’re handling errors correctly. When you’re done, ask the interviewer some questions! Have a three- to six-hour on-site interview.
It’s key to talk out loud as you work through a problem. And again, ask your interviewer some questions about them and the company. Get an offer from the recruiter.
You should make sure they think you are seriously considering the company or you may not get an offer. If you don’t get an offer, ask for feedback (though it’s not always possible for companies to give detailed feedback). If you need more time to think (or to apply elsewhere), tell them in advance, and they may choose to wait to give you details when you’re more ready to go through with an offer. Accept the offer! Want one-on-one advice on pursuing this path? If you think software engineering might be a great option for you, but you need help deciding or thinking about what to do next, our team might be able to help.
We can help you compare options, make connections, and possibly even help you find jobs or funding opportunities.
APPLY TO SPEAK WITH OUR TEAM Learn more More from 80,000 Hours: Our
problem profile on the importance of shaping the development of artificial intelligence Our
problem profile on reducing the risk of future pandemics, and other global catastrophic biological risks Our
review of careers in information security Our
review of earning to give Our
review of being a technical researcher in AI safety Our
review of being an early employee at a startup Our
review of founding tech startups Our
review of founding high-impact organisations focusing on particularly pressing problems Our
review of careers in data science
Other reading: Why
AI Safety Needs Great Engineers This post on
the importance of learning the basics of programming This post on
why confidence and conviction helps, especially at smaller organisations and startups
Automate the Boring Stuff with Python
by Al Sweigart, an introduction to programming for complete beginners Things I Wish Someone Had Told Me When I Was Learning How to Code This post on the
10x developer , and whether and how you can be much better at software development than the average The Missing Semester of Your CS Education , on practical topics you won’t necessarily have learnt at university Cracking the Coding Interview
by Gayle Laakmann McDowellThis
guide to getting a high-paying software engineering job Find a job in this path If you think you might be a good fit for this path and you’re ready to start looking for jobs, see our curated list of opportunities:
Read next:  Learn about other high-impact careers
Want to consider more paths? See our list of the highest-impact career paths according to our research.
Continue → Plus, join our newsletter and weâll mail you a free book Join our newsletter and weâll send you a free copy of The Precipice â a book by philosopher Toby Ord about how to tackle the greatest threats facing humanity.
Notes and references Even if you’re not working at an organisation focused on a particularly pressing problem, there may still be opportunities to have direct impact as a software developer. We argue elsewhere that
improving institutional decision-making
could be an effective way of preventing costly mistakes. Many important institutions â such as governments, international organisations like the
United Nations , and the
World Bank
â rely, as we all do, on software. Improving this software and its use could be a reasonable way of improving their decisions. ↩
Source:
StaffEng
↩
Bureau of Labor Statistics, US Department of Labor, Occupational Employment Statistics
(visited Jan 12, 2022). ↩
Data from
Salary.com , rounded to the nearest $1,000 (visited Jan 12, 2022). ↩
Bureau of Labor Statistics, US Department of Labor, Occupational Employment Statistics
(visited Jan 12, 2022). “Silicon Valley” is the San Jose-Sunnyvale-Santa Clara, CA metropolitan area. “San Francisco” is the San Francisco-Oakland-Hayward, CA metropolitan area. “Seattle” is the Seattle-Tacoma-Bellevue, WA metropolitan area. ↩
Data from
Levels.fyi
(visited Jan 27, 2022). ↩
Its cost of living index is 148.3 (100 = US national average), according to the
Council for Community and Economic Research
via
Wolfram Alpha . ↩
UK Office for National Statistics Annual Survey of Hours and Earnings, 2020.
↩
ZÃ¼rich’s cost of living index is 184.2 (100 = US national average), Tel Aviv’s is 172.9 and Silicon Valley’s is 148.3, according to the
Council for Community and Economic Research
via
Wolfram Alpha . ↩
Show all Join our newsletter Get regular updates featuring our latest research, events near you, and high-impact career opportunities.
Get 1-1 advice Want to tackle a pressing global problem with your career?
Speak to an advisor Our research
Overview: Key ideas
Especially pressing world problems
Effective altruism
Future generations
List of careers
Career guide (2017)
All our research Take action
Plan your career
Find a job
Get 1-1 advice
Join our community Follow us
Subscribe to our podcast
Join our newsletter
Follow us on Twitter
Join our LinkedIn group
Follow us on Facebook
Follow us on YouTube About us
Why 80,000 Hours?
Meet the team
Our donors
Media coverage
Our mistakes
We're affiliated with the Future of Humanity Institute and the Global Priorities Institute at the University of Oxford.
We're affiliated with the Future of Humanity Institute and the Global Priorities Institute at the University of Oxford.
We work closely with the Centre for Effective Altruism and Giving What We Can.
80,000 Hours is a project of the Effective Ventures Foundation (England and Wales registered charity number 1149828 and registered company number 07962181) with a registered 501(c)(3) Exempt Organization in the USA (Centre for Effective Altruism USA Inc., EIN 47-1988398).
Please contact us to suggest ideas, improvements, or corrections.
We do our best to provide useful information, but how you use the information is up to you. We don’t take responsibility for any loss that results from the use of information on the site. Please consult ourÂ full legal disclaimer and privacy policy.
Â© 2021 â all rights reserved. Please contact us if you wish to redistribute, translate, or adapt this work.
80,000 Hours is a project of the Effective Ventures Foundation (England and Wales registered charity number 1149828 and registered company number 07962181) with a registered 501(c)(3) Exempt Organization in the USA (Centre for Effective Altruism USA Inc., EIN 47-1988398).
Please contact us to suggest ideas, improvements, or corrections.
We do our best to provide useful information, but how you use the information is up to you. We don’t take responsibility for any loss that results from the use of information on the site. Please consult ourÂ full legal disclaimer and privacy policy.
Â© 2021 â all rights reserved. Please contact us if you wish to redistribute, translate, or adapt this work.


Link: https://www.codecademy.com/resources/blog/what-does-a-software-engineer-do/

What Does a Software Engineer Do? | Codecademy
Blog home
Career advice
Learning tips
Course updates
News
Business
Published 14 October 2020
/ Updated 7 November 2022
/
Career Advice
What Does a Software Engineer Do?
Interested in learning more about what software engineers do? By definition, software engineers build digital products, database programs, and computer systems for businesses by applying different kinds of programming languages to user-focused applications.
But to give you a better picture of what it's like to work as a software engineer, we spoke with Xavier, a Senior Software Engineer here at Codecademy. Xavier works on our Conversion team, which is responsible for improving the experience for learners that visit the Codecademy site for the first time.
In our interview, Xavier talks about some of the common misconceptions about working as a software engineer, and the difference between programmers, developers, and engineers. Plus, he shares what he loves most about his job in software engineering. Check out the video interview below and then read on to learn more. What is a Software Engineer? Many people believe that software engineers just sit in front of a computer and write lines of code for eight hours every day. In reality, nothing could be further from the truth. Xavier tells us:
Most developers create applications with the user experience in mind. Behind the scenes, they have to juggle multiple software projects and consult with their coworkers on how things should be done instead of just coding the entire time.
Software engineers work in collaboration with designers, data scientists, and project managers to figure out how to best create and support their processes and projects. They're also generally in charge of reviewing other people's code, meeting with team members, and doing a healthy amount of research.
Another important part of the job is identifying what the client needs, designing a prototype of the product, and developing a functional piece of software. After that, they have to run tests on the software to see if there are any existing bugs to remove. The final product is then released and made available to end-users.
You could say itâs a group effort â software engineers collaborate with project managers, UI/UX designers, data scientists, and subject-matter experts every step of the way. Of course, we canât overlook the interpersonal aspects, either, such as training developers to debug software or asking users to test apps for them. What is the difference between a software engineer, programmer, and web developer? If you're thinking about a job in coding, you've likely seen a variety of titles for roles in the field â software engineer, programmer, web developer. There's definitely a lot of overlap between these roles.
As Xavier mentions, you may find, during your job search and throughout your career journey, that some companies will use different names to refer to the same roles. For instance, some companies will refer to their programmers as web developers or front-end engineers, while others prefer to call them software or UI engineers.
There are a few ways to spot the differences among software engineer, web developer, and programmer roles.
Web developers are focused on creating browser apps with a combination of client-side and server-side programming languages. Generally speaking, they are involved in designing interactive websites and building user-facing applications.
Software engineers are more likely to work on computer systems as a whole. They develop standalone programs and apps to help users perform various activities. For the most part, they program, document, test, and maintain software by utilizing the best practices in DevOps.
Although their job descriptions may slightly differ, they do still fall under the same development umbrella.
The only real distinction you have to make is the one between front-end and back-end programming â whether youâre designing surface-level UI and user-centric applications or running hidden processes inside a database server.
But no matter what your title, Xavier says, "At the end of the day, we're all trying to solve business problems with code." Software engineers, programmers, and web developers are all solving challenging, real-world problems using programming languages. Software Engineers vs. Software Developers When you're looking for a job, you might see postings for Software Developers and Software Engineers. The difference is mostly semantic nowadays, and many companies don't distinguish between the two. But generally, engineering roles require knowledge of and experience with a broader scope of domains that includes development infrastructure: the tools and systems for building software.
Software Engineers are tasked with approaching development from a more holistic perspective and contributing more to research and testing than Software Developers. Because they tend to have more duties, Software Engineers may earn higher salaries. Data shows that Software Engineers average $122,867 in the U.S. while Software Developers earn $95,625 on average. Why being a software engineer is rewarding We asked Xavier about what he loves about his job as a software engineer and about coding. He shared three things â the flow state he gets into when coding, the way that code helps to solve real-world problems, and fact that there's a lot of demand for software engineers. The flow state Xavier shared that one of his favorite things is the flow state he gets into while coding. "When you're coding, you're thinking of very abstract, hard problems and you don't have time to think about other things. You become hyper-focused on the task at hand, and it's just a very empowering, very creative pursuit." You're improving the world "By writing code, you're actually solving real problems in the world," says Xavier. It's hard to see when you're in the code â you're just in that flow state, having fun. But as soon as you're done, you're putting that code out there and you're solving a very complicated business problem for millions of people. There's a lot you can do with tech, and code in particular, when it comes to having an impact on the world.There's a ton of demand for it Finally, Xavier shares that he likes that there's a lot of demand for software. "I can support myself and my family for years to come, based on the skills that I've learned."
The job outlook for software engineers is quite promising, due to an increasing demand for technology solutions. And that probably wonât change anytime soon â the demand for software engineers is projected to rise by 15% over the next decade. They are highly sought after by companies for their systematic approach to software development, where every product must fulfill the needs of the client. Advice for budding software engineers Considering a career in software engineering? We asked Xavier if he had any advice for those that are just starting out. His biggest piece of advice is to take initiative: In school you learn to do things the way your teacher might tell you how to do them. But, in business, there's no one telling you how to do things.I would encourage people to take initiative in finding solutions to problems they're not even asked to find; to take initiative in reaching out to people; to feel confident in asking a lot of questions. Try to take initiative in everything you do. The opportunities will find you if you reach out and try to solve different problems for different people. Xavier offers up even more tips and advice on his website in an article on How to Stand Out as an Entry-Level Software Engineer. How to become a Software Engineer If Xavier's interview was inspiring to you, a career in software engineering may be in your future â and you can get started right here on Codecademy!
First, you'll want to figure out what kind of Software Engineer you want to be, so do some research. Read about some of the cool jobs in tech; explore salary expectations and demand across industries.
Then once you've got a sense of how you want to proceed, take an online programming course to start learning the right skills and start building projects you can use to create a portfolio. Our Front-End Engineer, Back-End Engineer, and Full-Stack Engineer career paths are designed to give you all the skills you need to land your first job as an engineer.
Want to see how other people landed their first Software Engineer jobs after taking Codecademy courses? Check out our Learner Stories for course recommendations, advice on how to get in the door at tech companies, and more.
Code Foundations Courses & Tutorials | CodecademyInterested in learning how to code, but unsure where to start? Our Code Foundations domain provides an overview of the main applications of programming and teaches important concepts that youâll find in every programming language. This content will prepare you to chart a course to a more technical câ¦Codecademy
Related Courses
Get more practice, more projects, and more guidance.
Upgrade to Pro
Codecademy Team
Read more posts by this author.
Read More
— Codecademy News —
Career Advice
8 Exciting Tech Careers In E-commerce â & How To Get Them
Practice these Ruby on Rails Interview Questions to Help You Land Your Next Role
Top 25 Project Manager Interview Questions and How To Answer Them
See all 288 posts â
News and events
Updates to our Learn the Command Line Course
We're revamping our Learn the Command Line course with updated lessons, quizzes, and projects as well as a new offline project.
Cole Romano
Career Advice
1 on 1 With Engineering Leaders: Engineering Leadership Coach Mathias Meyer
The latest interview in our 1 on 1 with Engineering Leaders series is here. This week we hear from Engineering Coach Mathias Meyer.
Codecademy Team
—
What Does a Software Engineer Do?
Share this
Codecademy News
© 2022
Latest Posts
Facebook
Twitter
Privacy Policy
Cookie Policy
Do Not Sell My Personal Information
Terms
Made with ï¸â¤ï¸ in NYC © 2022 Codecademy


Link: https://cmpe.sjsu.edu/faculty-staff

Faculty & Staff Directory | Computer Engineering | San JosÃ© State University
Skip to main content
SJSU
Computer Engineering
San JosÃ© State University
College of Engineering
Toggle navigation
Search here
Search
Search
About
About Computer Engineering
Contact Us
Academics
BS in Computer Engineering
BS in Software Engineering
MS in Computer Engineering
MS in Software Engineering
MS in Artificial Intelligence
Cybersecurity Certificates Program
Students
Current Students
Class Schedules
New Class Offerings
Student Forms
Student Organizations
Useful Links
Fall 2022 Schedule FAQ
Request Forms
Faculty & Staff
Directory
Advisors
Faculty & Staff Forms
Office Hours
Career Opportunities
TA Positions
Tenure Track Positions
Technology Showcase
Computer Engineering
San JosÃ© State University
College of Engineering
SJSU Home
>
College of Engineering
>
Computer Engineering
>
Faculty & Staff
> Faculty & Staff Directory
Faculty & Staff Directory
Welcome to the Computer Engineering Faculty & Staff Directory.
If you would like to search faculty and staff campus-wide, please use the San JosÃ© State University Directory.
Name
First
Last
Contact Information
Rod Fatoohi
Professor, Chair
Rod
Fatoohi
chair-computer-engineering@sjsu.edu (408) 924-4150
ENG 284a
SJSU People Profile
Office Hours
Research Interest: Â Computer networking and parallel processing.
Magdalini
Eirinaki
Professor, Associate Chair
Magdalini
Eirinaki
magdalini.eirinaki@sjsu.edu (408) 924-3828
ENG 283F
SJSU People Profile
Office Hours
Research Interests: Â Recommender systems,
machine learning/data mining, social network analysis,
social recommender systems, deep recommender systems,
data analytics/mining applications.
Â
Ahmet Bindal Professor
Ahmet
Bindal
ahmet.bindal@sjsu.edu (408) 924-4195
ENG 277
SJSU People Profile
Office Hours
Research Interest:Â  VLSI design, computer architecture and robotics.
Mohamed Fayad Professor
Mohamed
Fayad
m.fayad@sjsu.edu (408) 924-7364
ENG 283I
SJSU People Profile
Office Hours
Jerry Gao Professor
Jerry
Gao
jerry.gao@sjsu.edu (408) 924-3904
ENG 267B
SJSU People Profile
Office Hours
Research Interests:Â  Cloud computing, smart city and big data computing,
TaaS, software engineering, test automation, mobile computing and cloud services.
Donald Hung
Professor
Donald
Hung
donald.hung@sjsu.edu (408) 924-4087
ENG 283A
SJSU People Profile
Office Hours
Advising Information
Research Interests:Â  Design, verification and test
of digital/computing hardware; SoC and multicore systems;
application-driven algorithms and architecture;
parallel programming; FPGAs and reconfigurable computing.
Harry Li Professor
Harry
Li
hua.li@sjsu.edu (408) 924-4060
ENG 267A
SJSU People Profile
Office Hours
Research Interests:Â  Embedded Systems, Multimedia Computing,
VLSI Design, Wireless Communications, Computer Vision and
Computer Graphics, Neural Networks, Fuzzy Logic and Neural Fuzzy Control.
Haluk Ozemek Professor
Haluk
Ozemek
haluk.ozemek@sjsu.edu (408) 924-3877
ENG 271
Office Hours
Research Interests:Â  Embedded Systems in Cardiovascular systems.
Simon Shim Professor
Simon
Shim
simon.shim@sjsu.edu (408) 924-7853
ENG 269
SJSU People Profile
Office Hours Research Interests:Â Internet computing, database management,
machine learning, and information retrieval.
Xiao Su
Professor, Associate Dean for Graduate Studies and Research
Xiao
Su
xiao.su@sjsu.edu (408) 924-7366
ENG 284A
SJSU People Profile
Office Hours
Research Interests: Â Computer networking,
multimedia communications, network security, and machine learning.
Weider Yu Professor
Weider
Yu
weider.yu@sjsu.edu (408) 924-7365
ENG 283G
SJSU People Profile
Office Hours
Research Interests:Â  Distributed Software,
Big Data and Mobile engineering, systems and development,
tools and processes, distributed open software design technologies. Quality.
Kaikai Liu Associate Professor
Kaikai
Liu
Kaikai.liu@sjsu.edu (408) 924-7847
E283J
Research Interests:Â  Mobile and Cyber-Physical Systems,
Internet-of-Things, Smart Sensing, Intelligent and Autonomous Systems,
oftware-Defined Computing and Networking.
Younghee Park Associate Professor
Younghee
Park
younghee.park@sjsu.edu (408) 924-7854
ENG 263
Office Hours
SJSU people profile
Research Interests:Â  Cybersecurity, IoT security,
SDN/NFV, Blockchain, AI security, Biometric Security, Malware Detection.
Wencen Wu
Associate Professor
Wencen
Wu
wencen.wu@sjsu.edu
ENG187
Research Interests:Â  Robotics, systems and control,
machine learning, and distributed parameter systems as applied to
cyber-physical systems and autonomous multi-robot systems.
Gheorghi
Guzun Assistant Professor
Gheorghi
Guzun
gheorghi.guzun@sjsu.edu (408) 924-4203
E181
Research Interests:Â  Data management algorithms and
systems that accelerate big data analytics through scalable indexing;
ata compression; Machine learning algorithms.
Jorjeta
Jetcheva
Assistant Professor
Jorjeta
Jetcheva
Jorjeta.Jetcheva@sjsu.edu
Nima
Karimian Assistant Professor
Nima
Karimian
nima.karimianbahnemiri@sjsu.edu
Research Interests:Â  Security and privacy of biometrics,
Internet of Things and hardware security, computer vision,
and machine learning.
Carlos Rojas
Assistant Professor
Carlos
Rojas
carlos.rojas@sjsu.edu (408) 924-4131
E283J
Gokay Saldamli Assistant Professor
Gokay
Saldamli
Gokay.Saldamli@sjsu.edu (408) 924-2984
ENG 179
Research Interest: Blockchain, Post-Quantum Cryptography, Deep Learning,
IoT security and Cybersecurity.
Â
Mahima
Agumbe
Suresh
Assistant Professor
Mahima
Suresh
mahima.agumbesuresh@sjsu.edu
Research Interests:Â  Cyber-Physical Systems, Internet of Things,
nd Data Analytics for Smart City Applications.
Augmented Reality for Safety and Education.
Stas
Tiomkin Assistant Professor
Stas
Tiomkin
stas.tiomkin@sjsu.edu
Research Interests:
artificial intelligence and life, reinforcement learning,Â human-machine collaboration, information processing in dynamical control systems, intrinsic motivation and unsupervised learning, robotics, structured deep learning, geometric control, and information theory.
Haonan Wang
Assistant Professor
Haonan
Wang
haonan.wang@sjsu.edu
Charley Abboud Lecturer
Charley
Abboud
Charley.Abboud@sjsu.edu
Sithu Aung Lecturer
Sithu
Aung
sjsucmpecontact@gmail.com
ENGR 281
Office Hours
Andrew Bond Lecturer
Andrew
Bond
andrew.bond@sjsu.edu
Robert Bruce Lecturer
Robert
Bruce
robert.bruce@sjsu.edu
Frank Butt Lecturer
Frank
Butt
frank.butt@sjsu.edu
Shih Yu Chang Lecturer
Shih Yu
Chang
shihyu.chang@sjsu.edu
Ishie Eswar
Lecturer
Ishie
Eswar
Ishie.Eswar@sjsu.edu (415) 545-8458
ENG 279
Office Hours
Advising Information
John Gash Lecturer
John
Gash
john.gash@sjsu.edu
ENG 283K
Office Hours
Jahan
Ghofraniha Lecturer
Jahan
Ghofraniha
Jahan.Ghofraniha@sjsu.edu
Juan Gomez Lecturer
Juan
Gomez
j_carlos_gomez@yahoo.com
ENG 281
Office Hours
Dan Harkey
Lecturer, MSSE Advisor
Dan
Harkey
dan.harkey@sjsu.edu (408) 924-4038
ENG 283D
Office Hours
Advising Information
Brett Hartbeck Lecturer
Brett
Hartbeck
brett.hartbeck@sjsu.edu
ENG 250
Preetpal Kang Lecturer
Preetpal
Kang
preetpal.kang@sjsu.edu
ENG 281
Office Hours
Michael Larkin Lecturer
Michael
Larkin
michael.larkin@sjsu.edu
Kong Li Lecturer
Kong
Li
kong.li@sjsu.edu
ENG 250
Office Hours
People Profile
Hungwen Li Lecturer
Hungwen
Li
hungwen.li@sjsu.edu
ENG 281
Office Hours
Frank Lin Lecturer
Frank
Lin
frank.lin@sjsu.edu
ENG 367
Office Hours
Ron Mak Lecturer
Ron
Mak
ron.mak@sjsu.edu
Eng 250
SJSUÂ People Profile
Office hours
Anna Meng Lecturer
Anna
Meng
hsin-yi.meng@sjsu.edu
ENG 250
Office Hours
Faramarz Mortezaie Lecturer
Faramarz
Mortezaie
faramarz.mortezaie@sjsu.edu
Paul Nguyen Lecturer
Paul
Nguyen
paul.nguyen@sjsu.edu
ENG 281
Office Hours
Kevin Nguyen Lecturer
Kevin
Nguyen
kevin.m.nguyen@sjsu.edu
Vishnu Pendyala Lecturer
Vishnu
Pendyala
vishnu.pendyala@sjsu.edu
Rakesh Ranjan Lecturer
Rakesh
Ranjan
ranjanr@us.ibm.com (408) 924-4132
ENG 281
Office Hours
Ammar Rayes Lecturer
Ammar
Rayes
ammar.rayes@sjsu.edu
Arash Shokouh Lecturer
Arash
Shokouh
Shai Silberman
Lecturer
Shai
Silberman
shai.silberman@sjsu.edu
Office Hours
Richard Sinn Lecturer
Richard
Sinn
richardsinn@yahoo.com
ENG 281
Office Hours
Chao-Li Tarng Lecturer
Chao-Li
Tarng
chaoli.tarng@sjsu.edu
ENG 259
Office Hours
Bapi Vinnakota Lecturer
Bapi
Vinnakota
bapiraju.vinnakota@sjsu.edu
Gopinath
k Vinodh Lecturer
Gopinath
Vinodh
gopinath.vinodh@sjsu.edu
Chandrasekar Vuppalapati Lecturer
Chandrasekar
Vuppalapati
chandrasekar.vuppalapati@sjsu.edu
ENG 281
Office Hours
Charles Zhang Lecturer
Charles
Zhang
charles.zhang@sjsu.edu
ENG 281
Office Hours
Martin Alvarezlopez
Undergraduate Advisor
Martin
Alvarezlopez
martin.alvarezlopez@sjsu.edu
E247
William
Giallo
Administrative Analyst
William
Giallo
William.Giallo@sjsu.edu
E284
Melissa Mathews
Administrative Support Coordinator
Melissa
Mathews
melissa.mathews@sjsu.edu
(408) 924-4105
ENG 284
Brandi Rubino
Administrative Analyst
Brandi
Rubino
brandi.rubino@sjsu.edu (408) 924-4151
ENG 284
Monica Serna
BS advisor
Monica
Serna
undergradadvisor-cmpe-se@sjsu.edu (408) 924-4150
E279
Office Hours
Zhenyu (James) Wu
System Administrator
Zhenyu
Wu
zhenyu.wu@sjsu.edu (408) 924-3897
ENG 278A
Hotavya
Chaudhuri Student Assistant
Hotavya
Chaudhuri
frontdesk-computer-engineering@sjsu.edu
Isabella
Garcia
Front Desk Assistant
Isabella
Garcia
frontdesk-computer-engineering@sjsu.edu (408) 924-4150
E284
CMPE Main Office Hours:M-Th 9am-6pm
Â Â Â Â Â Â Â  F 9am-5pm
(closed for lunch 12:00pm-1:30pm)
Shubham
Goswami Student Assistant
Shubham
Goswami
frontdesk-computer-engineering@sjsu.edu
CMPE Main Office Hours:M-Th 9am-6pm
Â Â Â Â Â Â Â  F 9am-5pm
(closed for lunch 12:00pm-1:30pm)
Jacqueline
Toscano Student Assistant
Jacqueline
Toscano
frontdesk-computer-engineering@sjsu.edu
Give to SJSU Engineering
CMPE on Facebook
CMPE on LinkedIn
Navigate
About
Academics
Students
Faculty & Staff
Career Opportunities
Technology Showcase
Directory
Advisors
Faculty & Staff Forms
Office Hours
Computer EngineeringSan JosÃ©Â State University
One Washington Square
San Jose, CA 95192-0180Phone: 408-924-4150Fax: 408-924-4153
Location: ENG 284
Hours: M-FÂ 8am-5pm
(closed for lunch 12:00pm-1:00pm)Contact Us
Campus Map/Directions
Information for
Alumni
Current Students
Donors
Faculty & Staff
Future Students
Researchers
Colleges
Applied Sciences & Arts
Business
Education
Engineering
Humanities & the Arts
International & Extended Studies
Science
Social Sciences
Quick Links
Academics
BookStore
Budget Central
Canvas
Careers & Jobs
King Library
Parking & Maps
Contact Us
Contact
Directory
Report a problem with this website
San JosÃ© State University
One Washington Square,
San JosÃ©, CA 95192
408-924-1000
©2015
SJSU
Charles W. DavidsonCollege of Engineering
San JosÃ© State UniversityOne Washington Square,San JosÃ©, CA 95192-0080
Tel: 408-924-3800
Fax: 408-924-3818


Link: https://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm

Software Developers, Quality Assurance Analysts, and Testers :
Occupational Outlook Handbook: :
U.S. Bureau of Labor Statistics
Skip to Content
An official website of the United States government
Here is how you know
United States Department of Labor
The .gov means it's official.
Federal government websites often end in .gov or .mil. Before sharing sensitive information,
make sure you're on a federal government site.
The site is secure.
The
https:// ensures that you are connecting to the official website and that any
information you provide is encrypted and transmitted securely.
U.S. Bureau of Labor Statistics
Follow Us
|
Release Calendar
|
Blog
Search button
Search:
Menu
Search button
Search:
Home
About BLS
History
Our Leadership
Budget and Performance
Questions and Answers
A-Z Index
Glossary
Careers at BLS
BLS Speakers Available
Errata
Contact BLS
Overview of BLS Statistics
Demographics
Industries
Business Costs
Occupations
Geography
Resources For
Business Leaders
Consumers
Developers
Economists
Investors
Jobseekers
Media
Public Policymakers
Researcher
Students & Teachers
Survey Respondents
Subjects
Inflation & Prices
Consumer Price Index
Producer Price Indexes
Import/Export Price Indexes
Contract Escalation
Price Index Research
Pay & Benefits
Employment Costs
National Compensation Data
Wage Data by Occupation
Earnings by Demographics
Earnings by Industry
County Wages
Benefits
Modeled Wage Estimates
Compensation Research
Strikes & Lockouts
Occupational Requirements
Unemployment
National Unemployment Rate
State & Local Unemployment Rates
Unemployment Research
Employment
National Employment
State & Local Employment
County Employment
Worker Characteristics
American Indian Report
Employment Projections
Job Openings & Labor Turnover Survey
Business Response Survey
Employment by Occupation
Work Experience Over Time
Business Employment Dynamics
Foreign Direct Investment
Employment Research
Workplace Injuries
Productivity
Labor and Total Factor Productivity
Productivity Research
Spending & Time Use
Consumer Expenditures
How Americans Spend Time
International
International Technical Cooperation
Import/Export Price Indexes
Geographic Information
New England (Boston)
New York-New Jersey (NY City)
Mid-Atlantic (Philadelphia)
Southeast (Atlanta)
Midwest (Chicago)
Southwest (Dallas)
Mountain-Plains (Kansas City)
West (San Francisco)
Data Tools
Data Retrieval Tools
BLS Popular Series
Series Report
Top Picks, One Screen, Multi-Screen, and Maps
Data Finder
Public Data API
Charts and Applications
Charts for Economic News Releases
CPI Inflation Calculator
Injury and Illness Calculator
Pay Measure Comparison
Demographic Data Sources
COVID-19 Economic Trends
Industry Productivity Viewer
Employment and Wages Data Viewer
Industry Finder from the Quarterly Census of Employment and Wages
Customized Tables
U.S. Economy at a Glance
Regions, States & Areas at a Glance
Industry at a Glance
Text Files
News Release Tables
More Sources of Data
Restricted Data Access
Discontinued Databases
Questions & Answers
Special Notices
Publications
Latest Publications
The Economics Daily
Monthly Labor Review
Beyond the Numbers
Spotlight on Statistics
Reports
Commissioner's Corner
Videos
Career Outlook
Occupational Outlook Handbook
Geographic Profile
Handbook of Methods
Research Papers
Copyright Information
Contact & Help
Weekly Update
Economic Releases
Latest Releases
Major Economic Indicators
Schedules for news Releases
By Month
By News Release
Current Year
Prior Years
Archived News Releases
Employment & Unemployment
Monthly
Quarterly, annual, and other
Inflation & Prices
Pay & Benefits & Workplace Injuries
Productivity & Technology
Employment Projections
Regional News Releases
Classroom
K-12 Student & Teacher Resources
Games & Quizzes
Student's Desk
Teacher's Desk
Questions & Answers
Beta
Redesigned News Releases
OOH HOME
|
OCCUPATION FINDER
|
OOH FAQ
|
OOH GLOSSARY
|
A-Z INDEX
|
OOH SITE MAP
Occupational Outlook Handbook
>
Computer and Information Technology
>
Software Developers, Quality Assurance Analysts, and Testers
PRINTER-FRIENDLY
Summary
What They Do
Work Environment
How to Become One
Pay
Job Outlook
State & Area Data
Similar Occupations
More Info
Summary
Please enable javascript to play this video.
Video transcript available at https://www.youtube.com/watch?v=_WQ_VV4pXPc.
Quick Facts:
Software Developers, Quality Assurance Analysts, and Testers
2021
Median Pay
$109,020
per year
$52.41
per hour
Typical Entry-Level Education
Bachelor's degree
Work Experience in a Related Occupation
None
On-the-job Training
None
Number of Jobs, 2021
1,622,200
Job Outlook, 2021-31
25% (Much faster than average)
Employment Change, 2021-31
411,400
What Software Developers, Quality Assurance Analysts, and Testers Do
Software developers design computer applications or programs. Software quality assurance analysts and testers identify problems with applications or programs and report defects.
Work Environment
Many software developers, quality assurance analysts, and testers work in computer systems design and related services, in manufacturing, or for software publishers. They often work in offices and on teams with other software developers or quality assurance analysts and testers.
How to Become a Software Developer, Quality Assurance Analyst, or Tester
Software developers, quality assurance analysts, and testers typically need a bachelor’s degree in computer and information technology or a related field. Some employers prefer to hire developers who have a master’s degree.
Pay
The median annual wage for software developers was $120,730 in May 2021.
The median annual wage for software quality assurance analysts and testers was $98,220 in May 2021.
Job Outlook
Overall employment							of software developers, quality assurance analysts, and testers is projected to grow							 25 percent from 2021 to 2031, much faster than the average for all occupations.
About 162,900 openings for software developers, quality assurance analysts, and testers are projected each year, on average, over the decade.
Many of those openings are expected to result from the need to replace workers who transfer to different occupations or exit the labor force, such as to retire.
State & Area Data
Explore resources for employment and wages by state and area for software developers, quality assurance analysts, and testers.
Similar Occupations
Compare the job duties, education, job growth, and pay of software developers, quality assurance analysts, and testers with similar occupations.
More Information, Including Links to O*NET
Learn more about software developers, quality assurance analysts, and testers by visiting additional resources, including O*NET, a source on key characteristics of workers and occupations.
What They Do ->
What Software Developers, Quality Assurance Analysts, and Testers Do
About this section
Developers create diagrams that help programmers write computer code.
Software developers create the computer applications that allow users to do specific tasks and the underlying systems that run the devices or control networks. Software quality assurance analysts and testers design and execute software tests to identify problems and learn how the software works.
Duties
Software developers typically do the following:
Analyze users’ needs and then design and develop software to meet those needs
Recommend software upgrades for customers’ existing programs and systems
Design each piece of an application or system and plan how the pieces will work together
Create a variety of models and diagrams showing programmers the software code needed for an application
Ensure that a program continues to function normally through software maintenance and testing
Document every aspect of an application or system as a reference for future maintenance and upgrades
Software quality assurance analysts and testers typically do the following:
Create test plans, scenarios, and procedures for new software
Identify project risks and recommend steps to minimize those risks
Implement software testing, using either manual or automated programs and exploratory testing, and evaluate results
Document and report defects or problems with software
Provide feedback to software developers and stakeholders regarding usability and functionality
Software developers, quality assurance analysts, and testers are involved in the entire process of creating a software program. Developers may begin by asking how the customer plans to use the software so that they can identify the core functionality the user needs. Software developers also determine other requirements, such as security. They design the program and then work closely with programmers, who write computer code. However, some developers write code themselves instead of giving instructions to programmers.
Software quality assurance analysts and testers design and execute systems to check the software for problems. As part of their testing, these workers document and track the software’s potential defects or risks. They also assess its usability and functionality to identify difficulties a user might have. After completing testing, they report the results to software or web developers and review ways to solve any problems they found.
After the program is released to the customer, a developer may perform upgrades and maintenance. Quality assurance analysts and testers run manual and automated checks to look for errors and usability problems once the software is released and after any upgrades or maintenance.
The following are examples of types of software developers:
Applications software developers design computer applications, such as games, for consumers. They may create custom software for a specific customer or commercial software to be sold to the general public. Some applications software developers create databases or programs for use internally or online.
Software engineers take a broad view of a project’s system and software requirements, planning its scope and order of work. These workers may direct software developers, quality assurance analysts, and testers.
Systems software developers create the operating systems for the public or specifically for an organization. These operating systems keep computers functioning and control most of the consumer electronics in use today, including those in cell phones and cars. Often, systems software developers also build the interface that allows users to interact with the computer.
Developers who supervise a software project from the planning stages through implementation sometimes are called information technology (IT) project managers. These workers monitor the project’s progress to ensure that it meets deadlines, standards, and cost targets. For information on IT project managers who plan and direct an organization’s IT department or IT policies, see the profile on computer and information systems (CIS) managers.
<-
Summary
Work Environment ->
Work Environment
About this section
Developers may oversee a team of people during the software development process.
Software developers held about 1.4 million jobs in 2021. The largest employers of software developers were as follows:
Computer systems design and related services
32%
Finance and insurance
11
Software publishers
10
Manufacturing
9
Management of companies and enterprises
5
Software quality assurance analysts and testers held about 196,300 jobs in 2021. The largest employers of software quality assurance analysts and testers were as follows:
Computer systems design and related services
33%
Finance and insurance
11
Software publishers
9
Administrative and support services
7
Manufacturing
7
Developing software is usually a collaborative process. As a result, developers, quality assurance analysts, and testers work on teams with others who also contribute to designing, developing, and programming successful software.
Work Schedules
Most software developers, quality assurance analysts, and testers work full time.
<-
What They Do
How to Become One ->
How to Become a Software Developer, Quality Assurance Analyst, or Tester
About this section
Software developers, quality assurance analysts, and testers typically need a bachelorâs degree.
Software developers, quality assurance analysts, and testers typically need a bachelor’s degree in computer and information technology or a related field. Some employers prefer to hire developers who have a master’s degree.
Education
Software developers, quality assurance analysts, and testers typically need a bachelor's degree in computer and information technology or a related field, such as engineering or mathematics. Computer and information technology degree programs cover a broad range of topics. Students may gain experience in software development by completing an internship, such as at a software company, while in college. For some software developer positions, employers may prefer that applicants have a master’s degree.
Although writing code is not their primary responsibility, developers must have a strong background in computer programming. They usually gain this experience in school. Throughout their career, developers must keep up to date on new tools and computer languages.
Advancement
Software developers can advance to become project management specialists or computer and information systems managers, positions in which they oversee the software development process.
Important Qualities
Analytical skills. Software developers, quality assurance analysts, and testers must evaluate users’ needs and then design software to function properly and meet those needs.
Communication skills. These workers must be able to give clear instructions and explain problems that arise to other team members involved in development. They must also be able to explain to nontechnical users, such as customers, how the software works and answer any questions that arise.
Creativity. Software developers, quality assurance analysts, and testers must be innovative in their approaches to designing, identifying problems with, and improving computer software.
Detail oriented. These workers often need to concentrate on many parts of an application or system at the same time, and they must pay attention to detail when looking for potential areas of user error.
Interpersonal skills. Software developers, quality assurance analysts, and testers must be able to work well with others who contribute to designing, programming, and testing successful software.
Problem-solving skills. Because these workers produce software from beginning to end, they must be able to solve problems that arise throughout the design process.
<-
Work Environment
Pay ->
Pay
About this section
Software Developers, Quality Assurance Analysts, and Testers
Median annual wages, May 2021
Software developers
$120,730
Software developers, quality assurance analysts, and testers
$109,020
Software quality assurance analysts and testers
$98,220
Computer occupations
$97,430
Total, all occupations
$45,760
Note: All Occupations includes all occupations in the U.S. Economy.Source: U.S. Bureau of Labor Statistics, Occupational Employment and Wage Statistics
The median annual wage for software developers was $120,730 in May 2021.
The median wage is the wage at which half the workers in an occupation earned more than that amount and half earned less. The lowest 10 percent earned less than $64,470, and the highest 10 percent earned more than $168,570.
The median annual wage for software quality assurance analysts and testers was $98,220 in May 2021.
The lowest 10 percent earned less than $48,960, and the highest 10 percent earned more than $153,250.
In May 2021, the median annual wages for software developers in the top industries in which they worked were as follows:
Software publishers
$130,180
Manufacturing
124,950
Finance and insurance
124,390
Management of companies and enterprises
120,710
Computer systems design and related services
103,010
In May 2021, the median annual wages for software quality assurance analysts and testers in the top industries in which they worked were as follows:
Manufacturing
$102,090
Computer systems design and related services
98,000
Software publishers
94,980
Finance and insurance
92,660
Administrative and support services
86,060
Most software developers, quality assurance analysts, and testers work full time.
<-
How to Become One
Job Outlook ->
Job Outlook
About this section
Software Developers, Quality Assurance Analysts, and Testers
Percent change in employment, projected 2021-31
Software developers
26%
Software developers, quality assurance analysts, and testers
25%
Software quality assurance analysts and testers
21%
Computer occupations
15%
Total, all occupations
5%
Note: All Occupations includes all occupations in the U.S. Economy.Source: U.S. Bureau of Labor Statistics, Employment Projections program
Overall employment				of software developers, quality assurance analysts, and testers is projected to grow				 25 percent from 2021 to 2031, much faster than the average for all occupations.
About 162,900 openings for software developers, quality assurance analysts, and testers are projected each year, on average, over the decade.
Many of those openings are expected to result from the need to replace workers who transfer to different occupations or exit the labor force, such as to retire.
Employment
Increased demand for software developers, software quality assurance analysts, and testers will stem from the continued expansion of software development for artificial intelligence (AI), Internet of Things (IoT), robotics, and other automation applications.
In response to concerns over threats to computer security, organizations are expected to increase investment in software that protects their electronic networks and infrastructure. This investment could result in an increased demand for developers to create security software and for quality assurance analysts and testers to create and execute software tests.
Software developers, software quality assurance analysts, and testers are likely to see new opportunities because of the increasing number of products that use software. For example, software systems continue to be built for consumer electronics and other products, including IoT-connected devices and electric vehicles.
Employment projections data for
software developers, quality assurance analysts, and testers, 2021-31
Occupational Title
SOC Code
Employment, 2021
Projected Employment, 2031
Change, 2021-31
Employment by Industry
Percent
Numeric
SOURCE: U.S. Bureau of Labor Statistics, Employment Projections program
Software developers, quality assurance analysts, and testers
—
1,622,200
2,033,600
25
411,400
—
Software developers
15-1252
1,425,900
1,796,500
26
370,600
Get data
Software quality assurance analysts and testers
15-1253
196,300
237,100
21
40,800
Get data
<-
Pay
State & Area Data ->
State & Area Data
About this section
Occupational Employment and Wage Statistics (OEWS)
The Occupational Employment and Wage Statistics (OEWS) program produces employment and wage estimates annually for over 800 occupations. These estimates are available for the nation as a whole, for individual states, and for metropolitan and nonmetropolitan areas. The link(s) below go to OEWS data maps for employment and wages by state and area.
Software developers
Software quality assurance analysts and testers
Projections Central
Occupational employment projections are developed for all states by Labor Market Information (LMI) or individual state Employment Projections offices. All state projections data are available at www.projectionscentral.com. Information on this site allows projected employment growth for an occupation to be compared among states or to be compared within one state. In addition, states may produce projections for areas; there are links to each state’s websites where these data may be retrieved.
CareerOneStop
CareerOneStop includes hundreds of occupational profiles with data available by state and metro area. There are links in the left-hand side menu to compare occupational employment by state and occupational wages by local area or metro area. There is also a salary info tool to search for wages by zip code.
<-
Job Outlook
Similar Occupations ->
Similar Occupations
About this section
This table shows a list of occupations with job duties that are similar to those of software developers, quality assurance analysts, and testers.
Occupation
Job Duties
ENTRY-LEVEL EDUCATION
2021
MEDIAN PAY
Computer and Information Research Scientists
Computer and information research scientists design innovative uses for new and existing computing technology.
Master's degree
$131,490
Computer and Information Systems Managers
Computer and information systems managers plan, coordinate, and direct computer-related activities in an organization.
Bachelor's degree
$159,010
Computer Hardware Engineers
Computer hardware engineers research, design, develop, and test computer systems and components.
Bachelor's degree
$128,170
Computer Network Architects
Computer network architects design and build data communication networks, including local area networks (LANs), wide area networks (WANs), and Intranets.
Bachelor's degree
$120,520
Computer Programmers
Computer programmers write, modify, and test code and scripts that allow computer software and applications to function properly.
Bachelor's degree
$93,000
Computer Support Specialists
Computer support specialists maintain computer networks and provide technical help to computer users.
See How to Become One
$57,910
Computer Systems Analysts
Computer systems analysts study an organization’s current computer systems and design ways to improve efficiency.
Bachelor's degree
$99,270
Database Administrators and Architects
Database administrators and architects create or organize systems to store and secure data.
Bachelor's degree
$101,000
Information Security Analysts
Information security analysts plan and carry out security measures to protect an organization’s computer networks and systems.
Bachelor's degree
$102,600
Mathematicians and Statisticians
Mathematicians and statisticians analyze data and apply computational techniques to solve problems.
Master's degree
$96,280
Postsecondary Teachers
Postsecondary teachers instruct students in a variety of academic subjects beyond the high school level.
See How to Become One
$79,640
Web Developers and Digital Designers
Web developers create and maintain websites. Digital designers develop, create, and test website or interface layout, functions, and navigation for usability.
Bachelor's degree
$78,300
<-
State & Area Data
More Info ->
Contacts for More Information
About this section
For more information about software developers, quality assurance analysts, and testers, visit
Association for Computing Machinery
Association for Software Testing
IEEE Computer Society
Computing Research Association
CompTIA
For information about opportunities for women pursuing information technology careers, visit
National Center for Women & Information Technology
CareerOneStop
For career videos on software developers, quality assurance analysts, and testers, visit
Software developers, applications
Software quality assurance analysts and testers
O*NET
Software Developers
Software Quality Assurance Analysts and Testers
<-
Similar Occupations
Suggested citation:
Bureau of Labor Statistics, U.S.
Department of Labor, Occupational Outlook Handbook, Software Developers, Quality Assurance Analysts, and Testers,
at https://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm (visited October 06, 2022).
Last Modified Date:
Friday, September 9, 2022
What They Do
The What They Do tab describes the typical duties and responsibilities of workers in the occupation, including what tools and equipment they use and how closely they are supervised. This tab also covers different types of occupational specialties.
Work Environment
The Work Environment tab includes the number of jobs held in the occupation and describes the workplace, the level of physical activity expected, and typical hours worked. It may also discuss the major industries that employed the occupation. This tab may also describe opportunities for part-time work, the amount and type of travel required, any safety equipment that is used, and the risk of injury that workers may face.
How to Become One
The How to Become One tab describes how to prepare for a job in the occupation. This tab can include information on education, training, work experience, licensing and certification, and important qualities that are required or helpful for entering or working in the occupation.
Pay
The Pay tab describes typical earnings and how workers in the occupation are compensated—annual salaries, hourly wages, commissions, tips, or bonuses. Within every occupation, earnings vary by experience, responsibility, performance, tenure, and geographic area. For most profiles, this tab has a table with wages in the major industries employing the occupation. It does not include pay for self-employed workers, agriculture workers, or workers in private households because these data are not collected by the Occupational Employment and Wage Statistics (OEWS) survey, the source of BLS wage data in the OOH.
State & Area Data
The State and Area Data tab provides links to state and area occupational data from the Occupational Employment and Wage Statistics (OEWS) program, state projections data from Projections Central, and occupational information from the Department of Labor's CareerOneStop.
Job Outlook
The Job Outlook tab describes the factors that affect employment growth or decline in the occupation, and in some instances, describes the relationship between the number of job seekers and the number of job openings.
Similar Occupations
The Similar Occupations tab describes occupations that share similar duties, skills, interests, education, or training with the occupation covered in the profile.
Contacts for More Information
The More Information tab provides the Internet addresses of associations, government agencies, unions, and other organizations that can provide additional information on the occupation. This tab also includes links to relevant occupational information from the Occupational Information Network (O*NET).
2021 Median Pay
The wage at which half of the workers in the occupation earned more than that amount and half earned less. Median wage data are from the BLS Occupational Employment and Wage Statistics survey. In May 2021, the median annual wage for all workers was $45,760.
On-the-job Training
Additional training needed (postemployment) to attain competency in the skills needed in this occupation.
Entry-level Education
Typical level of education that most workers need to enter this occupation.
Work experience in a related occupation
Work experience that is commonly considered necessary by employers, or is a commonly accepted substitute for more formal types of training or education.
Number of Jobs, 2021
The employment, or size, of this occupation in 2021, which is the base year of the 2021-31 employment projections.
Job Outlook, 2021-31
The projected percent change in employment from 2021 to 2031. The average growth rate for all occupations is 5 percent.
Employment Change, 2021-31
The projected numeric change in employment from 2021 to 2031.
Entry-level Education
Typical level of education that most workers need to enter this occupation.
On-the-job Training
Additional training needed (postemployment) to attain competency in the skills needed in this occupation.
Employment Change, projected 2021-31
The projected numeric change in employment from 2021 to 2031.
Growth Rate (Projected)
The percent change of employment for each occupation from 2021 to 2031.
Projected Number of New Jobs
The projected numeric change in employment from 2021 to 2031.
Projected Growth Rate
The projected percent change in employment from 2021 to 2031.
2021 Median Pay
The wage at which half of the workers in the occupation earned more than that amount and half earned less. Median wage data are from the BLS Occupational Employment and Wage Statistics survey. In May 2021, the median annual wage for all workers was $45,760.
Recommend this page using:
Facebook
Twitter
LinkedIn
Home
Subjects
Data Tools
Publications
Economic Releases
Classroom
Beta
U.S. Bureau of Labor Statistics
Office of Occupational Statistics and Employment Projections
PSB Suite 2135
2 Massachusetts Avenue NE
Washington, DC 20212-0001
Telephone: 1-202-691-5700
www.bls.gov/ooh
Contact OOH
resources
Inspector General (OIG)
Budget and Performance
Department of Labor Grants
No Fear Act
USA.gov
Vote.gov
about the site
Sitemap
Freedom of Information Act
Privacy and Security Statement
Disclaimers
Linking and Copyright Info
Important Website Notices
Help and Tutorials
Connect With BLS
Twitter
Youtube
Email
Publications
Occupational Outlook Handbook
Computer and Information Technology


Link: https://www.trio.dev/blog/software-engineer-role

What Do Software Engineers Do? - Trio Developers
Home
Hiring
Management
Engineering
Talk To Us
Services
Staff Augmentation
Distributed Team
Resources
Blog
Podcast
Inside Trio
About Trio
Careers
Home
Staff Augmentation
Distributed Team
About Trio
Careers
Blog
Podcast
Hiring
Management
Engineering
Hiring
What Do Software Engineers Do?
Daniel Alcanja
â¢
7 min read
These days you probably hear âSilicon Valleyâ and âMark Zuckerburgâ so much they feel like vocab words. But itâs not just about the glamour. Software engineers have a drastic impact on how you and just about everyone else run their day-to-day lives.
From Facebook to TikTok to your preferred word processor whether that be Google Docs or Microsoft Word, software engineers often help people connect with others and the space they occupy when it would otherwise be very difficult.
Technology plays a large part in how humans navigate the world. While older generations often criticize the technology itself, human people â also known as software engineers â bear much of the responsibility for these tools.
And no matter what boomers might say, there are some objectively wholesome if not powerful things that can be accomplished with technology like reaching out to loved ones or spreading an important message.
Keeping all this in mind, you might be wondering what exactly software engineers do? Keep reading to find out.
What Is the Role of a Software Engineer?
Software engineering is a branch of computer science that includes developing software and computer systems. Typically, writing code or programming is a large part of the development process. Through programming, software engineers can design anything from games to operating systems.
To do this, professional software engineers will have mastery of several programming languages, depending on which ones they prefer or which ones are most in-demand in the industry.
Most recently, the most popular programming languages include C, Java, and Python, according to the September Tiobe Index which measures popularity based on major search engines.
Of course, the programming languages a software engineer uses can largely differ depending on the specific type of work they do.
Software engineers who develop mobile apps, for example, generally have a much narrower range of programming languages available to them. Swift is a programming language for developing iOS apps but it cannot be used outside of that niche.
The development process is also much more than programming alone. Making sure code is functional and user-friendly is just as important.
What Does a Software Engineer Do?
A software engineer does a number of things each day that ultimately culminate in building a software product. The specific day-to-day tasks of a software engineer include but are not limited to the following:
constantly communicating with the client to pinpoint specifications and software needs for the user
collaborating with other software engineers and divvying up roles and responsibilities accordingly
creating algorithms, models, and prototypes to better comprehend how to construct clean, maintainable code
writing, testing, and debugging code, ensuring that it is fully functional and bug-free
documenting procedures in order for future software engineers and other involved parties to streamline development processes
performing regular maintenance on the application and carrying out updates as needed
Quite a few of these tasks revolve around the notion of effective communication. In fact, if this wasnât part of the process then software would be essentially useless.
While itâs important to have a software engineer who has expertise when it comes to technical skills, having soft skills are similarly crucial in the development process.
Related reading: Software Developers vs. Software Engineers - Whatâs the Difference?
Why Is Software Engineering Important?
Software engineers have a direct role in building nearly every single great technology that humans know and use today. This sounds quite dramatic; but itâs true. Without software engineers, youâd be living in a pre-50s era science fiction movie.
Humans these days use smartphones as an extension of their bodies. And the apps, user interface (UI), operating system, and all else of smartphones are developed by software engineers.
Just about every person you know uses Netflix or Spotify for some quality downtime. These streaming services are due to software engineers as well.
Even the hermit who has distanced themselves from all technologies might need to pick up some food at their local grocery store. Well, contemporary cash registers rely on software engineering too.
Clearly, itâs impossible if not very difficult to not give software engineers credit for their influence on the world. Letâs not underestimate their importance. Now keep scrolling and donât forget that software engineers developed this website too.
What Are the Different Types of Software Engineers
Software engineers, alternatively called software developers, can be split up into two principal categories: applications software developers and systems software developers.
Applications Software Developers
Applications software developers build software that is client-focused. Most of the applications and websites you use were and are maintained by applications software developers.
Web developers and mobile developers fall under this definition as well as graphical user interface (GUI) developers who build the UI from which users interact directly with computer functions.
The end-user plays a large part in the role of an application software developer as their work always caters to whoever will be accessing the application on a regular basis. Application software developers work on both front-end and back-end development.
Systems Software Developers
Systems software developers are sometimes called systems engineers or systems developers. Much of their role consists of back-end development. They build large systems and work closely with hardware.
Operating systems and networks are developed by systems software engineers. Applications software developers build user-facing applications that must work with these operating systems and networks.
As systems developers manage hardware needs as well, they tend to have careers in information technology (IT) and enforce IT standards.
7 Qualities That Make a Great Software Engineer
As technology evolves, the demand for software engineering remains high and it doesnât look like it will decrease any time soon. Software engineers have evolved from building IT products to problem-solvers that address complex business and social challenges and develop essential solutions.
It is a popular career choice, not only because it has promising growth and high pay, but because it can be fulfilling in many ways. You get to change the world with your work, fix problems, and impact peopleâs lives.
The market is full of good professionals, but what skills and abilities separate great software engineers from good ones?
1. Great software engineers are open-minded.
Software engineering is a process and not a set of rules written in stone. Being able to hear other peopleâs opinions, accept new ideas and technologies while not getting hung up on one thing leads to better engineering overall.
You may not always agree with your team members, but listening to their ideas and trying to understand before giving judgment will give you a chance to look at the problem from a different angle and come up with a viable solution.
2. Great software engineers have a team mindset.
A good software engineer has high-level skills; a great software engineer should know that software development is a collaborative process and requires more than skill. This is not limited to leadership skills but implies overall teamwork.
Every victory and failure is the result of teamwork. Knowing how to make the team cooperate and align with the same goals defines a great engineer.
3. Great software engineers are able to give and be receptive to constructive feedback.
A great engineer can distinguish between constructive feedback and baseless criticism. They also know how to communicate their opinions in a way that will be heard and understood.
Feedback is a crucial part of engineering. Itâs the most direct way of figuring out what is working for the client and the team and what is not. The software development process often needs to be adjusted and calibrated for the project to be completed in the right way and in the given timeframe.
4. Great engineers make data-driven decisions.
Putting personal preferences aside and leading the decision-making process with data is the only way of knowing what is best for the project and your clientâs business.
Personal judgment and ideas are great, but they need to be supported by data or experience to prove themselves worthy. Informed data-driven decisions help to minimize risks and optimize processes in the project.
5. Great engineers balance perfectionism and pragmatism.
Too much of either perfectionism or pragmatism can hurt the workflow. Finding the right balance of both will curb many problems that may arise in the software development process.
In the end, this balance will result in a high-quality product. Great software engineers aim high but remember to keep their feet on the ground.
6. Great engineers have an aptitude for business.
When you are developing a product, you are developing it for the end-user. Understanding the audience that will use the product and how they use it is vital for making sure the product fits the userâs needs as well as business goals and requirements.
Sometimes an app that looks perfect on the paper just wonât click with people. Behaviour is often driven by emotions, not logic. A great software engineer knows how to create a product that will satisfy both the end-user and the clientâs business needs.
7. Great engineers carry a healthy skepticism.
Hope for the best but prepare for the worst. A great programmer knows to test and inspect every part of the program before trusting it.
Where a good programmer may ignore an imperfection, a great one will make sure that it doesnât cause a bigger problem in the future by addressing it immediately.
How To Hire Software Engineers
Hiring software engineers starts with having a good grasp of what youâd require a software engineer to do for your business. Run with this idea and write a good job description to attract potential candidates on job networks. Hereâs what to do:
Intro paragraph:
Your intro paragraph serves as an introduction to your company and a general summary of what youâre looking for. Try to mention what the goal or mission of your business is. Tell the candidate about the mobile app youâre building that will make life so much more convenient or how your website will allow easy access to the self-care products youâre selling.
Job responsibilities:
Here, you can list the basic day-to-day tasks you expect your software engineers to do. This might include writing code, attending weekly meetings, or preparing flowcharts. You get the idea.
Work specifications:
What do you expect from your potential hiree and what can your potential hiree expect from you? Offer reasonable compensation in the form of a salary, hourly wage, or commission. Include perks and benefits if thatâs part of the deal. Describe what capacity of work you want from your hire, whether itâs every weekday from 9-5 pm or as a freelancer on a single project.
Qualifications:
You will need to research a bit more about the exact skills you need from your hire. Maybe thatâs a bachelorâs degree in computer science or at least three years of
writing JavaScript
with a portfolio to match. Maybe itâs both.
CTA:
Lastly, use a call to action. Sum up anything else you need to say and end by drawing the candidate in. Whatâs so great about working with you and your business? Seriously.
How Does Trio Hire Software Engineers
Trio developers are specifically sought after based on their ability to communicate. While finding a developer who can list off several dozen technical skills is easy enough considering the hub of knowledge the average person has access to these days, often soft skills are what make all the difference.
The core skills that every Trio developer has consist of communication, problem-solving, adaptability, empathy, and time management. These skills are essential for any collaborative project, and software development is by nature team-oriented.
In looking for developers, Trio hiring managers also maintain that they are keen on finding someone with a âcultural fitâ who can âtalk about their passionsâ. This is evidence that the potential hiree truly cares about growing in their field.
On the other hand, a developer who â[hasnât] experimented with a new technology in the past yearâ¦tells another story,â according to the co-founder of Trio, Alex Kugell.
You could say that this is relevant to Trioâs mission and definitely worth mentioning in the job description. Developers who are just looking for a quick buck need not apply!
Of course, getting to know the true intentions of a developer ties back into those communication skills that youâll get a glimpse of across the first couple of interviews. But an honest job description can weed out the worst apples.
Conclusion
Hopefully, seeing a bit of how Trio hires software engineers gives you some assurance that weâre taking our own advice. Weâve done our best to hire great software engineers so you can reap the benefits.
Here at Trio, we value the talent of our engineers. We have hand-picked a team of highly-skilled, knowledgeable, and experienced software engineers that weâre proud of.
If you want to get started developing, tell us about your project and weâll tailor a fine-picked team to handle the job!
Table of Contents
Share
Linkedin Social Share
Frequently Asked Questions
What Is the Role of a Software Engineer?
Software engineering is a branch of computer science that includes developing software and computer systems. Typically, writing code or programming is a large part of the development process. Through programming, software engineers can design anything from games to operating systems.
What Does a Software Engineer Do?
A software engineer does a number of things each day that ultimately culminate in building a software product.
Why Is Software Engineering Important?
Software engineers have a direct role in building nearly every single great technology that humans know and use today. This sounds quite dramatic; but itâs true. Without software engineers, youâd be living in a pre-50s era science fiction movie.
Read Next
Engineering
What Is a Chatbot and How Does It Work?
Chatbots are a clever way to enhance the user experience of your customers. Stay tuned to learn more about how chatbots can help your business.
Daniel Alcanja
â¢
6 min read
Engineering
What Is Digital Transformation?
Digital transformation is becoming essential and important for all businesses irrespective of their size and nature.
Daniel Alcanja
â¢
9 min read
Engineering
What Is EdTech? 5 Tech Trends That Will Transform Education
What is EdTech and what technologies will shape its influence? Continue reading to learn more!
Daniel Alcanja
â¢
8 min read
Build possibility with Trio
Our partners are growing and innovating their businesses faster with Trio.
Hire us
Services
Staff Augmentation
Distributed Team
Resources
Blog
FAQ
Inside Trio
About Us
Careers
Our Process
Copyright
Â©
Trio
Terms of Use
Privacy Policy
Manage Cookies
Follow Us
Twitter
Facebook
LinkedIn


Link: https://www.careerexplorer.com/careers/software-engineer/

What does a software engineer do? - CareerExplorer
CareerExplorer
CareerExplorer
Home
Career Test
For Organizations
Careers
Degrees
Community
More
Jobs
Blog
Log In Take the Â freeÂ  test
Your
Compatibility
Career
Overview
Avg Salary
$93k
Job Market
31
%
How
to
Become
Jobs
Education
Bachelor's
Further
Resources
Satisfaction
Medium
Personality
Investigative
Demographics
Work
Environment
See All Careers
Careers
Engineering
Overview
What does a software engineer do?
80% Match?
Would you make a good software engineer? Take our career test and find your match with over 800 careers.
Take the free career test
Learn more about the career test
What is a Software Engineer?
Are you strategically-minded? Do you enjoy problem-solving? You may want to consider a career as a software engineer!
A software engineer applies mathematical analysis and the principles of computer science in order to design and develop computer software. Software engineers are highly sought after, and developers that live in high-demand areas often receive many inquiries a month from recruiters and head hunters.
In this article: What is a Software Engineer?
What does a Software Engineer do?
What is the workplace of a Software Engineer like?
What career options are available for a software engineer?
What is the difference between a software engineer and a software developer?
What does it take to succeed as a software engineer?
How long does it take to become a Software Engineer?
What are Software Engineers like?
Should I become a Software Engineer? See more
What does a Software Engineer do?
Software engineering is a branch of computer science that includes the development and building of computer systems software and applications software. Computer systems software is composed of programs that include computing utilities and operations systems. Applications software consists of user-focused programs that include web browsers, database programs, etc.
Software engineers have extensive knowledge of programming languages, software development, and computer operating systems, and they apply engineering principles to software creation.
By applying these engineering principles to every stage of the development process, from requirements analysis to the software process, they can create customized systems for individual clients. Just as a civil engineer will make sure that a bridge has a solid foundation, a software engineer will also begin with a thorough study of requirements and work through the development process in a systematic way.
There are many types of software that a software engineer can develop, such as operating systems, computer games, middleware, business applications, and network control systems. Changes in technology and new areas of specialization keep this profession evolving at a rapid pace.
When working with a client, a software engineer will typically analyze the client's needs, then design, test, and develop the computer software in order to meet those needs. They are experts in computing systems, software structure, and recognizing the limitations of the existing hardware. The process is complicated and intricate, therefore the use of diagrams, flowcharts, and the creation of
algorithms to tell the computer what to do are created. Converting these instructions into a computer language (coding/programming) is usually the responsibility of a computer programmer.
Software engineers must also possess interpersonal skills, and be able to effectively communicate with users in order to train, test, and debug software all the way to the end product. They are often involved from the early stages of software planning right through to the testing, development, training, and support stages.
Software engineers can be divided into two categories:
Applications Engineers
Applications engineers create or adapt applications for businesses and organizations by analyzing the end user's needs. They will design, build, install, and maintain these applications or programs.
Systems Engineers
Systems engineers coordinate the creation, maintenance and growth of a business or organization's computer systems. They coordinate each department's needs, suggest technical direction, and set up any networks that link up computers with the company.
Being a software engineer is a great career choice for someone who is exceptionally good at both left and right-brained thinking (analytical skills as well as problem-solving skills). Software engineers are instinctive problem-solvers, good at working with others and focused on seeing issues through to their successful completion.
A software engineer should be well-versed in:
Programming and coding
Fundamentals of computer science
Design and architecture
Algorithms and data structures
Information analysis
Debugging software
Testing software
Are you suited to be a software engineer?
Software engineers have distinct personalities. They tend to be investigative individuals, which means theyâre intellectual, introspective, and inquisitive. They are curious, methodical, rational, analytical, and logical. Some of them are also conventional, meaning theyâre conscientious and conservative.
Does this sound like you? Take our free career test to find out if software engineer is one of your top career matches.
Take the free test now
Learn more about the career test
What is the workplace of a Software Engineer like?
With such unprecedented growth in a multitude of industries, software engineers can pursue careers in any number of areas, including technology, healthcare, automotive manufacturing, green energy, remote sensing, aeronautics, government, non-profit, and finance.
Software engineers can work as either employees or as contractors. They typically work in comfortable settings, but it is sometimes a stressful job that involves long hours and tight deadlines.
Frequently Asked Questions
What career options are available for a software engineer?
Technology is growing at a rapid pace, and opportunities in software development are growing right along with it. For software engineers with an appetite to develop valuable interpersonal skills, management roles are widely available.
Interpersonal skills (or soft skills) include communication, conflict management, empathy, leadership, listening, negotiation, a positive attitude, and being able to work as part of a team.
Individuals who are technically skilled communicators have many options available to them. They can, in time, qualify for a variety of roles, including Senior Engineer, Team Lead, Architect, Manager, and can eventually make their way to senior management. The pace of a career path progression depends on someone demonstrating technical ability, inner drive, analytical thinking and excellent communication skills.
A software engineer's career path could look something like this:
Junior Web Developer
This is a starting or ground-floor position that an individual right out of college or an accelerated course could get with little to no computer programming experience. One can start applying for job postings as a junior web developer with a working knowledge of HTML, CSS, JavaScript, and jQuery. Any number of online coding schools or in-person programs and dev bootcamps offer classes in these programming languages.
Requirements for a junior web developer include: being able to write simple scripts; having an understanding of the expected application lifecycle; and possessing a basic understanding of database and application services, such as caching and queues.
There may be occasions when junior web developers feel overwhelmed when they are asked to write complicated applications. Other days they may wonder why they are doing similar work to a senior web developer and not getting promoted. Both scenarios are completely normal. However, the biggest difference between a junior and senior developer is their level of experience.
Software Web Developer, Sr. Software Web Developer
A software web developer, or senior software web developer is someone who has: several years of professional programming experience; can write complex code; possesses a thorough understanding of databases, application services and application lifecycle development; and has become proficient at creating entire applications. Much of a software engineerâs career path will involve spending several years as a senior web developer.
People who donât like the idea of management and prefer to stick with writing code can spend many years or even their entire career as a senior web developer. However, this position can also be a great jumping off point to a position as a software engineer or a manager, such as lead software engineer or CTO (chief technical officer) of a startup.
Lead Software Engineer, Technical Architect
For someone who wants to take on additional responsibility and more of a challenge, but is not interested in team management, a lead software engineer or architect role may be a great fit.
Lead engineers are looked to for guidance and direction by other engineers and programmers, and the role is seen as a mid-level management position. Lead engineers still write code, but also collaborate with others regarding work flow priorities and implement final decisions. They have years of programming experience, expertise in a specific subject matter, and can think of, plan, and build appropriate software to solve complicated problems.
Architects still write code occasionally as well, however they are mainly responsible for designing complex systems that other web developers will implement. The role of architect is a technical one and not usually a stepping stone to something more - often thought of as the highest position on the technical side of things.
Development Team Lead, Software Development Manager
Management is the next step along the software engineer's career path that can involve different focuses and responsibilities. These can include managing teams of developers, managing large-scale projects, and hiring and firing developers.
Mid-level managers (like lead software engineers) keep track of productivity and workflow in the department and report to a senior manager. A senior manager coordinates the needs of the project leader with the development team, which requires excellent people skills and the ability to resolve conflict effectively. The senior managerâs job is also to add or terminate employees to the team whenever necessary which can be a challenge at first, but a powerful leadership skill when mastered.
Director, Vice President, Chief Technology Officer
Senior management (which can include titles such as director, vice president, or chief technology officer) report to the CEO or to the company's board of directors. They oversee the work of other managers and often have some responsibility towards setting strategic and corporate direction. Some executive type responsibilities may include setting goals and initiatives, developing long-term strategies, and holding various departments accountable for specific measurable objectives. Senior managers are also responsible for supervising, hiring, and firing mid-level managers.
If managing people is just not something you are interested in, a career as a software engineer still provides such a decent level of income that you can still be a team contributor and have a rewarding career.
Continue reading
What is the difference between a software engineer and a software developer?
One of the main differences between software engineering and software development is job function. Software engineering applies engineering principles to create software, therefore software engineers take part in software development by connecting the clientâs needs with technological solutions. They systematically develop processes to provide specific functions by using engineering concepts to develop software.
On the other hand, software developers are responsible for the entire development process and are the driving creative force behind programs. They typically work together with the client to create a conceptual design and then have computer programmers create the programming code needed to run the software.
The computer programmers along with the software developers will test and fix problems together and the developers will provide project leadership and technical guidance through each stage of the software development life cycle.
To sum things up, a software engineer is often involved with software development, but very few software developers are engineers. The main difference between software engineering and software development is that one oversees the engineering while the other focuses on creating functional programs.
Continue reading
See Also
Web Developer
What does it take to succeed as a software engineer?
Attracted by high salaries, strong employment opportunities, and a chance to build things that can change the world, more people than ever are choosing software engineering as a career choice. However, succeeding in this career requires more than just great coding ability. The best software engineers bring specific qualities and attributes to the job that make them stand out from everyone else.
Working well with others
There are many media portrayals of a lone-wolf that stays up all night coding furiously in isolation. This stereotype represents coders as exceptionally smart but emotionally stunted. Unfortunately this type of temperament doesn't work well in real life. Software engineers who know how to work well with others are much more likely to be successful in their careers than lone wolves are.
A software engineer's job is to figure problems out and to produce a great product, not just to write as many amazing lines of code as possible. That means communicating with other engineers, developers, managers, quality control people, customers, etc. and treating them with respect and understanding. The better your relationships are with your team, the better your own work will be.
Letting go of the ego
Not bringing your ego to work with you and staying humble can be difficult at times. No matter how good you think you are at what you do, it's inevitable that you will make mistakes along with some bad decisions. Accepting constructive criticism from your peers when errors are pointed out and accepting responsibility for your mistakes will make you a much better engineer in the long run. Possessing a humble attitude is the only way you'll be able to channel other people's feedback into improving, learning, and making yourself a better software engineer and person.
Not putting out mediocre work
Software engineers who pay attention to details tend to write higher-quality code. They tend to step back and catch mistakes, instead of rushing and cutting corners. Those that feel a personal sense of ownership and pride when it comes to their work tend to be more successful in this career. Putting effort into what you're doing wards off mediocrity and gives you that push to produce high-quality work and not get too complacent. Also, sharpening your skills by learning new languages or keeping abreast of any new data structures or algorithms can keep things interesting and fresh.
Being naturally curious and interested
People who love to learn are constantly improving and exploring new and better ways to do things. By listening to podcasts, reading blogs, or going to conferences, you can stay on top of the latest trends in software engineering and be looped into topics that will make you a stronger and more well-rounded engineer. By being open to new things, new ideas and approaches to solving problems may come to you that wouldn't have occurred to you otherwise.
Developing soft skills
Soft skills are fast becoming hard skills in this ever-changing world. Itâs simply not enough to be highly skilled as a software engineer without developing skills that help you get along with your team effectively. These skills have a significant impact on a your attitude which ultimately ties back to your success. The skills for success tend to be fairly consistent - adaptability, problem-solving, self-management, attention to detail, creativity, communication, collaboration, work ethic, empathy, and organization are just a few. Keeping these qualities in mind can help any engineer improve, no matter how experienced.
Seeing the big picture
Understanding and balancing the day-to-day steps that are required to get to a goal yet not losing sight of the long-term vision is key to being a successful software engineer. By practicing this skill and thinking ahead, you will be able to see how each individual component will eventually contribute to the product as a whole and how each element will interact with each other. The ability to weigh out the long- and short-term outlook and see how certain decisions can influence the scope and direction of a project is a key attribute. Being able to adapt and prevent a project from derailing is what separates really good engineers from mediocre ones.
Continue reading
How long does it take to become a Software Engineer?
The software industry is always changing.
This means that a career as a software engineer demands a commitment to learning that starts in high school, is solidified in university, and continues with career-long professional certifications and training.
A four- or five- year Bachelorâs Degree in Computer Software Engineering is the typical education track required for entry into the software engineering profession.
What are Software Engineers like?
Based on our pool of users, software engineers tend to be predominately investigative people.
This finding is reflective of all of the work that these engineers do.
Whether they are learning technologies, writing software, or debugging issues, the capacity to investigate â to carry out a systematic inquiry to discover the facts â is fundamental.
Should I become a Software Engineer?
There is a lot of investment going into software engineering at the moment due to the increasing reliance on mobile technology, venture capital-backed start-ups, the growing complexity of technology, and emerging industries.
The demand for skilled and qualified software engineers seems to have no end. This demand is strengthened by a changing economic landscape and fueled by the need for technology solutions. With billions of physical devices around the world that are now connected to the internet and that are collecting and sharing data, all industries are quickly becoming technology driven industries.
âBuilding software solutions that power virtually every organization, itâs a cool job.â
That is often the comment heard about working as a software engineer.
And while it is true, it is also a demanding job, one that typically requires employees to work long hours to often short deadlines in an environment where a single mistake can result in a massive bug.
So, what type of a person does it take to be an effective software engineer?
Here are some qualities that are essential in the role:
A dedication to learning
There are some jobs that you have to learn once and never again.
Software engineering is the exact opposite to this.
More than in almost any other function, software engineers need to continually be learning.
There are always new software languages to master and new technologies and techniques to learn.
If you are not committed to learning, your skills will quickly become antiquated.
A passion for improving whatâs around you
The best software engineers are constantly thinking about how to improve the world around them.
They are always tinkering, listening to user feedback, and following their intuition to produce and continually improve software solutions.
A logical, analytical mindset
Writing code is much like writing in general.
Itâs about using the fewest number of characters possible to make your point.
Itâs about taking a complex set of instructions and boiling it down to its most integral parts.
Itâs about making decisions based on data and research.
If you have a penchant for logic games and puzzles, software engineering may be a career fit for you.
A sharp attention to detail
Mistakes while coding lead to bugs, which lead to customer frustration and complaints and lost revenues.
An eye for detail and a willingness to thoroughly â almost feverishly â test and revise your work are key qualities of successful software engineers.
Perseverance
When developing a piece of software, there is no magic formula that dictates how the solution will be achieved.
Software engineers need a certain doggedness to find the right path to building a specific application or system.
The ability to work with others
In field of software engineering, this is an underrated but critically important skill.
Yes, coding itself is often solitary work.
But it is almost always done in the framework of a larger team.
Collaboration, therefore, is indispensable, to leverage and maximize the abilities, talents, and input of everyone to devise solutions.
Software Engineers are also known as:
Software Developer
Software Architect
Software Development Engineer
Computer Software Engineer
Up Next
loading...
Software Engineer
Avg Salary
$93k
Growth
31
%
Satisfaction
Medium
Your Compatibility
Overview
Salary
Job Market
How to Become
Jobs
Education
Further Resources
Satisfaction
Personality
Demographics
Work Environment
For Individuals
Blog
Login
Sign Up
The CareerExplorer Career Test
Explore
Career Collections
What Career Is Right For Me?
Careers in Finance
Careers in Medicine
Careers in Psychology
Careers in Travel
For Institutions
Group Pricing
© Sokanu Interactive Inc. 2022
About CareerExplorer
Contact
FAQ Knowledge Base
Terms & conditions
Privacy
Accessibility


Link: https://se-phd.isri.cmu.edu/People/index.html

People -
Software Engineering Ph.D. Program -
Software and Societal Systems Department - Carnegie Mellon University
Carnegie Mellon University
———
Search
Search
Search this site only
Software Engineering Ph.D. Program
Software and Societal Systems Department
Software and Societal Systems Department
›
Software Engineering Ph.D. Program
›
People
Our Team
Our faculty, students, and staff hail from all walks of life, technical backgrounds, and experience levels. But they all share one goal: to "Build It Better".
[Pictured: Faculty and students of the Software Engineering program, taken Fall 2018]
Core Faculty
Staff
Students
Alumni
Core Faculty
19 bios displayed.
Dr.
Jonathan
Aldrich
Language Design, Program Verification, Object-oriented foundations, and Enforcement of software design constraints.
Read full bio
Dr.
Andrew
Begel
Human aspects of software engineering, neurodiversity, accessibility, HCI, understanding communication, collaboration tools, biometrics, organizational behavior
Read full bio
Dr.
Travis
Breaux
Requirements engineering, Software design assumptions, Privacy and security, and Policy and legal compliance.
Read full bio
Dr.
Fraser
Brown
Read full bio
Dr.
David
Garlan
Software architecture, Pervasive computing, Self-healing systems, and Applied formal methods.
Read full bio
Dr.
Vincent
Hellendoorn
Machine learning for software engineering, program synthesis, and learned program analysis
Read full bio
Dr.
James
Herbsleb
Software teams and organizations, Open source ecologies, Collaboration, coordination, congruence, and Global software development.
Read full bio
Dr.
Eunsuk
Kang
Software design, assurance, modeling, verification, security, safety, and cyber-physical systems
Read full bio
Dr.
Christian
Kästner
Variability and Reuse, Modularity, Program Analysis, and Program Comprehension.
Read full bio
Dr.
Claire
Le Goues
Software quality and evolution, defect detection, program analysis, and automatic bug repair.
Read full bio
Dr.
Heather
Miller
Language Design, Distributed Programming, Distributed Runtimes, Data & Consistency
Read full bio
Dr.
Brad
Myers
UI, programming environments, language design, end-EUSE, API usability, DevX, interaction techniques, programming by example, handheld computers, and visual programming
Read full bio
Dr.
Rohan
Padhye
Program Analysis, Software Testing, Software Security
Read full bio
Dr.
William
Scherlis
Software assurance and security, Software analysis, Safe concurrency, and Software development tools.
Read full bio
Dr.
Bradley
Schmerl
Software Architecture, Self-Adaptive Systems, Software Engineering Tools
Read full bio
Dr.
Mary
Shaw
Everyday software, Software architecture, Ultra-large-scale systems, and Appropriate dependability.
Read full bio
Dr.
Joshua
Sunshine
API Usability, Language Design, Program Comprehension, Software Development Tools and Programmer Productivity
Read full bio
Dr.
Christopher
Timperley
Search-Based Software Engineering, Automated Program Repair, Program Analysis, Cyberphysical Systems
Read full bio
Dr.
Bogdan
Vasilescu
Software analytics, social aspects, teams, collaboration, open source ecologies, and “big code”.
Read full bio
Load more
Staff
1 bio displayed.
Connie
Herold
Academic Programs Manager, Societal Computing and SE PhD Programs
Read full bio
Students
48 bios displayed.
Pedro
Bravo-Mendes
Read full bio
Paulo
Casanova
Read full bio
Maria
Casimiro
Read full bio
Leo
Chen
Advisor: Claire Le Goues
Read full bio
Simon
Chu
Read full bio
Ian
Dardik
Read full bio
Matthew
Davis
Read full bio
Luke
Dramko
Read full bio
Tobias
Dürschmid
Tobias Dürschmid
Read full bio
Samuel
Estep
Read full bio
Morgan
Evans
Read full bio
Luis
Fernandes-Gomes
Read full bio
Gabriel
Ferreira
Read full bio
Benjamin
Gafford
Read full bio
Catarina
Gamboa
Read full bio
Elizabeth
Gilbert
Read full bio
Thomas
Glazier
Read full bio
Harrison
Green
Read full bio
Jane
Hsieh
Read full bio
Kush
Jain
Read full bio
Parv
Kapoor
Read full bio
Sophia
Kolak
Read full bio
Jeremy
Lacomis
Read full bio
Zeeshan
Lakhani
Zeeshan Lakhani
Read full bio
Ao
Li
Read full bio
Jenny
Liang
Read full bio
Kyle
Liang
Read full bio
Ian
McCormack
Read full bio
Christopher
Meiklejohn
Christopher Meiklejohn
Read full bio
Courtney
Miller
Read full bio
Manisha
Mukherjee
Read full bio
Nadia
Nahar
Read full bio
Daye
Nam
Daye Nam
Read full bio
Wode
Ni
Wode Ni
Read full bio
Daniel
Ramos
Read full bio
Nikitha
Rao
Read full bio
Selva
Samuel
Read full bio
Paulo
Santos
Read full bio
Yining
She
Read full bio
Yuchen
Shen
Read full bio
Trenton
Tabor
Read full bio
Vasudev
Vikram
Read full bio
Ryan
Wagner
Read full bio
David
Widder
Read full bio
Jenna
Wise
Read full bio
Aidan
Yang
Read full bio
Chenyang
Yang
Read full bio
Changjian
Zhang
Read full bio
Load more
Alumni
37 bios displayed.
Dr.
Marwan
Abi-Antoun
Read full bio
Dr.
Afsoon
Afzal
Read full bio
Dr.
Jeffrey
Barnes
Read full bio
Dr.
Nels
Beckman
Read full bio
Jaspreet
Bhatia
Read full bio
Dr.
Kevin
Bierhoff
Read full bio
Dr.
Shawn
Butler
Assistant Professor, Computer Science Department, University of Alaska
Shawn Butler
Read full bio
Dr.
Shang-Wen
Cheng
Read full bio
Dr.
Uri
Dekel
Read full bio
Dr.
George
Fairbanks
Read full bio
Dr.
Tim
Halloran
Read full bio
Dr.
Greg
Hartman
Read full bio
Dr.
Ciera
Jaspan
Read full bio
Dr.
Cody
Kinneer
Read full bio
Dr.
Thomas
LaToza
Read full bio
Dr.
Lu (Annie)
Luo
Read full bio
Dr.
Michael
Maass
Read full bio
Darya
Melicher
Read full bio
Dr.
Michael
G.
Meredith
Read full bio
Dr.
Gabriel
Moreno
Read full bio
Ashutosh
Pandey
Read full bio
Dr.
Vahe
Poladian
Quantitative Researcher, Citadel Securities
Vahe Poladian
Read full bio
Dr.
Orna
Raz
Read full bio
Dr.
Ivan
Ruchkin
Read full bio
Dr.
Christopher
Scaffidi
Read full bio
Dr.
Daniel
Smullen
Read full bio
Dr.
Mauricio
Soto
Read full bio
Dr.
Sven
Stork
Read full bio
Dr.
Roykrong
Sukkerd
Read full bio
Dr.
Joshua
Sunshine
API Usability, Language Design, Program Comprehension, Software Development Tools and Programmer Productivity
Read full bio
Dr.
Dean
Sutherland
Read full bio
Dr.
Jason
Tsay
IBM Research AI
Read full bio
Dr.
Rijnard
Van-Tonder
Read full bio
Dr.
Miguel
Velez
Read full bio
Dr.
Chu Pan
Wong
Read full bio
Dr.
YoungSeok
Yoon
Read full bio
Dr.
Shurui
Zhou
Read full bio
Load more
Software Engineering Ph.D. Program
Software and Societal Systems Department
Carnegie Mellon University
5000 Forbes Avenue
Pittsburgh, PA 15213
Legal Info
www.cmu.edu
© 2022 Carnegie Mellon University
CMU on Facebook
CMU on Twitter
About SE
Prospective Students
Outcomes
Program Plan
Prerequisites
How to Apply
Research
Research Highlight Videos
People
Faculty and Staff
Current Students
Alumni
Student Resources
Curriculum
Incoming Students
FAQs


Link: https://www.canterbury.ac.nz/engineering/schools/csse/our-people/

Our people | Computer Science and Software Engineering | University of Canterbury
Skip to main content
Return to the homepage
Menu
Library
UC Online
News
Events
Maps
Staff
Work at UC
Covid-19
Apply Now
Study
Study
Courses and qualifications
Subjects
Online learning
Arts
Business
Digital Screen
Education
Engineering
Health
Law
Science
All departments
Scholarships
Examinations
Graduation
Postgraduate study
Key dates
Publications
Study abroad and exchanges
Work-Integrated Learning
Academic support
Special consideration
Summer School
Transition Programmes
Quick Links
LEARN
Logins
Timetables
Library
Scholarships
Transcripts
Grading
Enrol
Enrol at UC
Enrolment process
Enrolment and Course Dates
Admission and University Entrance
Identity and citizenship verification
International student enrolment
PhD and doctoral degree applications
Manage your study
Fees and funding
Student Agreement
Change your enrolment
Update your contact details
Contact Student Services
Quick Links
Enrol now with myUC
Re-enrol now with myUC
Qualifications and courses
Scholarships
Academic Support
Transcripts
Research
Research
Become a research student
Find a supervisor
Support for Researchers
MÄori Research Partnerships
Research Impact
Research Institutes and Centres
Research specialties
Facilities and equipment
IP Commercialisation
Innovation Jumpstart
Ethics Approval
UC Research Awards
Contact us
Quick Links
Find an expert
Find a supervisor
Jobs at UC
Ethics Approval
Postgraduate forms
Library (research)
Life
Life
The campus
Facilities
Getting around
Student life
Accommodation
Support services
Know The Code
Sustainability Office
UC Students' Association (UCSA)
CCR
Golden Key
Health, safety and wellbeing
Life in CHCH
Life in NZ
Get active
Canterbury Card
Quick Links
UCGo
Maps
Parking
Health Centre
UC RecCentre
Student events
Clubs and societies
Support services
Support services
Finding support
Need to talk?
Health Services
Academic support
Accessibility
Financial assistance
Academic grievances
Equity and diversity
Parents and whÄnau
Job and careers advice
New student support
Current student support
Postgraduate student support
High school student support
Adult student support
International student support
LGBTQI student support
MÄori student support
Pasifika student support
Onsite services
Quick Links
In an emergency
Security
Raise a concern
IT Services
Academic Skills Centre
Library (support)
Contacts
Wellbeing Hub
Engage
Engage
Alumni
Business and industry
Canterbury University Press
Communications and Engagement
Community partnerships
External exam invigilation
Find an expert or consultant
Giving to UC
International partnerships
Knowledge Commons
News
School resources
Work at UC
Work placements
Quick Links
Donate to UC
Contact UC
Current vacancies
Erskine Fellowship
News
Public events
Liaison Office
About
About
What is special about UC
UC7
Ako - Learning & Teaching
Governance
Leadership
Health and Safety
Sustainability Hub
People and Culture
Asset Planning and Delivery
History
Information and Records Management
Ngā Uara | Our Values
Contacts
Logins
Logins
LEARN
Zoom
Student email
Staff email
myUC
My Timetable
Canterbury Card Account
My Library Account
OneDrive
UC CareerHub
UC Services Portal
Password Reset
UCGO
ourUC
Staff logins
More logins
Use the Tab and Up, Down arrow keys to select menu items.
Engineering
Toggle navigation
Subjects
Qualifications and courses
Engineering
Engineering First Year
Engineering Course Planner
Industry and work experience
Diploma in Global Humanitarian Engineering
Forestry Science
Postgraduate information
Engineering Management Programmes
Product Design
Schools and departments
School of Engineering
Chemical and Process Engineering
Civil and Natural Resources Engineering
Computer Science and Software Engineering
Electrical and Computer Engineering
Mechanical Engineering
Chemical and Process Engineering
Contact us
Health and safety
Minor in Bioprocess Engineering
Minor in Sustainable Energy Engineering
Minor in Environmental Process Engineering
Our people
Postgraduate study and research
Research
Undergraduate study and courses
Civil and Natural Resources Engineering
About us
News & Events
Undergraduate
Postgraduate
Research
People
Lab Facilities and Tours
Contact Us
CNRE Shop
Computer Science and Software Engineering
Computer Science (BSc)
Software Engineering (BE Hons)
Research
Postgraduate information
Events, groups and seminars
Study with us
Computer Science Education
Industry collaboration
Our people
Additional Resources
Contact us
Electrical and Computer Engineering
Electrical and Electronic Engineering (BE Hons)
Computer Engineering (BE Hons)
Mechatronics (BE Hons)
Postgraduate
Research
Facilities
Industry collaboration
Student groups and social media
Our People
Contact us
EPECentre
School of Mathematics and Statistics
Study Options
Student Support
Postgraduate Study
Our Research
Secondary School Programme
Statistics Consulting
Events
Our People
Mechanical Engineering
Undergraduate Study
Postgraduate study
Research
Bioengineering
Minor in Aerospace Engineering
Minor in Biomedical Engineering
Student Advice and Support
Events & Seminars
Laboratories and Facilities
R&D Collaborations
Contact us
Mechatronics Engineering
Study with us
Student advice and support
Research
Laboratories and facilities
Mechanical Engineering
Electrical and Computer Engineering
Contact us
School of Forestry
Bachelor of Forestry Science
Bachelor of Engineering (Honours) in Forest Engineering
Postgraduate study and research
Research
Laboratories and facilities
Services and resources
Forestry News and current scholarships
Contact us
Forestry 50th Anniversary
Seventh Faustmann Symposium 2023
School of Product Design
Applied Immersive Game Design
Chemical Formulation Design
Industrial Product Design
Contact us
Conjoint Degrees
Laboratories and Facilities
Postgraduate study and research
Why UC Engineering
Deep industry engagement
Global reach and recognition
Passionate practicing experts
State-of-the-art facilities
Experience ‘on the job’
Problem-solving creativity
Collaboration and teamwork
Hands-on learning
Professional development
Timetable
Research
Scholarships and funding
Information for schools
Poster Gallery
STEMinism
WiE CAN
STAR Courses
Visit Campus
Key Dates
Industry
BrainDate Series
Industry Contacts
Final Year Projects
Engineering News
Archive
2019
2018
2017
2016
2015
2014
2013
2012
Contact us
International Enquiries
Stay connected
Virtual Tour
Facilities & Equipment
Diversity Agenda
UCDroneLab
ENG Shop
Home
>
Engineering
>
Schools and departments
>
Computer Science and Software Engineering
>
Our people > Computer Science and Software Engineering people
Administrators
Department heads
Academic staff
Senior tutors
Technical staff
Professors Emeriti
Research assistants
Adjunct staff
Postgrads
Casual tutors
Department heads
Andreas Willig
Head of Department
Professor
Jack Erskine 202
Phone:
+6433692208
Internal Phone: 92208
andreas.willig@canterbury.ac.nz
Andrew Bainbridge-Smith
Senior Lecturer Above the Bar
Deputy Head of Department
Jack Erskine 303
Phone:
+6433691361
Internal Phone: 91361
andrew.bainbridge-smith@canterbury.ac.nz
Administrators
Kat Bell
Administrator
Jack Erskine 204
Phone:
+6433691234
Internal Phone: 91234
kat.bell@canterbury.ac.nz
Sharon McGregor
Senior Department Administrator
Jack Erskine 201
Phone:
+6433690290
Internal Phone: 90290
sharon.mcgregor@canterbury.ac.nz
Belinda Lansley
Project Coordinator
Jack Erskine 201
Phone:
3697136
Internal Phone: 97136
belinda.lansley@canterbury.ac.nz
Academic staff
Tim Bell
Professor
Jack Erskine 345
Phone:
+6433692118
Internal Phone: 92118
tim.bell@canterbury.ac.nz
Andy Cockburn
Professor
Jack Erskine 313
Phone:
+6433692119
Internal Phone: 92119
andrew.cockburn@canterbury.ac.nz
Matthias Galster
Professor
Director of Software Engineering
Jack Erskine 314
Phone:
+6433692172
Internal Phone: 92172
matthias.galster@canterbury.ac.nz
Richard Green
Professor
Jack Erskine 245
Phone:
+6433692096
Internal Phone: 92096
richard.green@canterbury.ac.nz
Tanja Mitrovic
Professor
Jack Erskine 312
Phone:
+6433694269
Internal Phone: 94269
tanja.mitrovic@canterbury.ac.nz
Ramakrishnan Mukundan
Professor
Jack Erskine 311
Phone:
+6433692201
Internal Phone: 92201
mukundan@canterbury.ac.nz
Andreas Willig
Professor
Jack Erskine 202
Phone:
+6433692208
Internal Phone: 92208
andreas.willig@canterbury.ac.nz
Ben Adams
Associate Professor
Jack Erskine 310
Phone:
+6433695710
Internal Phone: 95710
benjamin.adams@canterbury.ac.nz
Christoph Bartneck
Associate Professor
Jack Erskine - Room 302
Phone:
+6433692443
Internal Phone: 92443
christoph.bartneck@canterbury.ac.nz
Walter Guttmann
Associate Professor
Jack Erskine 300
Phone:
+6433692451
Internal Phone: 92451
walter.guttmann@canterbury.ac.nz
James Atlas
Senior Lecturer
Jack Erskine 301
Phone:
+6433690307
Internal Phone: 90307
james.atlas@canterbury.ac.nz
Andrew Bainbridge-Smith
Senior Lecturer Above the Bar
Jack Erskine 303
Phone:
+6433691361
Internal Phone: 91361
andrew.bainbridge-smith@canterbury.ac.nz
Fabian Gilson
Senior Lecturer
SENG 3rd Year Coordinator
Jack Erskine Rm 214
Phone:
+6433692910
Internal Phone: 92910
fabian.gilson@canterbury.ac.nz
Clementine Gritti
Senior Lecturer
Jack Erskine 304
Phone:
+6433690523
Internal Phone: 90523
clementine.gritti@canterbury.ac.nz
Moffat Mathews
Senior Lecturer
Jack Erskine 213
Phone:
+6433692452
Internal Phone: 92452
moffat.mathews@canterbury.ac.nz
Miguel Morales
Senior Lecturer
SENG 2nd Year Coordinator
Jack Erskine Rm 210
Phone:
+6433692988
Internal Phone: 92988
miguel.morales@canterbury.ac.nz
Kourosh Neshatian
Senior Lecturer
Postgraduate Co-ordinator
Jack Erskine 212
Phone:
+6433692455
Internal Phone: 92455
kourosh.neshatian@canterbury.ac.nz
postgrad-coordinator@cosc.canterbury.ac.nz
Steve Weddell
Associate Professor
Link Rm 305
Phone:
+6433694419
Internal Phone: 94419
steve.weddell@canterbury.ac.nz
Neville Churcher
Fixed Term Academic
Adjunct Senior Fellow
Jack Erskine 247
Phone:
+6433691622
Internal Phone: 91622
neville.churcher@canterbury.ac.nz
Ray Hunt
Fixed Term Academic
Adjunct Associate Professor
Jack Erskine 247
Phone:
+643366347
Internal Phone: 6347
ray.hunt@canterbury.ac.nz
Richard Lobb
Lecturer (Teaching and Administration only)
Adjunct Senior Fellow
Jack Erskine 211
Phone:
+6433692466
Internal Phone: 92466
richard.lobb@canterbury.ac.nz
Senior tutors
Yalini Sundralingam
Senior Tutor
Jack Erskine 322
Phone:
+6433692489
Internal Phone: 92489
yalini.sundralingam@canterbury.ac.nz
Paul McKeown
Senior Tutor
Jack Erskine Rm 321
Phone:
+6433692478
Internal Phone: 92478
paul.mckeown@canterbury.ac.nz
Marina Filipovic
Senior Tutor
Jack Erskine 323
Phone:
+6433692495
Internal Phone: 92495
marina.filipovic@canterbury.ac.nz
Liam Laing
Senior Tutor
Jack Erskine 320
Phone:
+6433690319
Internal Phone: 90319
liam.laing@canterbury.ac.nz
Make an appointment
Morgan English
Senior Tutor
Jack Erskine 324
Phone:
+6433690981
Internal Phone: 90981
morgan.english@canterbury.ac.nz
Katia De Lu
Senior Tutor
Jack Erskine 200
Phone:
3690741
Internal Phone: 90741
katia.delu@canterbury.ac.nz
Technical staff
Peter Glassenbury
Senior Programmer Analyst
Systems Manager
Jack Erskine 223
Phone:
+6433695933
Internal Phone: 95933
peter.glassenbury@canterbury.ac.nz
Joffre Horlor
Senior Programmer Analyst
Systems Manager
Jack Erskine 222
Phone:
+6433695374
Internal Phone: 95374
joffre.horlor@canterbury.ac.nz
Adrian White
Senior Programmer Analyst
Jack Erskine 224
Phone:
+6433695917
Internal Phone: 95917
adrian.white@canterbury.ac.nz
Steven Sykes
Senior Programmer Analyst
Systems Manager
Jack Erskine 221
steven.sykes@canterbury.ac.nz
Sophia Rabara
Systems Administrator
Jack Erskine 134a
Phone:
+6433690932
Internal Phone: 90932
sophiaellaia.rabara@canterbury.ac.nz
Professors emeriti
Krzysztof Pawlikowski
Professor Emeritus
Jack Erskine 307
Phone:
+643367772
Internal Phone: 7772
krys.pawlikowski@canterbury.ac.nz
Research assistants
Jack Morgan
Research Assistant
Jack Erskine 344
Phone:
+6433692481
Internal Phone: 92481
jack.morgan@canterbury.ac.nz
Jay Holland
Research Assistant
Erskine 342
Internal Phone: 7756
jay.holland@canterbury.ac.nz
Joanne Roberts
Research Assistant
Jack Erskine 344
Phone:
+6433691174
Internal Phone: 91174
joanne.roberts@canterbury.ac.nz
Tracy Henderson
Project Manager
Jack Erskine 344
Phone:
+6433692409
Internal Phone: 92409
tracy.henderson@canterbury.ac.nz
Josh McCulloch
Research Engineer
Jack Erskine Rm 346
josh.mcculloch@canterbury.ac.nz
Oliver Batchelor
Post Doctoral Fellow
Jack Erskine 346
Phone:
+6433690029
Internal Phone: 96632
oliver.batchelor@canterbury.ac.nz
Sam Pell
Research Assistant
Jack Erskine 343
sam.pell@canterbury.ac.nz
Tim Rensen
Research Assistant
tim.rensen@pg.canterbury.ac.nz
Sam Schofield
Research Assistant
sam.schofield@pg.canterbury.ac.nz
Eugene McNearney
Specialist Researcher
Jack Erskine 346
eugene.mcnearney@canterbury.ac.nz
Matt Philip Mattar
Research Assistant
Jack Erskine 346
matthew.mattar@canterbury.ac.nz
Adjunct staff
Rainer Unland
Adjunct Professor
rainer.unland@canterbury.ac.nz
Phuoc Tran-Gia
Adjunct Professor
phuoc.tran-gia@canterbury.ac.nz
Richard Lobb
Lecturer (Teaching and Administration only)
Adjunct Senior Fellow
Jack Erskine 211
Phone:
+6433692466
Internal Phone: 92466
richard.lobb@canterbury.ac.nz
Brent Martin
Adjunct Senior Fellow
Ray Hunt
Fixed Term Academic
Adjunct Associate Professor
Jack Erskine 247
Phone:
+643366347
Internal Phone: 6347
ray.hunt@canterbury.ac.nz
Gregory Ewing
Adjunct Senior Fellow
Jack Erskine Rm 307
Phone:
+6433645694
Internal Phone: 45694
greg.ewing@canterbury.ac.nz
Blair McMaster
Adjunct Senior Fellow
blair.mcmaster@canterbury.ac.nz
Neville Churcher
Fixed Term Academic
Adjunct Senior Fellow
Jack Erskine 247
Phone:
+6433691622
Internal Phone: 91622
neville.churcher@canterbury.ac.nz
Back to top
GENERAL ENQUIRIES
+64 3 369 3999
info@canterbury.ac.nz
ENROLMENT ENQUIRIES
0800 VARSITY (0800 827 748)
enrol@canterbury.ac.nz
INTERNATIONAL ENQUIRIES
+64 3 364 3443
(Aus) 1-800-431595
Ask a question
CONTACTS & DIRECTORIES
University contacts
Student contacts
Students' Association
AâZ of Support Services
Find a researcher (Research Profile)
Accommodation
Maps
Donate online
UC on Facebook
UC on Twitter
UC on youTube
UC on Instagram
UC on Snapchat
UC on LinkedIn
UC on WeChat
DEPARTMENTS
All departments
Arts
Business
Education
Engineering
Health
Law
Science
Service areas
LATEST
News
Events
Publications
Work at UC
Info for media
Style Guide
TOOLS
LEARN
UC Policy Library
Library
myUC
IT account
Student email
OneDrive
Timetable
Staff email
Intranet (Staff)
Copyright
Feedback
Privacy
Cookies Declaration
Payment Data
Emergency Information
Â© University of Canterbury - A Fair Trade University


Link: https://www.americanscientist.org/article/empirical-software-engineering

Empirical Software Engineering | American Scientist
Skip to main content
Close
Search
Help
Topics
Features
Blogs
Video
Podcasts
Magazine
Archive
Subscribe
Newsletter
About Us
Advertise
Login
Register
Twitter
Facebook
YouTube
LinkedIn
American Scientist
Open navigation
Search
Help
Login
Empirical Software Engineering
By
Greg Wilson ,
Jorge Aranda
As researchers investigate how software gets made, a new empire for empirical research opens up
Computer
Technology
Facebook
Twitter
LinkedIn
Email
Print
This Article From Issue
November-December 2011
Volume 99, Number 6
Page 466
DOI: 10.1511/2011.93.466
View Issue
Software engineering has long considered itself one of the hard sciences. After all, what could be âharderâ than ones and zeroes? In reality, though, the rigorous examination of cause and effect that characterizes science has been much less common in this field than in supposedly soft disciplines like marketing, which long ago traded in the gut-based gambles of âMad Menâ for quantitative, analytic approaches.
A growing number of researchers believe software engineering is now at a turning point comparable to the dawn of evidence-based medicine, when the health-care community began examining its practices and sorting out which interventions actually worked and which were just-so stories. This burgeoning field is known as empirical software engineering and as interest in it has exploded over the past decade, it has begun to borrow and adapt research techniques from fields as diverse as anthropology, psychology, industrial engineering and data mining.
Figure 1. Making software is a signature activity of our era that has produced a canon of beliefs and practices, yet only recently have the tools of social science and empirical investigation been systematically applied on a large scale to the software enterprise. Empirical software engineering is the emerging discipline of acquiring a rigorous, evidence-based understanding of what we know about making software, what we donât know and what we can learn about it using the tools of empirical research.
Illustration by Tom Dunne.
Ad Right
The stakes couldnât be higher. The software industry employs tens of millions of people worldwide; even small increases in their productivity could be worth billions of dollars a year. And with software landing our planes, diagnosing our illnesses and keeping track of the wealth of nations, discovering how to make programs more reliable is hardly an academic question. Where We Are Broadly speaking, people who study programming empirically come at the problem from one of two angles. To some, the phrase software engineering has always had a false ring. In practice, very few programmers analyze software mathematically the way that ârealâ engineers analyze the strength of bridges or the resonant frequency of an electrical circuit. Instead, programming is a skilled craft, more akin to architecture, which makes the human element an important (some would say the important) focus of study. Hollywood may think that programmers are all solitary 20-something males hacking in their parentsâ basement in the wee hours of the morning, but most real programmers work in groups subject to distinctly human patterns of behavior and interaction. Those patterns can and should be examined using the empirical, often qualitative tools developed by the social and psychological sciences.
The other camp typically focuses on the âwhatâ rather than the âwho.â Along with programs themselves, programmers produce a wealth of other digital artifacts: bug reports, email messages, design sketches and so on. Employing the same kinds of data-mining techniques that Amazon uses to recommend books and that astronomers use to find clusters of galaxies, software engineering researchers inspect these artifacts for patterns. Does the number of changes made to a program correlate with the number of bugs found in it? Does having more people work on a program make it better (because more people have a chance to spot problems) or worse (because of communication stumbles)? One sign of how quickly these approaches are maturing is the number of data repositories that have sprung up, including the University of Nebraskaâs Software Artifact Infrastructure Repository, the archives of NASAâs highly influential Software Engineering Laboratory and the National Science Foundationâfunded CeBASE, which organizes project data and lessons learned. All are designed to facilitate data sharing, amplifying the power of individual researchers.
The questions we and our colleagues seek to answer are as wide-ranging as those an anthropologist might ask during first contact with a previously unknown culture. How do people learn to program? Can the future success of a programmer be predicted by personality tests? Does the choice of programming language affect productivity? Can the quality of code be measured? Can data mining predict the location of software bugs? Is it more effective to design code in detail up front or to evolve a design week by week in response to the accretion of earlier code? Convincing data about all of these questions are now in hand, and we are learning how to tackle many others.
Along the way, our field is grappling with the fundamental issues that define any new science. How do we determine the validity of data? When can conclusions from one contextâone programming team, or one vast project, like the development of the Windows Vista operating systemâbe applied elsewhere? And crucially, which techniques are most appropriate for answering different kinds of questions?
Some of the most exciting discoveries are described in a recent book called Making Software: What Really Works, and Why We Believe It, edited by Andy Oram and Greg Wilson (OâReilly Media, 2011), in which more than 40 researchers present the key results of their work and the work of others. Weâll visit some of that research to give an overview of progress in this field and to demonstrate the ways in which it is unique terrain for empirical investigation. Quality by the Numbers A good example of the harvest that empirical studies are generating relates to one of the holy grails of software engineering: the ability to measure the quality of a program, not by running it and looking for errors, but by automated examination of the source code itself. Any technique that could read a program and predict how reliable it would be before it is delivered to customers would save vast sums of money, and probably lives as well.
Figure 2. There are many reasons to measure the complexity of computer code. The simplest metric of complexity for the snippet of code in (a ) above, written in the C language, is the number of lines. Next simplest is often the number of C functions; in the sample code here, one. At a higher level, McCabeâs cyclomatic complexity allows us to calculate the number of independent paths in the code and render them in a control-flow graph (b ). Halsteadâs software science metric analyzes complexity based on number and redundant use of textual elements, without reference to program structure. Herraiz and Hassan tested whether any of the higher measures provided more diagnostic information about complexity than the simplest measure, lines of code. (Figure adapted from material in Herraiz, I., and A. E. Hassan. 2011. Beyond lines of code: Do we need more complexity metrics? In Making Software: What Really Works and Why We Believe It. Sebastopol, CA: OâReilly Media, 125â144.)
Illustration by Tom Dunne.
One consistent discovery is that, in general, the more lines of code there are in a program, the more defects it probably has. This result may seem obvious, even trivial, but it is a starting point for pursuing deeper questions of code quality. Not all lines of code are equal: One line might add 2 + 2 while another integrates a polynomial in several variables and a third checks to see whether several conditions are true before ringing an alarm. Intuitively, programmers believe that some kinds of code are more complex than others, and that the more complex a piece of code is, the more likely it is to be buggy. Can we devise some way to measure this complexity? And if so, can the location of complexity hot spots predict where defects will be found?
One of the first attempts to answer this question was developed by Thomas J. McCabe and is known as cyclomatic complexity. McCabe realized that any program can be represented as a graph whose arcs show the possible execution paths through the code. The simplest graph is a straight chain, which represents a series of statements with no conditions or loops. Each if statement creates a parallel path through the graph; two such statements create four possible paths. Figure 2 shows a snippet of code extracted from a cross-platform download manager called Uget. The graph in part (b) shows the paths through the code; each if and loop adds one unit of complexity, giving this code an overall complexity score of 3.
Another widely used complexity measure is Maurice Halsteadâs software science metric, which he first described in 1977. Instead of graph theory, it draws on information theory and is based on four easily measured features of code that depend on the number of distinct operators and operands, their total count, how easy they are to discriminate from one another and so on. Figure 2(c) shows the values for the sample piece of code in (a).
Hundreds of other metrics have been developed, published and analyzed over the past 30 years. In their chapter, Herraiz and Hassan use statistical techniques to explore a simple question: Are any of these metrics actually better at predicting errors than simply counting the number lines of source code? Put another way, if a complexity metric is highly correlated with the number of lines of source code, does it actually provide any information that the simpler measure does not?
For a case study, Herraiz and Hassan chose to examine the open-source Arch Linux operating system distribution, which yielded a sample of 338,831 unique source files in the C language. They calculated the measures discussed above, and several others, for each of these files, taking special account of header files (those consisting mainly of declarations that assist in code organization). They found that for nonheader files, where programs actually do their work, all the metrics tested showed a very high degree of correlation with lines of code. Checking for generalizability, the effect held for all but very small files. The authors drew a clear lesson: âSyntactic complexity metrics cannot capture the whole picture of software complexity.â Whether based on program structure or textual properties, the metrics do not provide more information than simply âweighingâ the code by counting the number of lines.
Like all negative results, this one is a bit disappointing. However, that does not mean these metrics are uselessâfor example, McCabeâs scheme tells testers how many different execution paths their tests need to cover. Above all, the value here is in the progress of the science itself. The next time someone puts forward a new idea for measuring complexity, a validated, empirical test of its effectiveness will be there waiting for them.
Two-Headed Approach Metrics research looks at the code that programmers produce, but at least as much research effort has focused on how they produce it. An interesting case is pair programming, a work style that burst onto the scene in the late 1990s (though people have been using it informally for as long as programming has existed). In pair programming, two programmers sit at a single workstation and create code together. The driver handles the keyboard and mouse, while the navigator watches, comments and offers corrections. Many programmers have noticed over the years that duos like this seem to produce code more quickly and with fewer bugs. If asked, they would probably say that the benefits arise because different people naturally notice different sorts of things, or because not having to type gives the navigator more time to think, or possibly that having an audience makes the driver think more carefully. But is pair programming actually better, and if so, which of the possible explanations is the reason?
Figure 3. To the uninitiated, pair programming seems an out-there technique. Two programmers work at the same machine, usually with one piloting the keyboard, the other flying in the rear seat of the cockpit. Many innovators in software practices laud pair programming. Whether it should be preferred can be and has been investigated rigorously via a wide range of experiments that test different personality matches, different protocols for determining to whom control of the keyboard is assigned and different types of problems.
Illustration by Tom Dunne.
The first empirical study of pair programming, by Temple University professor John Nosek in 1998, studied 15 programmers, 5 working alone (the control group), the other 10 in 5 pairs. A challenging programming problem was given, with a time limit of 45 minutes. The results were statistically significant. Solutions produced by the pairs took 60 percent more total time, but dividing the total time by two, they completed the tasks 20 percent faster. And the author of the study reported that the pairs produced higher-quality code.
Subsequent studies with larger groups over longer periods of time, summarized by Laurie Williams at North Carolina State University, have expanded on these early results. Pair programmers tend to produce code that is easier to understand, and they do so with higher morale. Their productivity may fall initially as the programmers adjust to the new work style, but productivity recovers and often surpasses its initial level as programmer teams acquire experience. Related studies have also given insight into what actually happens during pair programming. For example, successful pairs often donât work together for a full dayâpairing can be mentally exhausting. Changing partners regularly seems to help, and swapping roles periodically between driver and navigator helps keep programmers engaged.
These results can even influence hardware design. Some teams have two people who both do best when they have control of the keyboard. Why not provide dual keyboards and mice? Jan Chong and Tom Hurlbutt tested this approach at Stanford University in 2007 and found it a worthwhile advance in pair programming, a finding subsequently supported by additional studies by Andreas HÃ¶fer at the University of Karlsruhe and by Sallyann Freudenberg, a software coach. Once again, what weâre seeing is the science rapidly improving as early studies generate questions and methods for follow-on research.
What we also see is that being right isnât always enough to effect change. Despite the accumulation of evidence in its favor, pair programming is still very much the exception in industry. Managers and programmers alike often brush the data away, clinging to the idea that putting two people on one job must double staffing requirements and therefore cannot deliver efficiency. This is an unfortunate phenomenon in many fields. Some people resist change tenaciously, even in the face of evidence and at the risk of failure.
Getting Good Programmers Another holy grail of empirical software engineering research is finding a way to tell good programmers from bad. A widely quoted piece of folklore says that good programmers are 28 times better than average (or 40, or 100, or some other large number). As teacher and developer Steve McConnell discusses in Making Software, the precise quantification of this assertion may be suspect, given that the definition of âbetterâ is elusive in any knowledge-based work. Yet everyone who has programmed for a living knows that there really are huge differences in productivity and capability among programmers. Other than hiring someone and watching her work for a couple of years, how can we spot the stars?
Figure 4. Measuring programmer aptitude and skill is the difficult art of devising a number line from âzeroâ to âgreat.â
Illustration by Tom Dunne.
Jo Erskine Hannay at Simula Research Laboratory has addressed the issues of talent and expertise by breaking the question into parts: Can we actually define what it means to be a good software developer? Can we reliably determine that one developer is better than another? And if we canât, should we surrender on those questions and focus instead on tools and techniques?
Hannay zeroes in on a field called individual differences research, in which individuals are classified by characteristics that separate one from another, such as personality. Although some pseudoscientific schemes used by human resources departments and dating websites have given personality testing a bad reputation, modern programs such as the five-factor model have solid scientific foundations (or as scientists might put it, we have construct validity for the concept of measuring personality). The five-factor model and similar protocols address dimensions that include extraversion, agreeableness, conscientiousness, emotional stability, and willingness and ability to learn from experience. We also know that programmers tend to have certain personality types and that they vary less in personality than the average population. Can we use findings like these to discover good programmers?
The short answer is no. Large meta-analyses and further studies by Hannay and others conclude that a programmerâs personality is not a strong predictor of performance. The people who swear by their beliefs about personality and programmer success have now been given reason to assess their position critically, along with methodological support for doing so. Credible Accreditation If we canât predict who will become a good programmer, can we at least certify who already is one? Would it help if software developers were required to undergo some sort of certification? In most of the industrialized world, engineering professionals must be licensed; a preliminary exam permits them to practice and gain experience as an engineer-in-training, followed some years later by a deeper exam, often specialized according to their discipline. Successful candidates are then allowed to offer their services to the public. Could such a program be developed for software engineers? And would it actually make anything better?
Figure 5. Two goals of software research are the ability to compare programmers and determine which is âbetter,â and the ability to algorithmically analyze code to determine its quality. The basic goal of both is better software. One route to better software could be credentialing and licensure of software engineers like that imposed on civil and other engineers. Mastery of a body of knowledge would be the gateway, but at present that would be establishing a required body of knowledge before demonstrating empirically that it is the right body of knowledge.
Illustration by Tom Dunne.
If done right, such a program would be based on a codified body of necessary knowledge and best practices, just as exams in civil, mechanical, and electrical engineering are. A major effort under way right now is the Software Engineering Body of Knowledge project (SWEBOK), sponsored by the IEEE Computer Society. Their intentions are noble, and conscientious professionals are steadily assembling a potential set of standards.
We are skeptical of this work, for the very reasons that we are committed to empirical software engineering research. We believe that it puts the cart before the horse, that we simply donât yet know enough about what actually works and what doesnât to define such standards. In place of a trustworthy gateway, we fear that a Software Engineering Body of Strong Opinion would create a false belief that we know more than we do at present about how software can and should be made, how the quality of software can be rigorously determined and how programmers should take on the job of programming. That knowledge is the very thing empirical software researchers are stalking.
For example, in the 1990s a group of respected software designers combined forces to create a graphical notation for computer programs called the Unified Modeling Language (UML), which was intended to fill the role of blueprints and circuit diagrams in civil and electrical engineering. Despite a great deal of hype, UML never really caught on: Almost everyone who earns a degree in computer science learns about UML at some point, but very few programmers use it voluntarily (although some are obliged to use it in order to satisfy the terms of government procurement contracts).
In 2007, Mario Cherubini, Gina Venolia, Rob DeLine and Andrew Ko studied what kinds of diagrams programmers actually draw and why they draw them. They found that in almost all cases, programmersâ sketches were transient in nature; they were meant to be aids to conversation rather than archival documentation. They also found that the cost of turning hastily drawn whiteboard doodles into formal instructions was greater than the value of the diagrams to the programmers who were creating them. Companies selling UML drawing tools ignore this awkward result, but we are hopeful that a younger generation of software designers will incorporate into their work both findings like these and the research methods behind them. Life Imitates Code In 1967, only partly as a wry joke, Melvin Conway coined his eponymous law:
Any organization that designs a system â¦ will produce a design whose structure is a copy of the organizationâs communications structure.
In other words, if the people writing a program are divided into four teams, the program they create will have four major parts.
Nachi Nagappan, Christian Bird and others at Microsoft Research evaluated the validity of Conwayâs law by examining data collected during the construction of Windows Vista. Vista consists of thousands of interrelated libraries and programs called binaries. When an error occurs, the breakdown can usually be traced to a fault in a single binary or to a breakdown in the interaction between binaries. Nagappan, Bird, and their team used data mining to explore which aspects of software construction correlated with faults. They found that when work occurred in alignment with Conwayâs lawâthat is, when the structure of the team and the structure of the code mirrored each otherâcode contained fewer bugs, whereas work that crossed team boundaries increased failure-proneness.
Nagappan and his collaborators then used their data to predict failure-? proneness by locating code produced by multiple groups or at the interface of multiple groups. Contrary to digital folklore, they found that geographic separation between team members didnât have a strong impact on the quality of their work. What did matter was organizational separation: The farther apart team members were in the company organization chart, the greater the number of faults in the software they produced. This result is applied science at its best: It is both surprising and actionable.
Open Access At present, a tremendous enabler of empirical software engineering research is the open-source software movement, which is rapidly generating a freely available accumulation of code along with complete archives of the communications between developers. In an open-source setting, programmers collect around software projects to produce applications that they want to see available for free. The developers are often in different places and time zones, so communication occurs via email and online forums. The code and communication records are accessible to all via websites, so interested developers can join the project at any stage to share expertise, troubleshoot and add to the source code.
Figure 6. Like the rest of social science research, empirical software engineering faces challenges in establishing that results are generalizable. Do findings scale from small shops to large, from small projects to large, from industrial, tightly managed settings to the milieu dubbed the open-source bazaar by Eric Raymond?
Illustration by Tom Dunne.
These electronic repositories are a software-engineering researcherâs paradise. They constitute a historical record of the life of a project, including all of the dead ends and debates, the task assignments, the development of team structure and many other artifacts. With thoughtful and targeted searches, researchers can explore topics such as how newcomers adapt to a software projectâs culture. They can test prediction engines to assess the validity of theories about project structure and code development. Bug-tracking records and the interpersonal interactions involved in solving software flaws serve as a narrative of the incremental improvement of code quality. Before the open-source community took on its present form, this kind of access to project archives was available only to investigators in corporate research units.
As the open-source movement developed, there was a feeling that researchers should treat it as a special case in the realm of software engineering. Eric Raymond, president of the Open Source Initiative, highlighted the differences between open-source and industrial projects when he compared them to a bazaar and a cathedral. Industry is the cathedral, in which projects are built according to carefully detailed plans, with attendant hierarchy, role divisions, order and dogma. The bazaar is bustling, free-form, organic and shaped by the aggregate actions of the crowd. Researchers bringing results from the open-source world met skepticism about whether their findings could be generalized to the rest of the community. In fact, research has demonstrated that the distinctions between the two worlds are often illusory. There are cathedrals in the open-source sphere and bazaars in the closed-source. Similar social and technical trends can be documented in both, and researchers have come to appreciate the dividends that come from comparing the two.
The work of Guido Schryen at the University of Freiberg and Eliot Rich at the University at Albany, SUNY, is instructive about how to ask and answer questions about the two worlds. In a 2010 paper they addressed a much-debated and critically important issue: Which model leads to better security, open- or closed-source software? Security is a formidable concern for any software that will come within reach of networks. Schryen and Rich examined the security-vulnerability announcements and the release (or nonrelease) of patches (software fixes) for 17 widely deployed software packages. Proponents of open-source software have argued that its characteristically wide developer base must lead to better review and response to security issues. An opposing argument holds that closed-source and industrial projects have more direct motivation to find and fix security flaws. Schryen and Rich sorted the packages they studied within categories such as open- and closed-source, application type (operating system, web server, web browser and so on), and structured or loose organization. They found that security vulnerabilities were equally severe for both open- and closed-source systems, and they further found that patching behavior did not align with an openâversus-closed source divide. In fact, they were able to show that application type is a much better determinant of vulnerability and response to security issues, and that patching behavior is directed by organizational policy without any correlation to the organizational structure that produced the software. Whether open- or closed-source software was more secure turned out to be the wrong question to ask. We do not expect that the lines between the open- and closed-source worlds will be so blurred in every aspect of software engineering, but results like these show how the massive amount of information available as a byproduct of open-source development can be put to scientific use.
As in any applied science, the ultimate measure of success for all of this work will be changeâchange in the tools used to develop software, change from current practices to those that are provably better and most importantly, change in what is and is not accepted as proof.
Bibliography
Bird, C., D. Pattison, R. DâSouza, V. Filkov and P. Devanbu. 2008. Latent social structure in open-source projects. SIGSOFT â08/FSE-16: Proceedings of the 16th ACM SIGSOFT Symposium on Foundation of Software Engineering:24â35. Chong, J., and T. Hurlbutt. 2007. The social dynamics of pair programming. Proceedings of the 29th International Conference on Software Engineering:354â363.Freudenberg, S., P. Romero and B. du Boulay. 2007. Talking the talk: Is intermediate-level conversation the key to the pair programming success story? Proceedings of AGILE 2007:84â91.
Glass, Robert. L. 2002. Facts and Fallacies of Software Engineering. Boston: Addison-Wesley. Halstead, M. 1977. Elements of Software Science. North Holland: Elsevier Science Ltd. Hannay, J. E., E. Arisholm, H. Engvik and D. I. K. SjÃ¸berg. 2010. Personality and pair programming. IEEE Transactions on Software Engineering 36:61â80. HÃ¶fer, A. 2008. Video analysis of pair programming. Proceedings of the 2008 International Workshop on Scrutinizing Agile Practices:37â41.Nagappan, N., B. Murphy and V. Basili. 2008. The influence of organizational structure on software quality: an empirical case study. Proceedings of the 30th International Conference on Software Engineering:521â530. Nosek, J. T. 1998. The case for collaborative programming. Communications of the ACM 41:105â108.Oram, A., and G. Wilson. 2011. Making Software: What Really Works and Why We Believe It. Sebastopol, CA: OâReilly Media. Schryen, G., and E. Rich. 2010. Increasing software security through open source or closed source development? Empirics suggest that we have asked the wrong question. Proceedings of the 43rd Hawaii International Conference on System Sciences:1â10.
American Scientist Comments and Discussion
To discuss our articles or comment on them, please share them and tag American Scientist on social media platforms. Here are links to our profiles on Twitter, Facebook, and LinkedIn.
If we re-share your post, we will moderate comments/discussion following our comments policy.
Read More in This Issue
Making Biofuel from Microalgae
All Topics
More in Computer
×
AMSCI ICON NAVIGATION:
Navigation Menu
Search
Help
Log In, Register
My AmSci
Select Options
(not present on all pages)
Click "American Scientist" to access home page
Twitter
Facebook
YouTube
LinkedIn
Topics
Features
Blogs
Video
Podcasts
Magazine
Archive
Subscribe
Newsletter
About Us
Advertise
Login
Register
Search
Help
Following Russia’s invasion on February 24...
Subscribe
Give a Gift
Donate
A Publication of
Sigma XI
Â© 2022 Sigma Xi, The Scientific Research Honor Society
×


Link: https://www.zippia.com/software-engineer-jobs/demographics/

Software Engineer Demographics and Statistics [2022]: Number Of Software Engineers In The US
JobsSign In Careers
By Job Titles
By College Majors
By Companies
By Location
Job Search Advice
Salaries
Post Job Sign In Explore
Jobs
College Majors
Companies
Location
Job Search Advice
Salaries
Post Job Sign InSoftware Engineer Demographics and Statistics In The US Overview
Jobs
How To Become
Salary
Resume
Skills
What They Do
Education
Certifications
Demographics More
Job Description
Best States
Remote Jobs
Trends
FAQs
Part Time Jobs
Entry Level Jobs
Full Time Jobs
Work From Home Jobs
Interview Questions
Cover Letter Get Alerts For Software Engineer JobsGender RatioMale - 78%
Female - 22%See All Gender Info Percentage of Software Engineers By RaceWhite - 52.3%
Asian - 33.0%See All Race Info Average Age39.5See All Age Info Top IndustryTechnologySee Employment Statistics Software Engineers Average Salary$100,260See All Heatmaps Software Engineer Jobs You Might LikeSoftware Engineer Statistics By Gender 22.0% of software engineers are women and 78.0% of software engineers are men.
Job TitleMale, 78.0%Female, 22.0%Software Engineers By GenderGenderPercentagesMale78.0%Female22.0%Gender Pay Gap For Software Engineer Women Earn 92Â¢ For Every $1 Earned By Men Male Income$93,382Female Income$86,299Software Engineer Gender Over Time This data shows how men and women predominate in the software engineer position over time.
MaleFemale100%80%60%40%20%0%2010201120122013201420152016201720182019Software Engineer Gender By YearYearMaleFemale201069.61%30.39%201169.32%30.68%201270.96%29.04%201370.84%29.16%201472.16%27.84%201571.81%28.19%201673.69%26.31%201773.04%26.96%201873.09%26.91%201972.77%27.23%Software Engineer Male to Female Ratio We compared this job title with other job titles to see how gender percentages varied. As you can see, dell certified systems expert and software applications architect have the biggest difference in gender.
Compare JobsJob TitleMaleFemaleInformatics Nurse Specialist13%87%Clinical Support Specialist22%78%Clinic Administrator23%77%Software Engineer78%22%Senior Data Center Engineer98%2%Software Applications Architect98%2%Dell Certified Systems Expert99%1%MaleFemale100%75%50%25%0% Dell Certified Systems Expert
Software Applications Architect
Senior Data Center Engineer
Software Engineer
Clinic Administrator
Clinical Support Specialist
Informatics Nurse Specialist 0%25%50%75%100%Software Engineer Statistics By Race The most common ethnicity among software engineers is White, which makes up 52.3% of all software engineers. Comparatively, there are 33.0% of the Asian ethnicity and 6.9% of the Hispanic or Latino ethnicity.
Job TitleWhite, 52.3%Asian, 33.0%Hispanic or Latino, 6.9%Black or African American, 4.9%Unknown, 2.8%American Indian and Alaska Native, 0.1%Software Engineer RaceSoftware Engineer RacePercentagesWhite52.3%Asian33.0%Hispanic or Latino6.9%Black or African American4.9%Unknown2.8%American Indian and Alaska Native0.1%Software Engineer Race And Ethnicity Over Time Using the Census Bureau data, we found out how the percentage of each ethnic category trended between 2010-2019 among software engineers.
WhiteAsianHispanic or LatinoBlack or African AmericanSoftware Engineer Race By YearYearWhiteBlack or African AmericanAsianHispanic or Latino201056.55%5.49%29.83%5.68%201157.02%5.72%29.33%5.39%201255.93%5.26%30.71%5.83%201356.32%4.78%30.52%5.64%201455.19%5.29%31.17%5.77%201554.37%5.10%31.29%6.34%201653.87%5.09%32.00%6.34%201752.45%4.97%32.56%6.71%201853.09%4.82%31.78%7.32%201952.26%4.91%32.97%6.94%Software Engineer Wage Gap By RaceAsian software engineers have the highest average salary compared to other ethnicities. Black or african american software engineers have the lowest average salary at $84,962.
$95,000$93,000$91,000$89,000$87,000$85,000$83,000UnknownWhiteBlack or African AmericanAsianHispanic or LatinoEthnicitySalaryUnknown$91,057White$90,216Black or African American$84,962Asian$94,917Hispanic or Latino$88,050Browse Most In Demand Jobs
Senior Software Engineer Jobs
Resume
Location
Software Developer Jobs
Resume
Location
Business Analyst Jobs
Resume
Location
Technical Support Specialist Jobs
Resume
Location
Customer Care Professional Jobs
Resume
Registered Nurse Jobs
Resume
Location
Warehouse Worker Jobs
Resume
Location
Sorter Jobs
Resume
Location
Warehouse Team Member Jobs
Line Cook Jobs
Resume
Location
Explore All Jobs Software Engineer JOBSLawrence, NJ, ...DistanceSalaryJob TypeJob LevelEducationDate PostedFiltersAverage Age of a Software Engineer We determined the average age of software engineers based on ethnicity and gender.
MaleFemaleUnknownWhiteBlack or African AmericanAsianHispanic or Latino34363840424446Software Engineer Age By RaceRaceMale AgeFemale AgeUnknown3532White3942Black or African American4043Asian3737Hispanic or Latino3535Software Engineer Age Breakdown This chart breaks down the ages of software engineer employees. Interestingly enough, the average age of software engineers is 40+ years old, which represents 46% of the population.
Compare Jobs 40+ years
30-40 years
20-30 years 0%20%40%60%80%100%Software Engineer AgeSoftware Engineer YearsPercentages40+ years46%30-40 years36%20-30 years18%Types of Software Engineer Degree Levels The most common degree for software engineers is bachelor's degree 73% of software engineers earn that degree. A close second is master's degree with 20% and rounding it off is associate degree with 4%.
Job TitleBachelors, 73%Masters, 20%Associate, 4%Diploma, 1%Other Degrees, 2%Software Engineers By EducationSoftware Engineer DegreePercentagesBachelors73%Masters20%Associate4%Diploma1%Other Degrees2%Software Engineer Jobs You Might LikeSoftware Engineer Wage Gap By EducationSoftware engineers with a Doctorate degree earn more than those without, at $114,338 annually. With a Masters degree, software engineers earn a median annual income of $102,317 compared to $93,382 for software engineers with an Bachelors degree.
$119,000$114,000$109,000$104,000$99,000$94,000$89,000Master's DegreeBachelor's DegreeDoctorate DegreeEducationSalaryMaster's Degree$102,317Bachelor's Degree$93,382Doctorate Degree$114,338Software Engineer Employment StatisticsCompany Size We created this chart to show you the average size of companies that typically hire software engineers.
Compare Jobs < 50 employees
50 - 100 employees
100 - 500 employees
500 - 1,000 employees
1,000 - 10,000 employees
> 10,000 0%20%40%60%80%100%Software Engineer Jobs By Employer SizeCompany SizePercentages< 50 employees2%50 - 100 employees2%100 - 500 employees5%500 - 1,000 employees12%1,000 - 10,000 employees34%> 10,000 employees46%Top Industries Hiring Software Engineers Just based on the number of employees within each industry, we were able to determine the most common industries that employ software engineers. Those industries include technology, professional and media.
Compare Jobs Technology
Fortune 500
Telecommunication
Media
Internet Show More0%20%40%60%80%100%Software Engineer Industry StatisticsIndustryPercentages Technology 37% Fortune 500 21% Telecommunication 5% Media 5% Internet 5% Professional 5% Finance 4% Manufacturing 3% Start-up 3% Retail 3% Health Care 2% Automotive 2% Transportation 1% Non Profits 1% Insurance 1% Construction 1% Hospitality 1%Software Engineer Turnover And Employment StatisticsSoftware Engineer Unemployment Rate Over Time The Bureau of Labor Statistics came in clutch when it came down to figuring out how the unemployment rate has changed over time. Between 2008 and 2018, this is how the number of software engineers changed.
Unemployment rateSoftware Engineer Unemployment Rate By YearYearSoftware Engineer Unemployment Rate20104.56%20113.25%20122.64%20132.67%20142.07%20152.26%20162.33%20172.17%20181.80%20191.88%The Average Number of Years That Software Engineer Stay in a Job By looking over 102,987 software engineers resumes, we figured out that the average software engineer enjoys staying at their job for 1-2 years for a percentage of 45%.
Compare Jobs Less than one year
1-2 years
3-4 years
5-7 years
8-10 years
11+ years 0%20%40%60%80%100%Software Engineer TenureNumber or YearsPercentagesLess than 1 year24%1-2 years45%3-4 years14%5-7 years10%8-10 years4%11+ years4%Comparing The LGBT Ratio of Software Engineers with Other Job Titles After finding the gender ratio, we wondered if the percentages of LGBT persons were different as well. Using the data below, you can see how other job titles compare to software engineers.
Compare JobsJob TitleLGBTJob OpeningsFunctional Test Engineer7.66%44,452Telecommunication Systems Designer7.80%102,055Software Engineer8.26%Database Development Project Manager8.31%95,300PC Systems Administrator8.39%135,471Support Associate9.71%100,892Data Scientist20.69%106,973Data ScientistSupport AssociatePC Systems AdministratorDatabase Development Project ManagerSoftware EngineerTelecommunication Systems DesignerFunctional Test Engineer0%5%10%16%21%26%Software Engineer LGBT DemographicsProfessionPercentages of LGBT Job Openings Functional Test Engineer 7.66%44,452 Telecommunication Systems Designer 7.80%102,055 Database Development Project Manager 8.31%95,300 PC Systems Administrator 8.39%135,471 Support Associate 9.71%100,892 Data Scientist 20.69%106,973Foreign Languages Spoken By Software Engineers The most common foreign language among software engineers is Spanish at 24.5%. The second-most popular foreign language spoken is Chinese at 11.4% and French is the third-most popular at 10.2%.
Job TitleSpanish, 24.5%Chinese, 11.4%French, 10.2%Mandarin, 7.5%German, 7.2%Other, 39.2%Software Engineer Languages SpokenForeign LanguagePercentagesSpanish24.5%Chinese11.4%French10.2%Mandarin7.5%German7.2%Other39.2%Software Engineer JobsLawrence, NJ, ...DistanceSalaryJob TypeJob LevelEducationDate PostedFiltersGender RatioMale - 78%
Female - 22%See All Gender Info Percentage of Software Engineers By RaceWhite - 52.3%
Asian - 33.0%See All Race Info Average Age39.5See All Age Info Top IndustryTechnologySee Employment Statistics Software Engineers Average Salary$100,260See All Heatmaps Software Engineer Jobs You Might LikeRecently Added Software Engineer JobsLawrence, NJ, ...DistanceSalaryJob TypeJob LevelEducationDate PostedFiltersSoftware Engineer Heatmaps Where Do Software Engineers Earn The Most?
Software engineers earn the most in California, where the average software engineer salary is $115,477. The map here shows where software engineers earn the highest salaries in the U.S. The darker areas across the 50 states highlight the highest salaries.
Average Salary Which State Has The Most Software Engineers?
By looking through more than 102,987 resumes, we found that the most popular places for software engineers are San Diego, CA and New York, NY.
Number of Software EngineersNumber Of Software Engineer Jobs By StateRankStateNumber of JobsAverage Salary1 California 19,681 $115,477 2 Texas 7,575 $79,419 3 Washington 6,948 $112,080 4 Virginia 5,588 $82,022 5 New York 5,058 $92,846 6 Massachusetts 4,544 $83,582 7 Florida 4,247 $70,541 8 Illinois 3,966 $75,772 9 Maryland 3,611 $82,645 10 Pennsylvania 3,599 $80,444 11 North Carolina 3,326 $78,301 12 New Jersey 3,160 $82,074 13 Georgia 2,999 $74,244 14 Colorado 2,663 $72,814 15 Oregon 2,587 $91,473 16 Ohio 2,509 $74,727 17 Minnesota 2,314 $76,300 18 Michigan 2,254 $74,406 19 Arizona 2,041 $83,602 20 Indiana 1,955 $72,602 21 Utah 1,777 $77,120 22 Missouri 1,422 $68,403 23 Wisconsin 1,313 $72,793 24 Alabama 1,235 $69,250 25 Connecticut 1,114 $80,498 26 District of Columbia 1,104 $84,121 27 Tennessee 1,074 $71,046 28 Iowa 897 $72,892 29 Kansas 847 $69,300 30 Kentucky 773 $71,499 31 Arkansas 750 $73,164 32 South Carolina 725 $72,455 33 Rhode Island 704 $78,726 34 Nebraska 683 $71,346 35 New Hampshire 672 $79,926 36 Delaware 650 $82,336 37 Nevada 638 $92,651 38 Idaho 631 $78,961 39 Louisiana 626 $76,258 40 New Mexico 558 $72,743 41 Oklahoma 491 $68,061 42 Montana 479 $77,348 43 Vermont 418 $80,333 44 Maine 385 $75,766 45 Mississippi 336 $70,644 46 West Virginia 305 $72,788 47 North Dakota 291 $77,541 48 South Dakota 286 $69,944 49 Wyoming 237 $68,674 50 Hawaii 230 $66,259 51 Alaska 219 $75,692
Where Are Software Engineers In High Demand?
Software engineers are in high demand in New York, NY. There are currently 1,003 job openings for software engineers here. We looked over job openings to determine where in the country software engineers are in the most demand.
Jobs OpeningsSoftware Engineer Demographics FAQs What Percentage Of Software Engineers Are Female?
27.2% of software engineers are female in the United States. This is 0.3 percentage points higher than last year. Additionally, the percentage of female software engineers has decreased by -3.2 percentage points since 2010. That means there are a total of 89,640 female software engineers in the U.S. and 239,919 male software engineers in the United States. Note that Zippia's estimate accounts only for the 329,559 people with the specific job title of software engineer and doesn't include grouping similar job titles, or people with potentially similar credentialing. How Many Software Engineer Are There In The Us?There are over 209,644 Software Engineers in the United States.What Percentage Of Software Engineers Are Black?4.9% of Software Engineers are Black or African AmericanWhat Race Are Most Software Engineers?Most a are White, with 52.3% of Software Engineers belonging to this ethnicity. 33.0% of Software Engineers are Asian, 6.9% of Software Engineers are Hispanic or Latino, 4.9% of Software Engineers are Black or African American, 2.8% of Software Engineers are Unknown, and 0.1% of Software Engineers are American Indian and Alaska NativeAre Software Engineer Jobs Male - Dominated ? Yes, Software Engineer jobs are male - dominated. 78% of Software Engineers are male, and 22% are female, so there are more male Software Engineers than female Software Engineers in the United States.How Old Is The Average Software Engineer ? The average Software Engineer is 39 years old. 46% of Software Engineers are 40+ years old or older, 36% are between the ages of 30-40 years, and 18% are between 20-30 years oldHave more questions?
See all answers to common computer and mathematical questions. Search For Software Engineer JobsFind JobsRelated Jobs Demographics Associate Software Engineer Demographics
Computer Engineer Demographics
Contract Software Engineer Demographics
Embedded Software Engineer Demographics
Principal Software Engineer Demographics
Senior Software Development Engineer Demographics
Senior Software Engineer Demographics
Senior Systems Software Engineer Demographics
Software Analyst Demographics
Software Consultant Demographics
Software Design Engineer Demographics
Software Developer Demographics
Software Development Engineer Demographics
Software Engineer Lead Demographics
Software Engineer-Consultant Demographics Software Engineer Related Careers Associate Software Engineer
Computer Engineer
Contract Software Engineer
Embedded Software Engineer
Principal Software Engineer
Senior Software Development Engineer
Senior Software Engineer
Senior Systems Software Engineer
Software Analyst
Software Consultant
Software Design Engineer
Software Developer
Software Development Engineer
Software Engineer Lead
Software Engineer-Consultant Software Engineer Related Jobs Associate Software Engineer Employment
Computer Engineer Employment
Contract Software Engineer Employment
Embedded Software Engineer Employment
Principal Software Engineer Employment
Senior Software Development Engineer Employment
Senior Software Engineer Employment
Senior Systems Software Engineer Employment
Software Analyst Employment
Software Consultant Employment
Software Design Engineer Employment
Software Developer Employment
Software Development Engineer Employment
Software Engineer Lead Employment
Software Engineer-Consultant Employment Software Engineer Jobs By Location Software Engineer jobs in Arecibo, PR
Software Engineer jobs in Baton Rouge, LA
Software Engineer jobs in Buckingham, PA
Software Engineer jobs in Caldwell, ID
Software Engineer jobs in Colorado Springs, CO
Software Engineer jobs in Corpus Christi, TX
Software Engineer jobs in Dundalk, MD
Software Engineer jobs in Glenn Heights, TX
Software Engineer jobs in Jamestown, ND
Software Engineer jobs in Jersey City, NJ
Software Engineer jobs in Kennewick, WA
Software Engineer jobs in Los Angeles, CA
Software Engineer jobs in Lowell, MA
Software Engineer jobs in Round Lake Beach, IL
Software Engineer jobs in Washington, DC Previous:OverviewNext: Overview Zippia Careers
Computer and Mathematical Industry
Software Engineer Locations
Software Engineer Software Engineer DemographicsUpdated September 9, 2022
Zippia
About Us
Employer Services
Terms of Use
Privacy Policy
Contact Us Careers & Jobs Resume Builder
Job Search Q&A
Email: support@zippia.com
Copyright Â© 2022 Zippia, Inc.


Link: https://cse.engin.umich.edu/people/faculty/

Faculty | Computer Science and Engineering at Michigan
MENU
Search
EECS
EECS
Computer Science and Engineering
CSE
Electrical and Computer Engineering
ECE
Search
About
Welcome to CSE
By the Numbers
Advisory Board
History
Faculty Hiring
Giving
Visit
Bob and Betty Beyster Building
Leinweber Computer Science and Information Building â
Emergency and Safety Info
Resources
Contact
Community
Our Values: HACKS
Community News
Are You New to CS?
Resources for Student Support and Inclusion
Student Groups and Teams
CSE Action Plan
DEI and Climate â
Reporting Concerns and Misconduct
Academics
Graduate Programs & Admissions
Undergraduate Programs & Admissions
For Current Students
Course Information
Undergrad Research Opportunities
Research
Research Areas
Labs & Centers
Tech Transfer & Startups
Industrial Relations
Reports & Publications
People
Faculty
PhD Students
Postdocs
Staff
Alumni
Honors and Awards
Hire Our PhDs and Postdocs
News
Events
People
All Faculty —
Core CSE Faculty
Tenure-Track Faculty
Teaching Faculty
Research Scientists and Investigators
Courtesy Faculty
Emeritus Faculty
PhD Students +
Grad Student Room Directory
Postdocs
Staff
Alumni +
Alumni in Academia
Honors and Awards +
All Faculty Awards +
Awards by Faculty
Professorships
Fellows
Early Career Awards
Staff Awards
Awarded Graduate Fellowships
Alumni Awards
Kuck Dissertation Prize Recipients
PhDs and postdocs on the job market
Home
>
People
> All Faculty
All Faculty
ABCDEFGHIJKLMNOPQRSTUVWXYZAbney, StevenAssociate Professor, Linguistics Affiliate Faculty, Electrical Engineering and Computer ScienceResearch Interests: Natural language processing, machine learning Website Email: Phone: (734) 647-5588Office: 412 LorchAckerman, Mark S.George Herbert Mead Collegiate Professor of Human-Computer InteractionProfessor, Electrical Engineering and Computer Science; Professor, School of InformationProfessor of Learning Health Sciences, Medical School Website
Mentoring Plan Email: Phone: (734) 763-5439Office: 3645 BeysterAdar, EytanAssociate Professor, School of InformationAssociate Professor (courtesy), Electrical Engineering and Computer ScienceResearch Interests: Human-Computer Interaction, Visualization, Text Mining, and Social Network Analysis Website Email: Phone: (734) 647-8028Office: 4368 North QuadAlmomani, RaedLecturer I, Electrical Engineering and Computer ScienceEmail: Office: 2717 BeysterAndargie, Fitsum AssamnewAdjunct Assistant Research Scientist, Electrical Engineering & Computer ScienceEmail: Office: Beyster Bldg.Arthur, WilliamLecturer IV, Electrical Engineering and Computer Science Website Email: Phone: 734-763-3296Office: 3640 BeysterAtkins, Daniel E.Professor Emeritus, School of InformationProfessor Emeritus, Electrical Engineering and Computer ScienceResearch Interests: Library and Information ServicesEmail: Phone: (734) 647-7312Office: 300 West HallAustin, ToddS. Jack Hu Collegiate Professor of Computer Science and EngineeringProfessor, Electrical Engineering and Computer Sciencehe/him/hisResearch Interests: Computer architecture, robust and secure system design, hardware and software verification, and performance analysis tools and techniques. Website Email: Phone: (734) 936-0370Office: 4637 Beyster Bldg.Banovic, NikolaAssistant Professor, Electrical Engineering and Computer ScienceResearch Interests: Computational Interaction, Human-centered Explainable AI, Behavior-aware Interfaces Website
Mentoring Plan Email: Phone: 734-764-4289Office: 2630 Beyster Bldg.Bansal, NikhilPatrick C. Fischer Professor of Theoretical Computer ScienceProfessor, Electrical Engineering and Computer ScienceResearch Interests: Algorithms, Optimization, Machine Learning, Discrete Mathematics. Website
Mentoring Plan Email: Office: 3637 Beyster Bldg.Baveja, Satinder SinghToyota Professor of Artificial IntelligenceProfessor, Electrical Engineering and Computer ScienceResearch Interests: Reinforcement Learning, Machine Learning, Computational Game Theory, Adaptive Human Computer Interaction. Website Email: Phone: (734) 936-2831Office: 3749 Beyster Bldg.Beaumont, JonathanLecturer III, Electrical Engineering & Computer Sciencehe/him/hisEmail: Phone: (734) 763-1557Office: 3828 Beyster Bldg.Bertacco, ValeriaArthur F. Thurnau ProfessorMary Lou Dorf Collegiate Professor of Computer Science and Engineering, College of EngineeringVice Provost for Engaged Learning, Office of the Provost Professor, Electrical Engineering and Computer ScienceResearch Interests: Improving the functional correctness of digital integrated circuits, by developing technology that attacks the issue at design time, in post-silicon, and throughout the lifetime of a digital integrated component, in face of the challenges posed by fragile silicon and extreme design complexity. Website
Mentoring Plan Email: Phone: (734) 615-4047Office: 4645 Beyster Bldg.Bodwin, GregAssistant Professor, Electrical Engineering & Computer ScienceResearch Interests: Graph algorithms, data structures, sketching, game theory, and combinatorics. Website
Mentoring Plan Email: Phone: (734)647-1902Office: 3609 Beyster BldgBondi-Kelly, ElizabethVisiting Assistant Professor (effective Jan. 1, 2023), Computer Science & EngineeringAssistant Professor (effective Aug. 28, 2023), Electrical Engineering & Computer Scienceshe/her/hers Website Email: Brehob, MarkKurt Metzger Collegiate LecturerLecturer IV, Electrical Engineering and Computer Sciencehe/him/his Website Email: Phone: (734) 764-0525Office: 4632 Beyster Bldg.Budak, CerenAssociate Professor, School of InformationAssociate Professor (courtesy), Electrical Engineering & Computer Science Website Email: Phone: 734-763-2284Office: 3336 North QuadBurdick, LauraLecturer III, Electrical Engineering & Computer ScienceResearch Interests: Natural language processing, data science, machine learningEmail: Phone: (734) 936-1312Office: 3824 BeysterCafarella, Michael J.Adjunct Associate Professor, Electrical Engineering and Computer Science Website Email: Chai, JoyceProfessor, Electrical Engineering and Computer ScienceResearch Interests: Natural language processing, language grounding to vision and robotics, situated human-machine communication, interactive task learning. Website
Mentoring Plan Email: Phone: 734-764-3308Office: 3632 BeysterChakraborty, MithunAssistant Research Scientist, Electrical Engineering & Computer Sciencehe/him/hisResearch Interests: Multi-Agent Systems,Â Computational Economics, Algorithmic Game Theory and Mechanism Design, Fair Allocation, Collective Forecasting. Website Email: Office: 2709 Beyster Bldg.Cheraghchi, MahdiAssociate Professor, Electrical Engineering and Computer Sciencehe/him/hisResearch Interests: All theoretical aspects of CS, especially the role of information and coding theory in cryptography, complexity, algorithms, and high-dimensional geometry. Website
Mentoring Plan Email: Phone: (734) 763-9165Office: 3603 Beyster Bldg.Chesney, DavidToby Teorey Collegiate LecturerLecturer IV, Electrical Engineering and Computer Science Website Email: Phone: (734) 763-1498Office: 4624 Beyster Bldg.Chowdhury, MosharafMorris Wellman Faculty Development Professor of Computer Science and EngineeringAssistant Professor, Electrical Engineering & Computer ScienceResearch Interests: Networked systems and cloud computing. Website
Mentoring Plan Email: Phone: 734-764-4148Office: 4820 BeysterCollins-Thompson, KevynAssociate Professor, School of InformationAssociate Professor (courtesy), Electrical Engineering and Computer Science Website Email: Phone: 734-615-2132Office: 4360 North QuadCompton, Kevin J.Associate Professor Emeritus, Electrical Engineering and Computer ScienceResearch Interests: Theory of computation, Complexity of combinatorial and logical problems, analysis of algorithms, automata theory Website Email: Phone: (734) 763-9165Office: 3603 Beyster Bldg.Conway, LynnProfessor Emerita, Electrical Engineering and Computer ScienceResearch Interests: Tele-autonomous systems, Collaboration technology and media integration, Artificial intelligence, Computer systems & hardware, VLSI program Website Email: Phone: (734) 763-5509Office: 2717 Beyster Bldg.Corso, JasonProfessor, Electrical Engineering and Computer ScienceResearch Interests: Computer vision, robotics, artificial intelligence. Website Email: Office: FRB 3280Darden, MarcusLecturer IV, Electrical Engineering and Computer ScienceEmail: Phone: (734) 764-3643Office: 2644 Beyster Bldg.Das, ReetuparnaAssociate Professor, Electrical Engineering and Computer ScienceResearch Interests: Computer architecture, and its interaction with software systems and device/VLSI technologies. Specialized interests include on-chip interconnection networks, three-dimensional IC design, and multi-core memory systems. Website
Mentoring Plan Email: Phone: (734) 764-4255Office: 3624 Beyster Bldg.Davidson, Edward SProfessor Emeritus, Electrical Engineering and Computer ScienceResearch Interests: Computer architecture, parallel and pipelined computing, performance modeling of computer systems Website Email: Phone: (734) 973-0751Office: 2717 Beyster Bldg.DeOrio, Andrew W.Lecturer IV, Electrical Engineering and Computer Sciencehe/him/his Website Email: Phone: 734-763-5867Office: 2705 BeysterDereziÅski, MichaÅAssistant Professor, Electrical Engineering and Computer ScienceResearch Interests: Machine learning and statistical learning theory, scalable stochastic and distributed optimization, randomized numerical linear algebra, dimensionality reduction. Website
Mentoring Plan Email: Office: 2649 BeysterDhillon, ParamveerAssistant Professor, School of InformationAffiliate Faculty, Computer Science & EngineeringResearch Interests: Machine learning, computational social science, natural language processing, information economics Website Email: Phone: (734) 764-5876Office: 105 S State StDiaz, Kimberly KhalsaLecturer III, Electrical Engineering and Computer Scienceshe/her/hersEmail: Phone: (734) 647-1355Office: 3824 BeysterDick, RobertAssociate Professor, Electrical Engineering and Computer ScienceResearch Interests: Embedded systems. Website Email: Phone: (734) 763-3329Office: 2417E
EECSDillahunt, Tawanna RuthAssociate Professor, School of InformationAssociate Professor (courtesy), Electrical Engineering and Computer Science Website Email: Phone: 734-647-8296Office: 4340 North QuadDorf, Mary LouCollegiate Lecturer Emerita, Electrical Engineering and Computer Scienceshe/her/hersEmail: Phone: (734) 615-9916Office: 4636 Beyster Bldg.Dreslinski, RonaldMiller Faculty ScholarAssociate Professor, Electrical Engineering and Computer ScienceResearch Interests: Novel architectures and design technologies for energy-efficient computing, including near-threshold computer design and experimental 3D computer chips. Website
Mentoring Plan Email: Phone: 971-221-6554Office: 2637 Beyster BldgDurfee, Edmund H.Professor Emeritus, Electrical Engineering and Computer ScienceResearch Interests: Multi-agent coordination and intelligent real-time systems Website Email: Phone: (734) 936-1563Office: 3745 Beyster Bldg.Ensafi, RoyaAssistant Professor, Electrical Engineering and Computer ScienceResearch Interests: Computer and network security, surveillance and censorship measurement, privacy and tech policy. Website
Mentoring Plan Email: Phone: 734-764-3184Office: 4745 BeysterEricson, BarbaraAssistant Professor, School of InformationAssistant Professor (courtesy), Electrical Engineering & Computer Scienceshe/her/hersEmail: Phone: 734-763-2285Office: 105 S. StateFish, BenjaminAssistant Professor, Electrical Engineering and Computer ScienceResearch Interests: Foundations of algorithmic fairness, ethics and justice in machine learning, theory of machine learning, learning with social context. Website
Mentoring Plan Email: Office: 3812 Beyster Bldg.Fouhey, DavidAssistant Professor, Electrical Engineering and Computer Sciencehe/him/hisResearch Interests: Computer vision and machine learning, with a particular focus on scene understanding. Website
Mentoring Plan Email: Phone: 734-764-8517Office: 3777 Beyster Bldg.Fu, KevinAssociate Professor, Electrical Engineering and Computer ScienceResearch Interests: Computer system security; ultra-low power computing; healthcare safety. Website
Mentoring Plan Email: Office: 4628 Beyster Bldg.GarcÃ­a-Ramirez, HÃ©ctorLecturer II, Electrical Engineering and Computer Sciencehe/him/his Website Email: Phone: 734-647-4255 Office: 3640 BeysterGenkin, DanielAdjunct Assistant Professor, Electrical Engineering & Computer Science
Website Email: Office: RemoteGilbert, EricAssociate Professor, School of InformationJohn Derby Evans Professor of InformationAssociate Professor (courtesy), Electrical Engineering & Computer Science Website Email: Phone: (734) 763-2285Office: 4385 North QuadGraetz, EmilyLecturer II, Electrical Engineering and Computer Sciencethey/them/theirsEmail: Phone: 937-314-1582Office: 3917 Beyster Bldg.Grubbs, PaulAssistant Professor, Electrical Engineering & Computer Sciencehe/him/hisResearch Interests: Applied cryptography, computer security, privacy, systems security, and technology policy. Website
Mentoring Plan Email: Office: 4709 Beyster Bldg.Guo, AnhongAssistant Professor, Electrical Engineering & Computer ScienceAssistant Professor (courtesy), School of Informationhe/him/hisResearch Interests: Human-computer interaction, artificial intelligence, accessibility, augmented reality, human-AI interaction Website
Mentoring Plan Email: Office: 3741 BeysterGurevich, YuriProfessor Emeritus, Electrical Engineering and Computer SciencePost-Retirement Appointment Through October, 2021Research Interests: Quantum computing, privacy and security, software engineering, and theoretical computer science Website Email: Guzdial, MarkProfessor, Electrical Engineering & Computer ScienceDirector of the Program in Computing for the Arts and Sciences (PCAS) he/him/hisResearch Interests: Computing education research, task-specific programming languages, learning sciences, education public policy, design methods, and public policy. Website Email: Phone: 734-647-1320Office: 3636 BeysterHalderman, J. AlexProfessor, Electrical Engineering and Computer ScienceResearch Interests: Computer security, electronic voting, digital rights management, information privacy, and tech policy. Website
Mentoring Plan Email: Phone: (734) 647-1806Office: 4717 Beyster Bldg.Hayes, John P.Claude E. Shannon Professor of Engineering ScienceProfessor, Electrical Engineering and Computer ScienceResearch Interests: Computer-aided design and testing, Computer architecture, Fault-tolerant design, VLSI circuits, Stochastic computing. Website Email: Phone: (734) 763-0386Office: 4713 Beyster Bldg.Hero, Alfred O.John H. Holland Distinguished University Professor of EECS; R. Jamison and Betty Williams Professor of EngineeringProfessor, Electrical Engineering and Computer ScienceProfessor (courtesy), Biomedical Engineering; StatisticsResearch Interests: Theory and algorithms underlying data science and machine learning. Theory includes applied probability, statistical modeling, and optimization. Applications include complex networks, spatio-temporal processes, computational biology, personalized health, and security. Website Video:
https://www.youtube.com/watch?v=ZNVMbWxaqi4 Email: Phone: (734) 763-0564Office: 4417 EECSHoneyman, PeterResearch Professor Emeritus, Electrical Engineering and Computer ScienceLecturer, Electrical Engineering and Computer ScienceResearch Interests: Experimental distributed systems Website Email: Phone: (734) 763-1156Office: 4777 Beyster Bldg.Hu, WeiAssistant Professor, Electrical Engineering and Computer ScienceResearch Interests: Theoretical foundations of machine learning, including deep learning, representation learning, and optimization. Website
Mentoring Plan Email: Huang, RyanAssociate Professor, Electrical Engineering & Computer Science(effective January 1, 2023)Research Interests: Operating systems, distributed systems, cloud and mobile computing, software dependability, program analysis. Website Email: Jagadish, H.V.Bernard A. Galler Collegiate Professor of Electrical Engineering and Computer ScienceEdgar F. Codd Distinguished University Professor of Electrical Engineering and Computer ScienceProfessor, Electrical Engineering and Computer ScienceDirector of the Michigan Institute for Data ScienceResearch Interests: Big data, data mining, database systems, and bioinformatics. Website
Mentoring Plan Email: Phone: (734) 763-4079Office: 4601 Beyster Bldg.Jain, DhruvAssistant Professor, Electrical Engineering and Computer ScienceResearch Interests:
Accessibility , Human Computer Interaction, Sound Sensing, Augmented & Virtual Reality, WearableÂ Computing. Website Email: Office: 4765 Beyster BuildingJamin, SugihAssociate Professor, Electrical Engineering and Computer ScienceResearch Interests: Dynamic behaviors of large-scale systems, probabilistic distributed algorithms, computer network protocols and architectures, computer graphics. Website Email: Phone: (734) 763-1583Office: 4737 Beyster Bldg.Jeannin, Jean-BaptisteAssistant Professor, Aerospace EngineeringAssistant Professor (Courtesy), Electrical Engineering & Computer Sciencehe/him/his Website Email: Phone: (734) 764-6792Office: 3017 FXBJenkins, ChadProfessor, College of Engineering Robotics InstituteAssociate Director, Michigan Robotics InstituteProfessor (courtesy), Electrical Engineering & Computer ScienceResearch Interests: Human-robot interaction, including exploration of methods that enable robots to learn human skills. Website Email: Office: 2236 Ford Robotics BuildingJohnson, JustinAssistant Professor, Electrical Engineering & Computer ScienceResearch Interests: Vision and language, visual reasoning, and image generation. Website
Mentoring Plan Email: Phone: 734-936-7829Office: 4749 Beyster Bldg.Juett, JamesLecturer IV, Electrical Engineering and Computer Sciencehe/him/hisEmail: Office: 2641 BeysterJurgens, DavidAssistant Professor, School of InformationAssistant Professor (courtesy), Electrical Engineering & Computer Science Website Email: Phone: (734) 763-2285Office: 3341 North QuadKamat, VineetProfessor, Civil & Environmental EngineeringProfessor (courtesy), Electrical Engineering & Computer ScienceEmail: Phone: (734) 764-4325Office: 2008 GGBKamil, AmirLecturer IV, Electrical Engineering and Computer Sciencehe/him/his Website Email: Phone: 734-764-2138Office: 2632 BeysterKapritsos, ManosAssistant Professor, Electrical Engineering and Computer Sciencehe/him/hisResearch Interests: Distributed systems, fault tolerance, formal verification, transaction processing. Website
Mentoring Plan Email: Phone: 734-615-3343Office: 4824 Beyster Kasikci, BarisAssistant Professor, Electrical Engineering and Computer Sciencehe/him/hisResearch Interests: Operating systems, dependable systems, program analysis, system security Website
Mentoring Plan Email: Phone: 734-763-1560Office: 4753 Beyster Bldg.Kieras, David E.Professor Emeritus, Electrical Engineering and Computer ScienceProfessor Emeritus, Psychology DepartmentResearch Interests: Human-computer interaction, User interface design, Human cognition and performance, Natural language processing Website Email: Kloosterman, JohnLecturer III, Electrical Engineering & Computer Science he/him/his Website Email: Phone: 764-2951Office: 3611 BeysterKoutra, DanaiMorris Wellman Faculty Development ProfessorAssociate Professor, Electrical Engineering and Computer ScienceAssociate Director of the Michigan Institute for Data ScienceResearch Interests: Data mining, graph summarization and visualization, and applied machine learning. Website
Mentoring Plan Email: Phone: 734-764-4237Office: 3633 BeysterKuipers, BenjaminProfessor, Electrical Engineering and Computer ScienceResearch Interests: The representation of common sense and expert knowledge, with particular emphasis on the effective use of incomplete knowledge. Website
Mentoring Plan Email: Phone: (734) 647-6887Office: 3240 Ford Robotics BuildingKutty, SindhuLecturer IV, Electrical Engineering & Computer Scienceshe/her/hersEmail: Phone: 734-647-8821Office: 2640 BeysterLafortune, StÃ©phaneN. Harris McClamroch Professor of Electrical Engineering and Computer ScienceProfessor, Electrical Engineering and Computer Sciencehe/him/hisResearch Interests: System and control theory; Discrete event systems; Application to computer and communication systems Website Video:
https://www.youtube.com/watch?v=RjcAG5zcKC4 Email: Phone: (734) 763-0591Office: 4415 EECSLaird, John E.John L. Tishman Professor of EngineeringProfessor, Electrical Engineering and Computer ScienceResearch Interests: Artificial Intelligence, Cognitive Architectures, Machine Learning, and Computer Games. Website Email: Lee, EuiwoongAssistant Professor, Electrical Engineering & Computer ScienceResearch Interests: Algorithms, computational complexity, graph theory, and convex optimization. A particular focus is on approximation algorithms for NP-hard optimization problems. Website
Mentoring Plan Email: Phone: (734)763-6739Office: 3641 Beyster BldgLee, HonglakAssociate Professor, Electrical Engineering and Computer ScienceResearch Interests: Machine Learning, Deep Learning, Artificial Intelligence, Computer Vision Website Email: Phone: (734) 764-3726Office: 3773 Beyster Bldg.Liu, JieAssistant Professor of Computational Medicine and Bioinformatics, Medical SchoolAssistant Professor (courtesy), Electrical Engineering & Computer ScienceResearch Interests: Bioinformatics, Machine Learning Website Email: Phone: (734) 615-5110Office: 2035D Palmer CommonsLiu, MingyanPeter and Evelyn Fuss Chair of Electrical and Computer EngineeringProfessor, Electrical Engineering and Computer Scienceshe/her/hersResearch Interests: Resource allocation, performance modeling, sequential decision and learning theory, game theory and incentive mechanisms, with applications to large-scale networked systems, cybersecurity and cyber risk quantification. Website Video:
https://www.youtube.com/watch?v=u6gwZdaOZXY Email: Phone: (734) 764-9546Office: 3401 EECSMa, LinVisiting Assistant Professor (effective Jan. 1, 2023), Computer Science & EngineeringAssistant Professor (effective Aug. 28, 2023), Electrical Engineering & Computer ScienceEmail: Madhyastha, HarshaAssociate Professor, Electrical Engineering and Computer ScienceResearch Interests: Distributed systems, networking, security and privacy, including Internet-scale distributed services, cloud computing, online social networks, network measurement, web performance, distributed storage systems Website
Mentoring Plan Email: Phone: 734-647-8086Office: 4611 BeysterMahlke, ScottProfessor, Electrical Engineering and Computer Science Research Interests: Compilers, application-specific processors, computer architecture and microarchitecture, embedded systems Website Email: Phone: (734) 936-1602Office: 4633 Beyster Bldg.Makar, MaggiePresidential Postdoctoral Fellow/Assistant Professor, Electrical Engineering and Computer Scienceshe/her/hersResearch Interests: Causal inference, machine learning, healthcare Website Email: Office: 3769 Beyster Bldg.Manerkar, YatinAssistant Professor, Electrical Engineering and Computer ScienceResearch Interests: Automated formal methods for the specification, design, synthesis, and verification of hardware and software systems; computer architecture; ethical AI. Website
Mentoring Plan Email: Office: 4816 Beyster Bldg.Mao, Zhuoqing MorleyProfessor, Electrical Engineering and Computer ScienceResearch Interests: Mobile computing, security, networking, distributed systems, SDN, and cloud computing. Website
Mentoring Plan Email: Phone: (734) 763-5407Office: 4629 Beyster Bldg.Mars, JasonAssociate Professor, Electrical Engineering and Computer ScienceResearch Interests: Cross-layer systems architectures for emerging applications, datacenter and warehouse-scale computer architecture, and hardware / software co-design. Website
Mentoring Plan Email: Phone: 734-763-3229Office: 4705 Beyster Bldg.Mazumder, PinakiProfessor, Electrical Engineering and Computer ScienceResearch Interests: VLSI circuit design, VLSI testing, and VLSI layout tools Website Email: Phone: (734) 763-2107Office: 4765 Beyster Bldg.Mei, QiaozhuProfessor, School of InformationProfessor (courtesy), Electrical Engineering and Computer ScienceResearch Interests: Information retrieval, text mining, social network analysis, and biomedical informatics Website Email: Phone: (734) 763-0076Office: 303D West Hall Meyer, John F.Professor Emeritus, Electrical Engineering and Computer ScienceResearch Interests: Fault-tolerant computing, model-based performability evaluation, computer and telecommunication networks Website Email: Phone: (734) 763-0037Office: 2717 Beyster Bldg.Mihalcea, RadaJanice M. Jenkins Collegiate Professor of Computer Science and EngineeringProfessor, Electrical Engineering and Computer ScienceResearch Interests: Natural language processing, computational social sciences, multimodal tracking and understanding of human behavior. Website
Mentoring Plan Email: Phone: 734-647-4088Office: 3745 Beyster Bldg.Molaei, SomayehResearch Fellow, Computer Science & EngineeringLEO Intermittent Lecturer, Computer Science & EngineeringEmail: Office: 4644 Beyster Bldg.Morgan, AndrewLecturer II, Electrical Engineering and Computer ScienceEmail: Office: 2641 Beyster Bldg.Mower Provost, EmilyAssociate Professor, Electrical Engineering and Computer ScienceCSE Associate Chair for Graduate Affairsshe/her/hersResearch Interests: Audio-visual modeling of human behavior focusing on emotion. Focus on assistive speech-based technologies. Website
Mentoring Plan Email: Phone: 734-647-1802Office: 3629 Beyster Bldg.Mozafari, BarzanAssociate Professor, Electrical Engineering and Computer ScienceResearch Interests: Large-scale data-intensive systems, database-as-a-service clouds, distributed systems, and crowdsourcing. Website
Mentoring Plan Email: Phone: (734) 763-3669Office: 4769 Beyster Bldg.Mudge, TrevorBredt Family Professor of EngineeringProfessor, Electrical Engineering and Computer ScienceResearch Interests: Computer systems design, low power computing, parallel processing, computer-aided design, impact of technology. Website
Mentoring Plan Email: Phone: (734) 764-0203Office: 4757 Beyster Bldg.Nagarajan, ViswanathAssistant Professor, Industrial & Operations EngineeringAffiliate Faculty, Electrical Engineering & Computer Science Website Email: Phone: (734) 763-3459Office: 2713 IOE 1205 Beal AveNajarian, KayvanProfessor, Computational Medicine and BioinformaticsProfessor (courtesy), Electrical Engineering and Computer Science Website Email: Phone: 734/763-9388Office: NCRC B10-A111Narayanasamy, SatishProfessor, Electrical Engineering and Computer ScienceResearch Interests: Computer Architecture; Program Analysis; Dependable Systems; Programmer Productivity; Parallel Computing Website Email: Phone: (734) 764-6984Office: 4721 Beyster Bldg.Nebeling, MichaelAssociate Professor, School of InformationAssociate Professor (courtesy), Electrical Engineering & Computer Science, Computer Science & Engineering Website Email: Phone: 734-764-4057Office: 105 S. State St.New, MaxAssistant Professor, Electrical Engineering and Computer Sciencehe/him/hisResearch Interests: Developing and using mathematical tools to ensure correctness, safety and security of programming languages and their implementations. Website
Mentoring Plan Email: Office: 4640 BeysterNewman, Mark WProfessor, School of InformationProfessor (courtesy), Electrical Engineering and Computer Science Website Email: Phone: 764-0020Office: 4380 North QuadNguyen, LongAssociate Professor, StatisticsAffiliate Faculty Website Email: Office: 456 West HallNoble, BrianProfessor, Electrical Engineering and Computer Sciencehe/him/his Website
Mentoring Plan Email: Phone: (734) 936-5983Office: 4641 Beyster Bldg.Olson, EdwinProfessor, Electrical Engineering and Computer ScienceResearch Interests: Finding ways for robots to sense and understand their environment while coping with uncertainty and ambiguity, multi-autonomous systems. Website Email: Phone: (734) 647-1049Office: 2280 Ford Robotics BuildingOmar, CyrusAssistant Professor, Electrical Engineering & Computer Sciencehe/him/hisResearch Interests: Fundamentally improving the programming experience for computational and data scientists, web app programmers, students and educators, and for people with disabilities who cannot effectively use
other programming tools. Website
Mentoring Plan Email: Phone: (734)647-4712Office: 4773 Beyster Bldg.Oney, StephenAssociate Professor, School of InformationAssociate Professor (courtesy), Electrical Engineering & Computer Science Website Email: Phone: 734-763-6284Office: 4381 North Quad, 105 S. State St.Paoletti, David RobertLecturer IV, Electrical Engineering and Computer ScienceEmail: Phone: 734-763-8205Office: 2645 BeysterPeikert, ChristopherProfessor, Electrical Engineering and Computer ScienceResearch Interests: Cryptography, lattices, coding theory, algorithms, and computational complexity. A particular focus is on cryptographic schemes whose security can be based on the apparent intractability of latticeÂ problems. Website Email: Phone: 734-936-2974Office: 3601 Beyster Bldg.Pendse, RaviVice President for Information Technology and Chief Information Officer, Office of the PresidentClinical Professor of Engineering Practice (courtesy), Computer Science and EngineeringEmail: Office: 4251 Plymouth Rd #2500Perez-Rosas, VeronicaAssistant Research Scientist, Electrical Engineering and Computer Scienceshe/her/hersResearch Interests: Natural language processing, multi modal and cross-cultural approaches for deception detection and sentiment analysis, behavioral signal processingEmail: Phone: 734-763-0503Office: 2709 Beyster Bldg.Pettie, SethProfessor, Electrical Engineering and Computer ScienceResearch Interests: Optimization algorithms, data structures, parallel and distributed computing, graph theory, and combinatorics. Website Email: Phone: (734) 615-4210Office: 3628 BeysterPrakash, AtulProfessor, Electrical Engineering and Computer ScienceCSE Associate Chair for Academic Affairshe/him/hisResearch Interests: Security policy management, software infrastructure to support collaborative work, privacy in pervasive computing, intrusion detection, group security, operating system security, scientific collaboratories. Website
Mentoring Plan Email: Phone: (734) 763-1585Office: 4741 Beyster Bldg.Razak, SaquibLEO Lecturer III, Electrical Engineering & Computer Science(effective January 1, 2023)Email: Office: 2636 BeysterRingenberg, Jeffrey S.Lecturer IV, Electrical Engineering and Computer ScienceResearch Interests: Mobile learning software development, tactile programming, methods for bringing technology into the classroom, and studying the effects of social networking and collaboration on learning.Email: Phone: (734) 763-2751Office: 2633 Beyster Bldg.Romero, DanielAssistant Professor, School of InformationAssistant Professor (courtesy), Electrical Engineering and Computer Science Website Email: Office: 4432 North QuadRounds, BillProfessor Emeritus, Electrical Engineering and Computer ScienceEmail: Phone: (734) 764-9418Office: 2717 Beyster Bldg.Sakallah, Karem A.Professor, Electrical Engineering and Computer ScienceResearch Interests: Computer-aided design of electronic systems, Boolean satisfiability, discrete optimization, and hardware and software verification. Website
Mentoring Plan Email: Phone: (734) 936-1350Office: 4603 Beyster Bldg.Saleem, SofiaLecturer I, Electrical Engineering & Computer ScienceEmail: Sample, AlansonAssociate Professor, Electrical Engineering & Computer ScienceResearch Interests: Human-computer interaction, wireless technology, and embedded systems, with the goal of tackling the critical bottlenecks that limit interactive sensing systems with an eye towards reducing deployment barriers and ensuring scalability. Website
Mentoring Plan Email: Phone: (253) 642-7287Office: 4812 Beyster Bldg.Saranurak, ThatchapholAssistant Professor, Electrical Engineering & Computer ScienceResearch Interests: Efficient graph algorithms and data structures, essentially for dynamic and distributed models. Website
Mentoring Plan Email: Office: 3644 BeysterSchaub, FlorianAssociate Professor, School of InformationAssociate Professor (courtesy), Electrical Engineering and Computer Science Website Email: Office: 4344 North QuadShin, Kang G.Kevin and Nancy O’Connor Professor of Computer ScienceProfessor, Electrical Engineering and Computer ScienceResearch Interests: Wireless/mobile computation and networks, security and dependability, cyber-physical systems, embedded real-time systems. Website
Mentoring Plan Email: Phone: (734) 763-0391Office: 4605 Beyster Bldg.Smith, MatthewAdjunct Assistant Professor, Electrical Engineering and Computer ScienceSenior EngineerEmail: Phone: (734) 763-8164Office: 3122 EECSSoloway, ElliotArthur F. Thurnau ProfessorProfessor, Electrical Engineering and Computer ScienceProfessor, School of Information and School of EducationResearch Interests: Artificial intelligence and software engineering, Artificial intelligence and education. Website Email: Phone: (734) 936-1562Office: 3620 Beyster Bldg.Stout, Quentin F.Co-Director, Center for Space Environment ModelingProfessor, Electrical Engineering and Computer ScienceProfessor, Climate and Space Research (CLASP) (courtesy)Research Interests: Parallel computing, algorithms, supercomputing applied to problems in science and engineering, optimizing clinical trials Website
Mentoring Plan Email: Phone: (734) 763-1518Office: 3605 Beyster Bldg.Talati, NishilAssistant Research Scientist, Computer Science & EngineeringEmail: Phone: (734) 936-2964Office: 2260 HaywardTang, LingjiaAssociate Professor, Electrical Engineering and Computer ScienceResearch Interests: Computer architecture and compiler and runtime systems, especially such systems for large scale data centers. Website
Mentoring Plan Email: Phone: 734-763-2548Office: 4609 Beyster Bldg.Teneketzis, DemosthenisProfessor Emeritus, Electrical Engineering and Computer ScienceResearch Interests: Stochastic control, decentralized stochastic systems, communication and queueing networks, stochastic scheduling and resource allocation problems, discrete event systems, mathematical economics Website Email: Phone: (734) 763-0598Teorey, TobyProfessor Emeritus, Electrical Engineering and Computer ScienceResearch Interests: Database design and data warehousing, OLAP, data mining, performance of computer systems Website Email: Tewari, AmbujProfessor, StatisticsProfessor (courtesy), Electrical Engineering and Computer Science Website Email: Phone: 734-615-0928Office: 454 West HallThomason, Richmond H.Professor, LinguisticsProfessor, PhilosophyProfessor (courtesy), Electrical Engineering and Computer ScienceResearch Interests: Logic in Artifical Intelligence, Computational LInguistics, especially Natural Language Generation Website Email: Office: 2251 Angell HallTorralva, BenIntermittent Lecturer, Electrical Engineering & Computer ScienceEmail: Office: 2717 BeysterTzimpragos, GeorgiosAssistant Professor, Electrical Engineering & Computer ScienceResearch Interests: Computer architecture, new models of computation, computing with emerging devices Website Email: Office: 4777 Beyster Bldg.Wang, LuAssistant Professor, Electrical Engineering & Computer Scienceshe/her/hersResearch Interests: Natural language processing, computational social sciences, machine learning Website
Mentoring Plan Email: Phone: (734)764-6894Office: 3757 Beyster BldgWang, XinyuAssistant Professor, Electrical Engineering & Computer Sciencehe/him/hisResearch Interests: The development of foundational program synthesis techniques that are applicable to automating real-world programming tasks and in developing and applying program analysis techniques in the context of software security and software engineering. Website
Mentoring Plan Email: Office: 4620 BeysterWang, XuAssistant Professor, Electrical Engineering & Computer ScienceResearch Interests: Human-computer interaction, artificial intelligence in education, computer supported collaborative learning and work, human-AI interaction, learning sciences and technologies, cognitive science. Website
Mentoring Plan Email: Office: 3737 BeysterWeimer, WestleyProfessor, Electrical Engineering and Computer ScienceResearch Interests: Programming languages; software engineering; medical imaging; program analysis, synthesis and improvement. Website
Mentoring Plan Email: Phone: 734-615-9916Office: 4636 BeysterWelch, JoshuaAssistant Professor, Computational Medicine and BioinformaticsAssistant Professor (courtesy), Electrical Engineering & Computer ScienceResearch Interests: Computational biology and machine learning. Website Email: Wellman, MichaelRichard H. Orenstein Division Chair of Computer Science and EngineeringLynn A. Conway Collegiate Professor of Computer Science and EngineeringProfessor, Electrical Engineering and Computer Sciencehe/him/hisResearch Interests: Artificial Intelligence, Electronic Commerce Website
Mentoring Plan Email: Phone: (734) 764-8504Office: 3713 Beyster Bldg.Wenisch, Thomas F.Adjunct Research Scientist, Electrical Engineering and Computer ScienceEmail: Office: RemoteWiens, JennaAssociate Professor, Electrical Engineering and Computer ScienceCo-Director, U-M Precision HealthResearch Interests: Artificial Intelligence, Machine Learning, Computational Healthcare Website
Mentoring Plan Email: Phone: 734-647-4832Office: 3765 Beyster Bldg.Winsor, Donald C.Departmental Computing Organization CoordinatorAdjunct Professor, Electrical Engineering and Computer Sciencehe/him/his Website Email: Phone: (734) 764-8543Office: 4403 EECSYarger, AustinLecturer II, Electrical Engineering and Computer Sciencehe/him/hisResearch Interests: – Community Development (Founder and Co-Chair of
the IGDA Ann Arbor gamedev community )
– Midwestern Entrepreneurship (Founder of the
Michigan Game Studios Database )
– Game Development / Extended Reality ( Arbor Interactive Game Studio )
– Game Development pedagogy ( EECS 494 : Introduction to Game Development course )
– Extended Reality (XR) pedagogy ( EECS 498 : Extended Reality and Society course ) Website Email: Phone: (734) 763-2012Office: 3611 BeysterYe, JiepingProfessor, Computational Medicine and BioinformaticsProfessor (courtesy), Electrical Engineering and Computer ScienceEmail: Office: 2035 Palmer CommonsYu, StellaProfessor, Electrical Engineering and Computer ScienceResearch Interests: I study visual perception from multiple perspectives: human vision, computer vision, robotic vision, and artistic vision.
To me, visual perception presents not just a fascinating computational problem, but more importantly an intelligent solution for large-scale data mining and pattern recognition applications.
Website Email: Office: 3753 Beyster Bldg.Zhu, LeqiLecturer I, Electrical Engineering & Computer ScienceEmail: Office: 3959 Beyster
Michigan Engineering
Electrical Engineering and Computer Science Department
Computer Scienceand Engineering Bob and Betty Beyster Building2260 Hayward StreetAnn Arbor, MI 48109-2121 Contact >
CSE Intranet >
Electrical andComputer Engineering EECS Building1301 Beal AvenueAnn Arbor, MI 48109-2122 Contact >
ECE Intranet >
Â© 2022
The Regents of the University of Michigan
Privacy Policy
Campus Safety
Non-Discrimination Policy
About
Welcome to CSE
By the Numbers
Advisory Board
History
Faculty Hiring
Giving
Visit
Bob and Betty Beyster Building
Leinweber Computer Science and Information Building â
Emergency and Safety Info
Resources
Contact
Community
Our Values: HACKS
Community News
Are You New to CS?
Resources for Student Support and Inclusion
Student Groups and Teams
CSE Action Plan
DEI and Climate â
Reporting Concerns and Misconduct
Academics
Graduate Programs & Admissions
Undergraduate Programs & Admissions
For Current Students
Course Information
Undergrad Research Opportunities
Research
Research Areas
Labs & Centers
Tech Transfer & Startups
Industrial Relations
Reports & Publications
People
Faculty
PhD Students
Postdocs
Staff
Alumni
Honors and Awards
Hire Our PhDs and Postdocs
News
Events


Link: https://www.dropbox.com/jobs/listing/2184214

Staff Software Engineer - Dropbox
Dropbox
Dropbox Jobs
Dropbox Jobs
About
About Dropbox Jobs
Where we work
Diversity
Benefits
Veterans at Dropbox
Blog
Teams
All Jobs
Search
< Back to results
Remote - US; Remote - Canada
Staff Software Engineer
Apply now
Company Description
Dropbox is a leading global collaboration platform that's transforming the way people work together, from the smallest business to the largest enterprise. With more than 700 million registered users across more than 180 countries, our mission is to design a more enlightened way of working. From our headquarters in San Francisco to eight dedicated Studios and a worldwide team of employees who choose where they work best, our Virtual First approach is leading the way into the future of work.
Team Description
Our Engineering team is working to simplify the way people work together. Theyâre building a family of products that handle over a billion files a day for people around the world. With our broad mission and massive scale, there are countless opportunities to make an impact.
Role Description
Our Engineering team is architecting a family of products that handle over a billion files a day. We take on the complexities of technology that affect everyday life, so people can get back to living and doing their best work.
The heart of Dropbox is engineering; the heart of our engineering team are our Staff Engineers, who set the tone and pace of engineering at Dropbox. Staff Engineers work at a cross-engineering scope, driving impact felt by hundreds of Dropboxers and millions of customers. As a Staff Software Engineer, you will contribute in a multitude of ways, from architecting phenomenal systems, creating and encouraging good software development practices engineering-wide, driving strategic technical improvements, and mentoring other engineers.
Dropbox is a unique opportunity to work with best-in-class engineers on very large engineering problems, but in an environment with small teams and abundant opportunities for personal impact and growth.
Responsibilities
You will set direction not only for the team but will help guide engineering visionYou will architect important systems and anticipate strategic and scaling-related challenges via thoughtful long-term planningYou will write code as we expect our technical leadership to be in the trenches alongside junior engineers, understanding root causes and leading by exampleYou will mentor engineers, both junior and seniorYou will own relationships with other engineering teams and collaborate with other functions within Dropbox
Requirements
BS (or higher, e.g., MS, or PhD) in Computer Science or related technical field involving coding (e.g., physics or mathematics), or equivalent technical experience15+ years of professional software development experienceSolid CS fundamentals with experience across a range of disciplines, with one or more area of deep knowledge and experienceProven track record of senior technical leadershipStrong knowledge of shipping impactful and complex software projectsAbility to set technical and cultural standards for engineers
Total Rewards
Our Engineering Career Framework is
viewable by anyone outside the company
and describes whatâs expected for our engineers at each of our career levels. Check out our blog post on this topic and more
here .
For candidates hired in Colorado, the expected salary/On-Target Earnings (OTE) range for the role is $175,400 - $206,400 - $237,400.
This salary/OTE range represents the low, middle, and high end of the salary or OTE (Sales roles) range for this position, and is subject to change. To determine a Dropboxerâs starting pay we carefully consider a variety of factors, including primary work location and an evaluation of a candidateâs skills, experience, market demands, and internal parity. This position may be considered a promotional opportunity.
Salary/OTE is just one component of Dropboxâs total rewards package. All regular employees are also eligible for the corporate bonus program or a sales incentive (target included in OTE) as well as stock in the form of Restricted Stock Units (RSUs).
Dropbox is committed to investing in the holistic health and wellbeing of all Dropboxers and their families. Our benefits and perks programs include, but are not limited to:
Competitive medical, dental and vision coverage(US Only) Competitive 401(k) Plan with a generous company match and immediate vestingFlexible Time Off/Paid Time Off, paid holidays, 11 Company-wide PTO days, Volunteer time off and moreProtection Plans including; Life Insurance, Disability Insurance and Travel benefit plansPerks Allowance to be used on what matters most to you, whether thatâs wellness, learning and development, food & groceries, and much moreParental benefits including; Parental Leave, Child and Adult Care, Day Care FSA (US Only), Fertility Benefits (US Only), Adoption and Surrogacy support and Lactation Support Mental Health and Wellness benefits Free Dropbox space for your friends and family
Additional benefits details are available upon request.Â Dropbox is in the process of updating our technology to provide pay ranges in New York City based on the recent amendments to the New York City Human Rights Law (NYCHRL). If you are based in NYC and have any questions about the pay range for this role, please contact paytransparency@ and provide your name and the job title to which you are interested in applying.Â
Dropbox is an equal opportunity employer. We are a welcoming place for everyone, and we do our best to make sure all people feel supported and connected at work. A big part of that effort is our support for members and allies of internal groups like Asians at Dropbox, BlackDropboxers, Latinx, Pridebox (LGBTQ), Vets at Dropbox, Women at Dropbox, ATX Diversity (based in Austin, Texas) and the Dropbox Empowerment Network (based in Dublin, Ireland).
There are no open positions right now. Check back soonâwe're growing fast!
Other open positions
Our Engineering team is working to simplify the way people work together. Theyâre building a family of products that handle over a billion files a day for people around the world. With our broad mission and massive scale, there are countless opportunities to make an impact.
Remote - Israel
Software Engineering Intern - Tel Aviv (2023)
View jobs
Remote - Poland
Android Software Engineer
View jobs
Remote - Poland
Backend Product Software Engineer
View jobs
Remote - Poland
Business Intelligence Engineer
View jobs
Remote - US; Remote - Canada
Content Design Intern (Summer 2023)
View jobs
Remote - US; Remote - Canada
Design Program Manager Intern (Summer 2023)
View jobs
Remote - US; Remote - Canada
Design Research Intern (Summer 2023)
View jobs
Remote - Poland
Engineering Manager
View jobs
Remote - Poland
Front End Product Software Engineer
View jobs
Remote - Poland
Infrastructure Software Engineer
View jobs
Remote - US; Remote - Canada
Lead Product Manager, New Product, Growth
View jobs
Remote - US; Remote - Canada
Machine Learning Intern (Summer 2023)
View jobs
Remote - US; Remote - Canada
Mobile Software Engineer (iOS)
View jobs
Remote - US; Remote - Canada
Product Design Intern (Summer 2023)
View jobs
Remote - US; Remote - Canada
Product Design, Dash
View jobs
Remote - Poland
Senior Backend Product Software Engineer
View jobs
Remote - Poland
Senior Front End Product Software Engineer
View jobs
Remote - Canada
Senior Infrastructure Software Engineer
View jobs
Remote - Poland
Senior Infrastructure Software Engineer
View jobs
Remote - US; Remote - Canada
Senior Machine Learning Software Engineer
View jobs
Remote - US; Remote - Canada
Site Reliability Engineering Intern (Summer 2023)
View jobs
Remote - US; Remote - Canada
Software Development Engineer Intern in Test (Summer 2023)
View jobs
Remote - US; Remote - Canada
Software Engineering Intern (Summer 2023)
View jobs
Remote - US; Remote - Canada
VP of Engineering, New Initiatives
View jobs
Dropbox
Desktop app
Mobile app
Integrations
Features
Solutions
Do more than store
Security
Advance access
Products
Plus
Professional
Business
Enterprise
Dropbox Sign
DocSend
Plans
Product updates
Support
Help center
Contact us
Privacy & terms
Cookies
Cookies 2
Sitemap
Learning resources
Community
Blog
Developers
Community forums
Referrals
Company
About us
Jobs
Investor relations
ESG
Partners


Link: https://professionalprograms.umbc.edu/software-engineering/software-engineering-faculty/

Software Engineering Faculty – Office of Professional Programs
Skip to content
Programs
Professional Programs Home
Biotechnology
College Teaching & Learning Science
Community Leadership
Cybersecurity
Data Science
Engineering Management
Entrepreneurship, Innovation, and Leadership
Geographic Information Systems
Health Information Technology
Industrial/Organizational Psychology
Integrated Product Development and Manufacturing
Learning and Performance Technology
MA in Education
Organizational Consulting
Project Management
Software Engineering
Systems Engineering
Technical Management
Training and Talent Development
Apply
Contact
Office of Professional Programs
Software Engineering
MENUMENU
Program Info
Master's
Graduate Certificate
Costs & Financial Aid
Course Descriptions
Schedule of Classes
How to Apply
Master's Application
Certificate Application
International Students
Accelerated Program Application
Faculty
Resources
Forms
Explore Job Data
Campus Resources
Scholarships & Funding
COVID-19 Information
Events
Blog
Contact Us
Software Engineering Faculty
Mohammad Samarah, Ph.D. | Professor of the Practice and Graduate Program Director
Ph.D., Computer Science, Florida Institute of TechnologyM.S., Computer Science, Florida Institute of Technology B.S., Computer Science and Engineering, Northern Arizona University
Show more
Dr. Samarah is a computer scientist and engineering executive with experiences in teaching, administration, industry, and research. His area of interest is in the intersection of big data, intelligent applications, and real-time systems. Dr. Samarah received a bachelorâs in engineering from Northern Arizona University in Computer Science and Engineering and holds a masterâs and doctorate degrees in Computer Science from Florida Institute of Technology. Dr. Samarahâs industry and academic experiences include senior leadership positions at Harris Corporation (now L3Harris) in Melbourne, Florida, senior engineering positions with Emulex Corporation in Seattle, and a founding member of Florida Polytechnic University college of engineering and college of innovation and technology in Lakeland, Florida.
Adam Lippe, J.D. | Faculty Member
J.D., University of Maryland Francis King Carey School of LawB.S., Political Science, The Johns Hopkins University
Show more
Mr. Lippe, J.D. is a career prosecutor who serves as the Chief of the Economic of the Cyber Crimes Unit for Baltimore County State Attorney office. Mr. Lippe and his staff oversee and works on complex fraud cases including identity theft, internet scams, and check and credit card frauds among others. He serves as an adjunctâ¯facultyâ¯at UMBC teaching courses in ethics, cybercrime, and cyber security law and policy.â¯He taught at both Maryland law schools and other local colleges and universities. He was a frequent lecturer at the National Advocacy Center in Columbia, South Carolina for the National District Attorney Association. He is licensed in both the state of Maryland and New Jersey. Mr. Lippe is a graduate of the University of Maryland School of Law and The Johns Hopkins University in Baltimore, Maryland.
Rand Obeidat, Ph.D. | Faculty Member
Ph.D., Information Systems, University of Maryland, Baltimore County
Show more
Dr. Obeidat has a Ph.D. in Information Systems from UMBC. Her research interests lie in the area of Data Analytics, ranging from Data Collection to Data Wrangling, to Analysis and Interpretation. She acquired unique expertise in the prediction of infectious diseases through Google Trends and other surveillance tools. Dr. Obeidatâs recent papers, publications, and conference presentations include the following: Can Users Search Trends Predict People Scares or Disease Breakout? Infectious Skin Diseases in the US as a case study; Usersâ Internet Searches as Proxies for Disease Escalation Trends. Her responsibilities include support curricula development, implementation, and training. She teaches Structured Systems Analysis and Design, Data Analytics courses including Fundamentals of Data Science and Analytics, Data Visualizations, and Decision Science and Analytics.
Carolyn Seaman, Ph.D. | Faculty Member
Ph.D. Computer Science, University of Maryland, College ParkM.S., Georgia TechB.A., College of Wooster (Ohio)
Show more
Carolyn Seaman is a Professor of Information Systems at the University of Maryland, Baltimore County (UMBC). She is also the Director of the Center for Women in Technology, also at UMBC. Her research consists mainly of empirical studies of software engineering, with particular emphases on maintenance, organizational structure, communication, measurement, and technical debt. She also investigates qualitative research methods in software engineering, as well as computing pedagogy. She holds a Ph.D. in Computer Science from the University of Maryland, College Park, a M.S. from Georgia Tech, and a B.A. from the College of Wooster (Ohio). More can be found at Dr. Seaman’s website.
Looking for more info?
Contact Us
Apply Now
Main Office
1000 Hilltop Circle
Sherman Hall East 4th Floor
Baltimore, MD 21250
410-455-2336
Shady Grove
9630 Gudelsky Drive
Rockville, MD 20850
301-738-6081 More Information
Locations
Our Programs
Professional Programs Blog
UMBC Mic'd Up Podcast
Get in Touch!
Connect With UsMENUMENU
Office of Professional Programs


Link: https://www.unr.edu/cse/undergraduates/prospective-students/what-is-software-engineering

What Is Software Engineering | Computer Science & Engineering | University of Nevada, Reno
skip to main content
University of Nevada, Reno Homepage
Apply
Visit
News
Give
Search www.unr.edu
Search www.unr.edu
Search
Search www.unr.edu
Search www.unr.edu
Quicklinks
Expand or Collapse to view popular links for this site
Alumni
Faculty & Staff
Parents
Students
Academic Calendar
Campus Catalog
Directory
Email Access
Library
Maps
MyNevada
WebCampus
Workday
Zoom Login
Menu
Expand or Collapse to view links grouped by top level headings
Quicklinks
Alumni
Faculty & Staff
Parents
Students
Academic Calendar
Campus Catalog
Directory
Email Access
Library
Maps
MyNevada
WebCampus
Workday
Zoom Login
About CSE
Accreditation
Open faculty positions
Undergrad program
Why major in computer science and engineering?
What is software engineering?
What are intelligent systems?
What is computer networking?
Advising
How to get credit for your internship
Graduate programs
Accelerated B.S./M.S.
M.S. in computer science
Ph.D. in computer science
Graduate Certificate in Cybersecurity
CSE graduate program handbook
Fellowships and Scholarships
People
Research
Cybersecurity & network systems
Computer networking research projects
Data & software systems
Software engineering research projects
Summer research experience for undergraduates
Research projects
How to apply
Intelligent & autonomous systems
Robotics and computer vision research projects
Summer research experience for undergraduates
How to apply
Research projects
Apply
Visit
News
Give
Computer Science & Engineering
About CSE
Accreditation
Open faculty positions
Undergrad program
Why major in computer science and engineering?
Advising
How to get credit for your internship
Graduate programs
Accelerated B.S./M.S.
M.S. in computer science
Ph.D. in computer science
Graduate Certificate in Cybersecurity
CSE graduate program handbook
Fellowships and Scholarships
People
Research
Cybersecurity & network systems
Data & software systems
Intelligent & autonomous systems
University Homepage
/
Computer Science & Engineering
/
Undergraduate program
/
Why major in computer science and engineering?
/
What is software engineering?
Computer Science & Engineering
About CSE
Accreditation
Open faculty positions
Undergrad program
Why major in computer science and engineering?
(Current Page)
What is software engineering?
What are intelligent systems?
What is computer networking?
Advising
How to get credit for your internship
Graduate programs
Accelerated B.S./M.S.
M.S. in computer science
Ph.D. in computer science
Graduate Certificate in Cybersecurity
CSE graduate program handbook
Fellowships and Scholarships
People
Research
Cybersecurity & network systems
Computer networking research projects
Data & software systems
Software engineering research projects
Summer research experience for undergraduates
Research projects
How to apply
Intelligent & autonomous systems
Robotics and computer vision research projects
Summer research experience for undergraduates
How to apply
Research projects
What is software engineering?
Bjarne Stroustrup, the creator of the C++ programming language, once said that "our civilization runs on software." This statement is impressively backed by reality, in which software controls a huge variety of devices, from cell phones and music players, to smart appliances such as microwave ovens and laundry machines, to personal computers that many people use at work and large mainframe computers that operate in governmental organizations. In fact, it is hard to imagine an area of human activity that does not rely at least partially on software, including professional work, home activities, and entertainment.
Using a basic definition, software means computer programs and their associated documentation. Computer programs, in turn, consist of algorithms (or procedures) applied to various types of data. Software engineering emerged in the late 1960s as a new engineering discipline concerned with all aspects pertaining to software production. It encompasses concepts, principles, theories, techniques and tools that can be used for developing high-quality professional software. First introduced at the 1968 NATO Software Engineering Conference in Garmisch, Germany, software engineering emphasizes a systematic, disciplined approach to software development and evolution and typically applies to the construction of large software systems (or products) in which teams of numerous software engineers are involved.
High-quality software is characterized by:
High dependability (including safety, security and reliability)
Efficiency
Usability
Accessibility
Maintainability
A software product is said to have a life-cycle, or undergo a software process, which in software engineering terms consists essentially of two parts: development and evolution. Both involve traditional engineering phases, software development consisting primarily of concept creation, requirements specification, design, implementation, integration, testing, and deployment. On the other hand, software evolution involves operation and maintenance as well as some limited development activities aimed at improving the software.
Applications of software engineering
Software engineering applications are practically unlimited. In fact, software engineering has grown so fast in the last several decades that it has become tightly connected with all other areas of computer science (e.g., artificial intelligence, parallel processing, computer graphics, human-computer interaction, database management systems, and many others) as well as with some areas outside the traditional computer domain (such as cognitive sciences and visual arts).
Challenges in software engineering
Current challenges in software engineering research and development include:
Dealing with the increased complexity of software required in new applications
The diversity of software systems that need to communicate/operate with each other
The need to develop trustworthy software
Increased market demands for a quick turnaround from concept to deployment and operation
The quest for increased efficiency in component-based reuse and automatic code generation
Studying software engineering
Students who want to focus on software engineering are expected to gain and integrate knowledge from various subject areas including computer programming, data structures, algorithms, numerical methods, statistics, design patterns, human-computer interaction, computer graphics, information visualization, database systems, web development, software project management, and software engineering.
Internship and employment opportunities in software engineering
Software engineers are in high demand nationally and abroad. The list of companies hiring software engineers is practically endless. While most jobs are in industry, research labs also hire skilled software engineers, either for research in software engineering itself or for supporting software development in research environments. Furthermore, skilled software engineers are also hired by start-up companies, or are well prepared to start their own software development companies.
Notably, under the umbrella of software engineering several specialized professions exist besides software engineer itself, including computer programmer, analyst, designer, developer, tester, consultant and others.
Department Contact Information
Location:
William N. Pennington Engineering Building
Room Number: WPEB 401
Mailstop: 0171
Mailing Address: 1664 N. Virginia Street
General questions:
cse@unr.edu
Graduate program questions:
grad_director@cse.unr.edu
Phone:
(775) 784-6974
Directory:
Faculty & staff directory
Follow the University
University Twitter
University Facebook
University YouTube
University Vimeo
University Flickr
University Instagram
University LinkedIn
University of Nevada, Reno
1664 N. Virginia Street, Reno, NV 89557
(775) 784-1110
Employment & Careers
Non-Discrimination Statement
Privacy
Website Help
Commitment to Diversity
Commitment to Accessibility
Contact the University
Equal Opportunity and Title IX


Link: https://www.shutterstock.com/search/software-engineering-people

25,628 Software Engineering People Images, Stock Photos & Vectors | Shutterstock
Images
Video
Music
Templates
Editorial
3D Models
Creative Flow
Blog
Enterprise
Pricing
Menu
Home
Catalog
Predict
Plan
Menu
Help
ImageââSoftware engineering people royalty-free images25,628 software engineering people stock photos, vectors, and illustrations are available royalty-free.Â  See software engineering people stock video clips


Link: https://www.prospects.ac.uk/job-profiles/software-engineer

Software engineer job profile | Prospects.ac.uk
Page navigation Skip to site navigation
Skip to main content
Skip to footer
Post a job
Jobs and work experience
Search graduate jobs
Job profiles
Work experience and internships
Employer profiles
What job would suit me?
Job sectors
Apprenticeships
Working abroad
Gap year
Self-employment
Postgraduate study
Search postgraduate courses
Funding postgraduate study
Universities and departments
Study abroad
Conversion courses
Law qualifications
Masters degrees
MBA courses
PhD study
Postgraduate diplomas and certificates
Professional qualifications
Teacher training
Careers advice
What can I do with my degree?
Getting a job
CVs and cover letters
Applying for jobs
Interview tips
Open days and events
Applying for university
Choosing a course
Getting into university
Student loans and finance
University life
Changing or leaving your course
Alternatives to university
Log in
Register
Site search
Menu
Jobs and work experience
Search graduate jobs
Job profiles
Work experience and internships
Employer profiles
What job would suit me?
Job sectors
Apprenticeships
Working abroad
Gap year
Self-employment
Postgraduate study
Search postgraduate courses
Funding postgraduate study
Universities and departments
Study abroad
Conversion courses
Law qualifications
Masters degrees
MBA courses
PhD study
Postgraduate diplomas and certificates
Professional qualifications
Teacher training
Careers advice
What can I do with my degree?
Getting a job
CVs and cover letters
Applying for jobs
Interview tips
Open days and events
Applying for university
Choosing a course
Getting into university
Student loans and finance
University life
Changing or leaving your course
Alternatives to university
Post a job On this profile Responsibilities
Salary
Qualifications
Skills
Work experience
Career prospects
Related jobs and courses Job profileSoftware engineerOn this profile Responsibilities
Salary
Qualifications
Skills
Work experience
Career prospects
Related jobs and courses
View all information technology vacancies
Add to favourites Job profileSoftware engineerOn this profile Responsibilities
Salary
Qualifications
Skills
Work experience
Career prospects
Related jobs and courses
View all information technology vacancies
Add to favourites See how well you match this job profile and over 400 others. Try Career Planner
Software engineers apply scientific and mathematical principles in order to create computer software and solve problems
As a software engineer, you'll work in a constantly evolving environment, due to technological advances and the strategic direction of the organisation you work for. You'll create, maintain, audit and improve systems to meet particular needs, often as advised by a systems analyst or architect, testing both hard and software systems to diagnose and resolve system faults.
The role also covers writing diagnostic programs and designing and writing code for operating systems and software to ensure efficiency. When required, you'll make recommendations for future developments.
Job titles and descriptions in IT are not standardised. Instead of a software engineer, you may be called a systems/software/database/web programmer, engineer or developer, depending on the system you're developing. Alternatively, the programming language you use may become part of your title, such as Java or C# developer. The work of a software engineer can also form part of a multimedia programmer role.
Depending on the organisation you work for, you may have a more defined role and work within a group of IT specialists which can include systems analysts, systems designers and systems testers. Nevertheless, as software engineers often manage the support systems required to effectively run an organisation, the role can also require you to communicate effectively and translate the needs of different teams into systems developments. Responsibilities As a software engineer, you'll need to: analyse user requirementswrite and test code, refining and rewriting it as necessary and communicate with any programmers involved in the projectresearch, design and write new software programs (e.g. business applications or computer games) and computer operating systemsevaluate the software and systems that make computers and hardware workdevelop existing programs by analysing and identifying areas for modificationintegrate existing software products and get incompatible platforms to work togethercreate technical specificationswrite systems to control the scheduling of jobs or to control the access allowed to users or remote systemswrite operational documentation with technical authorsmaintain systems by monitoring and correcting software defectswork closely with other staff, such as project managers, graphic artists, UX designers, other developers, systems analysts and sales and marketing professionalsconsult clients and colleagues concerning the maintenance and performance of software systems, with a view to writing or modifying current operating systemsinvestigate new technologiescontinually update technical knowledge and skills by attending in-house and external courses, reading manuals and accessing new applications.SalaryTypical graduate software engineer salaries start from Â£18,000 a year.The average annual salary for a software engineer is between Â£25,000 and Â£50,000.At senior or management level, software engineers can earn Â£45,000 to Â£70,000 or more per annum. Bonus schemes may be available. The exact salary you'll receive is dependent upon the company, location and nature of your employer's business. The highest salaries can be found in the finance, pensions and telecoms sectors in London and the South East.
Income figures are intended as a guide only. Working hours Working hours are typically 9am to 5pm. However, longer hours are often necessary towards the end of projects as deadlines approach, as well as during the testing stage so that systems can be tested when they're not being used. In some cases, software engineers may be required to be on call to deal with problems. This can involve evening and weekend work in a shift pattern. Allowances may be available in these cases.
Self-employment and freelance or contract work is possible as there is an increasing market for contract software engineers with specialist knowledge. Career breaks, on the other hand, may be difficult due to the need to keep technical knowledge up to date in a rapidly changing environment. Related case studies
Vivian Knight
Tech+ analyst
Geraldine Abbey
Software engineer
Kiera Bowdidge
Apprentice software engineer
What to expectThe job involves spending many hours at the keyboard, so high levels of concentration are required. Regular breaks are essential to minimise potential adverse health effects such as eye strain or back problems.The work is mainly office based or in computer laboratories, although full or part-time remote working is becoming increasingly common.Projects may be undertaken alone or in small teams.Women are currently underrepresented in this profession and gender imbalance across the IT industry as a whole is a recognised issue. Steps are being taken to redress the balance. Women who want to work in technology should visit
Women in Technology
for information and jobs.Depending on the nature of the business, travel within a working day or absence from home at night may be required. This is more likely with consultancy work. More travel is involved in installation and implementation work.Want a career in the IT industry? Software Engineering (Conversion) MSc
Visit Qualifications Although this area of work is open to all graduates, applicants will be expected to have some technical ability. Having studied one of the following subjects may increase your chances of employment: computer sciencecomputer software or computer systems engineeringelectronicsinformation systemsmathematicsphysics. Many of the larger graduate recruiters will only employ graduates with proven technical skills and a good degree (2:1 or above) in a computing-related discipline.
Smaller companies generally prefer degrees of a computing, scientific or numeric nature. In some cases, however, graduates with an unrelated degree may be considered if their technical knowledge and enthusiasm can be demonstrated.
Graduates in non-computer-related subjects may consider taking a postgraduate IT conversion or technical postgraduate course. Many employers will also look for evidence of continuing professional development (CPD) outside of the classroom. Project programming experience can be used as evidence during the application process to show that a candidate is technically adept and also has effective problem-solving skills.
An HND in a computer-related subject may improve chances of entry and candidates with substantial systems development experience may be considered.
Entry without a degree or HND is unlikely, although it may be possible after gaining considerable experience in systems development as an assistant. Skills You'll need to show evidence of the following: knowledge of computer systems and technologiestechnical competencythe ability to communicate with clients, colleagues and management to explain complex issues clearly and conciselya meticulous and organised approach to worka logical, analytical and creative approach to problemsthoroughness and attention to detailbusiness skills and commercial awarenessthe ability to work both in a team and alone and to manage your own workloadcareer motivation and a willingness to continue to further your knowledge and skillsan ability to learn new skills and technologies quicklyan awareness of current issues affecting the industry and its technologies.Work experience Relevant work experience is a good way of demonstrating a genuine interest in computing and is regarded favourably by employers. Gain experience through course-related placements, opportunities to work shadow or a year in industry. AdvertisementEmployers Software engineers are employed in a range of sectors.
specialist IT firms
- such as IT consultancies, large IT providers, software development, internet providers and training firms; organisations that use IT software, systems and equipment, including retailers, law firms, business intelligence and market research organisations, education providers, the armed forces, the public sector and voluntary sector organisations. manufacturing industry
- including automotive, navigation, telecommunications, manufacturing and construction companies. financial services
- including global investment banks, financial/banking organisations, security market specialists and the pensions sector. public utilities
- covering energy and water supply, energy extraction and transport. Depending on the setting software engineering may be offered as part of a wider role, so look beyond the job title.
Consultancy is another area where software engineer jobs arise. The role may include other elements, such as analysis, implementation and support. Small to medium-sized enterprises (SMEs) are a growing part of the IT industry and may also have opportunities.
Look for job vacancies at:
Ashdown Group
Bubble Jobs
Contractor UK
- specialises in contract jobs. CWJobs
JobServe
MCVJobs
Technojobs
Women in Technology
Specialist recruitment agencies such as Henry Nicholas and Michael Page commonly handle vacancies. Software engineer jobs Graduate Software Engineering ProgrammeCapgeminiVarious locationsÂ£29,501-Â£32,000
Graduate Technology Programme 2023CapgeminiVarious locationsÂ£29,501-Â£32,000
Software EngineerDigital FuturesVarious locationsÂ£27,001-Â£29,500
View more information technology jobs Professional development It's vital to keep up to date with changes and developments in the industry, which may involve using your initiative and taking responsibility for updating your technical skills and knowledge. Software engineers will often take ownership of their training needs, particularly in smaller organisations where they may not be managed by someone with technical IT knowledge.
Large graduate employers often offer a structured programme, where you'll gain experience in a number of team-related projects in different work areas. Most companies offer ongoing training, either in-house or via external courses.
If you're a freelance contractor or employed by a smaller company, you may need to consider the cost and time implications of taking responsibility for your own training.
You can complete courses to obtain a variety of software-specific certifications, likeÂ Microsoft Learning, CertifiedÂ Scrum Master (CSM) and Certified Ethical Hacker (CEH). These courses can be expensive but are recognised throughout the industry and can enhance your career prospects when combined with experience.
Other professional qualifications are available through BCS (The Chartered Institute for IT). BCS Professional Certificates come in foundation, intermediate, practitioner and higher levels. BCS can also help by providing information and guidance to members on recognising and planning learning needs and developing areas of expertise.
Up-to-date information on training and relevant industry-recognised qualifications is also provided by the Institution of Analysts and Programmers (IAP).
To further your career progression, you may consider training in areas such as business, management and finance. Career prospects There are different levels of software engineering and promotion is usually dependent upon both ability and experience.
An entry-level post typically involves working under supervision, formulating the scope of, and objectives, for systems and designing code. After around three years, you may progress to preparing detailed specifications from which programs may be written and be competent to work at the highest technical level.
A senior software engineer often supervises the activities of a team of developers for a large project or several smaller projects. This usually requires a minimum of five years' experience.
Progression is mainly into management via team leadership and project management roles, or to designer/consultant via technical specialisation. Transfer between organisations for advancement is often possible.
Software engineers are specialists and may remain within one organisation, and frequently in one role, for much of their working lives. However, others expand and develop their roles to the extent that software engineering becomes part of a much wider role in positions such as technical writing, IT training and education. They can also move on to the role of software architect.
Both BCS and IAP provide up-to-date information and advice on career development.
Written by AGCAS editors
December 2021
© Copyright AGCAS & Graduate Prospects Ltd · Disclaimer
See how well you match this job profile and over 400 others.Try Career Planner Alternative careers Systems analyst
Game developer
Game designer
Machine learning engineer
CAD technician
Application analyst How would you rate this page? On a scale where 1 is dislike and 5 is like Something went wrong. Please try again.Dislike1unhappy-very2unhappy3neutral4happyLike5happy-veryTell us why...Do not fill this inSendsuccess feedback Thank you for rating the page Related jobs and courses graduate scheme Systems Engineer GraduateBAE Systems  (117 other jobs) £29,501-£32,000Various locations View job
Uni profile UWE Bristol View profile
graduate scheme Technology Graduate Development ProgrammeMI5 and MI6  (1 other job) Over £37,001London View job
graduate scheme Technology Graduate Development ProgrammeMI5  (2 other jobs) £34,501-£37,000Greater Manchester View job
Back to top
Get in touch Contact us
Prospects on Instagram
Prospects on Facebook
Prospects on Twitter
Prospects on Linkedin
Prospects on Youtube
Prospects' Future You podcast Promote job vacancies, courses or events Employer advertising
Prices from Â£350
Employer advertising Prices from Â£350
University packages
University packages Company About us
Work for us
Our publications
Press office Legal Privacy
Cookies
Terms of use
Accessibility
© Copyright 2022 Jisc.All rights reserved. Made withlovein Manchester
Prospects is part of JiscCompany informationRegistered office4 Portwall Lane, Bristol, BS1 6NB.Registered number09316933 (England)Prospects is part of JiscCompany informationRegistered office4 Portwall Lane, Bristol, BS1 6NB.Registered number09316933 (England)
© Copyright 2022 Jisc.All rights reserved.


Link: https://engineering.tamu.edu/cse/research/areas/software.html

Software, Software Engineering | Texas A&M University Engineering
Skip To Main Content
Departments
Info For
Giving
Contact
College of Engineering Home
Search
Aerospace
Biological & Agriculture
Biomedical
Chemical
Civil & Environmental
Computer Science & Engineering
Electrical & Computer
Engineering Technology & Industrial Distribution
Industrial & Systems
Materials Science & Engineering
Mechanical
Multidisciplinary
Nuclear
Ocean
Petroleum
Prospective Students
Current Students
Former Students
Search
Search
Menu
About
Academics
Admissions & Aid
Research
People
Partner With Us
Search
Search
Search
About
Academics
Admissions & Aid
Research
People
Partner With Us
Giving
Contact
College of Engineering Home
About
About Us
Facts & Figures
Accreditations
Maps and Directions
News
Contact Us
Faculty Distinctions, Awards and Honors
Academics
Academics
Advising
Engineering Honors
Computer Engineering
Global Programs
Student Organizations
Peer Teachers
Fast Track: Optimizing the transition from Undergraduate to Graduate Studies
Admissions & Aid
Admissions and Aid
Entry to a Major Process
Scholarships & Financial Aid
Research
Research
Research Areas
Labs
Undergraduate Research
Seminars and Distinguished Lectures
People
Leadership
Faculty
Staff
Partner With Us
Industry Capstone Program
Industrial Affiliates Program
Home
Computer Science and Engineering
Research
Research Areas
Software, Software Engineering
Software, Software Engineering
Software and software engineering research studies everything related to engineering high-quality software, including (but not limited to) software requirements, design, testing, verification, analytics, evolution, productivity and social aspects of software engineering.
Research Faculty
Dilma Da Silva
Professor, Computer Science & Engineering
Ford Motor Company Design Professor II
Office:
PETR 227 Phone:
979-458-8008 Email:
dilma@cse.tamu.edu
Jeff Huang
Associate Professor, Computer Science & Engineering
Office:
PETR 236 Phone:
979-845-5485 Email:
jeff@cse.tamu.edu
Robert Lightfoot
Associate Professor of Practice, Computer Science & Engineering
Office:
PETR 422 Phone:
979-845-2611 Email:
rob.light@tamu.edu
Abdullah Muzahid
Assistant Professor, Computer Science & Engineering
Office:
PETR 206 Phone:
979-458-1059 Email:
abdullah.muzahid@cse.tamu.edu
Khanh Nguyen
Assistant Professor, Computer Science & Engineering
Office:
PETR 229 Phone:
979-458-1904 Email:
khanhtn@tamu.edu
Lawrence Rauchwerger
Emeritus Professor, Computer Science & Engineering
Office:
HRBB 417A Phone:
979-845-8872 Email:
rwerger@cse.tamu.edu
Frank M. Shipman
Professor, Computer Science & Engineering
Office:
PETR 335 Phone:
979-862-3216 Email:
shipman@cse.tamu.edu
Pauline Wade
Associate Professor of Practice, Computer Science & Engineering
Office:
PETR 108 Phone:
979-458-0480 Email:
paulinewade@tamu.edu
Duncan M. "Hank" Walker
Associate Dean for Graduate Programs
Professor, Computer Science & Engineering
Office:
PETR 218 Phone:
979-862-4387 Email:
walker@cse.tamu.edu
Research Areas
Algorithms and Theory
Artificial Intelligence, Intelligent Systems, Machine Learning, Natural Language Processing
Machine Learning, Natural Language Processing
Bioinformatics, Computational Biology
Computational Science
Computer Architecture
Computer Science Education
Computer Vision
Cyber-Physical Systems
Cybersecurity
Data Science
Databases, Data Mining, Information Retrieval Systems
Digital Humanities
Electronic Design Automation and VLSI
Embedded Systems
Gaming
Graphics and Visualization and Computational Fabrication
Health
Human-Centered Systems
Human-Computer Interaction
Networks
Parallel and Distributed Computing
Programming Languages,Â Compilers
Robotics, Human-Robot Interaction
Software, Software Engineering
Systems
Systems and Systems Software
Technical Reports
The Department of Computer Science and Engineering
College of Engineering
Texas A&M University
Department of Computer Science & EngineeringTexas A&M University435 Nagle Street
College Station, Tx 77843-3112
Phone: 979-458-3870
Fax: 979-845-1420
cse-general@cse.tamu.edu
Follow Our Department:
Computer Science and Engineering Facebook page
Computer Science and Engineering YouTube channel
Computer Science and Engineering LinkedIn group
Find Us On Campus
Office:
Peterson Building
Maps & Directions
Texas A&M University College of Engineering, 3127 TAMU,
College Station, TX   77843-3127 (
ZACH )
easa@tamu.edu
(979) 845-7200
Staff Directory
Site Map
Site Policies
About this Site
Employment
Follow Us:
Facebook
Twitter
LinkedIn
Instagram
YouTube
The College of Engineering is a member of
Texas A&M University
Texas A&M Engineering is a member of
The Texas A&M University System
Copyright © 2022, Texas A&M Engineering Communications, All Rights Reserved
State of Texas
Texas Homeland Security
Open Records
Risk, Fraud, & Misconduct Hotline
Accommodations
Statewide Search
Texas CREWS
Environmental Health, Safety, & Security


Link: https://www.cs.ucf.edu/research/software-engineering-and-systems/

Software Engineering and Systems – Department of Computer Science
Skip to main content
Department of Computer Science
Navigation
About
Chairâs Message
History & Background
Computer Science Advantages
Faculty From CS@UCF
Faculty Awards & Honors
CS Student of The Year
CS@UCF Newsletters
Faculty & Staff Resources
Student Organizations
Academics
Academic Advising
Undergraduate Degrees
Undergraduate Resources
Computer Science Placement Test
Graduate Admissions
Current Graduate Students
Graduate Degrees
Accreditation
Research
Research Areas
Research Labs
Faculty Research Profiles
Publications
Industry
People
Faculty Administrators
Faculty
Faculty by Research Area
Staff
Faculty Awards & Honors
Contact
Jobs
Software Engineering and Systems
Department of Computer Science
Skip to Section
Overview
Software Engineering addresses the problem of how to produce quality software on time and within a specific budget. Systems work addresses the problem of how to build large computer systems that accomplish some specific purpose. Specific research problems in Software Engineering that we are investigating include: how best to describe what software systems are supposed to do (specification), how to ensure that computational systems behave correctly (verification), model checking of software and hardware systems with a particular emphasis on scalable formal verification of cyber-physical systems and quantitative computational models, how to parallelize systems for maximum efficiency, how to model, analyze, and optimize the performance of software, and how to build large, concurrent and distributed systems.
Software Engineering and Systems Faculty
Dr. Damian Dechev
Associate Professor
Dr. Paul Gazzillo
Assistant Professor
Dr. Kien A. Hua
Professor
Dr. Gary T. Leavens
Professor
Dr. Dan C. Marinescu
Professor
Dr. Damla Turgut
Professor and Chair, Department of CS
Dr. Liqiang Wang
Professor
Dr. Cliff Zou
Professor & Graduate Coordinator for Digital Forensics
Computational Modeling Laboratory
Data Systems Group
Formal Methods Lab
Scalable and Secure Systems Lab
THIRTEEN RESEARCH AREAS. UNLIMITED POSSIBILITIES.
Research in Computer Science spans a wide range of topics.
At UCF, research in Computer Science emphasizes:
Innovative uses for computation
Studies of issues surrounding computation
Investigations into the nature of computation
BioInformatics and Systems Biology
Computer Architecture
Computer Graphics
Computer Security and Digital Forensics
Computer Vision
Database
Image and Video Processing
Machine Learning and AI
Networking and Mobile Computing
Parallel Computation
Software Engineering and Systems
Theory of Computing, Algorithms and Quantum Computing
Virtual Reality and HCI
Department of CS, CECS, UCF
Facebook
Twitter
4328 Scorpius Street, Orlando, Florida, 32816-2362 | 407.823.3957
© University of Central Florida


Link: https://devmountain.com/blog/software-developer-vs-software-engineer-whats-the-difference/

Software Developer vs. Software Engineer: Whatâs the Difference?
Login
Search for:
Apply
About Us
Campuses
Lehi, UT
Dallas, TX
Remote
Schedule a Tour
About Devmountain
Work for Us
Events
Alumni
Contact Us
Courses
CODING BASICS
WEB DEVELOPMENT
JAVA SOFTWARE ENGINEERING
PYTHON SOFTWARE ENGINEERING
DATA ANALYTICS
iOS DEVELOPMENT
QA SOFTWARE
UX DESIGN
CYBERSECURITY
SELF-STUDY
All Courses
Compare Courses
View Upcoming Course Dates
Free Events
View Upcoming Events
Affordability
Tuition & Financing
Scholarships
Housing
Outcomes
Outcomes
Career Support
Alumni
Application Process
About Us
About Devmountain
Work for Us
Events
Alumni
Contact Us
Campuses
Lehi, UT
Dallas, TX
Remote
Request a Tour
Courses
Coding Basics
Web Development
Java Software Engineering
Python Software Engineering
Data Analytics
iOS Development
Software QA
UX Design
Cybersecurity
SELF-STUDY
All Courses
Compare Courses
View Upcoming Course Dates
Free Events
View Upcoming Events
Affordability
Tuition & Financing
Scholarships
Housing
Outcomes
Outcomes
Career Support
Alumni
Application Process
Software Developer vs. Software Engineer: Whatâs the Difference?
Software Developer vs. Software Engineer: Whatâs the Difference?
If youâre confused about the difference between software developers and software engineers, youâre not alone. Not only is there an overlap in some of the skills required for both developers and engineers, but experts in the field disagree on whether or not the titles even matter. Whatâs important to know is that software developers and software engineers arenât the same thing, and as long as employers keep searching for developers and engineers, itâs worth knowing the difference.
Skills
Okay, letâs explore the different skill-sets involved with becoming a software developer or software engineer. For instance, if you like working with people and finding creative solutions, you might want to consider becoming a software developer. On the other hand, if you feel more comfortable working with a wide range of engineering principles, software engineering might be better.
Thatâs because the main difference between being a software developer vs software engineer is mainly in the job function itself. Software engineers may take a hand in development, but developers seldom get too involved in the engineering side of things. Of course, thereâs more to it than just this, but this distinction is probably the easiest way to differentiate the two positions.
More specifically, developers work directly with the client to figure out what they want, then lead a team to implement the design while keeping in contact with their clients throughout the life cycle of the project.
To do this, developers need a working knowledge of the software to be able to balance what the client wants with what the software can actually provide. They also need to have great attention to detail to ensure the project is running smoothly.
Software engineers, on the other hand, are the ones who actually build the software systems. As such, they are much more hands-on during the development process, working to apply engineering principles to the creation and testing of the product.
Where developers might help find solutions to specific problems, engineers are responsible for the system as a whole. Engineers must look for solutions that will work across the entire program, rather than just one area.
It should be noted that because software engineers are required to have a higher level of technical skill than developers, itâs often easier for an engineer to work as a developer than the other way around.Â
But thereâs another way to differentiate between the two as well.Â
Developers often work on the parts of code that deal directly with the clientâs experience. Theyâre changing things like the color of the platform, the location of a particular button or data entry field, or what the website or application looks like when transitioning tasks.
Theyâre working primarily with languages like HTML, CSS, JavaScript, or other forward-facing programming languages.
All of these coded elements will be directly seen and noticed by the client or user.
Software engineers are working on problems that wonât be necessarily seen by the client or end user but will affect their user experience.
Theyâre deciding how userâs data should be collected, where and how it should be stored, how to recall that data when itâs needed later, and the most efficient ways to analyze or manipulate it.
No one is seeing all of this number-crunching going on, but if the code isnât right, the user is going to see it pretty quickly.
Think of office software. If you worked at a hospital and needed to pull the data for everyone who ever worked with the 20-year hospital veteran, âDr. Cho,â and you only got two results back, thatâd be a major red flag.
Thereâs just no way that doctor has only ever seen 2 patients in 20 years.
This is where good, backend, software engineering comes into play. And software engineering usually focuses on languages like Python, Java, and ruby.
This is also why there isnât a huge difference between backend developers and software engineers. There may be a slight difference between client interaction time, but other than that, title choice happens on a company-by-company basis.
Training
Whether theyâre looking to become a software engineer or developer, many prospective software professionals feel like their education has to start at the same: computer science degree programs.
A bachelorâs degree that focuses on coding and software â including, but not limited to, computer science â will not only provide the necessary software education, but the degree could help you get your foot in the door when it comes to employment.
That said, while software engineers are often expected to have more education than developers, you donât need a degree to start working in either field. And if youâre not sure about committing at least four years of your life (and a whole lot of money) to a college education, you should know that you have other options.
One of the growing trends in tech-related education is coding bootcamps, which can provide a base-level education for a fraction of the cost and time. Some bootcamps offer certification, another way to get your foot in the door. But, again, certificates arenât the only factor in getting a job, so donât let that limit your learning.
Coding bootcamps can be a valuable alternative to a college degree. To learn more about whatâs available, check out the Devmountain course list.
Whether youâre in a degree program or a bootcamp, itâs also worth getting to know other coders. You can do this in person with friends or classmates, or you can find coding communities online. Interacting with people can keep you motivated, help you learn outside of a classroom setting, and provide you with valuable advice.
Furthermore, while learning concepts is important, youâll also want to spend time creating finished projects for a portfolio. For software engineers, this should include a wide variety of projects to showcase your range.
Youâll want to show youâre not just adept in C++, but also Java, Ruby, Python, etc. On the other hand, software developers are often encouraged to specialize. If you want to do website development, for instance, make sure you have several examples of your website work.
Regardless of how you go about getting a coding education, what really matters is what you learn, what you create, and how you approach problem-solving.
Who Makes More? Software Developers or Software Engineers?
So whatâs the difference in salary between software developers and software engineers?
Isnât that the question?
Unfortunately, we donât have a good answer for that.
There are so many variables to take into account.
What does the local job market look like?
How developed is that department in the company?
What kind of work is the person doing?
Are they client-side or working internally?
Does the company distinguish between backend devs and software engineers?
What do other companies in the area pay for these kinds of positions?
All of these questions (and many many more) will affect that end salary.
If youâre wanting to find more information about company pay, weâd suggest you look to the US Bureau of Labor Statisticsâ Occupational Outlook Handbook for local and national pay averages and Glassdoor for self-reported salaries from current and former employees.
These numbers wonât be perfect, but theyâll be better than any answer we could share with you.
Interview
Because of the overlap between software developers and software engineers, it should come as no surprise that there are often similarities in the interview process as well. You should definitely come prepared with a portfolio; employers like to see your past work.
And your resume should also reflect the kind of position youâre gunning for. Most people make the mistake of having only one technical resume and applying to both developer and engineering jobs with it.
But if youâre applying for a software engineering job, your resume should highlight big, across-the-board problems that you solved. If youâre applying for a software developer job, then your resume should feature how you interacted with and solved specific issues in specific instances.
If youâre interviewing, you should also be prepared to tackle questions that test how you think. Developers are often expected to prove they can think creatively, while engineers usually need to prove they can tackle problems using mathematical and scientific approaches.
You should also research what employers are expecting from your work in the posted job position.
Because thereâs overlap between the fields of software development and engineering (remember, some experts no longer bother making a distinction between the two), what an employer expects you to do might not line up with what youâre anticipating.
If youâve trained to be a software engineer, for instance, are you prepared to dip your toe into the world of development? Would you want to?
The best advice for individuals considering software development or engineering is to find their niche. With a little ingenuity and some hard work, making the jump between disciplines is possible so find what you like doing and make it work for you!
Interested In Getting into Development Or Engineering?
Thinking about breaking into tech but not sure what your focus should be?
Try taking our Coding Basics course.
This course is dedicated to helping you get your toe wet in the world of coding. If you think tech might be for you but want to try doing something before fully committing to a different career or learning and an entirely new skill set, this course is for you.
And if you donât want to commit to a full course, youâre always more than welcome to attend one of our free Devmountain events. Go ahead and give our current events a look.
Continue Learning
How to Become a Software Engineer: Seven Steps
Hereâs How to Become a Software Engineer Without a Degree
Web Development vs. Software Development: Which is the Better Career Choice?
See also:
Career Support ,
Web Development
Related posts
What Does a Software Engineer Do?
How to Become a Software Engineer: Seven Steps
Here's How to Become a Software Engineer Without a Degree
COMPANY
Home
About
Contact
Work for Us
Catalog & Policies
Press
STUDENTS
Approach Login
Apply
Blog
Beginners Guide
FAQ
Alumni
COMMUNITY
DM Discord
Strayer
Instruct
Events
Shop
JOIN US


Link: https://www.usf.edu/engineering/cse/people/index.aspx

Faculty | Computer Science and Engineering | University of South Florida
Skip to Main Content
University of South Florida
Computer Science and Engineering
College of Engineering
Search
Search for:
Main Navigation
Menu
Give Now
About Us
People
Graduate
Undergraduate
Research & Innovation
Industry
MyUSF
Directory
People
Skip Over Breadcrumbs and Secondary Navigation
Breadcrumb Navigation
College of Engineering
Computer Science and Engineering
People
Faculty
Secondary Navigation
Faculty
Staff
Faculty
Fall 2022 OFFICE HOURS
James Anderson, Assistant Professor of InstructionENG 215 | 813-974-3032 | Email
Research: Electrical and Healthcare Networks; Cybersecurity
Marvin Andujar, Assistant ProfessorENB 316 | 813-974-8421 | Email
Research: Brain-computer interfaces; brain-robot interaction; personal informatics; ubiquitous
computing; symbiotic interaction; affective computing
Shaun Canavan, Assistant ProfessorENB 315 | 813-974-3137 | Email
Research: Computer vision; face and sketch recognition; expression analysis; human computer
interaction; facial feature detection and tracking
Sriram Chellappan, Professor ENB 317 | 813-974-1379 | Email
Research: Socio-technical systems; cybersecurity; smart health; mobile networking; cyber-physical
systems; mobile and wireless computings
Awards: NSF CAREER (2013)
Ken Christensen, Professor and Associate Chair of Undergraduate AffairsENB 319 | 813-974-4761 | Email
Research: Performance evaluation of computer networks; high-speed packet switch architectures;
energy-efficient networks (green networks)
Awards: Outstanding UG Teaching (1997), USF Kosove Distinguished Undergraduate Teaching and
Service Award (2017), USF Excellence in Innovation Award (2009), USF Teaching Incentive
Program Award (1998 )
Suey-Chun (Roger) Fang, Associate Professor of InstructionENG 016 | 813-974-2398 | Email
Research: Data modeling; data warehousing; information systems; deductive databases; visual
programming
Alessio Gaspar, Associate Professor ENB 343E | 813-974-2932 | Email
Research: Evolutionary algorithms; computing education research; computer assisted learning;
intelligent tutoring systems
Dmitry B. Goldgof, Distinguished University Professor and Vice ChairENB 326 | 813-974-4055 | Email
Research: Medical image analysis; image and video processing; computer vision and pattern recognition;
ethics and computing; bioinformatics and bioengineering
Awards: USF Excellence in Innovation Award (2020), USF Outstanding Research Achievement Award
(2018), IEEE Fellow, AAAS Fellow, AIMBE Fellow, IAPR Fellow
Lawrence Hall, Distinguished University Professor ENB 330 | 813-974-4195 | Email
Research: Intelligent systems; machine learning/data mining; fuzzy logic in intelligent systems;
artificial intelligence in visual pattern recognition
Awards: IEEE Fellow , AAAS Fellow, IAPR Fellow, AIMBE Fellow
William Hendrix III, Assistant Professor of Instruction and Undergraduate Program Coordinator for Computer
Science and Computer EngineeringENB 301C | 813-974-7453 | Email
Research: Graph algorithms; parallel computing
Isabela M. Hidalgo, Assistant Professor of InstructionENB 301B | 813-974-6048 | Email
Research: Human-computer interaction; programming languages
Henrick Jeanty, Assistant Professor of InstructionENG 017 | 813-974-1982 | Email
Research: Technical analysis algorithm; optical character recognition
Robert Karam, Assistant ProfessorENB 341 | 813-974-4184 | Email
Research: Hardware security; reconfigurable computing; bioimplantable devices (algorithms &
digital hardware)
Srinivas Katkoori, Associate ProfessorENB 258 | 813-974-5737 | Email
Research: High-level synthesis; low power synthesis; radiation tolerant VLSI design and CAD
Awards: NSF CAREER (2001), USF Outstanding Undergraduate Teaching Award (2007), USF Outstanding
Faculty Research Achievement Award (2003)
Gene Louis Kim, Assistant ProfessorENB 376 | (813)-396-2882 | Homepage | Email
Research: Gene's research aims to integrate the benefits of neural and symbolic methods for
modeling language meaning which supports automatic parsing and computer reasoning
while being informed by linguistic semantics.
Seungbae Kim, Assistant ProfessorENB 311 |(813)-396-2881| Email
Research: Artificial intelligence; Graph neural networks; Machine learning (Fairness and Explainability);
Social network analysis, Applied data science
Valentina Korzhova, Assistant Professor of InstructionENB 343G | 813-974-0909 | Email
Research: Computer vision; image processing; pattern recognition
Wanwan Li, Visiting Assistant ProfessorENB 343K| 3217329405 | Email | Homepage
Research: Computer Graphics; Virtual Reality; Augmented Reality; Augmented Virtuality; Edutainment
& e-Training; Procedural Modeling; Computational Design; Deep Learning; Sketch-Based
Interface; Brain-Computer Interface;
John Licato, Assistant ProfessorENB 301D | 813-974-6212 | Email
Research: Artificial Intelligence; natural language processing (NLP); computational cognitive
modeling; cognitive science and robotics; automated theorem provers; argumentation;
human reasoning
Jay Ligatti, Professor and Director of Graduate AdmissionsENB 333 | 813-974-0908 | Email
Research: Runtime Security Mechanisms; Authentication; Policy Composition; Injection Attacks;
Enforceability Theory; Type Systems; Subtyping; Policy-Specification Languages
Awards: NSF CAREER (2008), USF Excellence in Innovation Award (2017), USF Outstanding Research
Achievement Award (2009)
Yao Liu, Associate Professor ENB 336 | 813-974-1079 | Email
Research: Network security; wireless technologies
Awards: NSF CAREER (2016)
Ankur Mali, Assistant ProfessorENB247A | Email
Research: Trustworthy AI, Deep learning theory, Natural language processing, Memory augmented
neural networks, Physics informed NNs, Bio-inspired neural architectures, and Lifelong
learning.
Mehran Mozaffari Kermani, Associate ProfessorENB 338 | 813-974-2671 | Email
Research: Fault diagnosis and tolerance in cryptography; cryptographic engineering; computer
arithmetic
Awards: USF Faculty Outstanding Research Achievement Award (2020), USF Outstanding Junior
Research Achievement Award (2018)
John Murray-Bruce, Assistant ProfessorENB 301A | Email
Research: Computational imaging; PDE-constrained inverse problems; Computational sensing; Sampling
theory and applications
Tempestt Neal, Assistant ProfessorENB 310 | 813-485-4384 | Email
Research: Scalable biometrics; mobile biometrics; computer vision; authorship attribution;
human-centered authentication; soft biometric classification; emotion recognition
Xinming (Simon) Ou, ProfessorENB 339 | 813-974-4522 | Email
Research: Cyber security; cyber physical systems; programming languages; cloud computing; human
aspects of computing
Awards: NSF CAREER (2010)
Mauricio Pamplona Segundo, Visiting Assistant ProfessorENB 343H | Email
Research: Computer vision (biometric recognition, remote sensing, video analysis, 3D vision);
machine learning (few-shot learning, distribution modeling)
Awards: IET Biometrics Best Paper Award, The IET Premium Awards 2020, IET, 2020Best contribution, Rapid Action Coronavirus Earth observation (RACE) upscaling competition,
European Space Agency, 20202nd place, Unconstrained Ear Recognition Challenge, University of Ljubljana, 20193rd place, Functional Map of the World, IARPA, 2017World finalist, ACM International Collegiate Programming Contest, ACM, 2016 & 2017
Marbin Pazos-Revilla, Assistant Professor of Instruction and Systems AdministratorENB 343C | 813-974-5043 | Email
Research: Cybersecurity; Cyber-physical systems; Internet of Things; Engineering Education
Les A. Piegl, Professor ENC 2501 | 813-974-5234 | Email
Research: Computer-aided design; geometric modeling; computer graphics and analysis; design
of geometric algorithms
Awards: USF Outstanding Undergraduate Teaching Award (1991), USF Teaching Incentive Program
Award (1993), USF Academic Quality Enhancement Award (1994)
Dayane Reis, Assistant ProfessorENB 318 |(813)-396-2837| Email
Research: VLSI, low power design, AI accelerators, emerging technologies, hardware security
Awards: Best paper award at the ACM/IEEE International Symposium on Electronics and Low
Power Design in 2018 (ISLPEDâ18), Cadence Women in Technology (WIT) Scholar 2018/2019
Sudeep Sarkar, Distinguished University Professor and Department ChairENB 345 | 813-974-2113 | Email
Research: Computer vision and image analysis; automated sign language; recognition biometrics
and human identification; perceptual organization for grouping and segmentation; Bayesian
methods
Awards: NSF CAREER (1995), Outstanding UG Teaching (1998), IEEE Fellow, AAAS Fellow, AIMBE
Fellow, IAPR Fellow, NAI Fellow
Schinnel Small, Assistant Professor of Instruction and Undergraduate Program Coordinator for Information
TechnologyENB 343F | 813-974-2126 | Email
Research: Programming languages; computer architecture; visual analytics
Yu Sun, ProfessorENB 331 | 813-974-7508 | Email
Research: Intelligent systems; robotics; cyber physical systems and virtual reality; computer
vision; medical image processing; deep learning
Awards: USF Excellence in Innovation Award (2018), USF Neuroscience Collaborative Award (2010)
Yicheng Tu, Professor ENB 340 | 813-974-2114 | Email
Research: Database systems; multimedia systems; distributed systems
Awards: NSF CAREER (2013), USF Outstanding Research Achievement Award (2014), USF Outstanding
Faculty Award (2014)
Philip Ventura, Associate Professor of Instruction ENG 211 | 813-974-0552 | Email
Research: Computer science education; pedagogy of object orientation; objects-first introductory
CS curricula
Jing Wang, Professor of Instruction and Director of Broadening Participation in Computing ENC 3501 | 813-974-6897 | Email
Research: Computer animation; broadening participation in computing; undergraduate computer
science and engineering education
Awards: USF Women in Leadership & Philanthropy Dr. Kathleen Moore Faculty Excellence Award
(2020)USF Outstanding Undergraduate Teaching Award (2011)
Alfredo Weitzenfeld, Professor and Associate Chair of Graduate AffairsENB 314 | 813-974-4905 | Email
Research: Biologically-inspired robotics; cognitive robotics; humanoid robots; multi-robot
systems
Julia Woodward, Assistant ProfessorENB 332 |(813)-396-2828 | Email
Research: Human-centered computing, human-computer interaction, natural user interfaces, child-computer
interaction, mobile computing, multimodal interaction, learning technologies
Awards: National Science Foundation Graduate Research Fellow (2019)
Attila A. Yavuz, Associate ProfessorENG 117 | 813-974-0419 | Email
Research: Applied cryptography; privacy enhancing technologies; light-weight cryptography;
cyber-security for critical cyber-infrastructures (e.g., internet of things and cloud
systems); network security
Awards: NSF CAREER (2017)
Yan Zhang, Assistant Professor of InstructionENB 343A | 813-974-9653 | Email
Research: Congestion control and energy optimization in data center networks; content delivery
acceleration over wide area networks; energy efficient networking
Hao Zheng, Associate Professor ENB 312 | 813-974-4757 | Email
Research: Hardware/Software testing and verification; embedded systems; computer architecture;
VLSI design; electronic design automation
Awards: NSF CAREER (2005), USF Outstanding Research Achievement Award (2007)
Adjunct Faculty
William GauvinEmail
Carol HoekeEmail
Richard RauscherEmail
Emeritus Faculty
Harvey Glass, Emeritus ProfessorEmailResearch: Operating systems; programming languages; embedded systems design
Abraham Kandel, Distinguished University Professor EmeritusEmailResearch: Applied fuzzy logic and computational intelligence; software testing and productivity;
decision-making in uncertain environments; data mining
Rangachar Kasturi, Douglas W. Hood Professor Emeritus Email
Research: Computer vision; pattern recognition; document image analysis
Rafael Perez, Professor Email
Research: Artificial intelligence; neural networks; genetic algorithms
Dewey Rundus, Emeritus ProfessorEmailResearch: Human-computer interaction
Murali Varanasi, Emeritus ProfessorEmail Research: Coding theory; computer arithmetic
Courtesy Faculty
Peter R. Mouton, Courtesy FacultyEmail
Matthew Peterson, Courtesy FacultyEmail
Paul Sanberg, Courtesy FacultyEmail
John Skvoretz, Courtesy FacultyEmail
Jean-Francois Biasse
Ankit Shah
University of South Florida
Menu
About USF
Academics
Admissions
Locations
Campus Life
Research
Administrative Units
Regulations & Policies
Human Resources
Work at USF
Emergency & Safety
Title IX
USF Health
USF Athletics
USF Alumni
Support USF
USF Libraries
USF World
4202 E. Fowler Avenue,
ENG 030, Tampa, FL 33620, USA813-974-3652
Facebook
Twitter
LinkedIn
Copyright Â© 2022, University of South Florida. All rights reserved.
This website is maintained by Computer Science and Engineering.
About This Site
Contact USF
Visit USF
Diversity
Â


Link: https://www.mccormick.northwestern.edu/computer-science/people/faculty.html

Faculty | People | Computer Science | Northwestern Engineering
Northwestern Engineering
About
Academics
Research & Faculty
Offices & Services
Information for:
Students
Faculty & Staff
Alumni
Companies
News & Events
Contact & Visit
Internal Resources
Careers
Students
Diversity
Computer Science
Search this site
Search
About
About the Department
Message from the Chair
Academics
Academics
Undergraduate
Graduate
Courses Quick Links Student Resources
Diversity
Broadening Participation in Computing (BPC) Plan
Research
Research Overview
Research Areas
Groups & Labs
Affiliated Centers & Institutes
Industry Partnerships
Tech Reports
Machines
CS+X
The Power of CS By bringing the power of computer science to fields such as journalism, education, robotics, and art, Northwestern University computer scientists are exponentially accelerating research and innovation. Watch our video above or learn more at the link below.
Learn more
People
Faculty
Affiliated Faculty
Faculty of Instruction
Postdoctoral Fellows
Staff
Visiting Scholars
PhD Students
Outgoing PhDs and Postdocs 2022-2023
Adjunct Faculty Quick Links CS Faculty Diversity Committee
News & Events
News
Newsletter
All Public Events
Seminars, Workshops, & Talks
Honors and Awards
Contact
Search this site
Search
Menu
About
CollapseAbout Submenu
About the Department
Message from the Chair
Academics
CollapseAcademics Submenu
Academics
Undergraduate
CollapseUndergraduate
Submenu
Computer Science Major (BS/BA)
Computer Science Minor
Data Science and Engineering Minor
Combined BS (or BA)/MS Degree Program
Intro Courses
Special Programs & Opportunities
Student Groups & Organizations
Resources for Current Students
Undergraduate Programs
Undergraduate Research
Senior Thesis
Peer Mentors
Graduate
CollapseGraduate Submenu
MS in Computer Science
CollapseMS in Computer Science Submenu
Curriculum & Requirements
MS in Computer Science
PhD in Computer Science
CollapsePhD in Computer Science Submenu
Curriculum & Requirements
PhD in Computer Science
Admissions
CollapseAdmissions Submenu
Admissions
Admissions FAQ
Financial Aid
Student Groups & Organizations
Forms & Documents
Announcements and Deadlines
Graduate Programs
Courses
CollapseCourses Submenu
Research
CollapseResearch Submenu
Research Overview
Research Areas
CollapseResearch Areas Submenu
Research Areas
Systems and Networking
Security and Privacy
Programming Languages
Theory
Artificial Intelligence
Human-Computer Interaction
Vision and Graphics
Robotics
Groups & Labs
Affiliated Centers & Institutes
Industry Partnerships
CollapseIndustry Partnerships Submenu
Industry Partnerships
Adobe Research Partnership
Center for Advancing Safety of Machine Intelligence
Tech Reports
CollapseTech Reports Submenu
Submit a Tech Report
Tech Reports
Post-2000
Pre-1999
Machines
CS+X
People
CollapsePeople Submenu
Faculty
Affiliated Faculty
Faculty of Instruction
Postdoctoral Fellows
Staff
Visiting Scholars
PhD Students
CollapsePhD Students Submenu
A - K
PhD Students
L - R
S - Z
Outgoing PhDs and Postdocs 2022-2023
Adjunct Faculty
News & Events
CollapseNews & Events Submenu
News
CollapseNews Submenu
All News
News Archive
Newsletter
All Public Events
Seminars, Workshops, & Talks
CollapseSeminars, Workshops, & Talks Submenu
Seminars, Workshops, & Talks
Distinguished Lecture Series
CS Colloquium Series
CS + X Events
Tech Talk Series
Honors and Awards
CollapseHonors and Awards Submenu
Honors & Awards
External Faculty Awards
University Awards
Department Awards
Contact
Internal Resources
CollapseResources Submenu
INTERNAL RESOURCES
Travel
Careers
Students
CollapseStudent Resources Submenu
Student Resources
Jobs and Internships
Miscellaneous Resources
National Fellowship Calendar
Space and Room Reservations
Diversity
CollapseDiversity Submenu
Diversity
Initiatives
Student Groups
CS Faculty Diversity Committee
Resources
News & Events
Broadening Participation in Computing (BPC) Plan
Northwestern Engineering
Explore CS+X
People
People
Faculty
Affiliated Faculty
Faculty of Instruction
Postdoctoral Fellows
Staff
Visiting Scholars
PhD Students
PhD Students
A - K
L - R
S - Z
Outgoing PhDs and Postdocs 2022-2023
Adjunct Faculty
PeopleFaculty
Samir Khuller
Peter and Adrienne Barris Chair of Computer Science
Professor of Computer Science
Email
Samir Khuller
Mohammed Alam
Assistant Professor of Instruction
Deputy Director of the Master of Science in Artificial Intelligence Program
Email
Mohammed Alam
Emma Alexander
Assistant Professor of Computer Science
Email
Emma Alexander
Nabil Alshurafa
Associate Professor of Preventive Medicine and (by courtesy) Computer Science and Electrical and Computer Engineering
Email
Nabil Alshurafa
Brenna Argall
Associate Professor of Computer Science
Associate Professor of Mechanical Engineering
Associate Professor of Physical Medicine and Rehabilitation
Email
Brenna Argall
Connor Bain
Assistant Professor of Instruction
Email
Connor Bain
Sruti Bhagavatula
Assistant Professor of Instruction
Email
Sruti Bhagavatula
Larry Birnbaum
Professor of Computer Science
Email
Larry Birnbaum
Jeremy Birnholtz
Associate Professor, Communication Studies and (by courtesy) Computer Science
Email
Jeremy Birnholtz
Fabian Bustamante
Professor of Computer Science
Director of Graduate Admissions
Email
Fabian Bustamante
Simone Campanoni
Assistant Professor of Computer Science and (by courtesy) Electrical and Computer Engineering
Email
Simone Campanoni
Yan Chen
Professor of Computer Science
Email
Yan Chen
Alok Choudhary
Henry and Isabelle Dever Professor of Electrical and Computer Engineering and (by courtesy) Computer Science
Email
Alok Choudhary
Katherine Compton
Assistant Professor of Instruction
Email
Katherine Compton
Noshir Contractor
Jane S. and William J. White Professor of Behavioral Sciences in Industrial Engineering & Management Sciences and (by courtesy) Computer Science
Professor of Communication Studies
Professor of Management and Organizations
Email
Noshir Contractor
Oliver Cossairt
Associate Professor of Computer Science
Associate Professor of Electrical and Computer Engineering
Email
Oliver Cossairt
Andrew Crotty
Assistant Professor of Computer Science
Email
Andrew Crotty
Jennifer Cutler
Associate Professor of Marketing and (by courtesy) Computer Science
Email
Jennifer Cutler
Nick Diakopoulos
Assistant Professor, Communication Studies and (by courtesy) Computer Science
Email
Nick Diakopoulos
Christos Dimoulas
Assistant Professor of Computer Science
Email
Christos Dimoulas
Peter Dinda
Professor of Computer Science and (by courtesy) Electrical and Computer Engineering
Director of Graduate Studies
Email
Peter Dinda
Douglas Downey
Professor of Computer Science
Email
Douglas Downey
Matthew Easterday
Assistant Professor of Learning Sciences and (by courtesy) Computer Science
Email
Matthew Easterday
Andrew Fano
McCormick Director, Kellogg-McCormick MBAi
Clinical Professor
Email
Andrew Fano
Robby Findler
Professor of Computer Science
Associate Chair
Email
Robby Findler
Ken Forbus
Walter P. Murphy Professor of Computer Science
Email
Ken Forbus
Steven Franconeri
Professor, Psychology and (by courtesy) Computer Science
Email
Steven Franconeri
Julia  Gaudio
Research Assistant Professor in Industrial Engineering and Management Sciences, and (by courtesy) Computer Science.
Email
Julia  Gaudio
Elizabeth Gerber
Professor of Mechanical Engineering and (by courtesy) Computer Science
Professor of Communication Studies
Co-Director, Center for Human Computer Interaction + Design
Email
Elizabeth Gerber
Darren Gergle
Professor, Communication Studies and (by courtesy) Computer Science
Email
Darren Gergle
Branden Ghena
Assistant Professor of Instruction
Email
Branden Ghena
Joshua Glaser
Assistant Professor of Neurology - Ken and Ruth Davee Department and (by courtesy) Computer Science
Email
Joshua Glaser
Ben  Golub
Associate Professor of Economics and (by courtesy) Computer Science
Email
Ben  Golub
Dongning Guo
Professor of Electrical and Computer Engineering and (by courtesy) Computer Science
Email
Dongning Guo
Kristian Hammond
Professor of Computer Science
Bill and Cathy Osborn Professor
Email
Kristian Hammond
Nikos Hardavellas
Associate Professor of Computer Science
Associate Professor of Electrical and Computer Engineering
Email
Nikos Hardavellas
Jason Hartline
Professor of Computer Science
Email
Jason Hartline
Michael Horn
Professor of Computer Science
Professor of Education and Social Policy
Email
Michael Horn
Ian Horswill
Associate Professor of Computer Science
Charles Deering McCormick Professor of Teaching Excellence
Email
Ian Horswill
Ãgnes  HorvÃ¡t
Assistant Professor in Communication Studies and (by courtesy) Computer Science
Email
Ãgnes  HorvÃ¡t
Huiling Hu
Assistant Professor of Instruction
Email
Huiling Hu
Jessica Hullman
Associate Professor of Computer Science
Ginni Rometty Professor
Email
Jessica Hullman
Joseph Hummel
Professor of Instruction
Email
Joseph Hummel
Maia Jacobs
Assistant Professor of Computer Science
Assistant Professor of Preventive Medicine
Lisa Wissner-Slivka and Benjamin Slivka Professor of Computer Science
Email
Maia Jacobs
Russell Joseph
Associate Professor of Electrical and Computer Engineering
Associate Professor of Computer Science
Email
Russell Joseph
Ming-Yang Kao
Professor of Computer Science
Email
Ming-Yang Kao
Aggelos Katsaggelos
Professor of Electrical and Computer Engineering and (by courtesy) Computer Science
Joseph Cummings Professor
Email
Aggelos Katsaggelos
Matthew Kay
Assistant Professor of Computer Science
Assistant Professor of Communication Studies
Email
Matthew Kay
Sam Kriegman
Assistant Professor of Computer Science
Assistant Professor of Mechanical Engineering
Assistant Professor of Chemical and Biological Engineering
Email
Sam Kriegman
Aleksandar Kuzmanovic
Professor of Computer Science
Email
Aleksandar Kuzmanovic
Annie Liang
Assistant Professor of Economics, and (by courtesy) Computer Science
Email
Annie Liang
Daniel W. Linna Jr.
Senior Lecturer in the Pritzker School of Law and Computer Science
Email
Daniel W. Linna Jr.
Han Liu
Associate Professor of Computer Science
Associate Professor of Statistics
Email
Han Liu
Duri Long
Assistant Professor of Communication Studies and (by courtesy) Computer Science
Email
Duri Long
Yuan Luo
Associate Professor, Feinberg School of Medicine and (by courtesy) Industrial Engineering & Management Sciences and Computer Science
Email
Yuan Luo
Konstantin Makarychev
Professor of Computer Science
Email
Konstantin Makarychev
Malcolm MacIver
Professor of Biomedical Engineering, Mechanical Engineering, and (by courtesy) Computer Science
Email
Malcolm MacIver
Gokhan Memik
Professor of Electrical and Computer Engineering
Professor of Computer Science
Email
Gokhan Memik
Seda Memik
Professor of Electrical and Computer Engineering
Professor of Computer Science
Email
Seda Memik
Eleanor O'Rourke
Assistant Professor of Computer Science
Assistant Professor of Education and Social Policy
Email
Eleanor O'Rourke
Bryan Pardo
Professor of Computer Science
Professor of Radio, Television and Film
Email
Bryan Pardo
Miklos Racz
Assistant Professor of Computer Science
Assistant Professor of Statistics and Data Science Starting January 1, 2023
Chris Riesbeck
Associate Professor of Computer Science
Email
Chris Riesbeck
Jennie Rogers
Associate Professor of Computer Science
Email
Jennie Rogers
Michael Rubenstein
Assistant Professor of Computer Science
Assistant Professor of Mechanical Engineering
Email
Michael Rubenstein
Sara Owsley Sood
Professor of Instruction
Chookaszian Family Teaching Professor
Associate Chair for Undergraduate Education
Email
Sara Owsley Sood
Vincent St-Amour
Associate Professor of Instruction
Email
Vincent St-Amour
V.S. Subrahmanian
Walter P. Murphy Professor of Computer Science
Faculty Fellow at the Northwestern Buffett Institute for Global Affairs
Email
V.S. Subrahmanian
Jack Tumblin
Associate Professor of Computer Science
Email
Jack Tumblin
Aravindan Vijayaraghavan
Associate Professor of Computer Science and (by courtesy) Industrial Engineering & Management Sciences
Email
Aravindan Vijayaraghavan
John Villasenor
Adjunct Professor
Email
John Villasenor
Rob Voigt
Assistant Professor of Linguistics and (by courtesy) Computer Science
Email
Rob Voigt
Xiao Wang
Assistant Professor of Computer Science
Email
Xiao Wang
Zhaoran Wang
Assistant Professor of Industrial Engineering and Management Sciences and (by courtesy) Computer Science
Uri Wilensky
Professor of Computer Science
Professor of Education and Social Policy
Lorraine Morton Professor
Email
Uri Wilensky
Zach Wood-Doughty
Assistant Professor of Instruction
Email
Zach Wood-Doughty
Marcelo Worsley
Assistant Professor of Computer Science
Assistant Professor of Education and Social Policy
Email
Marcelo Worsley
Ying Wu
Professor of Electrical and Computer Engineering and (by courtesy) Computer Science
Email
Ying Wu
Xinyu Xing
Associate Professor of Computer Science
Haoqi Zhang
Associate Professor of Computer Science
Email
Haoqi Zhang
Hai Zhou
Associate Professor of Electrical and Computer Engineering and (by courtesy) Computer Science
Email
Hai Zhou
Qi Zhu
Associate Professor of Electrical and Computer Engineering and (by courtesy) Computer Science
Email
Qi Zhu
More in this section Affiliated Faculty
Faculty of Instruction
Postdoctoral Fellows
Staff
Visiting Scholars
PhD Students
Outgoing PhDs and Postdocs 2022-2023
Adjunct Faculty
BACK TO TOP
Engineering Home
CS Department
People Faculty
Contact InfoUndergraduate Programs Sara Sood Associate Chair for Undergraduate Education Phone: 847-491-5708Email Sara Master's Degree Program Chris Riesbeck
Associate Professor Phone: 847-491-7279 Email Chris PhD Program Peter DindaProfessor Phone: 847-467-7859 Email Peter
Northwestern Seal
Computer ScienceMcCormick School of Engineering,
Northwestern University Mudd Hall2233 Tech Drive, Third Floor, Evanston, IL 60208 Phone: 847-491-3500  |  Email
View all department contact info
Undergraduate
Graduate
Research
Faculty
CS+X
News & Events
Report an Accessibility Issue
McCormick on Twitter
McCormick on Facebook
McCormick on LinkedIn
McCormick on YouTube
©
2022 Robert R. McCormick School of Engineering and Applied Science, Northwestern University
Disclaimer


Link: https://codingnomads.co/blog/what-does-a-software-engineer-do/

What does a software engineer do? | CodingNomads
Skip to content
Search for:
Career Tracks
Java Career Track
Python Career Track
Data Science Career Track
Job Search Support Program
Courses
Java Programming
Intro to JavaScript
Python Programming
APIs & Databases
Data Science + ML
SQL & Databases
Django Web Dev
Flask Web Dev
Git & GitHub
Spring Framework
Blog
Reviews
Login
Start for free
Career Tracks
Java Career Track
Python Career Track
Data Science Career Track
Job Support Program
Courses
Java Programming
Python Programming
Data Science + Machine Learning
Django Web Development
Flask Web Development
Intro to JavaScript
SQL & DatabasesFree
Python APIs & DatabasesFree
Git & GitHubFree
Spring FrameworkComing Soon
Upwork Freelancing Mastery
Blog
Reviews
Log In
Start For Free
What Does a Software Engineer Do?
What Does a Software Engineer Do?
What image comes to your mind when you think âSoftware Engineer?â
A super-genius-type who creates things out of thin air – like Bill Gates or Alan Turing? Or someone in a dark room, listening to techno music and typing furiously on the computer – like in The Matrix?
Maybe you envision a corporate-style engineer – wearing headphones and going to scrum meetings in an office. Or a freelance âdigital nomadâ engineer who codes from a cafe on the beach.
A software engineer uses computer science principles to develop software solutions that will satisfy the wants and needs of businesses and consumers. Software engineers create many types of solutions such as desktop and web applications, mobile apps, games, robots, operating systems, network systems, etc. They do so using programming languages, frameworks, databases, servers and other technologies to turn an idea into a final product.
Because software engineers work on many types of projects, they also take on varying job roles, responsibilities, and even personas – like all the images we described above.
Keep reading to learn what do software engineers do, including sample software engineer job descriptions, career paths, salaries, industries, and how to become a software engineer.
via GIPHY
Table of Contents
First, software developer vs software engineer – what gives?
What does a software engineer do – Responsibilities
A day in the life of a Software Engineer
Software engineer career paths
Software engineer salaries
Software engineer requirements
Industries that employ software engineers
What do software engineers love/hate about their jobs?
How to become a software engineer
First, software developer vs software engineer – what gives?
In the industry, the terms âsoftware developerâ and âsoftware engineerâ are used interchangeably. We will also use them interchangeably in this article. But since this is a common question, hereâs a quick explanation for what is the difference between a software developer vs. software engineer:
A software engineer is someone who applies computer science and engineering concepts to create software solutions. A software engineer understands why the code works, and the best, most efficient way to write it.
On the other hand, a software developer is the creative driving force behind making the solution come to life.
In more concrete terms, a software engineer architects software solutions by making plans and designing the system, so the software developer can build the solution with code.
There is a whole thread on Reddit on this topic, with the responses varying from:
âIt doesnât matter at all.â
To: âIn Canada you have to be licensed (i.e. have a degree which says Engineering) to have Engineer in your title.â
And our favorite: âMy acceptance letter said âSoftware Developerâ, but one day, I decided to change my job title on our website to âEngineerâ. That was like 2 years ago and nobody has noticed and/or cared.â
We agree that âengineerâ has a bit more weight to it than âdeveloper,â but for simplicityâs sake weâll use them interchangeably. So now: What do software engineers do?
ï»¿
via GIPHY
What does a software engineer do – Responsibilities
Software engineers support the product delivery process to take a project from its goals and requirements to the final product.
Here are sample responsibilities taken from job postings on Indeed.com:
Software Engineer at a Fintech company
Design, implement, test and maintain logic and components.
Design and build systems with automated instrumentation and monitoring.
Consistently improve maintainability and stability of the codebase.
Collaborate with Product & Business Operations teams to translate business requirements and build highly robust and scalable products.
Backend Web Developer at a startup
Collaborate with front-end developers to resolve API issues.
Develop and maintain secure and stateless web services.
Build reusable code and libraries for future use.
Analyze and debug issues in a complex client/server environment.
Data Engineer
Help build robust data pipelines and ETL tools.
Address and predict data performance bottlenecks.
Retrieve and aggregate data from multiple sources into a digestible and actionable format.
Identify, design, and implement internal process improvements: automating manual processes, optimizing data delivery, re-designing infrastructure for greater scalability.
A day in the life of a Software Engineer
If you thought that engineers spent all their time coding, like this cat, think again!
via GIPHY
We collected the daily routines of various software engineers from here, here and here to create this sample representation of what a software engineer does on a day-to-day basis.
Just like there is no single recipe to make spaghetti, even a âtypical dayâ in the life of software engineers always comes with new twists and interesting problems to solve.
7:30 am – Wake up
Not all software engineers wake up early. But most, especially those with families, prefer to spend early hours in the office and have the evenings to themselves. For those working from an office, arriving early also helps beat rush hour traffic!
8:30 am – Reach office and check email
Especially with todayâs global teams, there is almost always someone working on or using your product when you are asleep. And if new tasks come up, or something breaks during the night? You know about it the second you check your email.
9:00 am – Start coding
Writing code can be as creative as writing a story, and requires intense concentration to work effectively. This is why many developers wear headphones when working – to cancel out external noise and signal that you prefer not to be disturbed.
11:30 am – Daily / Weekly standup meeting
Many effective engineering teams use the Agile method of development, where teams meet regularly to discuss their tasks and requirements to keep forward momentum. These meetings last between 15-60 minutes, depending on the team size and frequency of the meetings.
12:15 pm – Hunger strikes!
Whether you work for a large corporation that offers catered lunches, or a small startup where you leave the office to grab lunch, engineers find it important to take breaks to eat and rest during the day.
1:30 pm – Back to coding, usually with coffee/ tea
This is the part where the engineer goes back to coding or solving bugs. Again, it is usually a long time before the engineer resurfaces.
4:00 pm – Collaboration meetings
Technology is constantly evolving and improving, so even when products are âcompleteâ they must be constantly refined to fit new user needs, the latest in cybersecurity, and the latest technologies. Building software with a team requires meeting with clients or teammates – something that many software engineers detest, but a necessity for getting the job done.
6:00 pm – Send emails and wrap up for the day
Usually, engineers send emails to their counterparts about what they completed that day, reply to any another email that may have come up during the day, and then close their computers to enjoy the rest of their day.
Itâs not all coding!
As you can see, a developer spends time doing many other tasks than just writing code. According to a survey conducted by Electric Cloud, developers spend up to 54% of their time on non-coding tasks.
While the exact time spent on these tasks varies based on the development phase, the graphic below depicts what software engineers do in an average week.
Image Source: Infoworld
Software engineer career paths
There are many different career paths for software engineers beyond coding jobs. As a result, the Bureau of Labor Statistics predicts that jobs for software engineers will grow by 21% in the next ten years. The predicted growth rate for all occupations comes in at only 5%.
Below weâve outlined some of the most common software engineer career paths, and what a software engineer does in these roles:
Web Developer
Web developers create websites and applications to present information and services on the web. A Front-end web developer ensures that information is readable and engaging with a good user experience. Back-end web developers ensure proper functionality, and that applications are quick to load across devices, internet connection speeds, and languages.
Mobile Developer
Mobile developers build applications for iOS and Android mobile operating systems. They ensure that the same application works seamlessly across different screen sizes, operating system versions, and platforms.
Test & Quality Assurance Engineer
Quality assurance engineers are responsible for catching bugs in the code and ensuring that the codebase is of high quality.
Systems Engineer
Systems engineers create systems that are a blend of hardware and software. They focus on larger issues in the design and creation of systems, such as requirements, reliability, performance, maintenance, and logistics.
Machine Learning Engineer / Data Scientist
Data scientists use statistics and machine learning algorithms to solve critical business problems. Their main strength lies in clearly explaining their findings so that businesses can make informed decisions.
Data Engineer
Data engineers prepare the data to be consumed by data scientists. Some of their duties include getting the data from the source, cleaning it, transforming it and storing it so that it can be efficiently accessed and used by others.
Database Administrator
Database administrators design and maintain databases. Some of their duties include troubleshooting issues with the database, recovering data, and creating access control protocols.
Project Manager
Project managers oversee a project end-to-end, from planning to procurement to the execution of a project. While not all project managers are software engineers, they benefit from having engineering knowledge and skills to effectively plan and work with engineers for project delivery. Project managers are usually the first point of contact for any issues or discrepancies in the project.
Product Manager/Owner
Product owners are responsible for having a vision of the product that needs to be built, and conveying that vision to the development team. They understand the market, the customer and the business, and why the product needs to be what it is. Once again, not all product managers/owners need to be engineers, but they can seriously benefit from these skills.
Scrum Master
A scrum master facilitates the development process for an Agile development team. Some of their duties include removing obstacles that are impeding the team’s progress, and helping the team reach consensus for what can be achieved during a specific period.
Software engineer salaries
It is no secret that software engineers are some of the highest-paid employees across the world. The Bureau of Labor Statistics puts the median salary of software engineers in the United States at $88,000 per year.
So what does a software engineer do to make so much money? Oftentimes tasks that are highly complex and specialized, as well as tasks that can impact millions of people. This is why they get paid the big bucks!
You can see the varying salaries by career path in the graphic below.
Data source: Payscale
Software engineer salaries around the world
For an idea of what software engineers around the world can expect to make on average, see the graphic below:
Image source: Daxx
Software Engineer Requirements
Obviously strong coding skills are required for the job, but what else does a software engineer do to secure a great job? Every coder must also possess certain soft skills to qualify for todayâs software engineering jobs. Weâve listed them in no particular order, and this list is by no means exhaustive. But if you feel comfortable conveying several of the attributes below, you will be in good shape to get a software engineering job:
Good communication skills
Knowledge of at least one programming language
Aptitude for logical thinking and problem solving
Grit – the ability to stay motivated in a challenging and constantly evolving environment
Understanding of the software development process
Creativity to develop software from ideas
Good analytical skills to understand usersâ needs and develop a solution for them
Culture Fit / Likeability – companies want to work with people theyâll enjoy working with
Ability to write good tests
Understanding of computers and computer systems
Youâll notice that we did not include a university degree in Computer Science or engineering-related field. Although you may see this on many software engineer job descriptions, the truth is that the demand for engineers far outpaces the number of engineers with university degrees. This causes hiring managers to value the skills you have over your university credentials – another reason why intensive software engineering training courses like CodingNomads exists!
Industries that employ software engineers
With the rise of digital services, almost every industry worldwide employs software engineers. Some examples of industries and the type of project that a software engineer may handle are listed below –
Finance:
Create a trading platform so that investment bankers at firms like Goldman Sachs can conduct their trading.
Healthcare:
Analyze patient data to provide better healthcare and create systems that increase the efficiency of the healthcare process.
Retail:
Help retail stores like Walmart or Target create and maintain their online shopping website.
Government:
Ensure that super-sensitive data remains safe and unhackable.
Human resources:
From automated resume scanners to applicant tracking systems, software engineers create many systems to ease the life of recruiters.
Energy:
Create the systems that track energy produced and consumed around the world.
Real Estate, Transportation, Science, Space Exploration and so many more!
To give you an idea of some numbers, here is a chart created by iDataLabs on the volume and distribution of companies using Python by industry.
Image source: iDataLabs
What do software engineers love/hate about their jobs?
When asking various software engineers about their favorite – and least favorite – aspects of their jobs, we got a lot of lively responses.
What do software engineers love about their jobs? â¤ï¸
Stephanie: âI love pair/mob programming, as I can be social in addition to learning a lot from others…â
Anonymous: âThe thrill of actual real people using the software I made/contributed to [which] helps them in some wayâ¦â
Toshia: âI love the culture where I work. I love being treated as an equal, respected, trusted, and heard…I love a flexible work schedule, that allows me to work from home as needed, and Iâm trusted to get my job done with no one watching my âclocked hours.â
Laura: âDesigning and implementing solutions to problems. I find it very satisfying to solve the puzzles I encounter every day.â
What do software engineers dislike about their jobs? ð
We received several anonymous responses from women about male/female discrepancies in the workplace such as, âOnly men get promoted,â and âSomething that I have [to] deal with daily is the “bro culture”, it’s just disappointing and frustrating.â
Others talked about work-life balance struggles:
âWhat I dislike about the role is there is no work life balance, you are working 12-14 hr daysâ¦â
âMost companies say they care about work life balance or inclusion but you don’t see them making efforts in that direction. For example, I was coding and the ergonomic software I had installed that reminds to blink your eyes came up and my boss went “Does that not disturb your work?”
âBad documentation is the worst! â¦but I also hate writing documentation.â ð
Youâll notice that some responses in the love category also had equal and opposite responses in the hate category. This highlights how much company culture and leadership can impact a software engineering environment.
How to become a software engineer
Most people become software engineers either by getting a university degree, attending a coding bootcamp, or learning on you own.
While a university degree is always an asset for finding work, todayâs university programs do not adequately prepare graduates for the day-to-day tasks required of professional software engineers. CodingNomadsâ Cofounder and Java Curriculum Developer Ryan Desmond agrees from his experience:
Even after receiving my Computer Science degree, I felt like I had to Google every aspect of my job. My first few months consisted of many sleepless nights trying to figure out basic engineering tasks like spinning up servers. Sleepless nights, and a lot of coffee! âRyan Desmond, CodingNomads.
University education also takes years to complete, and especially in the US, can cost tens of thousands of dollars. And given the demand for engineers, many employers place more importance on the skills you have than a university degree. These combined drawbacks of university education led to the rise of coding bootcamps as a viable option for breaking into engineering.
Coding bootcamps are intensive software engineering training programs that students complete in months. According to Course Report, the average tuition price of in-person courses in the United States $13,584, with an average program length of 15.1 weeks.
Without the overhead of a physical year-round location, CodingNomads provide a more affordable alternative to other US bootcamps, offering Java and Python training curriculum both in-person and online for a fraction of the average US price.
Although coding bootcamps can accelerate your learning (and getting a paying job!), they do still cost money.
This leads to the third most common way that people become software engineers – by learning on your own. As you probably already know, you can learn to code online with free / low cost resources like Youtube, courses like Harvard CS50, and forums like Reddit and StackOverflow. If you are self-motivated and disciplined enough, you can indeed learn to code entirely for free.
No matter which way you choose to learn to code, we always encourage starting online for free. This way, you can see if you like coding before investing (or wasting!) time and money on a course. To get started learning for free, you can preview our Java and Python online courses on our online learning platform.
What do software engineers do? Lots of things!
Software engineering is applied in endless ways – from various day-to-day responsibilities, career paths, industries, skills requirements, and even the way you learn it.
With so many avenues to explore, sometimes itâs helpful to learn what NOT to doâ¦ Keep reading to learn about what NOT to do when learning to code.
READ NEXT:
The WORST ways to learn to code
Become a Java Engineer
Become a Python Engineer
Kim Desmond 2021-06-02T15:08:11-07:00
Search
Search for:
Categories
Blog
Business
Career
Data Science / ML
Java
Job Seeking
Learn to Code
Python
Software Engineering
Travel
Tutorial
Recent
Top 5 Engineering Soft Skills for Resumes
So many stacks, so little time. 7 reasons why you should learn Java.
What Does A Data Scientist Do?
How to Learn Python: The Beginners Guide
The Best Programming Languages to Learn in 2022
CAREER TRACK PROGRAMS
Java Engineering Career Track
Python Web Dev Career Track
Data Science / ML Career Track
Upwork Freelancing Mastery
INDIVIDUAL COURSES
Java Programming
Python Programming
Data Science + ML with Python
Django Web Development
Flask Web Development
JavaScript Programming
Spring Framework
FREE COURSES
Git & GitHub
SQL + Databases
APIs + Databases with Python
COMPANY
About CodingNomads
Meet our Team
Contact us
Work with Us
Blog
Resources
Student Reviews
Online Learning Platform
CodingNomads Forum
Real Expectations
CodingNomads Blog
YouTube
Â© 2016-2022 CodingNomads LLCÂ Â Â |Â Â Â All Rights ReservedÂ Â Â |Â Â Â
[email protected] Â Â Â |Â Â Â 1.530.213.3466Â Â Â |Â Â Â  Privacy
YouTube
Instagram
Facebook
Twitter
LinkedIn
Toggle Sliding Bar Area
Start Today For Free!
Click Here to create an account on our online learning platform and start coding today for free!
Want to speak with a mentor?
Got questions? We’ve got answers! Feel free to schedule a quick 15 minute AMA with a CodingNomads instructor at a time that works best for you!Â  Click here to schedule your call
Contact Info
Phone: +1 (530) 213-3466
Email: [email protected]
Web:
https://codingnomads.co
Let’s be friends
This website uses cookies to improve your experience. By continuing to browse our site you agree to our
Cookie Policy .
Accept
Reject
Privacy & Cookies Policy
Close
Privacy Overview
This website uses cookies to improve your experience while you navigate through the website. Out of these, the cookies that are categorized as necessary are stored on your browser as they are essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may affect your browsing experience.
Necessary
Necessary
Always Enabled
Necessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.
Non-necessary
Non-necessary
Any cookies that may not be particularly necessary for the website to function and is used specifically to collect user personal data via analytics, ads, other embedded contents are termed as non-necessary cookies. It is mandatory to procure user consent prior to running these cookies on your website.
Go to Top


Link: https://engineering.stthomas.edu/about/faculty-staff/directory/

Directory |
School of Engineering | University of St. Thomas
Skip to primary content
School of Engineering Home
Admissions
Give
News & Events
Info For
Alumni
Community Partners
Current Students
Donors
International Students
Recruiters/Companies
Transfer Students
Veterans
University of St. Thomas
About Engineering at St. Thomas
Why St. Thomas
Diversity and Inclusion
Why Keen
Liberal Arts and Engineering
Leadership and Vision
Board of Governors
External Advisory Board
Faculty and Staff
Center for Engineering Education
STEPS Program (Girls Grades 6-8)
STEM Kits-Lending Library
Graduate Certificate
Engineering at the Schoenecker Center
The Undergrad Experience
Degrees and Programs
Majors and Minors
Fast Track Master's Degree (BS + MS in 5 Years)
Culture and Traditions
Activities and Opportunities
Student Research Opportunities
Study Abroad Options
Co-op and Internship Programs
Senior Design Clinic
Reverse Career Fair
Peace Engineering
Clubs and Competitions
Design Center (Lab)
Graduate Studies
The Graduate Experience
Master's Degrees
Electrical Engineering
Manufacturing Engineering
Mechanical Engineering
Regulatory Science
Systems Engineering
Technology Management
Graduate Certificates
Advanced Manufacturing
Manufacturing Systems
Medical Device Development
Power Electronics and Systems
Technology Leadership
Graduate Programs in Software
MS in Data Science
MS in Information Technology
MS in Software Engineering
Graduate Certificates
Take a Single Class
Industry & Research
Research Overview
Faculty Research
Student Research
Center for Microgrid Research
Microgrid Assets
St. Thomas Microgrid Research
Industry Partnerships
Hire our Students
Get Started
Meet Us/Visit
Prospective Undergraduate Students
Prospective Graduate Students
Information For:
International Students
Transfer Students
Veterans
Admissions and Tuition
Home
About Engineering at St. Thomas
Faculty and Staff
Directory
Home
About Engineering at St. Thomas
Faculty and Staff
Directory
About Engineering at St. Thomas
Why St. Thomas
Diversity and Inclusion
Why Keen
Liberal Arts and Engineering
Leadership and Vision
Board of Governors
External Advisory Board
Faculty and Staff
Center for Engineering Education
STEPS Program (Girls Grades 6-8)
STEM Kits-Lending Library
Graduate Certificate
Engineering at the Schoenecker Center
The Undergrad Experience
Degrees and Programs
Majors and Minors
Fast Track Master's Degree (BS + MS in 5 Years)
Culture and Traditions
Activities and Opportunities
Student Research Opportunities
Study Abroad Options
Co-op and Internship Programs
Senior Design Clinic
Reverse Career Fair
Peace Engineering
Clubs and Competitions
Design Center (Lab)
Graduate Studies
The Graduate Experience
Master's Degrees
Electrical Engineering
Manufacturing Engineering
Mechanical Engineering
Regulatory Science
Systems Engineering
Technology Management
Graduate Certificates
Advanced Manufacturing
Manufacturing Systems
Medical Device Development
Power Electronics and Systems
Technology Leadership
Graduate Programs in Software
MS in Data Science
MS in Information Technology
MS in Software Engineering
Graduate Certificates
Take a Single Class
Industry & Research
Research Overview
Faculty Research
Student Research
Center for Microgrid Research
Microgrid Assets
St. Thomas Microgrid Research
Industry Partnerships
Hire our Students
Get Started
Meet Us/Visit
Prospective Undergraduate Students
Prospective Graduate Students
Information For:
International Students
Transfer Students
Veterans
Admissions and Tuition
Info For
Alumni
Community Partners
Current Students
Donors
International Students
Recruiters/Companies
Transfer Students
Veterans
Admissions
Give
News & Events
Search Input
Favorites ()
Apply
Remove
Directory
School of Engineering2115 Summit Ave, OSS 100St. Paul Minnesota 55105 USA Land Acknowledgment
651-962-5750
Undergraduate Student Information
Graduate Student Information
Request Information on Undergraduate Programs
Request Information on Graduate Programs
University of St. Thomas
One St. Thomas
Privacy Policy
Emergency
Report a Website Problem
Student Policies
Accessibility
Copyright © . School of Engineering.


Link: https://www.rit.edu/computing/department-software-engineering

Department of Software Engineering | Golisano College of Computing and Information Sciences | RIT
Skip to main content
RIT Logo with Text
✕
Request Info
Visit
Apply
Give
Mobile main navigation
About
Overview
Leadership
Accreditation
Facilities
Student Resources
Centers and Institutes
Diversity Initiatives Office
National Council
Key Facts
News
Academics
Undergraduate Degrees
Graduate Degrees and Advanced Certificates
Ph.D. Program
Minors
Immersions
Departments and Schools
Academic Advising
Tutoring Center
Academic Support
Deanâs Lecture Series
Visit Campus
Experiential Learning
Admissions and Aid
Faculty
Research
Key Research Areas
Research News
Faculty Scholarship
Search People by Areas of Expertise
Computing and Information Sciences Ph.D.
ESL Global Cybersecurity Institute
Contact
myRIT
News
Directory
Golisano College of
Computing and Information Sciences
✕
Future Students
Current Students
Parents
Faculty and Staff
Alumni
Partners
Request Info
Visit
Apply
Give
Future Students
Current Students
Parents
Faculty and Staff
Alumni
Partners
Request Info
Visit
Apply
Give
RIT logo and full name
Golisano College of
Computing and Information Sciences
News
Directory
myRIT
About
Overview
Leadership
Accreditation
Facilities
Student Resources
Centers and Institutes
Diversity Initiatives Office
National Council
Key Facts
News
Academics
Undergraduate Degrees
Graduate Degrees and Advanced Certificates
Ph.D. Program
Minors
Immersions
Departments and Schools
Academic Advising
Tutoring Center
Academic Support
Deanâs Lecture Series
Visit Campus
Experiential Learning
Admissions and Aid
Faculty
Research
Key Research Areas
Research News
Faculty Scholarship
Search People by Areas of Expertise
Computing and Information Sciences Ph.D.
ESL Global Cybersecurity Institute
Contact
Department of Software Engineering
Department of
Software Engineering
Breadcrumb RIT / Golisano College of Computing and Information Sciences / Academics
/ Departments and Schools /Department of Software Engineering
Overview
Research
Faculty / Staff
Degree Programs
Current Students
Prospective & Incoming Students
Latest News
Alumni & Industrial Advisory Board
Facilities
Department Contact
SE Office Manager: 585-475-4921
Â
Â
IT SupportÂ
GCCIS Technical Operations
gccisit@rit.edu - Email for password resets.
Overview
The Department of Software Engineeringâs mission is the development of professionals who can produce high-quality, cutting-edge, and cost-effective software systems. The department provides a forward-thinking approach in an inclusive environment that encourages students to become pioneers in the field by developing in-depth knowledge through hands-on design of innovative products. As real-world construction of complex software systems is done by engineering teams, our curriculum focuses on team-based activities with an emphasis on collaboration and the design process. Students receive mentorship to become world-class engineers and to conduct world-class research by closely collaborating with both faculty and industry.
From classes to co-ops: experience SE at RIT
Â
Â Â
Design
Collaboration
Real-World Software
Process
97%
Approval rating for our academic advisors in student surveys
$86k
Median starting salary for our graduates, with some graduates starting at more than $100k
$5M+
In college research funding since 2017
Research
Software Engineering Research at RIT's Global Cybersecurity Institute
Â Â
Publications
MS Student Research
Faculty
Mohamed Wiem
Mkaouer
Assistant Professor
Kal
Rabb
Lecturer
Drew
Saur
Adjunct Faculty
View Department Directory
Staff
Marie
Barreto
Software Engineering Office Manager
Ibrahim
Mujhid
Software Developer
Megan
Lehman
Academic Advisor
View Department Directory
Undergraduate Programs
As software becomes ever more common in everything from airplanes to appliances, there is an increasing demand for professionals who can develop high-quality, cost-effective software systems. Students learn principles and techniques for the construction of complex and evolving software systems as well as issues affecting software architecture, design, and implementation. Additional topics include project management, planning, quality assurance, and product maintenance.
Software Engineering BS
(Accelerated dual degree available)
A software development degree that encompasses technical issues affecting software architecture, design, and implementation as well as process issues that address project management, planning, quality assurance, and product maintenance.
Learn more about the Software Engineering BS program
Graduate Programs
The Master of Science in software engineering or data science assures that graduates possess both breadth and depth of knowledge of their program's content. Special topics courses and electives provide students with the opportunity to match their graduate education with their professional goals, from pursuing groundbreaking researchÂ to developing game-changing products.
Data Science MS
Demand is high for professionals skilled in both analytics and computing. Enhance your skill set by learning to manage large-scale data sets in this data science master's.
Learn more about the Data Science MS program
Software Engineering MS
Gain hands-on experience through team-based and individual projects in this master's in software engineering, all while you further your understanding of the development and implementation of modern software systems.
Learn more about the Software Engineering MS program
Minors and Immersions
Software Engineering Minor
Students in disciplines with a heavy reliance on software applications may be interested in pursuing a minor in software engineering. The minor provides a broad view of the software engineering landscape including introductory material and fundamentals in design and process. Students deepen their software design skills and learn techniques for working on a productive software engineering team by choosing electives in design or process to gain a deeper understanding of one of these areas, or they may choose to balance their courses for a broad view of both topics.
Learn more about the Software Engineering Minor program
Current Students
Advising Resources
Undergraduate Resources
Graduate Resources
BS/MS Student Resources
Student Organizations
Co-Op ProgramÂ
Senior ProjectsÂ
Student Employment
Change of ProgramÂ Â
Flowcharts - Undergraduate Curriculum
Prospective & Incoming Students
Incoming Students
Welcome to RIT and the Department of Software Engineering (SE) in the Golisano College of Computing & Information Sciences!Â Here is where all incoming undergraduate and transfer students can find SE Academic Day information, Math Placement exam and FAQS.
View Information >>>Â
Why SE?
RIT Software Engineering was First in the U.S.Â
Weâre not new at this. Our program wasÂ the first undergraduate software engineering program in the U.S., and many programs around the country are based on our model. Since welcoming our first incoming class in 1996, we have worked hard to ensureÂ our curriculum is comprehensive and cutting edge. We have graduated over 600 software engineering students. Our program is in a software engineering department which means all of our work focuses on the best education for the next generation of software engineers.
Watch this video to learn more! Â
Top 10 Reasons to Choose Software Engineering at RIT:
1. Co-op: Real-world Work Experience
Students and employers agree âÂ the co-op experience is invaluable. You will enter the workforce with three terms of work experience - and have the amazing resume to prove it.Â
âNow that I've had a co-op experience, I feel more confident in my skills and abilities. I will take what Iâve learned and apply it to the rest of my courses at RIT.âElizabeth, 3rd year
Learn more about Co-op & Careers at RIT
2. Friends and fun with Society of Software Engineers (SSE)
As a member of the SSE student club, itâs easy to become involved in daily life in the department. Founded by students, for students,Â SSE is a lively social hub, providing everything from lasting friendships to homework help to professional networking.
Learn more about SSE
3. Prove yourself through your Senior Project
For Senior Project, youâll be assigned to a small team of students toÂ solve challenging, real-world software issuesÂ for commercial, non-profit, and RIT organizations. Youâll test your mettle while applying everything youâve learned in courses and on co-op.
4.Â Tap in to our extensive alumni network
As the saying goes,Â itâs not what you know, itâs who you know. As an SE student, youâll have a direct link to alumni located at hundreds of top companies across the country, such as Microsoft, IBM, EA Games, Fidelity Investments, Lockheed Martin, Boeing and Oracle, to name a few!
5. Excellent reputation with employers
Employers trust the quality, skills and professionalism which our students are known for, and it shows. Graduating students have aÂ placement rate over 90%, and many students receive multiple job offers.
Recruiters from companies like Microsoft and United Technologies Aerospace Systems visit us frequently. They hold info sessions targeted at SE students and members of SSE, collect resumes and schedule interviews on the spot!
6. Learn in-demand skills from award-winning faculty
Software Engineering isÂ more than just coding. Our curriculum covers the key topics that are in demand in industry, including software design, process, architectures and testing.
We are a friendly department, boasting small class-size and an âopen-doorâ policy. Youâll have the unique opportunity to get to knowÂ faculty members, and be involved in special projects and research.
View our curriculum Flow ChartÂ
7. Support from top-rated academic advisors
College can be overwhelming, but your academic advisor will help you sort through options, overcome hurdles and set goals. In a recent survey,Â students gave our advisors a 97% approval rating. Students overwhelmingly agreed that our advisors are approachable, accurate, clear and knowledgeable.
"It's easy to make appointments, it's easy to get answers to questions via email (and prompt!), and the staff in the office is very knowledgeable." -current SE student
Learn more about our Academic Advising services
8. Excellent facilities
Our facilities support our teaching philosophy. We provide interactive, team-based learning inÂ flexible, well-equipped lab space.
Learn more about our Facilities
9. Wide range of opportunities and great salary
As a software engineering major, you will have your pick of exciting opportunities in a range of industries -Â financial services, computer gaming, health care, aerospace and more...Â anywhere software is used!
The median startingÂ salary for our graduatesÂ is $86,000Â with some graduates starting at over $100,000.
Learn more from the US Dept of Labor Statistics
10.Â Possibility of graduate studies
Â We offer BS/MS degrees leading from a Bachelor of Science in Software Engineering to a Master of ScienceÂ inÂ Software Engineering, Computer Science, or Computing Security. We are also working on new accelerated programs in other degree areas.
Learn more about our BS/MS programs
Change of Program
If you are looking to switch into the Software EngineeringÂ program, please fill out our interest form. We will have 1-2 SE program overview sessions each semester for students looking to come into the SE program from another program at RIT. This is the first step in the change of program process, and will allow you to learn about SE, meet faculty, and chat with our advisors.Â Change of Program Into SE Information Sheet.
If you are looking to switch out of the Software EngineeringÂ program, please visit with yourÂ academic advisorÂ to discuss future plans.
Latest News
November 2, 2022
Women get fewer chances to speak on CNN, Fox News and MSNBC, according to an AI-powered, large-scale analysis of interruptions
Essay by Ashique KhudaBukhsh, assistant professor of software engineering, published byÂ The Conversation.
November 2, 2022
Men get MORE airtime than women: AI analysis of thousands of segments on CNN, Fox News and MSNBC shows females were given 10% less of a chance to speak - and were more frequently interrupted
Daily Mail UK reports on research from Ashique Khudabukhsh, assistant professor of software engineering.
October 22, 2022
For Trumpâs Backers in Congress, âDevil Termsâ Help Rally Voters
Research from Ashique KhudaBukhsh, assistant professor of software engineering, was highlighted by The New York Times in a story that used natural language processing software to study political polarization.
More Department News
Alumni & Industrial Advisory Board
Are you an SE alum that wants toÂ stay involved? Here's how:
Join us onÂ  Facebook Â andÂ  LinkedIn .
Sponsor aÂ  Senior Project .
Recruit throughÂ  Society of Software Engineers Â -Â  email the SE department Â for more information.
Attend alumni events. Watch theÂ  RITÂ alumni page Â for details.
Keep in touch and let us know what you are up to!
View the department directory Â for contact information. You can also take a look at what
research projects
faculty are involved in!
Our Industrial Advisory Board (IAB) consists of professional software engineers from a range of companies. The board helps us stay current with industry trends by offering insight on everything from curriculum to teaching methods. IAB plays an integral role in helping us maintain a balanced, vibrant department. Please find a list of our current IAB members here.Â
Facilities
The department provides a variety of facilities where students collaborate on projects, polish their skills, and consult with faculty. Outfitted with the latest hardware and software technology, our facilities reflect our commitment to teamwork, interactive learning, and professional education.
The departmentâs facilities include three student instructional studio labs, a specialized embedded systems lab, and a collaboration lab. In addition, freshmen are encouraged to take advantage of the departmentâs mentoring lab. Staffed by advanced software engineering students, this lab offers new students an environment where they can learn from those who have successfully fulfilled most of the major's academic requirements.
Students enrolled in software engineering courses also can use any of the departmentâs eleven team rooms. Equipped with a computer and projector, network connections, a meeting table, seating for six, and generous whiteboard space, these rooms support the departmentâs commitment to teamwork, both inside and outside the classroom.
Projects Lab
Student Team Rooms
Laboratory for Environmental Computing and Decision Making
View More Facilities
Address and Phone
92 Lomb Memorial Drive
Rochester, NY 14623-5608
585-475-7203
Site Social Media
Sign up for our newsletter
Footer Main navigation
About
Overview
Leadership
Accreditation
Facilities
Student Resources
Centers and Institutes
Diversity Initiatives Office
National Council
Key Facts
News
Academics
Undergraduate Degrees
Graduate Degrees and Advanced Certificates
Ph.D. Program
Minors
Immersions
Departments and Schools
Academic Advising
Tutoring Center
Academic Support
Deanâs Lecture Series
Visit Campus
Experiential Learning
Admissions and Aid
Faculty
Research
Key Research Areas
Research News
Faculty Scholarship
Search People by Areas of Expertise
Computing and Information Sciences Ph.D.
ESL Global Cybersecurity Institute
Contact
RIT logo and full name (footer)
Address and Phone
One Lomb Memorial Drive
Rochester, NY 14623
585-475-2411
Sign up for RIT news
Website feedback
About
Academics
Experiential Learning
Admissions and Aid
Research
RIT Life
Athletics
News
Copyright © Rochester Institute of Technology. All Rights Reserved.
Land Acknowledgment.
Disclaimer.
Copyright Infringement.
Privacy Statement.
Nondiscrimination.
Emergency Information.
Search RIT
Close  X


Link: https://distantjob.com/blog/software-developer-software-engineer/

Software Developer vs Software Engineer: The Difference You Need to Know - DistantJob - Remote Recruitment Agency
Hire Now
Remote Tech Jobs
Blog
Our Podcast
About Us
Contact Us
Hire Now
Remote Tech Jobs
Blog
Our Podcast
About Us
Contact Us
Evaluating Remote Tech Candidates
Software Developer vs Software Engineer: The Difference You Need to Know
Jori Hamilton
Published July 4, 2022
-
3 min. to read
Are you in a position to recruit a software developer for your new project? Or do you need a software engineer? Without a technical background, it is quite challenging to identify the difference between software engineers vs software developers.
These positions are similar but are responsible for very different parts of software creation and while there is some overlap, they have different responsibilities, focuses, and skills.
The core difference between software developer and software engineer is the scale at which their work affects a project. Engineers are concerned with the overall structure, developing a high-level view of the project, and defining the specifics of how each piece fits together. Software developers, on the other hand, are focused on building individual portions or processes within a program and are responsible for making sure that they fit together. In short, engineers work on a macro-level view of the project, while developers work on a micro-level.
While both are necessary and have some requisite overlap, they are distinctly different.
Software Engineer: Overview
Software engineers are involved in the early stages of the software development life cycle (SDLC), where the purpose and scope of a project are defined. They also build prototypes, define parameters, and determine the technical needs of the project they are working on. This may include determining how many developers are needed for a given project, setting budgets, and working with project managers to delegate workloads to different groups.
Software Developer: Overview
Where engineers are most heavily involved in the process closer to the beginning of the SDLC, software developers are in the thick of it, building, testing, and iterating the program. Each individual has less responsibility than the project engineers and, in larger companies, will work on a specific portion of the program.
In video game development, for example, developers may be hired for a hyper-specific skillset such as character movement. In the meantime, another team focuses on programming, building environments, and character styles. These teams will still report to engineers and update progress, but their overall scope of responsibility and focus is much narrower.
Software Developer vs. Software Engineer
One of the reasons that people confuse software engineers vs software developers is because their jobs can have considerable overlap. This comes from the necessary skills and knowledge software engineers require, and the fact that many software developers become engineers over the course of their careers.
They share similar work environments, working both onsite and remotely, and by nature work for the same types of companies.
Whatâs the difference?
The main difference is in the scope of their work and the level of responsibility that individual developers and engineers have.
A software engineer models software that can be built to specification by designing and building the structures necessary for software development. To do so, they must be able to understand the individual components of a design and their functional connections, as well as understand the extension of their developersâ abilities and software functionality.
A software developer will often be given a portion of a project to complete and will report to the engineer or a head developer who will interface with the engineer.
In small companies and startups, smaller teams can mean that an engineer will also take on developer responsibilities and vice-versa. This is the main reason why both roles often get confused.
Roles, Responsibilities, and Practices of Software Developers
Software Developers are responsible for programming the software and its systems, as designed by an Engineer. As such, their main responsibilities are:
Programming : software developers should be knowledgeable of algorithms and programming structures that are commonly used in the field the software theyâre developing is aimed at. This helps develop code in accordance with best practices that can be used and easily integrated with the code authored by the rest of the team. Code versioning:
Developers should be comfortable and proficient with a code versioning tool of the teamâs choice. Itâs a standard practice that helps organize work, roll back any undesired changes with minimal effort, or develop parts of the code independently from the rest of the team to minimize disruption. Use IDEs and their tools:
IDEs nowadays are far from being a simple programs, and provide many tools that help improve and streamline a developerâs job, such as debugging, refactoring, and providing useful code statistics. Savvy software developers should know how to use these tools to their advantage and deliver the best code possible.
Roles, Responsibilities, and Practices of Software Engineers
Software Engineers are responsible for a more broad view of a software development project. As such, they have the following responsibilities:
Design and Problem-Solving : An engineer is tasked first and foremost with designing the various systems and components a software needs to function. Software is developed to solve a problem, and it can only do so with a thoughtful and coherent design. Learn Programming : Much like a developer, an engineer should also know algorithms and programming structures, but with a different goal in mind. Unlike the developer, they donât put that knowledge into actual practice, but rather learn it so they can design software in a way that is then doable and achievable by the projectâs programmers. Communicate with the team : While a developer can be left to their own devices once their tasks have been set, an engineer needs to be in constant communication with the team to make sure they understand the design and develop it according to specifications.
Engineers have more responsibility in a software development project, so itâs important you have capable people filling the role. When hiring, make specific questions to evaluate a candidateâs software engineer skills reliably.
Comparison Chart
Parameter
Software Engineer
Software Developer Main FunctionDesign the softwareâs systems and componentsProgram the softwareâs systems and componentsProject ScopeHas a constant overview of the whole projectWorks on a local scale and in specific systems, but can have an overview of the project when needing to interface with other systemsMain OutputDocumentationCodeDesign and Problem-SolvingProject-wide, at a high levelSystem-wide, at a low levelProgrammingRequires knowledgeRequires both knowledge and applicationTeam InteractionWorks and communicates the design with the whole team constantlyCan communicate with team members directly affected by their work, but will otherwise usually work by themselvesSalary$110k /year on average$100k /year on average
Conclusion
The organisational structure of any given company will vary, but in general, some elements can be counted on.
Software developers may work on a team that falls under the umbrella of the engineering department or have their own separate department. Developers report to project managers and engineers as the progress of their work dictates when the product will be ready. In this way, software developers are the most important component in software creation.
Engineers are a must for any type of software creation. Whether they are a developer who is expanding their skills and beginning to work at a higher level, or a dedicated engineer, without a person to lead the creation of purpose, design, and deliberation, there is no program to build. Engineers interface with project managers, software developers, managers, and marketing teams. They keep other departments updated on timelines, help delineate work, and communicate expectations. In this way, software could not be created without engineers.
There may be overlap in the responsibilities of each of these positions, but ultimately they are both necessary for building new and improved programs.
If youâre looking to fill one of these positions, whether itâs a software developer or a software engineer, you can check this article on top of interview questions if youâre hiring remotely or count on us to do the work for you. At DistantJob, weâve been helping companies find and hire the best software developers and IT talent in a blink of an eye.Â
1. Is a software engineer the same as a software developer?
No. A software engineer can (and usually will) have a developer background, but they also have a much wider view of the project and define its architecture and thus more responsibilities. A developer is tasked by an engineer with building the systems that make part of the whole software.
2. Which is better: software developer or software engineer?
Ultimately, engineers and developers have distinctly different sets of skills, levels of responsibility, and scopes of focus. None is strictly better, as both are necessary for a project to be completed successfully.With software as a service (SaaS) becoming key to succeeding in every industry from fleet management to small businesses, skilled developers and engineers are necessary for keeping up with demand. Like an architect and a carpenter, both are paramount to the construction of new, exciting solutions and technologies.Â
3. Who is paid more: software engineer or software developer?
Due to their increased responsibilities, software engineers earn slightly more than developers (values taken from Talent.comâs job salary search):Software Developers earn on average $100k /yearSoftware Engineers earn on average $110k /yearSenior Software Engineers earn on average about $127k /yearAll these values will vary depending on the location of the company and if youâre hiring remotely, the location of the person as well.
Subscribe to our newsletter and get exclusive content and bloopers
or Share this post
Table of contents
Software Engineer: Overview
Software Developer: Overview
Software Developer vs. Software Engineer
Roles, Responsibilities, and Practices of Software Developers
Roles, Responsibilities, and Practices of Software Engineers
Frequently Asked Questions
Comparison Chart
Software Developer vs Software Engineer: Which One to Hire?
Share
Related Articles
Published October 26, 2022
Database Architect vs. Database Administrator: What’s The Difference?
Whether remote or not, companies need their data to be safe and organized to perform successfully, which is why the role of a database architect […]
Published October 4, 2022
8 Skills to Look for in a Python Developer
Hiring a talented Python developer is all about having a strategy and looking in the right places.  We should know, weâve been recruiting developers from […]
Published September 12, 2022
Pair Programming Interview: How To Do It Right
Hiring good developers requires using the right tools during the recruitment and interviewing process. It’s important to test out your candidates’ coding skills as well […]
Are you our next superstar remote developer?
You live, breathe and eat code, and have fun figuring out how to solve problems. And you love living in South America or Eastern Europe. But you donât feel as fulfilled as your friends in North America.
I NEED A JOB
DistantJob: The Worldâs First Remote Placement AgencyÂ®
Connect
Stay in Touch
Join our newsletter for the latest news and articles, twice a month!
<
By entering your email, you agree to our
privacy policy .
Company
About Us
HR Services
Hire Developers
Remote Job Openings
Contact Us
Resources
The Podcast
Blog
How To Hire
NET Developer
Xamarin Developer
PHP Developer
WordPress Developer
ReactJS Developer
Clojure Developer
Remote Developer
Backend Developer
Developers for startups
Â© 2022
DistantJob
All Rights Reserved.
Privacy Policy
Ask About our HR Services
By continuing to browse the site you are agreeing to our use of cookies.
I Understand


Link: https://engineering.purdue.edu/ECE/People/Faculty

Faculty Directory - Elmore Family School of Electrical and Computer Engineering - Purdue University
Faculty Directory - Elmore Family School of Electrical and Computer Engineering - Purdue University
Skip to main content
Quick Links
Purdue
Engineering
College of Engineering
Academic Units
Aeronautics and Astronautics
Agricultural and Biological Engineering
Biomedical Engineering
Chemical Engineering
Civil Engineering
Construction Engineering and Management
Electrical and Computer Engineering
Engineering Education
Environmental and Ecological Engineering
Industrial Engineering
Materials Engineering
Mechanical Engineering
Nuclear Engineering
Programs
College of Engineering Honors Program
First-Year Engineering Program
Office of Future Engineers
EPICS
Global Engineering Programs and Partnerships
Indiana Space Grant Consortium
Minority Engineering Program
Professional Practice (Co-Op) Program
Women in Engineering Program
Innovation and Leadership Studies
Vertically Integrated Projects
Semiconductors @ Purdue
Rare Earth Elements
Instagram
YouTube
Facebook
Twitter
LinkedIn
Medium
Podcast
Search
Loading
Elmore Family School of Electrical and Computer Engineering
Menu
Home
Covid-19
Covid-19
Info for Graduate Students
Info for Undergraduate Students
ECE Standard Operation Procedures
Protect Purdue
About Us
About Us
Welcome
Highlights
History
Contact Us
Safety
ECE Mentors
Wellness
News & Events
News
Media
Events
Wavelinks Magazine
Newsletter
Our People
Our People
Directory
Faculty
Administrative Offices
Postdoctoral Professionals
External Faculty Awards and Honors
Faculty Teaching Awards
Faculty Bookshelf
Join Our Faculty
Join Our Staff
Faculty & Staff Resources
Academics
Undergraduate Students
Undergraduate Program
4+1 BS/MS Program
Future Students
Graduate Students
Graduate Program
4+1 BS/MS Program
Master's Program: Project Track
Master's Program: Thesis Track
Master's Program: Online Track
PhD Program
Research
Research
Overview
Research Areas
Centers
Startups
Patents
Labs & Facilities
Faculty Bookshelf
Technical Reports
Partners
Partners
Overview
ECE Boilermaker Circuit
InternX
Current Partners
Alumni
Alumni & Friends
Overview
Outstanding Electrical & Computer Engineers
Distinguished Engineering Alumni/Alumnae
Stories of Success
Alumni Wall of Fame
Advisory Board
Young Alumni Board
Partnerships
Give to ECE
Giving
Giving
Industry
Alumni
Give now
Protect Purdue
Intranet
Intranet
Home
Committees
Schools
Programs
Faculty Hiring
Research
Purdue
Engineering
ECE
Our People
Faculty
Faculty Directory
Faculty
Courtesy Faculty
Adjunct Faculty
Visiting Faculty
Retired Faculty
Faculty
Jump to:
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
A
Hadiseh Alaeian
Assistant Professor of ECE and Physics and Astronomy
halaeian@purdue.edu
BRK 1291
Muhammad Ashraful Alam
Jai N. Gupta Professor of Electrical and Computer Engineering
alam@purdue.edu
49- 45988
WANG 3051
Dionysios Aliprantis
Professor of Electrical and Computer Engineering
dionysios@purdue.edu
49- 44434
WANG 2055
Jan P. Allebach
Hewlett-Packard Distinguished Professor of Electrical and Computer Engineering
allebach@ecn.purdue.edu
49- 43535
BHEE 145
Joerg Appenzeller
Barry M. and Patricia L. Epstein Professor of Electrical and Computer Engineering
appenzeller@purdue.edu
49- 41076
BRK 1027C
B
Saurabh Bagchi
Professor of Electrical and Computer Engineering
sbagchi@purdue.edu
49- 41741
BHEE 325
Mark R. Bell
Professor of Electrical and Computer Engineering
mrb@ecn.purdue.edu
49- 46412
MSEE 336
Peter Bermel
Elmore Associate Professor of Electrical and Computer Engineering
pbermel@purdue.edu
49- 67879
BRK 2270
Sunil A. Bhave
Professor of Electrical and Computer Engineering
bhave@purdue.edu
49- 60547
BRK 2021
Alexandra Boltasseva
Ron and Dotty Garvin Tonjes Professor of ECE
aeb@purdue.edu
49- 40301
BRK 1295
Charles A. Bouman
Showalter Professor of ECE and Biomedical Engineering
bouman@purdue.edu
49- 40340
MSEE 320
Mireille "Mimi" Boutin
Associate Professor of ECE
mboutin@purdue.edu
49- 40728
MSEE 252
Christopher Brinton
Assistant Professor of Electrical and Computer Engineering
cgb@purdue.edu
49- 43538
MSEE 342
Aaron Brovont
Research Assistant Professor
brovont@purdue.edu
WANG 2085
C
Michael A. Capano
Assistant Professor of Electrical and Computer Engineering
capano@ecn.purdue.edu
49- 43563
BRK 2291
Stanley Chan
Elmore Associate Professor of Electrical and Computer Engineering
stanchan@purdue.edu
49- 60230
MSEE 338
Yong Chen
Professor of ECE and Physics
yongchen@purdue.edu
49- 40947
BRK 1023 and PHYS 74
Zhihong Chen
Professor of ECE
zhchen@purdue.edu
49- 40772
BRK 1299
Weng C. Chew
Distinguished Professor of ECE
wcchew@purdue.edu
49- 45402
WANG 3053
Mung Chiang
Roscoe H. George Distinguished Professor of Electrical and Computer Engineering/Purdue University President-Elect and Executive Vice President of Purdue University for Strategic Initiatives
chiang@purdue.edu
49- 45346
ARMS 3000
Mary Comer
Associate Professor of ECE
comerm@purdue.edu
49- 43486
MSEE 332
Meng Cui
Associate Professor of ECE and Biology
mengcui@purdue.edu
49- 61332
BBC
D
Supriyo Datta
Thomas Duncan Distinguished Professor of Electrical and Computer Engineering
datta@ecn.purdue.edu
49- 43511
WANG 3047
James Davis
Assistant Professor of Electrical and Computer Engineering
davisjam@purdue.edu
49- 43133
BHEE 334D
Edward J. Delp
Charles William Harrison Distinguished Professor of ECE
ace@ecn.purdue.edu
49- 41740
MSEE 368
E
Aly El Gamal
Adjunct Professor of ECE
elgamala@purdue.edu
49- 62726
MSEE 350
Daniel S. Elliott
Professor of Electrical and Computer Engineering and Physics
elliottd@ecn.purdue.edu
49- 43442
MSEE 258
Okan K. Ersoy
Professor of ECE
ersoy@ecn.purdue.edu
49- 46162
MSEE 346
G
Jing Gao
Associate Professor of Electrical and Computer Engineering
jinggao@purdue.edu
BHEE 334A
Saul B. Gelfand
Professor of ECE
gelfand@ecn.purdue.edu
49- 43439
MSEE 352
Arif Ghafoor
Professor of ECE
ghafoor@ecn.purdue.edu
49- 40638
MSEE 236
Mahsa Ghasemi
Assistant Professor of Electrical and Computer Engineering
mahsa@purdue.edu
MSEE 238
Robert L. Givan
Associate Professor of ECE
givan@purdue.edu
49- 49068
BHEE 313C
Luis Gomez
Assistant Professor of ECE
ljgomez@purdue.edu
WANG 3059
Qi Guo
Assistant Professor of Electrical and Computer Engineering
guo675@purdue.edu
49- 60958
WANG 2065
Sumeet Gupta
Elmore Associate Professor of Electrical and Computer Engineering
guptask@purdue.edu
49- 66371
MSEE 218
Vijay Gupta
Professor of ECE
gupta869@purdue.edu
49- 40728
MSEE 252
H
Abolfazl Hashemi
Assistant Professor of Electrical and Computer Engineering
abolfazl@purdue.edu
49- 66040
MSEE 344
Mahdi Hosseini
Assistant Professor of ECE
mh@purdue.edu
49- 67423
BRK 2274
Jianghai Hu
Professor of ECE
jianghai@purdue.edu
49- 62395
MSEE 220
Y. Charlie Hu
Michael And Katherine Birck Professor of ECE
ychu@purdue.edu
49- 49143
MSEE 232
Muhammad Hussain
Professor of Electrical and Computer Engineering
mmhece@purdue.edu
MJIS
I
David I. Inouye
Assistant Professor of ECE
dinouye@purdue.edu
49- 60238
BHEE 332
J
Zubin Jacob
Elmore Associate Professor of Electrical and Computer Engineering
zjacob@purdue.edu
49- 43514
BRK 2293
Leah H. Jamieson
Ransburg Distinguished Professor of ECE/Dean Emerita of Engineering
lhj@purdue.edu
49- 43653
MSEE 242
David B. Janes
Professor of ECE
janes@ecn.purdue.edu
49- 49263
BRK 2268
Brent Jesiek
Professor of ECE and Engineering Education
bjesiek@purdue.edu
49- 61531
ARMS 1313
Dan Jiao
Synopsys Professor of ECE, Associate Head of Resource Planning and Management
djiao@purdue.edu
49- 45240
WANG 3049
Dr. Mark Johnson
Senior Lecturer
mcjohnso@ecn.purdue.edu
49- 40636
BHEE 248
Byunghoo Jung
Professor of ECE
jungb@purdue.edu
49- 42866
WANG 2053
K
Avinash C. Kak
Professor of ECE
kak@ecn.purdue.edu
49- 43551
BHEE 340
Alexander Kildishev
Professor of Electrical and Computer Engineering
kildishev@purdue.edu
49- 63196
BRK 1264
Kwang Taik Kim
Research Assistant Professor of ECE
kimkt@purdue.edu
49- 64539
MSEE 260
Gerhard Klimeck
Professor of ECE/Reilly Director of the c-PRIMED/NCN
gekco@purdue.edu
49- 49212
DLR 103 - NCN suite
Murat Kocaoglu
Assistant Professor of Electrical and Computer Engineering
mkocaoglu@purdue.edu
MSEE 362
Cheng-Kok Koh
Professor of ECE
chengkok@ecn.purdue.edu
49- 63683
MSEE 254
James V. Krogmeier
Professor
of ECE
jvk@ecn.purdue.edu
49- 43530
MSEE 326
Tillmann Kubis
Katherine Ngai Pesic & Silvaco Associate Professor of Electrical and Computer Engineering
tkubis@purdue.edu
49- 67312
FLEX 3041A
Milind Kulkarni
Professor of ECE & Associate Head of Teaching and Learning
milind@purdue.edu
49- 41742
BHEE 324B
L
C. S. George Lee
Professor of ECE
csglee@purdue.edu
49- 41384
MSEE 256
James S. Lehnert
Professor of ECE
lehnert@ecn.purdue.edu
49- 42362
MSEE 240
Husheng Li
Professor of Aeronautics and Astronautics and Electrical and Computer Engineering
husheng@purdue.edu
ARMS 3215
Junfei Li
Senior Lecturer
junfei@purdue.edu
49- 44639
BHEE 266
Tongcang Li
Associate Professor of Electrical and Computer Engineering and Physics
tcli@purdue.edu
49- 60072
BRK 1289 and PHYS 52
Xiaojun Lin
Professor of Electrical and Computer Engineering
linx@purdue.edu
49- 40626
MSEE 340
David J. Love
Nick Trbovich Professor of Electrical and Computer Engineering
djlove@purdue.edu
49- 66797
MSEE 360
Yung-Hsiang Lu
Professor of Electrical and Computer Engineering
yunglu@ecn.purdue.edu
49- 42668
MSEE 222
Mark S. Lundstrom
Interim Dean of the College of Engineering and the Don and Carol Scifres Distinguished Professor of Electrical and Computer Engineering
lundstro@ecn.purdue.edu
49- 43515
WANG 3055
M
Aravind Machiry
Assistant Professor of ECE
amachiry@purdue.edu
BHEE 333
Joseph Makin
Assistant Professor of ECE
jgmakin@purdue.edu
49- 45916
BHEE 330
Anuran Makur
Assistant Professor of Computer Science and Electrical and Computer Engineering
amakur@purdue.edu
49- 60895
LWSN 2116J
Michael Manfra
Bill and Dee O'Brien Distinguished Professor of Physics & Astronomy, Professor of Materials Engineering and ECE, Scientific Director, Microsoft Quantum Lab West Lafayette
mmanfra@purdue.edu
49- 67703
BRK 2050
Theresa Mayer
Executive Vice President for Research and Partnerships/Professor of ECE
tsmayer@purdue.edu
49- 46209
HOVD 330
Jason D. McKinney
Associate Professor of Electrical and Computer Engineering
mckinnjd@purdue.edu
MSEE 270
Michael R. Melloch
Professor of ECE
melloch@ecn.purdue.edu
49- 43528
BHEE 318
Samuel P. Midkiff
Professor of ECE
smidkiff@ecn.purdue.edu
49- 43440
BHEE 310
Saeed Mohammadi
Professor of Electrical and Computer Engineering
saeedm@purdue.edu
49- 43557
BRK 2264
Dallas Morisette
Research Assistant Professor of ECE
morisett@purdue.edu
49- 62749
BRK 1272
N
Evgenii Narimanov
Elmore Professor of ECE
evgenii@purdue.edu
49- 41622
Birck 1293
Ryan Newton
Associate Professor of Electrical and Computer Engineering and Computer Science
rrnewton@purdue.edu
P
Philip E. Pare
Assistant Professor of ECE
philpare@purdue.edu
BHEE 334C
Brooke Parks
Senior Lecturer
brookeparks@purdue.edu
49- 60410
BHEE 250
Steven D. Pekarek
Dr. Edmund O. Schweitzer, III Professor of ECE
spekarek@ecn.purdue.edu
49- 43434
WANG 2059
Dimitrios Peroulis
Michael and Katherine Birck Head of Electrical and Computer EngineeringReilly Professor of Electrical and Computer Engineering
dperouli@purdue.edu
49- 43539
MSEE 150C
Irith Pomeranz
Cadence Professor of ECE
pomeranz@ecn.purdue.edu
49- 43357
MSEE 234
Q
Minghao Qi
Professor of ECE
mqi@purdue.edu
49- 43646
BRK 1297
Junjie Qin
Assistant Professor of ECE
jq@purdue.edu
WANG 2051
Qiang Qiu
Assistant Professor of ECE
qqiu@purdue.edu
MSEE 358
Xiaokang Qiu
Assistant Professor of ECE
xkqiu@purdue.edu
49- 49987
BHEE 334C
Alexander Quinn
Assistant Professor of ECE
aq@purdue.edu
49- 43483
MSEE 262
R
Anand Raghunathan
Silicon Valley Professor Professor of ECE
raghunathan@purdue.edu
49- 43470
MSEE 348
Vijay Raghunathan
Professor of ECE, Associate Head of Graduate and Professional Programs
vr@purdue.edu
49- 47392
MSEE 224
Karthik Ramani
Donald W. Feddersen Distinguished Professor in Mechanical Engineering and Professor of ECE
ramani@purdue.edu
49- 45725
ME 3176
Sanjay Rao
Professor of Electrical and Computer Engineering
sanjay@purdue.edu
49- 43399
BHEE 322A
Amy Reibman
Elmore Professor of ECE, Associate Head of Faculty Mentorship and Recognition
reibman@purdue.edu
49- 60405
MSEE 356
Timothy Rogers
Associate Professor of Electrical and Computer Engineering
timrogers@purdue.edu
49- 41743
BHEE 326A
Thomas Roth
Assistant Professor of ECE
rothte@purdue.edu
49- 65308
WANG 3063
Kaushik Roy
Edward G. Tiedemann Jr. Distinguished Professor of ECE
kaushik@ecn.purdue.edu
49- 42361
MSEE 230
S
Shreyas Sen
Elmore Associate Professor of Electrical and Computer Engineering
shreyas@purdue.edu
49- 66520
MSEE 226
Ali Shakouri
Professor of Electrical and Computer Engineering
shakouri@purdue.edu
49- 66105
BRK 1027C
Vladimir M. Shalaev
Bob and Anne Burnett Distinguished Professor of ECE
shalaev@ecn.purdue.edu
49- 49855
BRK 2295
Vishal Shrivastav
Assistant Professor of Electrical and Computer Engineering
vshriva@purdue.edu
BHEE 334B
Jeffrey M. Siskind
Professor of Electrical and Computer Engineering
qobi@ecn.purdue.edu
49- 63197
BHEE 313E
Lu Su
Associate Professor of Electrical and Computer Engineering
lusu@purdue.edu
BHEE 331B
Scott D. Sudhoff
Michael and Katherine Birck Professor of ECE, Associate Head of Undergraduate Programs
sudhoff@purdue.edu
49- 43246
WANG 2057
Shreyas Sundaram
Marie Gordon Associate Professor of Electrical and Computer Engineering
sundara2@purdue.edu
49- 60406
BHEE 322B
T
Hong Z. Tan
Keysight Professor of Electrical and Computer Engineering
hongtan@purdue.edu
49- 46416
MSEE 272
Mithuna S. Thottethodi
Professor of Electrical and Computer Engineering
mithuna@ecn.purdue.edu
49- 66787
BHEE 327
Santiago Torres Arias
Assistant Professor of Electrical and Computer Engineering
santiagotorres@purdue.edu
49- 66610
BHEE 324B
U
Pramey Upadhyaya
Assistant Professor of ECE
prameyup@purdue.edu
49- 45248
WANG 3065
V
T. N. Vijaykumar
Professor of ECE
vijay@ecn.purdue.edu
49- 40592
BHEE 320
W
Phillip Walter
Lecturer
PhilWalter@purdue.edu
49- 43454
BHEE 252
Chih-Chun Wang
Professor of ECE
chihw@purdue.edu
49- 45568
MSEE 354
Haiyan Wang
Basil S. Turner Professor of Engineering
Hwang00@purdue.edu
49- 41675
ARMS 2235
Xiaoqian (Joy) Wang
Assistant Professor of ECE
joywang@purdue.edu
49- 42045
WANG 3061
Oleg Wasynczuk
Professor of Electrical and Computer Engineering
wasynczu@ecn.purdue.edu
49- 43475
WANG 2061
Kevin J. Webb
Professor of ECE
webb@ecn.purdue.edu
49- 43373
BHEE 314
Andrew M. Weiner
Scifres Family Distinguished Professor of ECE
amw@ecn.purdue.edu
49- 45574
MSEE 264
Dana Weinstein
Professor of ECE, Assoc. Dean of Graduate Education
danaw@purdue.edu
49- 63647
BRK 1025
George R. Wodicka
Professor of ECE/Vincent P. Reilly Professor of BME
wodicka@purdue.edu
49- 42998
MJIS 3036
Y
Peide "Peter" Ye
Richard J. and Mary Jo Schwartz Professor of Electrical and Computer Engineering
yep@purdue.edu
49- 47611
BRK 1291
Z
Stanislaw H. Zak
Professor of Electrical and Computer Engineering
zak@ecn.purdue.edu
49- 46443
MSEE 233B
Fengqing Maggie Zhu
Associate Professor of Electrical and Computer Engineering
zhu0@purdue.edu
49- 60407
MSEE 334
Babak Ziaie
Professor of Electrical and Computer Engineering
bziaie@purdue.edu
49- 40725
BRK 2023
Carla Zoltowski
Assistant Professor of Engineering Practice
cbz@purdue.edu
49- 42382
BHEE 254
Michael D. Zoltowski
Thomas J. and Wendy Engibous Professor of Electrical and Computer Engineering
mikedz@ecn.purdue.edu
49- 43512
MSEE 318
Manage People Listings
By Area of Interest
Automatic Controls
Communications, Networking, Signal & Image Processing
Computer Engineering
Fields and Optics
Microelectronics and Nanotechnology
Power and Energy Systems
VLSI and Circuit Design
Discover
Students
Online
Faculty
Alumni
Explore
Campus Map
Facts & Figures
Schools
News & Events
Visit Us
Connect
Employment
Engineering Computer Network
Intranet
Brightspace
myPurdue
People
Engineering Directory
Contact Us
Social Media
Media Contacts
Purdue Directory
Follow
Purdue University, 610 Purdue Mall, West Lafayette, IN, 47907, 765-494-4600
© 2022 Purdue University |
An equal access/equal opportunity university |
Integrity Statement |
Copyright Complaints |
Brand Toolkit |
Maintained by the Engineering Computer Network
Contact the Engineering Administration Communications Office for accessibility issues with this page |
Accessibility Resources |
Contact Us |
Email webmaster-ece@ecn.purdue.edu to report a problem


Link: https://www.theatlantic.com/technology/archive/2015/11/programmers-should-not-call-themselves-engineers/414271/

Why Computer Programmers Should Stop Calling Themselves Engineers - The Atlantic Skip to content Site Navigation The Atlantic
Popular
Latest
Newsletters Sections Politics
Ideas
Fiction
Technology
Science
Photo
Business
Culture
Planet
Global
Books
Podcasts
Health
Education
Projects
Features
Family
Events
Shadowland
Progress
Newsletters
Explore The Atlantic Archive
Play The Atlantic crossword The Print Edition
Latest Issue
Past Issues
Give a Gift Search The AtlanticQuick Links Dear Therapist
Crossword Puzzle
Magazine Archive
Your Subscription
Popular
Latest
Newsletters
Sign In
Subscribe
Technology Programmers: Stop Calling Yourselves Engineers It undermines a long tradition of designing and building infrastructure in the public interest. By
Ian Bogost Andrew Brookes / CorbisNovember 5, 2015Share Iâm commiserating with a friend who recently left the technology industry to return to entertainment. âIâm not a programmer,â he begins, explaining some of the frustrations of his former workplace, before correcting himself, ââoh, engineer, in tech-bro speak. Though to me, engineers are people who build bridges and follow pretty rigid processes for a reason.â
His indictment touches a nerve. In the Silicon Valley technology scene, itâs common to use the bare term âengineerâ to describe technical workers. Somehow, everybody who isnât in sales, marketing, or design became an engineer. âWeâre hiring engineers,â read startup websites, which could mean anything from Javascript programmers to roboticists.
Read Follow-Up
Notes
Ian Responds to Reader Reaction
The term is probably a shortening of âsoftware engineer,â but its use betrays a secret: âEngineerâ is an aspirational title in software development. Traditional engineers are regulated, certified, and subject to apprenticeship and continuing education. Engineering claims an explicit responsibility to public safety and reliability, even if it doesnât always deliver.
The title âengineerâ is cheapened by the tech industry.
Recent years have seen prominent failures in software. Massive data breaches at Target, Home Depot, BlueCross BlueShield, Anthem, Harvard University, LastPass, and Ashley Madison only scratch the surface of the cybersecurity issues posed by todayâs computer systems. The Volkswagen diesel-emissions exploit was caused by a software failing, even if it seems to have been engineered, as it were, deliberately. Recommended Reading The Real Reason Silicon Valley Coders Write Bad Software
Bernard Meisler
The Myth of the Science and Engineering Shortage
Michael S. Teitelbaum
Can a Kids' Toy Bring More Women Into Engineering?
Rebecca J. Rosen
But these problems are just the most urgent and most memorable. Todayâs computer systems pose individual and communal dangers that weâd never accept in more concrete structures like bridges, skyscrapers, power plants, and missile-defense systems. Appleâs iOS 9 update reportedly âbrickedâ certain phones, making them unusable. Services like Google Docs go down for mysterious reasons, leaving those whose work depends on them in a lurch. âYour password contains invalid characters,â a popular tweet quotes from an anonymous website, before twisting the dagger, âNo, your startup contains incompetent engineers.â
These might seem like minor matters compared to the structural integrity of your office building or the security of our nationâs nuclear-weapons arsenal. But then consider how often your late-model car fails to start inexplicably or your office elevator traps you inside its shaft. Computing has become infrastructure, but it doesnât work like infrastructure.
When it comes to skyscrapers and bridges and power plants and elevators and the like, engineering has been, and will continue to be, managed partly by professional standards, and partly by regulation around the expertise and duties of engineers. But fifty yearsâ worth of attempts to turn software development into a legitimate engineering practice have failed.
Just as the heavy industry can greenwash to produce the appearance of environmental responsibility and the consumer industry can pinkwash to connect themselves to cause marketing, so the technology industry can âengineerwashââleveraging the legacy of engineering in order to make their products and services appear to engender trust, competence, and service in the public interest. * * * By the 1960s, large national-defense systems were largely managed by computers. But the creation of such systems was a disasterâalmost everything was delivered late, over budget, and with unnecessary complexity. Late in the decade, the NATO Science Committee sponsored two conferences dedicated to establishing an engineering approach to software creation. The 1968 conference report shows that the notion was still aspirational:
The phrase âsoftware engineeringâ was deliberately chosen as being provocative, in implying the need for software manufacture to be based on the types of theoretical foundations and practical disciplines, that are traditional in the established branches of engineering.
Commercial applications meant to service ordinary people, from inventory control to airline reservations to banking, needed to be reliable. Programming merely involved implementation.
Software-engineering trends came and went during the ensuing decades. Structured programming paradigms of the 1960s, meant to make software development more predictable and less risky, gave way to the object-oriented paradigm of the â80s and â90s, meant to make programming better mirror the business processes it facilitates.
Meanwhile, the overall challenges of software engineering became more familiar and more entrenched. A decade after his 1975 intervention The Mythical Man-Month: Essays on Software Engineering, Fred Brooks lamented that little had changed. In response, he proposed incremental development, or prototyping. Todayâs software development is iterative, and for good reason: Software wasnât ever really akin to manufacturing and construction, where changes were difficult or impossible after initial implementation. Computing is turning engineering into a type of speculative finance rather than a calling. But, software was never not akin to manufacturing and construction, either. Almost 50 years after the NATO Science Committee conferences, some of its participantsâ warnings still hold. âIn the competitive rush to make available the latest techniques,â the â68 report opines, âwe strive to take great forward leaps across gulfs of unknown width and depth.â The same sentiment still holds today.
So, what happened? The personal-computer revolution, for one. In the 1960s and â70s, computers were expensive and scarce. They were confined to research, in governmental, corporate, and industrial contexts. But with the rise of the microcomputer in the late 1970s, anyone could own, use, and program one.
This democratization of software development ignited the consumer and business-software revolution. But it also changed the stakes of software engineering. Developing Microsoft Excel or the back-office systems at American Airlines was hardly glamorous or fast-paced. A giant product like a spreadsheet or a reservation system was still something like a bridge or a building: It had to work right, especially since patches and revisions were expensive and required physical intervention. Such cases require an engineering approach, while trying oneâs hand at a program for upload to the local BBS (or the modern app store) does not.
The informality of software development accelerated even more with the rise of the web, starting in the mid â90s and continuing through today. As software services moved to websites, smartphones, and the Cloud, two things happened.
First, the pressure to get things right the first time around was relieved, because updates and changes could be applied centrally, as in the mainframe era. Over time, the ease of rapid repair became an excuse for rapid development, and Brooks-style prototyping mutated into the constant software updates we experience today. Facebook has wisely retired its one-time internal-development philosophy, âmove fast and break things,â but no business reliant on civil or structural engineering would ever have adopted such a motto in the first place.
And second, software became more isolated from the world, even as it became more predominant. Earlier computing systems were imbricated with other aspects of business, industry, government, and society. An automobile customer-management system has to integrate with dealers, suppliers, shippers, banks and lenders, regulators, legacy systems, and customers. But todayâs software mostly stands alone. Instagram, a photo-sharing service valued at $35 billion last year, just uploads and downloads images between its servers and its app.
To be sure, todayâs Cloud-connected tools still rely on infrastructures, especially the physical servers and networks that handle millions of users accessing billions of files. But those activities have largely been outsourced to infrastructure giants.
Likewise, integrations with messaging, financials, and storage have been abstracted such that individual software developers can treat them as black boxes. That sometimes allows software to run better and more reliably, but it also allows developers to avoid interfacing with the messy world outside their co-working spaces.
As a result, software development has become institutionally hermetic. And thatâs the opposite of what âengineeringâ ought to mean: a collaboration with the world, rather than a separate domain bent on overtaking it. * * * The traditional disciplines of engineeringâcivil, mechanical, aerospace, chemical, electrical, environmentalâare civic professions as much as technical ones. Engineers orchestrate the erection of bridges and buildings; they design vehicles and heavy machinery; they invent and realize the energy systems that drive this equipment; and they contrive methods for connecting all of these systems together.
Itâs no accident that the most truly engineered of software-engineering projects extend well beyond the computer. Autonomous-vehicle design offers the most obvious contemporary example. When Google designs self-driving cars, it musters its own computational systems, like mapping and navigation. But it also integrates those into a world much larger than browsers and smartphones and data centers. Autonomous vehicles share the roads with human-driven cars, pedestrians, and bicyclists. Those roads are managed, maintained, and regulated. Self-driving cars also interface with federal motor-vehicle standards and regulations, along with all the other material demands and foibles of a machine made of metal and plastic and rubber rather than bits. Engineering addresses complex, large-scale systems.
This is why it is so infuriating when Uber insists that it is just a technology platform, and thus not subject to the oversight of transportation-services regulation. Love or hate it, Uber is not just an app developerâitâs a car-service network activated by software, and thus subject to public interest and oversight. And no matter what Uber says, the company still advertises careers in âengineering, design, and productâ categories on its website. Engineering roles are illustrated by a bearded guy staring at source code on two monitors. Uber Screenshot Other engineering disciplines are subject to certification and licensure. If youâve ever hired a civil, structural, or hydraulic engineer for a construction or repair project, that individual probably had to be certified as a Professional Engineer (PE). Licensing processes vary by state, but Professional Engineers generally need to hold a 4-year degree from an accredited program in their discipline, pass one or more exams, and possess 4 or more years of professional experience under the supervision of a licensed engineer. Not all working engineers are or need to be Professional Engineers, but to open an engineering consulting practice or to claim that one is an âengineerâ in a formal context, licensure is usually required. Itâs in the stateâs interest to ensure that someone claiming to be an engineer (or an architect a surveyor or a cosmetologist or a massage therapist) isnât just making up his or her qualifications.
Professional Engineering certification is usually offered only in fields where something could go terribly, horribly wrong with unqualified actors at the helm. California, for example, issues Professional licenses for agricultural, chemical, civil, control system, electrical, fire protection, industrial, mechanical, metallurgical, nuclear, petroleum engineering, and traffic engineers.
In 2013, the National Council of Examiners of Engineers and Surveyors (NCEES), which all 50 states use for licensure examination, began offering testing for software engineers. The exams were produced in collaboration with the IEEE, who maintains a Software Engineering Body of Knowledge (SWEBOK).
But itâs unlikely that Silicon Valley workers would pursue such a license. For one, software engineers are unlikely to open a private office like a structural engineer might do. Even if all engineers are supposed to work under a licensed engineer to use the name, at big companies, many do so under layers of management.
The information-technology industry simply doesnât value certification as much as engineering does, or even as much as IT once did. Silicon Valley bigwigs like Peter Thiel have been flouting formal degrees for years, and even big companies like Google have indicated that they donât value a college degree over and above the ability to do whatever work Google decides is important.
But by definition, âengineeringâ has traditionally entailed the completion of an Accreditation Board for Engineering and Technology (ABET)-approved 4-year degree. ABETâs accreditation requirements for computer science are vague, but they do expect âan ability to apply design and development principles in the construction of software systems of varying complexity.â
Accredited computer-science programs might be moving further away from software engineering anyway. Agile software development has become predominant, focused on rapid iteration rather than long-term planning and intricate documentation. One popular agile method is Scrum, which is focused on short âsprintsâ toward a series of changing goals. Engineers bear a burden to the public, and their specific expertise emanates from that responsibility. Lightweight approaches like Scrum are more compatible with the fast-moving marketplace of computer technology. An app or a web service isnât a bridge or a building. Software is temporary, and provisionalism is considered a feature, not a bug. But at the same time, the stakes of software development are becoming akin to that of bridges and buildings. Not only do computers run our cars and airplanes and medical devices, but also our banking systems, health-care organizations, insurance-underwriting practices, telephony and communication networksâeven our social and entertainment activities. And even if successful, methodologies like Scrum never allow that infrastructure to stabilize. Some new tweak can be made, some new feature can always be added.
Meanwhile, start-up culture is changing engineering education anyway. Entrepreneurship is exalted. Accelerators and incubators abound. Not all students in computer-science programs think theyâll become startup billionairesâ¦ But not all of them donât think so, either. Would-be âengineersâ are encouraged to think of every project as a potential business ready to scale and sell, rather than as a process of long-term training in disciplines where concerns for social welfare become paramount. Engineering has always been a well-paid profession, but computing is turning it into a type of speculative finance rather than a calling. * * * The U.S. Bureau of Labor and Statistics (BLS) calls the âengineersâ who work at Google and Uber and Facebook and its ilk âComputer Programmersâ or âSoftware Developers.â The former write code, the latter design systems. Nobody has to follow the BLSâs definitions, and you can understand why more grandiose titles would be appealing to Silicon Valley disruptors. âEngineerâ conjures the image of the hard-hat-topped designer-builder, carefully crafting tomorrow. But such an aspiration is rarely realized by computing. The respectability of engineering, a feature built over many decades of closely controlled, education- and apprenticeship-oriented certification, becomes reinterpreted as a fast-and-loose commitment to craftwork as business.
Engineerwashing entails a shift from the noun to the verbal sense of âengineer.â An engineer is a professional who designs, builds, and maintains systems. But to engineer means skillfully, artfully, or even deviously contriving an outcome. To engineer is to jury-rig, to get something working more or less, for a time. Sufficiently enough that it serves an immediately obvious purpose, but without concern or perhaps even awareness of its longevity. Engineering in this sense embodies MacGyver scrappiness, a doggedness compatible with todayâs values of innovative disruption. But then, no reasonable person would want MacGyver building their bridges or buildings. Or software!
Perhaps software calamities like data breaches and dieselgate will raise the hackles of the public, such that the standards for software development will be revealed and, in time, reformed. But given the difficulty of renewing, creating, or enforcing more urgent regulatory oversight over the technology industry, the job titles of technology workers probably seems like a minor matter.
Just as Silicon Valley has deftly reframed its business interests as a process of âchanging the world,â so it has also reframed engineering as a process of building something temporary. After all, professionals like graphic designers and hedge-fund managers also build things, but we donât normally call them engineers (brand engineering? speculation engineering?). They do work that might or might not be infrastructural, and that might or might not be conducted in the public interest. And those latter matters are what separate engineering from mere business or craft.
All of which leads us back to the bridges to which my friend negatively compared his âengineerâ colleagues. In Canada, many civil engineers wear an iron ring symbolizing the ethical commitment their profession undertakes. The ring is proffered in a ceremony called the Ritual of the Calling of an Engineer, in which an oath penned by Rudyard Kipling is recited. It reads, in part, âMy Time I will not refuse; my Thought I will not grudge; my Care I will not deny toward the honour, use, stability and perfection of any works to which I may be called to set my hand.â (The U.S. Order of the Engineer offers a similar but less poetic rendition of the oath and the ring.)
A persistent legend holds that the rings are forged from steel reclaimed from the Quebec Bridge, which collapsed catastrophically upon construction in 1907, killing dozens of workers. Though false, the myth still holds up allegorically. Even if it doesnât embody it, the Iron Ringâs steel represents the Quebec Bridge, and every other. Engineers bear a burden to the public, and their specific expertise as designers and builders of bridges or buildingsâor softwareâemanates from that responsibility. Only after answering this calling does an engineer build anything, whether bridges or buildings or software.


Link: https://careers.toasttab.com/jobs/staff-software-engineer-boston-massachusetts-united-states-8d4bf415-8484-4cc3-b0d9-27735c10a166

Staff Software Engineer - Boston, Massachusetts, United States
Explore
Campus
Customer Success
General & Administrative
Engineering, Product, & Design
Sales & Marketing
Locations
See all jobs
Life At Toast
Our Culture Recipe
FAQ
Blog
Leadership
News
Your Settings
Kiosk mode
Staff Software Engineer
Boston, MA, United States
Engineering
Staff Software Engineer
R6983
Boston, Massachusetts, United States
Engineering
Add to favorites
Favorited
View favorites
Toast is scaling rapidly, and with that growth comes exciting opportunities to evolve a developer ecosystem which enables Toast engineers and external partners to continue to deliver excellent products on top of a reliable and sustainable platform. This role will help define, design, build, and maintain software solutions which advance developer effectiveness at Toast and provide a world-class experience to engineers across the business.
Weâre growing a developer-focused team and looking for a Staff Software Engineer to help design and implement solutions in this space.
About this roll* (Responsibilities)
Â
You will seek to understand the most important developer workflows at Toast, and collaborate across the engineering organization to build technical solutions which enable Toastâs engineers to rapidly deliver excellent products. Your peers are your customers, and you will constantly make their day-to-day workflows better. You will develop and maintain tools, processes, and applications that improve the productivity of engineers across Toast. These solutions may range from command-line scripts to interactive web applications, and everything in-between.
Overall, you will:
Design, build and maintain tooling & infrastructure to make software development at Toast a delight
Connect with product teams to ensure that our team builds solutions which support their most important development workflows
Identify new opportunities for our team to create frictionless development workflows
Review code to ensure technical implementation meets functional requirements
Mentor and guide your peers, while also learning from their diverse experiences
Collect and interpret data to drive work to improve developer productivity
Partner with Toast infrastructure and platform teams to enable greater developer productivity
Do you have the right ingredients*? (Requirements)
You have 8+ years of software engineering experience in object-oriented languages (backend or full-stack)
You are respectful, empathetic, and humble
You have a passion for making your peers more productive and efficient
You have a growth mindset with an emphasis on learning and self/team-improvement
You have a bias towards action, with the ability to balance between getting things done and making things perfect
You enjoy collaborating with other engineers to produce great engineering outcomes
What add-ins do you have*? (Nice to Haves)
Experience building tools / infrastructure targeted at other engineers
Experience with with development technologies like Gradle, Docker, Jenkins, AWS
Experience with React and TypeScriptÂ
Our Spread* of Total Rewards:
Unlimited Vacation
Sabbatical opportunity after five years
401(k) and matching
Medical, dental, & vision coverage
Mental Health Benefits
100% paid childbirth recovery medical leave
16 weeks of 100% paid parental leave
Eligibility for 100% paid medical or family leave
Subsidized backup childcare
Professional Development Reimbursement Program
Home office and telecommunications stipends
Free access to Certified Financial Planners
Commitment to Employee Wellness through resources such as a quarterly Wellness Stipend
Various peer and company recognition programs
We are Toasters
Diversity, Equity, and Inclusion is Baked into our Recipe for Success.
At Toast our employees are our secret ingredient. When they are powered to succeed, Toast succeeds.
The restaurant industry is one of the most diverse industries. We embrace and are excited by this diversity, believing that only through authenticity, inclusivity, high standards of respect and trust, and leading with humility will we be able to achieve our goals.
Baking inclusive principles into our company and diversity into our design provides equitable opportunities for all and enhances our ability to be first in class in all aspects of our industry.
Bready* to make a change? Apply today!
Toast is committed to creating an accessible and inclusive hiring process. As part of this commitment, we strive to provide reasonable accommodations for persons with disabilities to enable them to access the hiring process. If you need an accommodation to access the job application or interview process, please contact candidateaccommodations@toasttab.com.
Bready* for a change?
Apply now
Other recommended rolls*Â
Senior Software Engineer
Engineering
Boston, MA, United States
R6945
Boston
Massachusetts
United States
Boston, Massachusetts, United States
Engineering
Fintech
Toast is driven by building the restaurant platform that helps restaurants adapt, take control, and get back to what they do best: building the businesses they love.
The Payments / Fintech teams at Toast operate one of the most critical portions ...
Staff Software Engineer, Digital Ordering
Engineering
Boston, MA, United States
R6237
Boston
Massachusetts
United States
Boston, Massachusetts, United States
Engineering
Guest
Toast is driven by building the restaurant platform that helps restaurants adapt, take control, and get back to what they do best: building the businesses they love.Â  Weâre taking steps to help restaurants navigate these unprecedented times with t...
Staff Backend Software Engineer
Engineering
Canada
R7018
Remote
United States
Remote, United States
Engineering
Guest
Toast is driven by building the restaurant platform that helps restaurants adapt, take control, and get back to what they do best: building the businesses they love.Â
Are you bready for a change?
Toast Digital Ordering applications process bill...
Apply now
Autofill my information with LinkedIn
First Name
(required)
40bd5847
Last Name
(required)
3c883334
Email
(required)
7fd69ed2
Phone
(required)
43514ce6
Location (City)
(required)
0325d659
Resume/CV
(required)
5346e4ce
Cover Letter
7c1f7b9d
LinkedIn Profile
15db2ee0
Website
abcb7ce1
Are you legally authorized to work in the country where this job is located?
(required)
c482be0e
No
Yes
Do you now, or will you ever, require employment sponsorship to work in the country where this job is located?
(required)
dd531ff3
No
Yes
By selecting "I agree", I understand that the information I have provided as part of this job application will be processed in accordance with Toast's Applicant Privacy Statement.
(required)
3672dc4b
Applicant Privacy Statement
I agree
Voluntary Self-Identification
For government reporting purposes, we ask candidates to respond to the below self-identification survey.
Completion of the form is entirely voluntary. Whatever your decision, it will not be considered in the hiring
process or thereafter. Any information that you do provide will be recorded and maintained in a
confidential file.
As set forth in Toastâs Equal Employment Opportunity policy,
we do not discriminate on the basis of any protected group status under any applicable law.
Gender
3bb0759d
Male
Female
Decline To Self Identify
Race
4a09f17e
American Indian or Alaskan Native
Asian
Black or African American
Hispanic or Latino
White
Native Hawaiian or Other Pacific Islander
Two or More Races
Decline To Self Identify
If you believe you belong to any of the categories of protected veterans listed below, please indicate by making the appropriate selection.
As a government contractor subject to the Vietnam Era Veterans Readjustment Assistance Act (VEVRAA), we request this information in order to measure
the effectiveness of the outreach and positive recruitment efforts we undertake pursuant to VEVRAA. Classification of protected categories
is as follows:
A "disabled veteran" is one of the following: a veteran of the U.S. military, ground, naval or air service who is entitled to compensation (or who but for the receipt of military retired pay would be entitled to compensation) under laws administered by the Secretary of Veterans Affairs; or a person who was discharged or released from active duty because of a service-connected disability.
A "recently separated veteran" means any veteran during the three-year period beginning on the date of such veteran's discharge or release from active duty in the U.S. military, ground, naval, or air service.
An "active duty wartime or campaign badge veteran" means a veteran who served on active duty in the U.S. military, ground, naval or air service during a war, or in a campaign or expedition for which a campaign badge has been authorized under the laws administered by the Department of Defense.
An "Armed forces service medal veteran" means a veteran who, while serving on active duty in the U.S. military, ground, naval or air service, participated in a United States military operation for which an Armed Forces service medal was awarded pursuant to Executive Order 12985.
Veteran Status
285d9dbd
I am not a protected veteran
I identify as one or more of the classifications of a protected veteran
I don't wish to answer
Why are you being asked to complete this form?
We are a federal contractor or subcontractor required by law to provide equal employment opportunity to qualified people with disabilities. We are also required to measure our progress toward having at least 7% of our workforce be individuals with disabilities. To do this, we must ask applicants and employees if they have a disability or have ever had a disability. Because a person may become disabled at any time, we ask all of our employees to update their information at least every five years.
Identifying yourself as an individual with a disability is voluntary, and we hope that you will choose to do so. Your answer will be maintained confidentially and not be seen by selecting officials or anyone else involved in making personnel decisions. Completing the form will not negatively impact you in any way, regardless of whether you have self-identified in the past. For more information about this form or the equal employment obligations of federal contractors under Section 503 of the Rehabilitation Act, visit the U.S. Department of Laborâs Office of Federal Contract Compliance Programs (OFCCP) website at www.dol.gov/ofccp.
How do you know if you have a disability?
You are considered to have a disability if you have a physical or mental impairment or medical condition that substantially limits a major life activity, or if you have a history or record of such an impairment or medical condition.
Disabilities include, but are not limited to:
Autism
Autoimmune disorder, for example, lupus, fibromyalgia, rheumatoid arthritis, or HIV/AIDS
Blind or low vision
Cancer
Cardiovascular or heart disease
Celiac disease
Cerebral palsy
Deaf or hard of hearing
Depression or anxiety
Diabetes
Epilepsy
Gastrointestinal disorders, for example, Crohn's Disease, or irritable bowel syndrome
Intellectual disability
Missing limbs or partially missing limbs
Nervous system condition for example, migraine headaches, Parkinsonâs disease, or Multiple sclerosis (MS)
Psychiatric condition, for example, bipolar disorder, schizophrenia, PTSD, or major depression
Disability Status
ad4c4435
Yes, I have a disability, or have a history/record of having a disability
No, I don't have a disability, or a history/record of having a disability
I don't wish to answer
PUBLIC BURDEN STATEMENT:
According to the Paperwork Reduction Act of 1995 no persons are required to respond to a collection of information unless such collection displays a valid OMB control number. This survey should take about 5 minutes to complete.
Apply now!
Please wait...
Done
Not You?
Thank you
Notice on fraudulent jobs
We have been made aware of instances of fraudulent job postings and/or fraudulent recruiting activity by bad actors, purporting to represent Toast. Â These fraudulent schemes often seek monetary contributions or payments from job seekers (such as for "start up costs" or "equipment"), or seek to collect sensitive personal or banking information from job seekers. Â These job postings and offers are not authorized by Toast, and Toast is not responsible for fraudulent offers or requests for personal information or payments. Â Toast will never ask for any financial commitment or contribution from a candidate at any stage of the recruitment process. Â Candidates who have questions about the validity of Toast job postings or offers should consult the job postings on our careers.toasttab.com career site.
Check out other rolls*
Â
Search by job title, location, department, category, etc.
Search
Jobs Near Me
(c) 2022. All Rights Reserved.
Privacy Statement
Terms of Service
Merchant Agreement
Candidate Details
×
We use cookies on this website to enable, improve and personalize your browsing experience, to better understand our website visitors and for security and fraud-prevention purposes. By clicking âI Acceptâ, you agree to the storing of cookies on your device for these purposes. By clicking "I Do Not Accept", only cookies that are strictly necessary will be set. You can change your settings by clicking on the settings link on the top right of the website.
I do not accept
I accept


Link: https://www.simplethread.com/20-things-ive-learned-in-my-20-years-as-a-software-engineer/

20 Things I've Learned in my 20 Years as a Software Engineer - Simple Thread
Skip to content
November’s donation was made to the Native American Heritage Association.
Simple Thread
Primary Menu
Close
Work
Process
Services
Our Story
Blog
Contact Us
software development, thoughts 20 Things I’ve Learned in my 20 Years as a Software Engineer
Justin Etheredge
/
@JustinEtheredge
/ October 7, 2021October 14, 2021
Twitter
Follow us on Twitter
Worried youâll miss us?
Subscribe to get our articles and updates in your inbox.
Email Address
Important, Read This First Youâre about to read a blog post with a lotÂ of advice. Learning from those who came before us is instrumental to success, but we often forget an important caveat. Almost all advice is contextual, yet it is rarely delivered with any context.
âYou just need to charge more!â says the company who has been in business for 20 years and spent years charging âtoo littleâ to gain customers and become successful.
âYou need to build everything as microservices!â says the company who built a quick monolith, gained thousands of customers, and then pivoted into microservices as they started running into scaling issues.
Without understanding the context, the advice is meaningless, or even worse, harmful. If those folks had followed their own advice early on, they themselves would likely have suffered from it. It is hard to escape this trap. We may be the culmination of our experiences, but we view them through the lens of the present.
So to give you a little context on where my advice comes from, I spent the first half of my career as a software engineer working for various small businesses and startups, then I went into consulting and worked in a number of really large businesses. Then I started Simple Thread and we grew from a team of 2 to a team of 25. 10 years ago we worked with mostly small/medium businesses, and now we work with a mix of big and small businesses.
My advice is from someone whoâ¦ has almost always been on small, lean teams where we have to do a lot with very little.values working software over specific tools.is starting new projects all the time, but also has to maintain a number of systems.values engineer productivity over most other considerations My experiences over the last 20 years have shaped how I view software, and have led me to some beliefs which Iâve tried to whittle down to a manageable list that I hope you find valuable. On with the list1. I still donât know very much âHow can you not know what BGP is?â âYouâve never heard of Rust?â Most of us have heard these kinds of statements, probably too often. The reason many of us love software is because we are lifelong learners, and in software no matter which direction you look, there are wide vistas of knowledge going off in every direction and expanding by the day. This means that you can spend decades in your career, and still have a huge knowledge gap compared to someone who has also spent decades in a seemingly similar role. The sooner you realize this, the sooner you can start to shed your imposter syndrome and instead delight in learning from and teaching others. 2. The hardest part of software is building the right thing I know this is cliche at this point, but the reason most software engineers donât believe it is because they think it devalues their work. Personally I think that is nonsense. Instead it highlights the complexity and irrationality of the environments in which we have to work, which compounds our challenges. You can design the most technically impressive thing in the world, and then have nobody want to use it. Happens all the time. Designing software is mostly a listening activity, and we often have to be part software engineer, part psychic, and part anthropologist. Investing in this design process, whether through dedicated UX team members or by simply educating yourself, will deliver enormous dividends. Because how do you really calculate the cost of building the wrong software? It amounts to a lot more than just lost engineering time. 3. The best software engineers think like designers Great software engineers think deeply about the user experience of their code. They might not think about it in those terms, but whether it is an external API, programmatic API, user interface, protocol, or any other interface; great engineers consider who will be using it, why it will be used, how it will be used, and what is important to those users. Keeping the userâs needs in mind is really the heart of good user experience. 4. The best code is no code, or code you donât have to maintain All I have to say is âcoders gonna code.â You ask someone in any profession how to solve a problem, and they are going to err on the side of what they are good at. It is just human nature. Most software engineers are always going to err on the side of writing code, especially when a non-technical solution isnât obvious. The same goes for code you donât have to maintain. Engineering teams are apt to want to reinvent the wheel, when lots of wheels already exist. This is a balancing act, there are lots of reasons to grow your own, but beware of toxic âNot Invented Hereâ syndrome. 5. Software is a means to an end The primary job of any software engineer is delivering value. Very few software developers understand this, even fewer internalize it. Truly internalizing this leads to a different way of solving problems, and a different way of viewing your tools. If you really believe that software is subservient to the outcome, youâll be ready to really find âthe right tool for the jobâ which might not be software at all. 6. Sometimes you have to stop sharpening the saw, and just start cutting shit Some people tend to jump into problems and just start writing code. Other people tend to want to research and research and get caught in analysis paralysis. In those cases, set a deadline for yourself and just start exploring solutions. Youâll quickly learn more as you start solving the problem, and that will lead you to iterate into a better solution. 7. If you donât have a good grasp of the universe of whatâs possible, you canât design a good system This is something I struggle with a lot as my responsibilities take me further and further from the day to day of software engineering. Keeping up with the developer ecosystem is a huge amount of work, but it is critical to understand what is possible. If you donât understand what is possible and what is available in a given ecosystem then youâll find it impossible to design a reasonable solution to all but the most simple of problems. To summarize, be wary of people designing systems who havenât written any code in a long time. 8. Every system eventually sucks, get over it Bjarne Stroustrup has a quote that goes âThere are only two kinds of languages: the ones people complain about and the ones nobody usesâ. This can be extended to large systems as well. There is no ârightâ architecture, youâll never pay down all of your technical debt, youâll never design the perfect interface, your tests will always be too slow. This isnât an excuse to never make things better, but instead a way to give you perspective. Worry less about elegance and perfection; instead strive for continuous improvement and creating a livable system that your team enjoys working in and sustainably delivers value. 9. Nobody asks âwhyâ enough Take any opportunity to question assumptions and approaches that are âthe way things have always been doneâ. Have a new team member coming on board? Pay attention to where they get confused and what questions they ask. Have a new feature request that doesn’t make sense? Make sure you understand the goal and what is driving the desire for this functionality.Â If you donât get a clear answer, keep asking why until you understand. 10. We should be far more focused on avoiding 0.1x programmers than finding 10x programmers The 10x programmer is a silly myth. The idea that someone can produce in 1 day what another competent, hard working, similarly experienced programmer can produce in 2 weeks is silly. Iâve seen programmers that sling 10x the amount of code, and then you have to fix it 10x the amount of times. The only way someone can be a 10x programmer is if you compare them to 0.1x programmers. Someone who wastes time, doesn’t ask for feedback, doesn’t test their code, doesn’t consider edge cases, etcâ¦ We should be far more concerned with keeping 0.1x programmers off our teams than finding the mythical 10x programmer. 11. One of the biggest differences between a senior engineer and a junior engineer is that theyâve formed opinions about the way things should be Nothing worries me more than a senior engineer that has no opinion of their tools or how to approach building software. Iâd rather someone give me opinions that I violently disagree with than for them to have no opinions at all. If you are using your tools, and you donât love or hate them in a myriad of ways, you need to experience more. You need to explore other languages, libraries, and paradigms. There are few ways of leveling up your skills faster than actively seeking out how others accomplish tasks with different tools and techniques than you do. 12. People donât really want innovation People talk about innovation a whole lot, but what they are usually looking for is cheap wins and novelty. If you truly innovate, and change the way that people have to do things, expect mostly negative feedback. If you believe in what youâre doing, and know it will really improve things, then brace yourself for a long battle. 13. Your data is the most important part of your system Iâve seen a lot of systems where hope was the primary mechanism of data integrity. In systems like this, anything that happens off the golden path creates partial or dirty data. Dealing with this data in the future can become a nightmare. Just remember, your data will likely long outlive your codebase. Spend energy keeping it orderly and clean, itâll pay off well in the long run. 14. Look for technological sharks Old technologies that have stuck around are sharks, not dinosaurs. They solve problems so well that they have survived the rapid changes that occur constantly in the technology world. Donât bet against these technologies, and replace them only if you have a very good reason. These tools won’t be flashy, and they won’t be exciting, but they will get the job done without a lot of sleepless nights. 15. Donât mistake humility for ignorance There are a lot of software engineers out there who wonât express opinions unless asked. Never assume that just because someone isnât throwing their opinions in your face that they donât have anything to add. Sometimes the noisiest people are the ones we want to listen to the least. Talk to the people around you, seek their feedback and advice. Youâll be glad you did. 16. Software engineers should write regularly Software engineers should regularly blog, journal, write documentation and in general do anything that requires them to keep their written communication skills sharp. Writing helps you think about your problems, and helps you communicate those more effectively with your team and your future self. Good written communication is one of the most important skills for any software engineer to master. 17. Keep your processes as lean as possible Everyone wants to be agile these days, but being âagileâ is about building things in small chunks, learning, and then iterating. If someone is trying to shoehorn much more into it than that, then theyâre probably selling something. It isnât to say that people donât need accountability or help to work this way, but how many times have you heard someone from your favorite tech company or large open source project brag about how great their Scrum process is? Stay lean on process until you know you need more. Trust your team and they will deliver. 18. Software engineers, like all humans, need to feel ownership If you divorce someone from the output of their work, they will care less about their work. I see this almost as a tautology. This is the primary reason why cross-functional teams work so well, and why DevOps has become so popular. It isnât all about handoffs and inefficiencies, it is about owning the whole process from start to finish, and being directly responsible for delivering value. Give a group of passionate people complete ownership over designing, building, and delivering a piece of software (or anything really) and amazing things will happen. 19. Interviews are almost worthless for telling how good of a team member someone will be Interviews are far better spent trying to understand who someone is, and how interested they are in a given field of expertise. Trying to suss out how good of a team member they will be is a fruitless endeavor. And believe me, how smart or knowledgable someone is is also not a good indicator that they will be a great team member. No one is going to tell you in an interview that they are going to be unreliable, abusive, pompous, or never show up to meetings on time. People might claim they have âsignalsâ for these thingsâ¦ âif they ask about time off in the first interview then they are never going to be there!â But these are all bullshit. If youâre using signals like these youâre just guessing and turning away good candidates. 20. Always strive to build a smaller system There are a lot of forces that will push you to build the bigger system up-front. Budget allocation, the inability to decide which features should be cut, the desire to deliver the âbest versionâ of a system. All of these things push us very forcefully towards building too much. You should fight this. You learn so much as youâre building a system that you will end up iterating into a much better system than you ever could have designed in the first place. This is surprisingly a hard sell to most people. What is your story? So there you have it, 20 years of software distilled down into 20 pithy pieces of wisdom. Iâd love to hear it if something resonated with you. Iâd also love to hear if you have a piece of wisdom that youâve picked up over your career that youâd like to share. Feel free to leave it down in the comments.
Loved the article? Hated it? Didnât even read it?
Weâd love to hear from you.
Reach Out
Comments (104)
CristÃ³bal Gajardo Vera says:
October 7, 2021 at 1:45 pm
You talk about interesting topics about software development process. It’s clear to understand how important are the communicational skill nowadays.
I love the ownership point, I totally agree with it.
Great post!
Reply
Dom says:
October 7, 2021 at 5:39 pm
I’m glad I clicked this article even though I felt I’ll probably regret it as most listicles with similar titles are bound to disappoint.
This one though, this was a true gem. Brown painted gold so to say.
And I want to thank you for it. Will try to keep your advice close to heart in the future, just started my first engineer position this spring.
Reply
Justin Etheredge says:
October 7, 2021 at 6:06 pm
Thank you Dom, I appreciate it!
Reply
Phil Kendall says:
October 8, 2021 at 6:39 am
Dom sums up my thoughts precisely – this is just about the first “list of N things” I’ve seen which I’ve actually thought worthwhile to spread to my networks. It would have saved us a lot of time if we’d had this when creating our Principal Engineers charter ð
Reply
Giovanny Quimbayo says:
October 7, 2021 at 6:44 pm
I resonate with point #19, I am a recent graduate and I’m trying to land a job as a software engineering role. It has been very hard and I know I can be a great asset to a team, I am always reading, learning new things and I have a experience with clients and leadership. Not long ago I had an interview and I believed I did a pretty good job, however I didn’t get the role. I guess the are looking for the perfect programmer who doesn’t make mistakes.
By the way, I would I appreciate any help in my job search if anyone can help me. Thank you guys.
Email: giovannyqtech@gmail.com
Reply
Joey DeFrancesco says:
October 8, 2021 at 9:14 am
Are there any aspects of the interview process you struggle with? Getting your first position can be tough because they donât have the portfolio available to them as they would if you have years of experience. My advice? Create them that portfolio. Most jobs I have landed started because recruiters and such were browsing my git hub. There is enough value in that, some use it as their primary metric for determining competency.
Reply
TheSleaze says:
October 8, 2021 at 3:03 pm
Gio – I’m sending an email your way too, but want to make this public as well.
I am in no way affiliated, and honestly used it only a few times, however this is without a doubt the best tool I ever encountered when trying to level up my interviewing (which is different than working, as we all know).
Interviewing.io
I never paid a dime for the service, so again, YMMV, but live interviews and studying other live interviews is where it truly is at.
Good luck
Reply
Netherton says:
October 8, 2021 at 6:34 am
“The only way someone can be a 10x programmer is if you compare them to 0.1x programmers. Someone who wastes time, doesnât ask for feedback, doesnât test their code, doesnât consider edge cases, etcâ¦”
This resonated very strongly iwth me. It’s me, I’m the 0.1 programmer :/
Reply
Jan says:
October 8, 2021 at 7:43 am
I am currently working on two projects, one that I enjoy and another one that I hate. I am a 2x programmer on the first and a 0.1x programmer on the second, and I am not able to change this, even though I try to.
Reply
Anonymous says:
October 8, 2021 at 12:01 pm
Hey, take it easy. At work I’m sometimes a 0.1x programmer too. I felt pretty bad about it to be honest, like my coworkers were just a lot better than me. I started working on some things outside of work that I was really really interested in, and I noticed I was committing 10-15x more code per unit of time than I do at work — and it was good code, carefully written code that I was proud of and felt I wouldn’t be confused by at all if I came back to it in 2 years.
Don’t get yourself down, just keep looking for the role that brings out the best in you.
Reply
paolo says:
February 14, 2022 at 7:27 am
I think that probably the very fact that, you called yourself out as a “0.1x” programmer, means you could not possibly be ð
Reply
Makach Mouchkil says:
October 8, 2021 at 6:36 am
Thank you for this great article! It resonates very well with my own experiences from having worked as a developer. Many of these lessons applies to the entire field of software – one thing I missed was, to stop fixing someone else’s errors. That creates technical debt. If you make the error you have to fix it. It is an excellent learning opportunity. Also, if a vendor introduce a bug, we don’t make a workaround on behalf of the vendor. Use appropriate channels and make sure they clean up their issues.
Reply
GÃ¶khan Ercan says:
October 8, 2021 at 7:01 am
Perfect. I’m signing it ð
Reply
FlowState says:
October 10, 2021 at 5:04 pm
AMAZING INSIGHTS
Reply
Jan Gabriel says:
October 8, 2021 at 7:28 am
What a great post! I could relate to most of the points. It is for sure one of the best articles I’ve read which covers this particular topic. Thanks Justin for putting in the time and effort for sharing your thoughts.
Reply
Jeremie says:
October 8, 2021 at 8:44 am
Super insightful and totally true in my own 20yrs exp. It is the best 20yrs career advice in software engineering I ever read, I cant think of anything else… Thank you very much!
Reply
Alec says:
October 8, 2021 at 9:20 am
> biggest differences between a senior engineer and a junior engineer is that theyâve formed opinions about the way things should be
I disagree with this: junior are more likely to repeat other’s opinions with convinction even though they haven’t experienced the issue that opinion was formed upon.
Also let’s remember that opinions are always subjective: humility and open-mindness are definitely something I want in senior peers and those quality are so rare that cannot be taken for granted.
— I kind of agree with the following point > If you are using your tools, and you donât love or hate them in a myriad of ways, you need to experience more.
but I don’t think it’s telling if you’re senior or not. You just have bad tools, like most ecosystems or you found yourself comfortable in your set of things and somebody else has found themselves comfortable in others.
Definitely against the > Iâd rather someone give me opinions that I violently disagree with than for them to have no opinions at all.
We’re building software. Violence should be as far away from us as possible. We’re not in trenches. We’re too early in this discipline to feel like it’s a badge of honor to be entrenched on one side of the debate. We should try to be open mind and look for other point of view and respect others opinions.
Reply
Justin Eloff says:
October 10, 2021 at 2:08 pm
> biggest differences between a senior engineer and a junior engineer is that theyâve formed opinions about the way things should be
You are right, but also that’s not really the essence of what he was saying. I’m sure you probably realise this as well. Sure Juniors have “opinions”, but they won’t hold up to any amount of interrogation. Most seniors will have reasons, backed by experience.
It’s usually easy to figure out the difference between someone who was told an opinion and someone who formed one. So I still think the authors sentiment holds.
— > If you are using your tools, and you donât love or hate them in a myriad of ways, you need to experience more.
I don’t think the idea is that your current set of tools are the problem. It’s more that you haven’t looked around at all. Now if you love your tools and their productive, by all means. However, I would say it’s accurate that you can’t say whether or not your tools are good or bad if you haven’t tried others and started understanding the pros and cons. So in that sense it can show seniority in the sense that, you have enough experience with multiple tools to form opinions regarding when they are good/bad.
— > Iâd rather someone give me opinions that I violently disagree with than for them to have no opinions at all.
Here I think you’re just taking his hyperbole too literal. I’m the author doesn’t actually advocate for violence. We’re all allowed some hyperbole, otherwise writing, reading and general communication would become rather dull.
I too would rather prefer disagreeing with someone, than having someone always go “Yea sure, that’s cool”. Some of the best ideas in software I’ve ever had came from “aggressively” arguing about solutions. Most of us are professionals and can separate the heated debates from personal matters.
Reply
Edgar says:
October 14, 2021 at 7:20 pm
Unless you get written up for aggressively arguing like i did
Reply
Moyin says:
May 12, 2022 at 3:18 pm
This is great article honestly.. I’ve always love tech stuffs.. learnt html and css a long time ago, few years ago I learnt to program Arduino using c++.. but my real goal is to become a full stack developer but it seems like there are endless tons of stuffs to learn from front end to backend and it’s quite overwhelming honestly. Keeping track of new tools too seems almost impossible… I get overwhelmed sometimes honestly.. I’d really appreciate being put on the right track..
Reply
Matt says:
January 10, 2022 at 10:02 pm
Alec, stick in the word passionately for violently. Do you still disagree? Sorry, I think that was a silly critique.
Reply
Jason LaFerrera says:
October 8, 2021 at 9:42 am
What a fun treat to see your name on the byline! Hope you’re doing well friend.
Reply
Justin Etheredge says:
October 8, 2021 at 9:44 am
Hey! Good to hear from you. Hope you’re doing well!
Reply
Anders says:
October 8, 2021 at 9:47 am
“Sometimes the noisiest people are the ones we want to listen to the least.” I have seen so many of this over the years, and often the best i have learn is from silent one.
Reply
V says:
October 8, 2021 at 10:08 am
Thanks Justin, great article!
As from 20y experience as a software engineer myself, I can add one more thing which I have learned.
#21 Love your co-workers, or leave! I’ve found that to be productive and to be able to create fantastic value, I do not function very well (or at all to be more honest) if fellow co-workers / team-members are rude or inpolite. As an introvert (like the best software nerds usually are), I have not (and still do not) have the habit to defend my self or “kick back”, when ever an outrovert claim the ether during an entire lunch or a meeting, or even worse, is trying to be funny and give jokes that to me often are insulting (even it might not was intended to be!). When hiring, the most important qualification in my opinion, is how humble, polite and positive the attitude the candidate is. Bad attitude, negativism is poison! I tend to leave (any company) when I feel there is too much “poison” around, and that has been a successful strategy (at least) for me so far. Bottom line: find and stay in a team where you find love and passion in your co-workers, where you feel the optimism and positivity around you. Never allow people make you or your ideas less worthy. Your ideas or code may be optimized, but if people around you communicate this to you in a way that makes you feel bad, leave! Make sure to surround you with fellow co-workers that point out how great even your worst piece of code is. Good colleges will complement you for how impressive it is, even they don’t understand anything of it! It is probably “messy” for many reasons and you of all know why, and if allowed, know hows to fix it, better than anyone.
Bottom line: Be aware of your social environment, you will only produce and feel happy about it when the environment allow you to do so! If the environment does not allow this, find a better environment that fits you!
Take this from a simple guy that have created software that is valued billions on Nasdaq today!
Reply
S says:
October 10, 2021 at 2:06 am
You’re actually deluded. You want people to be impressed at your worst code, and if not then they are toxic and you’ll just leave?
I think the real lesson here is to pamper your introvert coding magicians, they need to be protected from reality or they will stop working for you
Reply
A Comment says:
October 11, 2021 at 5:47 am
Well, yes, in fact we will. The opportunities in software are too hot to pander to toxic engineering managers like you. Ever stopped to question why the average tenure in this field is like 2-3 years?
If you want to retain quality talent, respect is essential. I doubt your performance evaluation by higher management will be stellar in a few cycles if this is how you see engineers under you.
Reply
Matt says:
January 10, 2022 at 10:08 pm
I think the primary reason for that average (well at least for the first 5 years anyway) is because they can get big pay increases by moving to the next job.
Reply
V says:
October 8, 2021 at 10:27 am
Oops, correction: not billions, sorry for getting carried away for a second there. It’s actually just a few $100 millions ð
Reply
Jesus Jayaro says:
October 8, 2021 at 10:48 am
Awesome article! Iâve been working on transitioning to software for a while now and I like to listen/read to seasoned professionals so that I can be more effective and take into account things I might be missing.
This is probably best article I have read in this topic and Iâm glad I stumble upon it. Will share it with all my friends going thru the same motion of transitioning to tech.
Reply
Jim says:
October 23, 2021 at 8:53 pm
As someone who “transitioned to software” shortly after I learned to walk, here’s an observation & suggestion.
So many people learn formulas or recipes and think they know technology. A monkey can see something done and repeat it. A parrot can hear something and repeat it. But they will be lost and frustrated if the parameters are changed slightly, or worse, if they need to combine elements of multiple skills into something new. You can be much more than a parrot or monkey if you choose to engage your human brain.
So I suggest this: learn what you need to know, and then find out what that is built upon, and learn that too. Go as deep as you can. Why does it work? When might it fail? Who knows about it? Answer these questions for yourself.
But don’t just focus on depth. Explore to the edges of your area, and look a little beyond them. What technical areas border your area of interest? What techniques do they have that might be useful in your area? What if you could combine areas? Is someone already doing that? What do you think is wrong with their approach, and can you improve upon it?
You mentioned reading what “seasoned professionals” write. This is a very good way to learn. Take a look at stack overflow, hacker news, and similar sites, and just binge-read the answers or comments from high-scoring people. There are also practice websites like project euler and hackerrank where you can test your skills against others and again learn from those who are further along on their journey.
Best of luck to you. This can be the most fun in the world, if you let it.
Reply
Oakwoody says:
October 8, 2021 at 10:55 am
As a fellow 20 year journeyman developer I can definitely subscribe to these. #11, the difference between a junior developer and a senior developer is that a senior developer has already made all the mistakes a junior developer will make. A corollary to points #2, #5 and #13: Always strive to fully understand the business/problem domain before you write a single line of code. The flipside of #19, when changing jobs, one of the main questions you should ask from a company is to describe their onboarding processes — how much effort they’re willing to expend on training you is a good indication of whether they are hiring someone to make a contribution or a warm body to fill the headcount.
Reply
A says:
October 8, 2021 at 11:07 am
Hard to find anything in here that *doesn’t* resonate. This is one of the smartest, most useful blog posts on software development I’ve ever seen.
Reply
John says:
October 8, 2021 at 11:19 am
Having been at a few companies where the ‘big refactor’ to get rid of ‘tech debt’ was attempted, a lot of what you wrote resonated. I came to the saying, “Every line of code you write, that doesn’t eliminate more than one line of code, is you building your tech debt”. Its too easy to point to the ‘legacy’ system as ‘bad’ and start building the ‘good’ replacement and end up with 2x the code to maintain. This usually happens when you get to the final 5% of what the legacy system does, and just run out of time. I’ve been at companies where there are more than three systems, the legacy, the first refactor, the attempt at microservices and the team is busy working on the ‘final refactor’.
Reply
AW says:
October 8, 2021 at 11:29 am
“Sometimes the noisiest people are the ones we want to listen to the least.” I agree with the title of this paragraph, but this sentence stung a bit.
It’s true there is a true mix of intra and extraverts on any given day in a tech org.
But I have met some very vocal, outspoken devs, directors, CTOs who are very active and present and “noisy” in the organizations and in many cases I have been thankful and better off from their amplified presence in my career.
I think we need to further define what you mean by “noisy”.
5 years ago I had a CTO (who still makes sure they code often), do a presentation about Redux (new kid on the block at the time), to 200 devs.
That same CTO also did a great talk on Testing strategies a few months later that I found instrumental in my career when it comes to strategizing about testing.
I would consider this person to be “noisy” and thankful that they were.
But I am humble as well as noisy in my current org and am open to hear your thoughts on this subject.
Reply
SangD says:
October 8, 2021 at 11:42 am
Very well written points. I like all of these. I went through many of these and I understand how it feels.
Thank you.
Reply
MGBielski says:
October 8, 2021 at 11:48 am
I’ve been in the industry for over 20 years and #14 really hits home for me. I can’t count how many times someone with an affliction for “bright, shiny, new” things has wasted the time of the team and often the company while trying to make their favorite new technology of the week solve a problem that would have taken less time and effort to solve with what the team is already using. What these people are often lacking is the ability to really, thoroughly think things through to the end. The other thing that I see far too often is stagnation in learning. As you’ve said, to be in this field requires continual learning and people that refuse to accept that effectively tie themselves to the past and get left behind.
Reply
Tim says:
October 8, 2021 at 11:54 am
I personally refrain from using terms like “cutting shit”, those who use such words and speak this way believe it makes them sound cool or real (not sure what exactly) but to the receiving end it sounds disgusting and communicates disregard of others and quickly erodes the respect and opens the door wide open for even bigger (cool and real) things to occur
Reply
Sam says:
October 8, 2021 at 12:39 pm
The more you think about a problem the better the solution. The better the why’s the smaller the solution. The more code you write the more the refactoring. You would at times be digging a hole to fill another and you need to come out sought of “unclutter” focus on the project otherwise you’ll scream micro service to every problem and keep at it till eventually you don’t understand what’s happening (possibly create a microservice to manage your microservice manager.. pun intended) …… Perfect read. Best developer blog I’ve read. Resonates to what’s happening in the field/industry even to DevOps engineers.
Reply
Roy says:
October 8, 2021 at 1:28 pm
Hey there, this spurred a lot of discussion in my group. May I use it as part of a survey with quotes and attribution back to your site?
Reply
Andrei Neculau says:
October 8, 2021 at 2:22 pm
Justin, a warm shout from Stockholm! I have quit a few times my job over some of the exact same points you mention. I hope this is not some vision telling me i will end up quilting 20 times !?!?
I can’t help but think that one reason why my learnings overlap so much with your points is I have been recently involved in creating an agnostic platform from scratch to build several projects, which rings similar to “starting new projects all the time, but also has to maintain a number of systems.” You are pressured into keeping things lean and focusing on engineer productivity. Otherwise you can’t easily bring in new people, nor can experienced people juggle multiple projects at once with minimal context switching. One day of onboarding for any newbie to take any change in several projects live, with the same confidence of a “git push” (literally, because we were doing gitops… Without knowing that’s what you call it :D)
Anyways, thanks for writing this. I’m framing it!
My baby is at https://github.com/rokmoln/support-firecloud btw but needs “productification”
Reply
qqqq says:
October 8, 2021 at 2:30 pm
“The 10x programmer is a silly myth. The idea that someone can produce in 1 day what another competent, hard working, similarly experienced programmer can produce in 2 weeks is silly”
I’m doing this all the time and I know at least one other developer doing the same :). It’s not related to amount of code, but how fast can someone solve problems and is building structures that allows do things faster and more performant.
Regarding juniors I have same opinion like someone else here in comments, juniors are more likely to repeat otherâs opinions and do things like they read in tutorial, but didn’t battle test solution first.
Reply
Jonathan Dale says:
October 8, 2021 at 3:04 pm
I am retired after 35 years in the software trenches.
Great list.
#18 – ownership is particularly important, and drives many of the other areas.
There was a reason that the developers of the original
Macintosh computer (amazing things done by small groups of people) had their signatures embossed inside the case.
Imagine if the splash screen that starts off a piece of software said “Created by: developers names” so the creators names (signatures) were a public part of the product.
That simple thing would lead to better code!
(Now I build musical instruments where every little thing is public.
Immediately obvious how good that joint is.)
Reply
Justin Etheredge says:
October 19, 2021 at 7:36 am
Itâs so true, it really does all come back to people taking pride and ownership of their work.
Reply
Andrzej says:
October 8, 2021 at 5:18 pm
You are absolutely right! ð
Reply
Boyong says:
October 9, 2021 at 5:38 am
Thank you for this great article Justin
Reply
mtsay says:
October 8, 2021 at 8:18 pm
I’m intrigued by #19. What do you suppose are the values in interviewing a candidate? What would you pay attention to while interviewing a candidate? And how would you decide on casting a must-hire/maybe/veto vote?
A little about myself: I have around 10 years of experience working at small companies and startups; these companies and teams are lean and focused. I’ve been on both sides of table when it comes to interviewing and hiring.
On the hiring side, I agree that looking for certain signals seems futile, but I have a hard time finding or coming up with a better approach.
Reply
Timothy says:
October 15, 2021 at 11:38 am
+1
Is there some other way to tell if someone will be a good team member before hiring or is it impossible?
Reply
Jeremy Pulcifer says:
October 25, 2021 at 2:28 pm
1. Asshole filter 2. Relevant experience (or desire for) 3. Shared values 4. Communication skill level – careful to not let that be xenophobic, tho
Reply
Prasanna says:
October 8, 2021 at 11:59 pm
Your points innovation & interviews stood out for me. Thank you for taking time to share your experience with us.
Reply
Justin Etheredge says:
October 19, 2021 at 7:37 am
Youâre welcome!
Reply
KÃ®ngslÃ¨y says:
October 9, 2021 at 2:45 am
We need to venture more job opportunities in this sector and create a workable environment for the work..since the technology in computer is really taking us to another level in the coming years.
Reply
koreth says:
October 9, 2021 at 3:39 am
The “10x programmer” concept IS the “0.1x programmer” concept, just from a different baseline. The original studies where the idea came from were measuring the productivity spread between the best and the worst performers, not between the best and the average.
Reply
Toby says:
October 9, 2021 at 3:48 am
Fantastic article.
Whilst I agree with your opening statement about context being hugely important, I think the sheer volume of comments talking about how much this resonates shows you’ve hit on some fairly universal software advice.
My favourite point was on 0.1x vs 10x. It reminded me of the advice that up until a certain point you will win more tennis matches by stopping your own unforced errors than you will beating your opponent.
I feel like too many developers strive to reach this mythical 10x status without thinking about what small improvements could make them a better team member.
Reply
Justin Etheredge says:
October 19, 2021 at 7:38 am
I love the tennis analogy, thank you!
Reply
Harvey says:
October 9, 2021 at 4:33 am
Hey, this is an awesome list thankyou. As a 50 year old who still loves working as a senior developer, all of this resonated with me, you’ve really captured a lot of important points here succinctly. On your point 7, I’d recommend having a read of a fairly new book called Fundamentals of Software Architecture which has a great chapter about knowledge depth vs. knowledge breadth – in summary, as you get more experience and do more design level type work, you need to increase the breadth of your knowledge – to know what is possible and what is out there. At the same time you’ll find you can’t have a depth of knowledge about everything, otherwise you’ll run yourself ragged. You can still focus on a few different specialist areas or frameworks which you keep up to date with, but you need to supplement this with knowledge breadth – a shallow and wide knowledge about as much as possible.
Reply
Jeremy says:
October 9, 2021 at 8:10 am
Awesome article! Thank you very much!
I would like to add something to #6: My experience is that you doing outstandingly well If you don’t pick the first solution that hops in your head for a problem. Instead taking your time to think about another solutions and compare them is a very economic act.
Reply
Justin Etheredge says:
October 19, 2021 at 7:39 am
Agreed, that is something I struggled with early in my career, and sometimes still do when under time pressure.
Reply
Nihal Srivastava says:
October 10, 2021 at 2:49 am
wondering about the design of this site, why the comment is at the end of the page and why not just down below the post?
Reply
Vitus says:
October 10, 2021 at 5:40 am
Thanks so much for the insight. This is really great ðð½
Reply
Nonny says:
October 10, 2021 at 8:57 am
Point 9 really irks me about a lot of companies. I see it at my job and I hear about it from friends who also work in IT in varying capacities. In an industry that’s built on change, maximizing efficiency, and finding new ways to do things it astounds me that so many companies refuse to charge the way things get done.
I understand that some upgrades require massive restructuring that doesn’t always make practical or financial sense, but there’s just no excuse for certain things. No one questions why we’re still using this horribly buggy software from 1995, or why we haven’t automated a tedious but very simple manual process, or identified the source of a break in the process flow that confuses both the users and the devs who maintain the software. It’s maddening.
Great points overall.
Reply
johnyking says:
October 10, 2021 at 11:47 am
nice
Reply
Dmitriy Rogatkin says:
October 10, 2021 at 11:51 pm
A big problem of modern software development that people continuously rewrite existing systems to use the new technologies. For example, I have iPad of the first generation,
it is fully functional, however less than 20% sites still work on it. Sure, sites I developed still work great. I can’t say that new software offers something completely different, for example Gmail stopped working on the iPad as six months, although I didn’t notice any new functionality in it. When developer will focus on creation something really new, then just try new technologies for old things?
Reply
Mahendra Machhi says:
October 11, 2021 at 12:34 am
I am reading this on monday morning , there is so much to think about and take from. With that i am going to start my day.Thanks for writing this. HappyCoding.
Reply
A Comment says:
October 11, 2021 at 5:41 am
The 10x engineer (or more) *absolutely* exists – that this is even for debate with someone with 20 years of seniority is concerning, to put it mildly.
Ever hear about dudes called Linus and Bjarne…? Ever hear about other guys that literally create their own OSes and game engines for fun…?
Reply
Justin Etheredge says:
October 19, 2021 at 7:41 am
I agree at a high level, and I wrote a follow up post to address this exact point – https://www.simplethread.com/the-10x-programmer-myth/
Reply
Asim Maqsood says:
October 11, 2021 at 5:44 am
This is a great article , a list i will keep in my bookmarks for long time. Couple of things i would add from my 18 years of experience from firmware development to web apps development, and integrating very large and poorly written components and dealing with 100s of engineers on daily basis.
1- “Write code for others and do not own your code , write it so clean and easy to understand + review is so critically(publicly too) that people takes its ownership so easily without feeling any pressure from you. When you write for others to maintain then you become a developer who writes important parts of the system and pass to other people. 2- And finally a very important thing, “never get scared, software doesn’t bite, trying to write something complicated or something you have no idea about is the safest risk you would ever take in your life, it pays high dividends. The sooner you are fearless the faster you grow”
Reply
Hasan says:
October 11, 2021 at 6:53 am
Thanks for tips
Reply
Moti Mashiah says:
October 11, 2021 at 8:35 am
Great article as a software engineer over 10 years. I can feel every point.
Thank you.
Reply
Benny Alexander says:
October 12, 2021 at 6:33 am
This is something I should have read some 25 years ago. Excellent mate..
Some of the points are not just for Software Engineers, Eg. People donât really want innovation. I have shared with my son, who is a budding SE in his B Tech.
Reply
Justin Etheredge says:
October 19, 2021 at 7:41 am
Thank you!
Reply
Diego Guidi says:
October 12, 2021 at 7:56 am
I posted your blog post on hacker news four days ago, there’s a lot of well deserved kudos for you also in the HN comment section https://news.ycombinator.com/item?id=28797485
Ps: just discovered right now that this blog post has a comment section ð I use a comment blocker so often I miss this sections…
Reply
Don Denoncourt says:
October 12, 2021 at 3:53 pm
Me? 40 years. My verbose review of your post: Yup.
Reply
Justin Etheredge says:
October 12, 2021 at 4:33 pm
Ha! Thanks Don. ð
Reply
David Reynolds says:
October 15, 2021 at 11:23 am
This year is 40 years of programming for me, as well, and I agree. This was an excellent list, probably the best of its kind I’ve seen.
Reply
Ben Wood says:
October 13, 2021 at 7:20 am
Great list, thanks! Folks should also check out the work of Marty Cagan at the Silicon Valley Product Group (svpg.com). He has a lot to say about all this and has distilled his wisdom into a couple of excellent books too (“Inspired” and “Empowered”).
Reply
Justin Etheredge says:
October 19, 2021 at 7:42 am
Agreed, Inspired is a great book! I havenât had a chance to read Empowered yet.
Reply
Bruno says:
October 13, 2021 at 8:05 am
Great article! Amazing points. I have 15+ years in development, I can relate (in some way) to every single point.
Reply
Hitesh says:
October 13, 2021 at 8:17 am
Regarding: “values engineer productivity over most other considerations” One of the most ignored part of software development I have seen in projects is “maintainability”: – Productivity of engineers are depending of the maintainability of the code. – Maintainability of code depends on followings: => Are you able to run and troubleshoot your application code line by line? (Mostly inside code editor on local machine or on remote machine) – People are adding more and more new services (sometime Heterogeneous service build with different languages/frameworks) and does not think about how difficult it will be to maintain it in future.
Reply
Yuri says:
October 13, 2021 at 8:42 pm
Really loved the intro – this is a very good point, very inspiring article – thank you!
Reply
Gaurav says:
October 14, 2021 at 8:52 pm
Some great points. Really like the first point about “I still donât know very much”. I often feel bad about not knowing details about some of the areas too like BGP/Rust etc But that’s the nature of our industry. There’s a huge amount of areas to dig into.
Reply
George Tucker says:
October 15, 2021 at 12:21 pm
Always understand the business goals youâre setting out to achieve.
When Iâm outlining a project, in a briefing or a requirements doc, I always start with the goal: âWe need to email customers real-time tracking updates from USPS and UPS.â Or, âWe want to find out which products are most frequently sold together.â
Making sure the business goal is clear right at the top helps reduce scope creep and dead ends. And if the stakeholders canât agree on the business goal, well, you canât even get started.
Another thought: thereâs this gem from the Terry Pratchett novel Making Money, about the Igors (race of steampunk surgical/technological inventor geniuses), paraphrasing: âIgors didnât build what you asked for. They built what you wanted.â
If youâre clear on the goals, you can build whatâs wanted regardless of whatâs asked for.
Reply
Bill says:
October 19, 2021 at 7:18 pm
It’s hard to choose just one point, they’re all good. I’d roll with 2, 4 and 18.
#2: I just had a conversation with someone; the company built an incredible (and expensive) software product that then produced almost zero income. Why? As ingenuitive as the product was, decision makers had no need for it. Asking a client questions about what they want, we really do have to read between the lines to give them what they need. And I’ll second what George Tucker said about Igors – that was funny.
#4: Tech debt is a major topic – part of reducing it is avoiding it. I’ve seen some companies rewrite a product rather than maintain it. One lesson learned – figure out your assumptions and then question their validity.
#18: I had to laugh when I saw tautology. I thought the first sentence worked both grammatically (though debatable) and mathematically (definitely).
Reply
Chris Bartley says:
October 23, 2021 at 3:28 pm
Just wanted to say thanks and give a big thumbs up. And extra thanks for the time it must have taken to put it together…that dedication to caring and trying to make the path easier for others speaks volumes.
I’m in the 25+ years experience camp, and found zero points of disagreement. There’s a ton of wisdom here–hard earned, I’m sure–and it’s something I wish had been required reading when I started. Very well done.
Reply
Justin Etheredge says:
October 23, 2021 at 4:15 pm
Thank you Chris! I greatly appreciate it!
Reply
Sean Barton says:
October 24, 2021 at 5:53 pm
Iâm a new software engineer and love to read articles like this that offers practical wisdom in bite sized chunks. It makes it easier to digest.
Point number 6 stood out to me. Because of my lack of experience, I tend to overthink things which extends project deadlines, sometimes by a huge factor. Iâve been learning to just âcut shitâ even if it feels like Iâm making âmud piesâ with my code. It sometimes helps just to get something working, and then think about how to improve it after. In most cases I end up iterating on the concept and producing something really great, which could only have happened by just starting.
Thanks for distilling your experience, it is so valuable for people like me just starting out.
Reply
Perit Bezek says:
November 5, 2021 at 2:34 pm
Just the introduction part is valuable enough and even if the whole list was useless, it would have worth my time. I tried to pick which item is my “that’s it” one, but they are all so spot on that it’s impossible for me to favor one to others. Thank you for the brilliant article and kudos on your 20 years.
Reply
Markus Klemm says:
November 18, 2021 at 9:31 am
Pretty much full ACKN. Guess I would only add “Always maximize code for readability” “Document your interfaces not the code” “Don’t try to ride dead horses” “RTFM i.e. documentation”
Reply
XXrey says:
November 22, 2021 at 3:16 am
Verry good article, thanks!
Reply
Marc says:
November 23, 2021 at 3:56 am
Justin, your observations are spot on. Although I am enterprise architect, and in addition do some real hand-on hardware work with tube amplifiers, your lessons are universally true. I took the liberty to remind myself an referred your lessons in my own hobby blog on tube amplifiers (https://bespoketube.ismy.trade/wp/2021/11/23/software-engineering-lessons-applied-to-tube-amplifiers/)
Thank your for the lesson.
Reply
Roman Makarenko says:
November 23, 2021 at 3:03 pm
Just the introduction part is valuable enough and even if the whole list was useless, it would have worth my time. I tried to pick which item is my âthatâs itâ one, but they are all so spot on that itâs impossible for me to favor one to others. Thank you for the brilliant article and kudos on your 20 years.
Reply
Dirk says:
November 26, 2021 at 6:52 am
Many thanks for the condensed experience of which many I could find myself in after more than 20 years of programming myself. I pretty much like the designer approach and call for simplicity. Team culture also is a big factor to success. Responsibility is another.
One I missed, to me always helpful was/is “limit features in favor for stability and maintainability”.
Users don’t miss and cannot complain on features that are not existing. However, features that are out there available to the users must be solid, really solid. In addition, any features not existing don’t need to be maintained. This means cost savings on upgrades, customer support and time savings for focussing on the essentials.
In context, from an inner programmers view this means, less external libraries included can be more. Which is not meant to reinvent the wheel.
Maybe there is another one. Standards are great, a working solution is even greater.
Reply
Steve says:
November 28, 2021 at 10:50 am
This is a great post with very solid and helpful insight.
I would love to share it more widely across my organization.
It would benefit so many.
I won’t do that. 1. It contains profanity, so I can’t risk sharing it in a corporate environment, without expecting repercussions. 2. I won’t plagiarize your work by editing it without credit. 3. I can’t in good conscious reference or credit your work due to issue number one.
Consider a few edits and you might change the world.
Reply
avtohelp says:
December 1, 2021 at 8:45 am
Fantastic article. I feel like too many developers strive to reach this mythical 10x status without thinking about what small improvements could make them a better team member.
Reply
Andrew says:
February 11, 2022 at 7:07 pm
Justin, thank you for sharing your experience. I’m still studying to get my first job in this field, but I re-read this article periodically to keep me in the right mind set. Thanks for helping me start off on the right foot.
Reply
Javier Avila says:
February 12, 2022 at 6:52 pm
Awesome article! I feel identified!
Reply
Sufiyan Yasa says:
March 6, 2022 at 8:04 pm
Thank you for sharing.
16. Software engineers should write regularly Resonates well with me. Writing helps gain clarity of thought. The best devs I came across are regular writers.
21.
Never hide Errors/Exceptions – as they are your eyes and ears. In 20 years, I came to love errors. Errors are the only way for me to know if what I built is actually working.
Reply
Mihai says:
March 14, 2022 at 12:15 pm
A good read. Thank you!
Reply
Sakshi Mital says:
March 26, 2022 at 1:50 pm
I agree with most of the important points in this article. It is definitely worth a read if you’re interested in this topic. Delusion, the author, thanks for taking the time to share your knowledge.
Reply
Drew Lytle says:
March 28, 2022 at 8:37 am
Thanks for reading, Sakshi!
Reply
Jesse Brightman says:
April 10, 2022 at 1:02 pm
Thank you for writing this fantastic article.
You have accurately described the way I feel after 10+ years designing and building software and have re-inspired me to keep learning even though I am very close to giving up the profession.
Businesses and bosses need to read and understand this in order to better understand the role of software and developers in todays business environment.
Reply
Darin L. Whitlock says:
April 16, 2022 at 9:50 am
This list is very adroit. I spent 1998-2014 at a keyboard writing code.
I feel like I could have written this list. These are the topics, that when properly addressed, make solid software.
In my view, there’s one big old problem: financiers. They pay. You do as they say. The people in finance will always destroy at least half of the goals in the above list, every. Single. Time.
So I quit programming. Why? Because I like doing the old-fashioned, blue-collar type job; whether I’m sweeping up saw dust or writing CAD software for UAV designers.
I’m allowed to do my best job on the pile of saw dust.
Programmers are NEVER allowed to do their best job.
Never.
Reply
Jan says:
May 15, 2022 at 7:45 am
I just want to take a minute to say Thank you for putting this out there. Your points are all extremely valid and valuable, and essentially timeless. And a good starting point for anybody who wants to reflect on his current project or job and see what he/she can improve. Enjoyed it immensely!
Reply
Luke says:
July 6, 2022 at 4:59 am
The 10x dev is the one that stops you from reinventing wheel. Or the one that tells you a project is doomed when it is.
Reply
Leave a commentLeave a Reply
Cancel reply
Your email address will not be published. Required fields are marked *
Comment *
Name *
Email *
Website
Δ Leave a commentMore Insights
View All
devops, software development
DevOps Tooling for Local Development
Joshua Mobley
software development, thoughts
Through The Lens Of A Programmer
Nick Agliano
/
@nickagliano
learning, thoughts
Iâm surprised you enjoy consulting.
Al Tenhundfeld
/
@alric Reach OutWe're here to help. Tell us a bit about your project or idea and we can help you figure out your next steps.
Your Email* Tell us about your project or idea*NameThis field is for validation purposes and should be left unchanged.
Δ
Simple Thread 2400 Old Brick Rd, Suite 336 Glen Allen, VA 23060 1.877.893.5486 Read Our Whitepaper
Bootstrapping a Digital Product
hello@simplethread.com
Careers
Privacy
LinkedIn
Twitter
Facebook
Instagram
Dribbble
Proudly based in Richmond and Charlottesville, VA.
Virginia Map icon
© 2022 Simple Thread, LLC.


Link: https://csc.calpoly.edu/faculty/

FACULTY & STAFF – Computer Science & Software Engineering
Skip to content
Skip to content
Facebook-f
Instagram
Linkedin
Twitter
Computer Science & Software Engineering
COVID-19 FAQ
HOME
ABOUT US
NEWS
INDUSTRIAL ADVISORY BOARD (IAB)
CONTACT US
PROGRAMS
GRADUATE PROGRAMS
M.S. DEGREE
HOW TO APPLY
ELIGIBILITY
INTERNATIONAL APPLICATION REQUIREMENTS
DEGREE REQUIREMENTS
BLENDED B.S. + M.S. DEGREE
HOW TO APPLY
ELIGIBILITY
DEGREE REQUIREMENTS
STUDENT ADVISING
GETTING STARTED AT CAL POLY
FINDING AN ADVISOR
ELECTIVES
FORMAL STUDY PLAN
WRITING YOUR THESIS
SCHEDULING YOUR DEFENSE
MORE ADVISING RESOURCES
J.L. MOORE FELLOWSHIP
STUDENTS
CURRENT STUDENTS
CLUBS & STUDENT ORGANIZATIONS
PROSPECTIVE STUDENTS
FACULTY & STAFF
LINKS AND FORMS
GIVING
Menu
COVID-19 FAQ
HOME
ABOUT US
NEWS
INDUSTRIAL ADVISORY BOARD (IAB)
CONTACT US
PROGRAMS
GRADUATE PROGRAMS
M.S. DEGREE
HOW TO APPLY
ELIGIBILITY
INTERNATIONAL APPLICATION REQUIREMENTS
DEGREE REQUIREMENTS
BLENDED B.S. + M.S. DEGREE
HOW TO APPLY
ELIGIBILITY
DEGREE REQUIREMENTS
STUDENT ADVISING
GETTING STARTED AT CAL POLY
FINDING AN ADVISOR
ELECTIVES
FORMAL STUDY PLAN
WRITING YOUR THESIS
SCHEDULING YOUR DEFENSE
MORE ADVISING RESOURCES
J.L. MOORE FELLOWSHIP
STUDENTS
CURRENT STUDENTS
CLUBS & STUDENT ORGANIZATIONS
PROSPECTIVE STUDENTS
FACULTY & STAFF
LINKS AND FORMS
GIVING
FACULTY & STAFF DIRECTORY
Faculty
NAME
Title
EMAIL
OFFICE
RESEARCH INTERESTS
Chris
L
upo
Department Chair Â –Â Professor clupo@calpoly.edu 14-254Computer Architecture, Parallel and GPU Computing, Performance Optimization,
Paul Anderson
Associate Professor pander14@calpoly.edu 14-222Â Adnan AnwarLecturerÂ 14-210Â
Hisham Assal
Lecturer hhassal@calpoly.edu 14-240Â
Stephen Beard
Assistant Professor srbeard@calpoly.edu 14-214Security, Architecture, Compilers, Language, Performance
John Bellardo
Professor bellardo@calpoly.edu 14-235DSatellites, Embedded Systems, Networks, Operating Systems, Distributed Systems, SecurityBruce BurtonLecturer baburton@calpoly.edu Â 14-240Â Rodrigo CanaanAssistant Professor rcanaan@calpoly.edu Â 14-207AI, Games, Co-Creativity, Evolutionary Computing, Quality-Diversity Algorithms, Machine Learning, Reinforcement Learning
John Clements
Professor clements@calpoly.edu 14-208Programming Languages, Notional Machines for Computing Education, Continuation Marks, Functional Languages, Compilers, Music, CS EducationMohammad DobbaghLecturerÂ 14-210Â
Bruno da Silva
Assistant Professor bcdasilv@calpoly.edu 14-223Human and Social Aspects in SE, Tools for Software Development Productivity, SE Education, Software Developer Experience, Mining Software Repositories, Emotion and Sentiment Analysis applied to Software
Bruce DeBruhl
Associate Professor bdebruhl@calpoly.edu 14-213Security and Privacy, Automotive Security, Wireless Security, Software Security
Alex Dekhtyar
Professor dekhtyar@calpoly.edu 14-212Â Databases, Machine Learning, Data Science, Software EngineeringChristian EckhardtAssistant Professor eckhardt@calpoly.edu 14-238DÂ
Sussan Einakian
Lecturer seinakia@calpoly.edu 14-202Â
Phoenix (Dongfeng) Fang
Assistant Professor dofang@calpoly.edu 14-213Â
Hasmik Gharibyan
Professor hghariby@calpoly.edu 14-203Theoretical Computer ScienceJavier Gonzalez-SanchezAssistant Professor javiergs@calpoly.edu 14-227Â April GrowAssistant Professor amgrow@calpoly.edu Â 14-209Games, Physical Crafts, Procedural GenerationBret HartmanLecturer bahartma@calpoly.edu Â 14-240Â Â Paul HatalskyLecturer phatalsk@calpoly.edu 14-206Â
Michael Haungs
Professor mhaungs@calpoly.edu 14-228Game Design, Game Implementation, User Centered Design, User Experience, Mobile Apps, Web Apps, CSC Education, K12 STEAM OutreachIrene HumerLecturer ihumer@calpoly.edu 14-245Â Brian JonesLecturer btjones@calpoly.edu Â 14-236Â
Ayaan Kazerouni
Assistant Professor ayaank@calpoly.edu 14-229Computing Education, Software Engineering, Software TestingTim KearnsAssociate Professor tkearns@calpoly.edu 14-245Â
Aaron Keen
Professor akeen@calpoly.edu 14-228Programing Languages, Compilers, Static Analysis, CS Education BJ Klingenberg Lecturer bklingen@calpoly.edu Â 14-236Â
Foaad Khosmood
Professor foaad@calpoly.edu 14-204Artificial Intelligence, Natural Language Processing, Video Games, Data Science, Digital Government
Franz Kurfess
Professor fkurfess@calpoly.edu 14-203AI, Human-Computer Interaction, Ethics and Social Justice in AI and Machine LearningUlf LindqvistLecturer ulindqvi@calpoly.edu 14-240Security, Critical Infrastructures, Applied CryptographyRyan MattesonLecturer rmatteso@calpoly.edu 14-240Â Andrew MiglerLecturer amigler@calpoly.edu 116-203Â Â  Theresa Migler Assistant Professor tmigler@calpoly.edu 14-226Graph Theory, Algorithm Design, Network Analysis, CS Education, CS Outreach, CS Theory (Complexity) Kirsten Mork Lecturer klmork@calpoly.edu 14-236Â
Joydeep Mukherjee
Assistant Professor jmukherj@calpoly.edu 14-219Software Performance Engineering, Cloud Computing, Internet of Things, Machine Learning, DevOpsSumona MukhopadhyayAssistant Professor mukhopad@calpoly.edu 14-217Data Science, Machine Learning, Object Detection, Open CV
Phillip Nico
Professor pnico@calpoly.edu 14-205Â  Maria Pantoja Associate Professor mpanto01@calpoly.edu 14-211High Performance Computing, Parallel Programming (OpenMP and GPU), Distributed Systems (MPI and goLang), Reliability in Distributed Systems, Acceleration of Deep LearningDavid ParkinsonLecturer dsparkin@calpoly.edu 14-240Â
Zachary N J Peterson
Associate Professor znjp@calpoly.edu 14-215Security, Cryptographic Engineering, Computer Security Education, Storage Systems, Games and Play, Interactive Fiction, Interactive Art, Applied CryptographyAshlee PierisLecturer apieris@calpoly.edu 14-206Â John PlanckLecturer jplanck@calpoly.edu 20-200Â Vanessa RiveraLecturer vcrivera@calpoly.edu 14-202Â
Mugizi Rwebangira
Assistant Professor mrwebang@calpoly.edu 14-218Â Machine Learning, AI, Computational Neuroscience
John Seng
Professor jseng@calpoly.edu 14-231Â Robotics, Embedded Systems, Computer ArchitectureDevkishen SisodiaAssistant Professor dsisodia@calpoly.edu 14-221Â
Christopher Siu
Lecturer cesiu@calpoly.edu 14-236Â
Hugh Smith
Professor husmith@calpoly.edu 14-216Â Networks, Embedded Systems
Lubomir Stanchev
Professor lstanche@calpoly.edu 14-230Â Databases, Semantic Computing, Machine Learning, Data Science
Jonathan Ventura
Associate Professor jventu09@calpoly.edu 14-235CComputer Vision, Machine Learning, Augmented and Virtual Reality, Remote Sensing
Kurt Voelker
Lecturer kvoelker@calpoly.edu 14-202Â Jenny WangLecturer jwang96@calpoly.edu 14-240Â
ZoÃ« Wood
Professor zwood@calpoly.edu 14-235BComputer Graphics, Rendering, Games, Visualization, Computer Science Education Julie Workman Lecturer jworkman@calpoly.edu 14-206Â Â Â Â Â Â
Affiliated Faculty
NAME
EMAIL
OFFICE Jane LehrÂ –Â Professor & Chair Women & Gender Studies jlehr@calpoly.edu 47-25F
Dennis Sun
Â –Â Assistant Professor Statistics dsun09@calpoly.edu 25-109Enrica Lovaglio Costello – Art and Design elovagli@calpoly.edu Â 34-163Jean Davidson – Biological Sciences jdavid06@calpoly.edu Â 33-267
Active Emeriti
NAME
EMAIL
OFFICE
Charles Dana Â  –Â Professor chdana@calpoly.edu 14-240
Tim Kearns
Â –Â Associate Professor tkearns@calpoly.edu 14-245
Staff
NAME
POSITION
EMAIL
Leanne Fiorentino
Administrative Support Coordinator
lfiorent@calpoly.edu
Teresa Medrano
Administrative Analyst Specialist
tlmedran@calpoly.edu
College Resources
Frequently-Asked Questions (FAQ)
Engineering Majors and Departments
Engineering Advising
Contact US
Dean’s Office:
Building 192, Room 301 Hours: Monday – Friday, 8 A.M. to 5 P.M.
College of Engineering
engineeringdean@calpoly.edu
805-756-2131
1 Grand Avenue, San Luis Obispo, CA 93407Â Â Â
805-756-1111
Instagram
Twitter
Facebook
University HomeÂ Â  Â Â My Cal Poly PortalÂ Â  Â  Campus MapÂ Â  Â Â  Diversity, Equity and Inclusion Â  Â Â  Health and Wellbeing Â  Â Â  Campus Safety
Privacy Notice Â Â  Website Feedback Â Â  Web Accessibility Statement Â Â  Title IX Â Â  Campus Annual Security Report (PDF) Â Â  Campus Safety Plan Â Â  PDF Reader
Â© 2022 California Polytechnic State University
College Resources
Frequently-Asked Questions (FAQ)
Engineering Majors and Departments
Engineering Advising
Contact Us
Dean’s Office:
Building 192, Room 301 Hours: Monday – Friday, 8 A.M. to 5 P.M.
College of Engineering
engineeringdean@calpoly.edu
805-756-2131
1 Grand Avenue, San Luis Obispo, CA 93407 805-756-1111
Instagram
Twitter
Facebook
University HomeÂ Â  Â Â My Cal Poly PortalÂ Â  Â  Campus MapÂ Â  Â Â  Diversity, Equity and Inclusion Â  Â Â  Health and Wellbeing Â  Â Â  Campus Safety
University Home
My Cal Poly Portal
Campus Map
Diversity, Equity and Inclusion
Health and Wellbeing
Campus Safety
Privacy NoticeÂ Â Â Â Â  Website FeedbackÂ Â Â Â Â  Web Accessibility Statement Â Â Â Â  Title IX Â  Â  Â Campus Annual Security Report (PDF)Â  Â Â Â Â  Campus Safety PlanÂ Â Â Â Â  PDF Reader
Â© 2022 California Polytechnic State University


Link: https://blog.tryexponent.com/learn-software-engineering-levels-to-advance-your-career/

Learn Software Engineering Levels to Advance Your Career
Interview Courses
Interview Coaching
Blog
Company Guides
Learn Software Engineering Levels to Advance Your Career and Climb the Ladder
Last updated on
Sep 29, 2022
Hey there! This article is part of our series on Software Engineering. For even more help and resources, check out our complete
Software Engineering Interview Course . Software engineering levels are the road map that gets you to your career destination and higher up the software engineering ladder. Understanding how they work is fundamental to navigating the software engineer career path.
Of course, itâs not all just for you! Levels also help employers in the hiring and promotion process.
Software engineering levels create a clear ladder of progression. Understanding the responsibilities and expectations for each level will help you to climb that ladder.
What you can expect from this article is a look at a standard level system. We'll break down the value of levels and then a zoom in on how levels work at different tech companies.
By the end, youâll have the information and tools you need to see how you need to get where you want to be as a software engineer. Standard Software Engineer Career LevelsSource:
Edvard Alexander RÃ¸lvaag
on Unsplash.com The standard software engineering career levels are as follows: Level 1 - Software EngineerLevel 2 - Senior EngineerLevel 3 - Staff Engineer (alternate: Senior Staff Â  Â  Â Engineer)Level 4 - Principal EngineerLevel 5 - Distinguished Engineer / Fellow Individual companies often use personalized leveling systems that contain more tiers, but they generally follow this basic outline.
Keeping in mind that this is a generalized list, letâs look at whatâs expected for each level. Level 1 - Software Engineer This position, sometimes called a Junior Software Engineer, is usually someoneâs first full-time software engineering job.
Engineers at this level are not expected to take much ownership over the companyâs product.
Instead, they work on assignments given to them by people who have decided on the direction of the product.
The general order of operations looks like this:
The highest level engineers find problems and focus teams on those problems. Mid-level engineers take those problems and find solutions. Mid-level software engineers then explain the solution to junior engineers. And junior engineers work on coding
one piece of that solution.
Engineers at this level are expected to be competent, but not experts.
The company knows that thereâs going to be a learning process, and they know youâll even mess up sometimes. Thatâs fine.
They want someone who is a quick learner, a creative thinker, and can work well on a team.
Entry-level Software Engineer Compensation
Of course, compensation packages have a wide range depending on who youâre working for and where youâre working!
The average software engineer in San Francisco earns about $115,000 per year.
Software engineers at the top tech companies like Google can earn about $187,000 per year considering the total compensation package.
Advancing Your Career to Senior Engineer
On top of experience, getting to the next level will require proven competence across a wide range of tools and types of problems.
Basically, the ability to ride the bike after taking off the junior software engineer training wheels.
To get there, learn and practice as much as you can.
Learn about new programs. Learn about solving problems youâre unfamiliar with.
Keep notes on things youâve had to ask for help with. Practice those issues so you can do it independently next time.
Donât shy away from asking for helpâmentoring is one of the best ways to learn.
But youâll want to eventually show that you can work well with minimal supervision in order to get to the next level. Level 2 - Senior Software Engineer Senior software engineers typically boast 3 or more years of full-time engineering experience. t doesnât necessarily have to be at the same company.
While the scope of this position is not significantly larger than that of a junior engineer, the position carries higher expectations.
Itâs not a manager position. A senior engineer will still be working on solutions given to them by their engineering manager or a product director.
But management will expect that a senior engineer can complete the solution with little or no guidance.
Senior software engineers are also expected to have at least some kind of role in guiding the junior engineers.
Senior engineers are knowledgeable people on the team. Itâs expected that they can help get junior engineers up to speed.
Senior Software Engineer Compensation
Senior software engineers earn an average salary of Â $134,386 in the San Francisco Bay Area. Top tech companies pay around $194,372 for top talent. Equity and stock options are often an important part of your total compensation, and itâs important to have a plan in place to exercise them when you leave your job. Check out Equitybee to fund your exercise cost, so you donât lose out on them!
Advancing to Staff Engineer
On top of experience and technical skills, the next level requires people skills. As a staff engineer, youâre either moving towards management or becoming an independent contributor.
Both require excellent communication skills.
This doesnât require you to go over the top with forced small talk at every available moment. In fact, doing so is more likely to annoy coworkers than to endear them!
Take a genuine interest in the people around you. Remember that success at a job requires honing your skills, but it also requires supporting your team.
Additionally, getting to the next level requires an understanding of the big picture.
Learn how systems come together when developing an app. What's are the company's 5 and 10-year goals? Level 3 - Staff Engineer The Role: With the staff engineer, we are officially into management territory. This position is often 6 or more years into your career, and now it starts to become a benefit if those years are at the company.
We mentioned before that junior engineers arenât deciding on the problems nor are they coming up with the solutions, but instead they are given solutions to work on by managers. A staff engineer is likely that manager giving the solution. A staff engineer will often act as a go-between for the higher management who are making the company-wide decisions and the engineers who are writing the actual code.
A staff engineer will sometimes help decide on a problem to focus on and sometimes a staff engineer will spend time writing in code, but the primary role of a staff engineer is to ensure the team produces a strong solution for the problem upper management wants to focus on.
$$$: Average salary of $140,492 per year in the Bay Area. At the top tech companies, it can be around $210,966 per year. Â
The Next Level: The next level is tough, and most will not reach it. On top of people skills and coding skills and all the other skills mentioned, advancing to the next level requires a long track record of ownership over projects that are more than just successful. It requires innovation. For the next level, theyâll be looking for people who can do more than correctly use the systems. They want people that can change the systems.
Level 4 - Principal Engineer The vast majority of engineers will not progress to this level. These positions are rare, requiring a long track record of proven success as well as a good deal strategyâor luckâwith being in the right place at the right time.
The higher one goes into management, the more difficult it is to say that this position will come after X years, especially when different companies are using different level systems. However, this position is usually 10 or so years down the line.
While the staff engineer ensures success on their team, the principal engineer begins to transcend teams. The focus is now on the company as a whole. And rather than finding solutions to problems, the principal engineer is now working on finding what those problems are in the first place.
This is a significant shift in scope of oneâs work. This position is far less about coding, and far more about business and theoretical ideas.
This is part of the reason why itâs so important to understand software engineering levels for the company youâre at. If managing teams and deciding the direction of the company sounds exciting to you, then chase this ladder. However, if that doesnât sound interesting and youâd rather develop into an all-star coder, then you should look into ladders that lead to being an individual contributor.
$$$: Salaries become far more difficult to predict at this range. Glassdoor places the average salary at $148,633 per year, but that can go up to $907,500 a year at the big tech companies, with a total compensation package of well over a million dollars.
The Next Level: Exceptionally few get to the next level. The next level is reserved for those who shape the entire industry. Level 5 - Distinguished Engineer / Fellow This is essentially the top of the totem pole. These are computer science gurus who have imagined, built, launched, and maintained multiple massively successful projects. Their influence trickles down throughout the entire company. If the company is influential enough, that influence likely extends throughout the entire industry.
For example, Sebastian Thrun is someone who has held the honor of being a Google Fellow. He co-developed Google Street View.
$$$: The sky's the limit. The Value of LevelsSource:
Sam Mgrdichian
on Unsplash.com Overall, levels help both you and the employer because they create clear expectations, thus avoiding misunderstandings. To set the stage, letâs first discuss why companies use levels. Then weâll look at how you can make the level system work for you.
For Companies Although this article will focus on software engineering levels, the concept of a multi-tiered leveling system is not unique to software engineering positions. Lots of fields and companies use levels to add structure to their workforce.
The main way that levels benefit a company is that it helps to avoid conflict. In an article on Noteworthy - The Journal Blog, Chuck Groom describes several awkward situations that a company can avoid by using a well-structured level system.
One situations states: Frank wants a promotion to a âSeniorâ title, but we donât feel heâs ready yet; he asks why not? â We need a way to explain the difference between levels, and give Frank guidance on which skills to develop. Another hypothetical situation he gives is: We hired Karen a few years ago at $85k/year. We hired Noreen this summer â after a bidding war with Facebook, her salary wound up being $120k/year. Karen and Noreen do the same work. Over drinks, Karen finds out how much Noreen is paid. â This is a disaster. We canât afford to pay everyone $120k. But Karen has every right to call foul. These are nightmare scenarios for any manager or HR department. It leads to conflict, and conflict leads to a disgruntled team. Things start to fall apart all because the company had no satisfying answer to give for why this employee wasnât ready for a promotion or why that employee earns less than a coworker. Using levels gives companies that satisfying answer.
On the flip side, a company might be able to get by with paying some employees less if they didnât use a structured level system. However, the level system helps companies to avoid a world of headache.
Itâs like the difference between haggling over the price of an apple at a farmerâs market versus buying it for the listed price at Target. I might save a few cents by haggling, but Iâd rather not debate the price of produce every time I want an apple. For You Employers use levels because it helps them, but it also helps you as an employee. The main reason is that it provides clarity to your career path.
Suppose youâre in the position of Frank, engineer from the scenario a few paragraphs prior. Heâs an engineer looking for a promotion, but he works at a level-less company. His promotion is denied and heâs left without knowing what he could do better to ensure the promotion next time. Was his work not good enough? Did he not have enough years of experience? Do the managers only give promotions to their personal friends?
Levels do away with all that mess. They clearly state that to get a certain position, youâll need X number of years and Y set of skill equals. Therefore, you know exactly where to direct your energy in order to improve your career. There will still be some level of discretion from managers, but levels generally make promotions far more straightforward.
Likewise, levels can make the process simpler if youâre applying to a company that you know uses levels. Gone are all those worries over which position to apply for, constantly wondering if youâre selling yourself too short or overselling yourself. Levels show clear expectations so that you know exactly for which position you should apply.
SoundCloud has a great write up on their level system. In a brief section explaining why they use a level system, they say: To provide clarity on what our understanding of growth is, we have a level system (as many other companies do). This system defines our engineering culture by giving guidance to people on how to increase their impact within SoundCloud, facilitating career discussions between engineers and their managers, providing a framework for setting salaries, and last but not least, encouraging and rewarding certain behaviors.Transparency around everyoneâs level at a company helps people identify their role models. Additionally, an explicit level structure is beneficial for people who are underrepresented, as non-explicit hierarchies tend to favor the people who form the majority (which, most of the time, is white men).Level Variety A good exercise is to spend some time on Levels.fyi comparing companies to each other. Look at the structure of their level system, and also click on the first few levels to get a general idea for that levelâs compensation and how many years of experience it requires.
What youâll often see is that while using levels provides structure, it still has flexibility. It becomes even more flexible the higher up the ladder one goes. The more control over the company a position has, the more inclined a company is to take a personal approach instead of following an assembly line promotion process.
Googleâs level system is certainly the most influential throughout the industry. Many smaller tech companies and departments use a similar system. Still, variety exists. One can see this just by looking at five of the biggest tech companies. Source: Levels.fyi A quick glance gives you a rough idea of what progressing through the company would feel like. Google, Facebook, and Amazon all use similar tracks. They donât have notable variation, and what variation exists is generally towards the higher end of the ladder.
The two outliers are Apple and Microsoft. Microsoft has roughly double the number of levels as the other major companies. A career with Microsoft would likely mean that each promotion is smaller, but those promotions come much more often. Apple has significantly fewer levels than the other companies, so the opposite would be true.
Variety can go even further than that. In the image below, one of these is not like the others: Source: Levels.fyi Netflix chooses to operate without a level system. All of their software engineers are senior software engineers.
The lack of levels seems appropriate for a company like Netflix. They arenât developing a hundred different projects like other tech giants. Instead, they have their streaming platform, and all they want is to work on that one project.
Additionally, Netflix famously has a culture which values merit over hierarchy. Every engineer is a senior engineer because they seem to only hire engineers with years of experience. They expect their people to work hard and speak their mind. The push employees, but also compensate. Their pay leans much more towards base salary than company stock, but the overall package is often higher than it is for similar years of experience with other companies.
In Short Companies use levels because it provides structure, and you can use that structure to make your climb easier. Every company will have a leveling system thatâs slightly different, but the basic idea will remain the same. Learn the levels, learn whatâs expected for the next level, and then direct your energy in that direction. This is the best strategy to advance your career.
And if youâre just starting your career, Exponentâs system design interview course provides the jump start you need to succeed.
*Title imagine source: Jukan Tateisi on Unsplash.com
Previous
The New Normal For Tech PMs Navigating COVID-19
Next
How to Write a Product Requirements Document (PRD)
Exponent Â© 2022
Powered by Ghost


Link: https://compeng.columbia.edu/people

People | Computer Engineering
Skip to main content
Columbia University in the City of New York
Toggle search
Columbia University
Computer Engineering
Toggle search
Submit keywords
Search the site
Main navigation expanded
Undergraduate Program
Graduate Program
Research
People
News
Resources
Admissions
Course Flowcharts
Curriculum Checklist
General FAQs
Incoming 3-2 FAQs
Undergraduate Advisors
Admissions
MS Orientation
MS Checklist
Computer Engineering
You are here:
Home
People
People
photo of Luca CarloniFacultyLuca Carloni Associate Professor of Computer Science photo of Asaf CidonFacultyAsaf Cidon Assistant Professor of Electrical Engineering, Dept of Electrical Engineering photo of Stephen A. EdwardsFacultyStephen A. Edwards Associate Professor of Computer Science photo of Xiaofan (Fred) JiangFacultyXiaofan (Fred) Jiang Assistant Professor photo of Ethan Katz-BassettFacultyEthan Katz-Bassett Associate Professor of Electrical Engineering; Affiliate in the Computer Science Department; Affiliated Member of the Sense, Collect and Move Data Center at the Data Science Institute photo of Martha A. KimFacultyMartha A. Kim Assistant Professor of Computer Science, Computer Engineering Program Chair photo of Vishal MisraFacultyVishal Misra Professor of Computer Science and Professor of Electrical Engineering photo of Daniel RubensteinFacultyDaniel Rubenstein Professor of Computer Science photo of Mingoo SeokFacultyMingoo Seok Associate Professor of
Electrical Engineering, Dept of Electrical Engineering photo of Simha SethumadhavanFacultySimha Sethumadhavan Associate Professor of Computer Science photo of Ken ShepardFacultyKen Shepard Lau Family Professor of Electrical Engineering; Professor of Biomedical Engineering photo of Charles ZukowskiFacultyCharles Zukowski Professor of Electrical Engineering photo of Gil ZussmanFacultyGil Zussman Professor of Electrical Engineering; Academic Director of Electrical Engineering MS Programs, Dept of Electrical Engineering photo of Edward G. CoffmanFaculty EmeritusEdward G. Coffman Professor Emeritus photo of Stephen H. UngerFaculty EmeritusStephen H. Unger Professor Emeritus photo of Cassandra KokofuStaffCassandra Kokofu Student Affairs Manager, Dept of Electrical Engineering photo of Jennifer LeeStaffJennifer Lee Career Placement Officer, Dept of Electrical Engineering photo of Elsa SanchezStaffElsa Sanchez Director of Student Affairs
Phone
212-854-2993
Contact Us
[email protected]
Follow Us
Facebook
Twitter
Columbia University
©2022 Columbia University
Accessibility
Nondiscrimination
Careers
Built using Columbia Sites
Back to Top
Close


Link: https://philip.greenspun.com/ancient-history/managing-software-engineers

Managing Software Engineers
Managing Software Engineers
by Philip Greenspun in October 2002
Site Home : Ancient History : One artifact
Editor's Note: This article refers to a company, ArsDigita, that
developed an open-source software product, a toolkit for building
Internet applications.
This toolkit was reasonably popular between 1998
and early 2001.
Please note that this article is part of an archive.
Do not expect the links to work.
The Original Text of the Article:
Philip Greenspun founded ArsDigita Corporation and was its CEO from
inception until it reached $20 million/year in revenue.
Currently he
flies airplanes and helicopters and teaches electrical engineering and
computer science at the Massachusetts Institute of Technology.
Why an article on managing people?
And one written by someone with
training in computer science rather than business administration?
There are thousands of books on the best ways to manage people.
Many
of these books are excellent, having been written by people who've
devoted their lives to the discipline.
Software engineering is different.
Software engineering is different because only the best people
significantly contribute to achievement.
Traditional management texts
assume a distribution of talent among the workers.
Each worker is
contributing something useful and the challenge is to get each one to
perform at his or her maximum potential.
In the same factory, the
best worker may produce two or three times as much as the average, but
all the workers are contributing.
In software engineering a good
programmer is at least 10 times more productive than an average
programmer (Brooks 1995).
If a product is being developed rapidly, the average
programmers will consume nearly their entire work day just in reading
and understanding the new code generated by the good programmers.
Thus the challenges of a software engineering manager first and
foremost are (1) creating a work environment where good programmers
will be satisfied enough to stay, and (2) creating a system via which
average programmers can become good.
In an ideal software engineering
organization, there are still some average-quality people but these
should be viewed as being apprenticed to the best people and being
taught as fast as possible.
Software engineering is different because people at all levels of the
organization perceive themselves to be equally intelligent.
Consensus-style management can perhaps work when there is a gradient
of perceived ability.
Given enough time, the less able workers will
follow the lead of the more able workers.
One of the paradoxes of
software engineering is that people with bad ideas and low
productivity often think of themselves as supremely capable.
They are
the last people whom one can expect to fall in line with a good
strategy developed by someone else.
As for the good programmers who
are in fact supremely capable, there is no reason to expect consensus
to form among them.
Each programmer thinks his or her idea about what
to build and how to build it is the best.
(See Kruger and Dunning's
"Unskilled
and Unaware of It: How Difficulties in Recognizing One's Own
Incompetence Lead to Inflated Self-Assessments" for more on this
topic.)
Software engineering is different because a leaf-node worker is more
expert than any manager, even when the manager is a great engineer, in
at least the small portion of the system that the leaf-node worker has
personally built.
This makes it difficult for a manager to engage in
a technical argument with a worker.
It becomes nearly impossible when
the manager's technical skills are weak.
The worker can spin castles
of complexity in the air and come up with impressive-to-the-MBA
excuses for why it has to be done a certain way or on a certain
schedule.
Software engineering is different because the organization can't
afford to lose the individual productivity of the best people by
pushing them into management.
A truly great programmer may generate
10 times as much business value as a merely good programmer.
Can the
organization afford to take someone who can do the work of 100 average
programmers and push him or her into a pure management role?
Probably
not.
Can the organization afford to put people with weak technical
skills into management roles?
Probably not.
Once you give Joe MBA a
title and ask him to coordinate eventually he will be making decisions
that have engineering implications.
Thus many of the best programmers
are eventually forced at least to assume project leadership and
mentoring responsibilites.
Since they are still expected to produce
designs, software, documentation, and journal articles, the danger is
that the new manager will become glued to his or her screen and never
look up to see how the project team is doing.
Software engineering is different because measurement is notoriously
difficult.
The world is full of products that failed due to overly
complex and tasteless designs.
Yet all of these designs were
considered tasteful by their architects.
Systems that experts
evaluated and found wanting, such as the Unix operating system (1970),
eventually proved to have great utility.
It is a bit easier to count
up the lines of code per day produced by a programmer but if the
project was not very tightly specified originally, how do you know
whether or not these lines of code are useful?
At this point a skeptical reader might be thinking that, while
software engineering is different from line production work or any
other endeavor with a manufacturing division of labor, there are
similarities with research and development, management consulting, and
financial analysis.
This is certainly true but there aren't too many
interesting books on how to reliably produce results in these fields
(one is referenced in the "More" section below).
Ideas to Steal
Software engineering is different but it is not that
different.
What ideas can we steal from the broader world?
people don't do what they are told
all performers get the right consequences every day
small, immediate, certain consequences are better than large
future uncertain ones
positive reinforcement is more effective than negative
reinforcement
ownership leads to high productivity
people don't do what they are told
In Bringing out the Best in People, Aubrey Daniels notes
"If we always did what we were told, we would eat only nutritious
foods, never drink too much alcohol, and exercise regularly."
There
is thus a natural limit on the effectiveness of written policies and
management by telling then nagging.
A corollary to this principle is that people do what you reward them
to do, not what you hope they will do.
Often, when you look at what
is truly rewarded in an organization, you find it is different than
what you think is rewarded.
Do the managers have an engineering
background?
If not, they'll probably be unable to perceive when a
programmer is accomplishing nothing.
So the programmer who does
nothing gets a paycheck at the end of the month.
Having thus been
rewarded for doing nothing, the programmer tries it again the next
month...
all performers get the right consequences every day
The natural way to manage is to spend time with people who aren't
doing a good job.
You help them out.
You remind them of the good
things that can happen to them if they finish a project or raise the
spectre of their being laid off the next time the company needs to
improve its profitability.
These are probably the right consequences
for someone who is underperforming.
But what about the people who
are performing?
What if you ignore them day-to-day?
Unless
they are getting positive reinforcement from another source, they may
stop coming in on the weekends to get a release out the door earlier,
stop documenting their code, stop writing journal articles.
A top
performer won't sink to the level of a problem employee but that
person may become average.
And in the long run a company with average
workers will at best earn an average return on equity.
small, immediate, certain consequences are better than large,
future, uncertain ones
An annual review and bonus is not classically considered a very good
way to motivate people.
It is too far away, especially in a dotcom
economy.
Even if a worker is able to keep the bonus goal fixed in his
or her head for the 365 days preceding the bonus allocation, there is
uncertainty attached to it.
What if the company is doing really badly
at the end of the year?
Will there still be a bonus?
positive reinforcement is more effective than negative
reinforcement
Like most schools worldwide, MIT practices negative reinforcement at
the undergraduate level.
If student does not do a problem set by a
certain deadline, we give him or her a bad grade.
This has turned out
to be extremely effective at ensuring that an MIT graduate has
achieved some minimum standard.
However, the students don't
accomplish all that they could.
The first term that we taught 6.916,
we gave the students one week to do Problem Set 1.
It was pretty
tough and some of them worked all night the last two nights.
Having
watched them still at their terminals when we left the lab at 4:00 am,
we wanted to be kinder and gentler the next semester.
So we gave them
two weeks to do the same homework assignment.
The first week went
by.
The students were working on other classes, playing sports on the
lawn, going out with friends.
They didn't start working on the
problem set until a few days before it was due and ended up in the lab
all night just as before.
We thus proved the management adage that a deadline just gives someone
an excuse to procrastinate and do nothing until the very end.
Graduate school at MIT is different.
We want the students to do
research, write up their results, publish them in journals, and
graduate with a reasonably interesting PhD thesis.
If a student
finishes some research, the most effective faculty advisors
immediately provide positive reinforcement by paying attention,
helping design the next experiment, helping to draft a paper outline.
If the student finishes a write-up, he or she is positively reinforced
by being sent to a conference to present it.
If the student finishes
a PhD thesis, he or she is positively reinforced by being given a 3-7X
pay raise.
The lesson from MIT?
Negative reinforcement can work if the
organization is extremely tightly managed, if the consequences are
small and immediate (usually a problem set is due every week and only
represents a part of the final grade), and if the goal is to make sure
that everyone comes up to a reasonable level.
However, the
worldwide fame of MIT rests on research achievements by graduate
students.
This innovation is mostly supported by positive
reinforcement.
ownership leads to high productivity
A related issue to positive/negative reinforcement is
ownership.
Non-ownership systems discipline those who are not
working up to the minimum standard, but they do not offer enough of an
upside to truly motivate people.
Morever, non-ownership systems
demand a very accurate setting of standards.
Ownership-oriented
systems include contingent rewards with an almost unlimited upside,
and are thus effective at getting as much discretionary effort out of
workers as possible.
As an example, in the early days of ArsDigita we had only a handful of
customers: America Online, Environmental Defense Fund,
Hewlett-Packard, Levi Strauss, Oracle Corporation, and Siemens.
We
had only a handful of programmers as well and hence the easiest way to
divide the work was to give a programmer total responsibility for one
project.
The programmer owned that customer.
If the project
went well and the customer wrote us a big check, we gave nearly all of
the money directly to the programmer.
If any project had gone poorly
and we'd been fired by a customer, we would not have had to think very
hard to figure out who was responsible (fortunately this never
happened while I was running the company!).
People worked insanely
hard to make their projects successful and their clients happy.
More
importantly, the programmer who did an entire project by him or
herself learned enough to train new people, lead a larger project,
etc.
After we grew beyond the 40-person mark, pressures to dilute the
ownership aspects of our organization grew.
We wanted to grow
rapidly--nobody wants to buy enterprise software from a small company,
even if the software happens to be open source.
As our reputation
grew, customers came to us with larger projects.
We believed that
many of our developers were too junior to handle complete
responsibility for these large projects.
Our costs went up because we
had to coordinate the diffused responsibility.
In the summer of 2000,
when we had 200 or so employees, one of our clients was unhappy. It
took a week just to arrange a meeting among the five managers who bore
collective responsibility for the project!
Meanwhile, individual
productivity fell.
It was taking more programmer-months and more
calendar months to get things done.
On weekend mornings you could
walk naked through an entire floor of our headquarters building
without fear of embarrassment.
(At the time of this writing, there is a proposal on the table to
consolidate some of the separate management pyramids, thus taking us
back closer to our original structure.)
Building and keeping a good software engineering team
What is the best way to attract some good software engineers to your
organization?
Hire a few to begin with.
Good people like to work
with other good people.
This is true in every field but much more
acute in software engineering.
Why?
Consider two management
consultants working on different projects but within the same
organization.
If Consultant A does a bad job it harms Consultant B's
reputation to some extent but does not require Consultant B to take
any action.
Whereas in most tech companies if Programmer A does a bad
job it usually means that Programmer B will eventually be forced to
use the bad code, read the bad code, and then fix the bad code.
What attracts good programmers?
Traditionally the best programmers
seek the most challenging problems.
They want to work in an
organization that is trying to build something important.
Programmers
have huge and fragile egos.
If they are somehow assigned to a trivial
problem and that is their only possible task, they may spend six
months coming up with a bewildering architecture more complex than the
Windows 2000 operating system, merely so that they can show their
friends and colleagues what a tough nut they are trying to crack.
Another source of ego-gratification for programmers is to have other
programmers admiring their work.
Open-source software projects thus
have a big recruiting advantage over closed-source software
companies.
What kind of working environment is necessary for programmer
satisfaction?
Good programmers want to achieve and therefore removing
barriers to achievement is the most important step that one can take
in creating an effective working environment.
Programmers dread
elaborate process, endless meetings, and layers of marketing approval
before a product can be shipped.
Ideally it would be possible to
conceive a product on Friday evening, set up the development
environment Friday night, write code on Saturday and Sunday, test on
Sunday night, and ship on Monday morning.
Maintaining this kind of
freedom is a serious challenge as a company grows and its products
become more complex.
Successful companies such as Oracle Corporation
burden their marketing departments with overlapping products rather
than stifle programmer initiative.
For example, during most of the
late 1990s there were at least three different Web servers that you
could buy from Oracle, each one backed up by a document explaining why
it was the one true path toward database-backed Web site glory.
A good physical working environment is essential.
Great programmers
get a lot of positive reinforcement from their work itself.
They
write some code and immediately can see it dance.
That keeps them at
work for hours that, while they would not impress a taxi driver in
Singapore or a factory worker in Guangzhou, will surprise
many American business people.
When we hired an architect to lay out
the interior of ArsDigita's first building in Cambridge he surveyed
the programmers and came back shaking his head: "I've never seen any
group of people who spend so many hours continuously sitting at their
desks."
From a business point of view, long hours by programmers are a key to
profitability.
Suppose that a programmer needs to spend 25 hours per
week keeping current with new technology, getting coordinated with
other programmers, contributing to documentation and thought
leadership pieces, and comprehending the structures of the systems
being extended.
Under this assumption, a programmer who works 55
hours per week will produce twice as much code as one who works 40
hours per week.
In The Mythical Man-Month, the only
great book ever written on software engineering, Fred Brooks concludes
that no software product should be designed by more than two people.
He argues that a program designed by more than two people might be
more complete but it will never be easy to understand because it will
not be as consistent as something designed by fewer people.
This
means that if you want to follow the best practices of the industry in
terms of design and architecture, the only way to improve speed to
market is to have the same people working longer hours.
Finally there
is the common sense notion that the smaller the team the less
management overhead.
A product is going to get out the door much
faster if it is built by 4 people working 70-hour weeks (180
productive programmer-hours per week, after subtracting for 25 hours
of coordination and structure comprehension time) than if by 12 people
working 40-hour weeks (the same net of 180 hours per week).
The
12-person team will inevitably require additional managers and all-day
meetings to stay coordinated.
Your business success will depend on the extent to which programmers
essentially live at your office.
For this to be a common choice, your
office had better be nicer than the average programmer's home.
There
are two ways to achieve this result.
One is to hire programmers who
live in extremely shabby apartments.
The other is to create a nice
office.
Microsoft understands this.
In the early 1990s they did
radio spots with John Cleese as a spokesman.
One of the main points
of the ad was to ridicule the cheap open-plan offices in which
programmers were traditionally housed and promote the fact that at
Microsoft each developer gets a plush personal office.
How can an office be nicer than one's home?
Let's consider the
following dimensions:
social
physical comfort
aesthetic
entertainment
attractive
Social
It is easy for an office to beat the home on the social dimension,
especially if the programmer lives alone.
If there are people at work
at all times of day and night and you've succeeded in building an
organization of good people, ipso facto there is always someone
interesting to talk to at the office.
To exploit fully the social
possibilities of the programmers' office, it is important to have
informal gathering spaces.
At the MIT Artificial Intelligence
Laboratory, which has nurtured groups of great programmers for nearly
40 years, the gathering spaces are referred to as "playrooms".
These
contain sofas and coffee tables, movable in the best tradition of
Dewey, where programmers eat, talk, and occasionally listen to
presentations.
Usually a playroom will have some sort of shared
writing surface such as a whiteboard.
Note that these playrooms also
are an important part of an organization's knowledge management
system.
You need to give programmers from different projects a place
to meet where problems can be discussed and solutions from older/other
projects can be suggested.
A social place will never be friendly if it is trapped behind a high
wall of security.
It ought to be very easy for a programmer to invite
a friend over.
If programmers are comfortable meeting their friends
at the office it greatly increases the likelihood of friends
recruiting friends.
An open office plan contributes to making the work environment
stronger on the social dimension.
Physical Comfort
A programmer's work environment should be a supremely comfortable
place to sit, look at information on a screen, and type.
At ArsDigita
we accomplish this via providing Aeron chairs, the keyboard of the
programmer's choice, and at least two monitors.
In the summer, the
place should air-conditioned 24 hours per day, 7 days per week.
In
the winter, the office should be heated and humidified (often
neglected).
The air should be cleaned year-round with high-efficiency
mechanical filters and electronic cleaners so that allergy sufferers
are not discouraged from working.
One horrible mistake that we made was letting our architect design the
workstations.
Each programmer was given a 6'x2' desk, 12 square feet
total.
Two 21" monitors took up so much depth that there wasn't even
room for a keyboard.
Immediately we had to toss our monitors and get
flat panels (cost about $400,000 extra).
IBM had a better architect
for its Santa Theresa facility: Gerald McCue.
He found that each
worker needed 100 square feet of dedicated space and 30 square feet of
work surface.
McCue also found that programmers needed noise
isolation from enclosed offices or high partitions but personally we
think this rule is worth breaking in a dotcom world where a team has
to work fast and in sync.
Better to manage noise by spreading desks
apart a bit so that there are fewer programmers in a given area and
therefore fewer conversations, fewer telephones, and more
opportunities for sound to be absorbed before reaching someone's ear.
Aesthetic
Programmers don't have the same need for wood-paneled expensive
plushness that, say, corporate lawyers or investment bankers might.
However, the office has to be aesthetically satisfying or it will be
tough for anyone to take seriously the idea that the company values
aesthetic internal design of computer programs.
Similarly, the office
has to be finished and well-executed or nobody will believe that the
organization is committed to finishing products.
In the long run it
is impossible for an organization to be excellent in one area and
mediocre in all others.
So the physical facilities have to look as
though they were planned and decorated by someone with taste.
Note
that this need not be expensive.
You could do it with $200 desks from
Ikea and a consistent set of art posters on the walls.
But an
expensive facility with blank walls and boxes left over from the last
move screams incompetence.
Remember that the overall place has to
look nicer than most of the programmers' houses.
Entertainment
It is easy to make an office more entertaining than the average
person's home.
Most people have a TV at home but they don't have
friends with whom to watch it.
Nor will they typically have the kind
of big-screen equipment that is easy for a company to acquire.
In the
1980s students at the MIT Media Lab would gather on quite a few nights
to watch movies from analog laserdisks, presented with a very high
quality projector.
After the movie was over, they'd go back to their
desks and work for a few hours, something that would not have happened
if they'd gone out to the movies.
The average home cannot accomodate a pinball machine.
An office can.
The average home can have video games, which are very popular with
young programmers, but not people with whom to play.
The average home
cannot have a grand piano but almost any office can.
Attractive
A worthwhile goal is to have at least one thing that is extremely
attractive about the physical enivronment for any particular
prospective software engineer.
Here's a possible list:
dog-friendly policy
grand piano
climbing wall
indoor garden
aquarium
koi pond
exercise room with fancy machines
pinball machine
Not everyone has a dog.
Not everyone can play the piano.
Not
everyone wants to practice rock climbing.
But by having a long list
in the same building, there is a good chance that at least one item
will be very attractive to a particular person.
If a person loves
gardens, he or she can be seated at a desk within view of the garden.
That person won't value the other items, perhaps, but another employee
will.
Change of Venue
You can work on all of the preceding dimensions but there will come a
day when a programmer gets restless.
Sitting at exactly the same desk
every day is tedious.
We thought that we could solve this at
ArsDigita by using the Internet and our branch offices.
We'd
encourage programmers from Cambridge to pick up and work at a spare
desk in the Berkeley or Pasadena offices for a week or two.
The idea
did not catch on, however, because it turns out to be disruptive for
one person on a team to disappear.
One of the reasons we've found
open-plan offices effective is that it helps to have one's team
members close enough to look casually at what is on the screen.
What does it take to let the entire team pick up and work somewhere
else for awhile?
A beach house or a ski house within a two-hour drive
of their main office.
It is kind of expensive for an individual to
rent a vacation house year-around, equip it with a DSL line or cable
modem, and pack it with enough desks and computers for a team to work.
But if you've got a group of 30 programmers and get a house large
enough for 6 or so to sleep and work, the cost is manageable.
In the
winter, a programming team can disappear for a week, ski every morning
and work all afternoon and evening.
In the summer, a team can spend a
week looking out at the ocean... while typing most of the time.
It
costs more than not having the beach house but a lot less than having
employees go off on their own to have fun every weekend and not work.
Turning average programmers into good programmers
It is difficult to hire the most productive programmers in the world.
Oftentimes these people are capable, by themselves, of turning out
entire products, and thus they start their own companies.
If a really
productive programmer works for an established organization, that
organization will usually take extreme steps to keep him or her.
Thus
beyond a certain point it is most effective for an organization to
develop a strategy for creating good programmers internally.
How does one create a good programmer?
Raw materials are important.
You want someone with a strong computer science education, a high IQ,
and an ability to communicate effectively in oral presentations and in
writing.
But without the right experience, such a person will never
be more than an average quality programmer.
These principles are important in building up someone's programming
skills:
A person won't become proficient at something until he or she has
done it many times.
In other words., if you want someone to be really
good at building a software system, he or she will have to have built
10 or more systems of that type.
A person won't retain proficiency at a task unless he or she has
at one time learned to perform that task very rapidly.
Learning
research demonstrates that the skills of people who become accurate
but not fast deteriorate much sooner than the skills of people who
become both accurate and fast.
Technology shifts force a programmer to go through bursts of
learning every year or two.
Look around your organization.
You can make a list of the people
qualified to design and build a new system by counting up those who've
built 10 or more similar systems in the past, at least two in the last
year, and that could do the entire job in a month or two if they
really had to.
These are your "good programmers".
Everyone else is a
candidate to be turned into a good programmer as quickly as possible.
Learning to design and build software systems requires that the
programmer design and build software systems.
These can be smaller
subprojects for internal or external customers, standalone software
system for non-profit organizations, or demonstration systems to be
written up and distributed to other programmers.
A particularly
effective option that is only available in the Web world is to build
and launch a free public service.
See http://remindme.arsdigita.com
and http://towzone.arsdigita.com
for examples of one-evening training projects.
Whatever the training task, the pace must be ruthlessly brisk.
The
learner should be expected to build at the same pace as an experienced
developer.
The difference between the learner and the wizard is that
you expect the learner to make a lot of mistakes.
The system as built
may be awkward or not handle error cases properly.
That's okay.
Training research shows that if you get speed now you can get quality
later.
But if you don't get speed you will never get quality in the
long run.
We practice this technique in 6.916, Software Engineering
for Web Applications, our course at MIT.
Each student builds five
database-backed Web applications during the 13-week semester.
The
first few that they build, during the course of the problem sets, are
not necessarily elegant or optimal, but by the end of the semester
they've become remarkably proficient, especially when you consider
that each student is taking three or four other classes.
If you see one of your best people walking out the door at 6:00 pm,
try to think why you haven't challenged that person with an
interesting project.
If you see one of your average programmers
walking out the door at 6:00 pm, recognize that this person is not
developing into a good programmer.
An average programmer's
productivity will never be significant in a group of good programmers.
If you care about profits, you must either come up with a new training
program for the person or figure out the best way to terminate his or
her employment with your organization.
Still not convinced?
Take a look at the Japanese "code factory" circa
1990.
These precisely organized large organizations where each person
had his role, however small, were supposed to overtake the American
approach where small teams of craftsmen worked in a comparatively
disorganized manner.
The factory approach sometimes produces
acceptable corporate IT solutions but for innovation and successful
product development, the craft approach has been overwhelmingly
vindicated.
Turning good programmers into good managers
As noted in the introduction, software engineering is different
because the organization can't afford to lose the individual
productivity of the best people as they are pushed into management.
At ArsDigita, for example, a manager who is one or two levels up from
the leaf nodes is still expected to write code, develop SQL data
models, write system design documents, and write journal articles.
Yet managers who are spending a portion of their time designing
software or writing documentation are at risk of neglecting their
duties to review subordinates' work.
The classic problem situation at ArsDigita is a manager getting lost
in his or her own work and failing to review a subordinate's efforts
for two or three months.
When the review occurs, inevitably the
subordinate has either been working on the wrong thing in the wrong
way or hasn't been sufficiently productive.
At this point the manager
is really angry.
Three months of calendar time and money have been
wasted.
But should the manager be angry with the employee?
If the
manager had reviewed the subordinate every week, the company would
never have been at risk of losing more than one week of time and
money.
Our solution is to decouple responsibility for review from
responsibility for scheduling review.
We use administrative
assistants to ensure that each manager is scheduled to look at every
subordinate's work at least once per week, more frequently in the case
of junior employees.
It has proven remarkably more effective when a
neutral third-party is responsible for scheduling than when people
with incentives to shirk are responsible for scheduling.
Management by Consensus Considered Harmful
Leaf-node engineers at every company on this planet think that they
have better business ideas than the senior managers.
Why not simply
turn the company over to the engineers to run?
Each engineer has a
different set of better business ideas.
Software engineering companies will tend to have a fairly flat
distribution of intelligence.
The 22-year-old Stanford CS punk that
was just hired will be just as smart as the 30-year-old lead engineer
who will be just as smart as the 40-year-old CEO.
Within a company's
technical team, the raw IQ differences are even smaller.
If each
member of the team were playing the Bach Partitas and Sonatas for Solo
Violin, the wrong notes, shaky intonation, and bad phrasing would make
it pretty obvious to the novices that they needed to take advice from
the experts.
But because software quality is tough to measure and
software quantity is seldom measured, the novices in a software
engineering group are able to think of themselves as experts.
What would be wrong with a completely egalitarian software engineering
group?
Maybe the entire team really is at the same level of ability.
And suppose that somehow the challenge of getting everyone to attack
the same problem had been surmounted.
Remember what Fred Brooks said
in The Mythical Man-Month: high quality systems must be
architected by no more than two people.
Getting design input from leaf-node engineers is important for having
a good product design.
But at the end of the day nobody should be
confused as to who is providing leadership.
There is an irreducible
amount of Engineer A imposing his or her design on Engineer B.
This
can lead to some harsh-sounding words and bruised feelings.
Microsoft
is not the self-esteem company, at least if you believe Playboy
magazine's interview with Bill Gates: "We hear you're brusque at
times, that you won't hesitate to tell someone their idea is the
stupidest thing you've ever heard. It's been called management by
embarrassment challenging employees and even leaving some in tears."
Truly elite organizations can be far worse than Microsoft.
Ask a
group of surgical interns and residents how much respect they get from
the surgeons.
Go into a world-class biology department and ask the
grad students and post-docs about their treatment at the hands of the
professors.
Wherever You Go, There You Are
Performance management textbooks will tell you that workers don't
improve unless they get feedback.
Joe Widgetmaker should get a nice
chart, updated daily, of how many widgets he has produced personally
each day, and how many have been built by his team.
Consider the average working programmer's life:
surfing USENET
surfing Slashdot
reading docs
questioning colleagues
writing specs and designs
writing docs
writing code
testing code
fixing bugs
filing bug reports on others' code
attending meetings
helping sales and marketing staff
(For comparison to the grad student life, see http://philip.greenspun.com/humor/graduate-student-emotion-check-list.)
Characterizing this person's productivity is going to require more
than one number.
But if we don't do it, days or weeks could slip by
without the programmer realizing that his or her achievement levels
are plummeting.
In a company with disorganized or technically
clueless managers, the programmer's supervisory chain won't notice the
lack of achievement either.
Production of documentation and code is generally measurable by
reference to the company's version control system.
Bugs filed and
fixed are easily tallied by looking at the company's ticket/bug
tracking system (see http://www.arsdigita.com/doc/ticket for a
description of our favorite open-source ticket/bug tracker).
The
softer stuff can still be quantified but it will have to be done by
humans filling out forms.
Ideally the programmer will get daily feedback, which is kept private
unless the individual elects to publicize it.
Performance in each
sanctioned area of activity will be marked up and scored with
a weight.
The programmer can then see if his or her crude achievement
level is going up or down.
Summary
Building and managing a peak-performing software engineering
organization is challenging but extremely profitable.
The core Ariba
product was written by two programmers, yielding a market
capitalization of $30 billion.
Microsoft Internet Explorer is a much
better browser than Netscape Navigator and yet it was written by a
much smaller team: only about 30 developers.
Start by attracting a good core team, perhaps by setting up an
organization that enables each engineer to excel along the axes
defined in http://philip.greenspun.com/ancient-history/professionalism-for-software-engineers.
Provide a productive working environment and a physical environment
that is better than the average programmer's house.
Provide daily
positive reinforcement.
Provide daily feedback showing the programmer
more or less exactly what he or she has accomplished, plus a graph for
the preceding few months showing the trend.
Aim to install a feeling
of ownership in each worker.
More
Bringing out the Best in People (Aubrey Daniels 1999;
McGraw Hill).
200 pages containing 75 pages of good ideas plus
the usual business book filler.
But the ideas are genuinely good.
The Mythical
Man-Month (Fred Brooks 1995)
Managing
the Professional Service Firm (David Maister 1993).
In terms of
having an equal distribution of ability among all levels of the
enterprise, the closest industry to software engineering is management
consulting.
Maister's work is a classic guide to success in this industry.
"Unskilled and
Unaware of It: How Difficulties in Recognizing One's Own Incompetence
Lead to Inflated Self-Assessments", Justin Kruger and David Dunning 1999,
Journal of Personality and Social Psychology
Peopleware
(Tom DeMarco and Timothy Lister 1999); page 98 is worth the price of
admission, explaining that "the term unprofessional is often
used to characterize surprising and threatening behavior. ... In a
healthier organization culture, people are thought to be professional
to the extent they are knowledgeable and competent."
(See http://philip.greenspun.com/ancient-history/professionalism-for-software-engineers
for ArsDigita's independent conception of this idea.)
Much of the
rest of the book is a celebration of the 40-hour work week and the
claim that "overtime" in the long run is never beneficial.
If the
authors were correct, Silicon Valley would be the poorest region of
the nation, with Redmond, Washington the 2nd most impoverished.
And
Washington, DC would be our great source of innovation and
productivity.
Peopleware was probably written to help
ensure success for internal corporate IT projects where there isn't
any competition and delivering three months late won't change much.
Making
the Cisco Connection : The Story Behind the Real Internet
Superpower (Bunnel et al 2000) -- shows how ignoring
the "no overtime" admonitions in Peopleware can generate
$400 billion in market cap.
Parkinson's Law (C. Northcote Parkinson 1958) -- how
management really works in the long run
A Pattern Language (Christopher Alexander et
al 1977) has very interesting things to say about physical space and
social organization.
Reader's Comments
The Journal of Personality and Social Psychology article link is stale. Here is the new one as of 3/2006:
Unskilled and Unaware of It: How Difficulties in Recognizing One's Own Incompetence Lead to Inflated Self-Assessments.
-- Charles Loengard, March 18, 2006
Add a comment | Add a link


Link: https://engineering.nyu.edu/academics/departments/computer-science-and-engineering/people

People | NYU Tandon School of Engineering
Skip to Main Content
NYU Tandon Logo
Undergraduate
Graduate
Online Learning
Departments
Applied Physics
Biomedical Engineering
Center for Urban Science and Progress
Chemical and Biomolecular Engineering
Civil and Urban Engineering
Computer Science and Engineering
Electrical and Computer Engineering
Finance and Risk Engineering
Mathematics
Mechanical and Aerospace Engineering
NYU Tandon Online
Technology, Culture and Society
Technology Management and Innovation
Degrees & Programs
Bachelor of Science
Master of Science
Doctor of Philosophy
Online Programs
Certificate Programs
NYU Tandon Bridge
Industry Partner Programs
K12 STEM
Support & Services
Undergraduate Services
Graduate Services
Financial Aid & Fellowships
Records & Registration
Online Learning Services
Faculty Innovations (FITL)
Areas of Excellence
Research
Centers & Institutes
Labs & Groups
Student Research
Entrepreneurship
MakerSpace
Student Life
Experiential Learning
Career Hub
Support & Resources
International Students
Alumni
Giving
Partnerships
Overview
Explore NYU Tandon
Fast Facts
Year in Review
Strategic Plan
Leadership
History
Community
Diversity & Inclusion
Brooklyn
Visit
News & Events
News
Events
Social Media
Podcast
Media Inquiries
Search NYU Tandon
Fulltext search
Common Questions
This is a sample question
Looking for News or Events?
Admissions
+
Academics
+
Research & Innovation
+
Life at Tandon
+
Engage
+
About
+
Admissions
Undergraduate
Graduate
Online Learning
Academics
Departments
Applied Physics
Biomedical Engineering
Center for Urban Science and Progress
Chemical and Biomolecular Engineering
Civil and Urban Engineering
Computer Science and Engineering
Electrical and Computer Engineering
Finance and Risk Engineering
Mathematics
Mechanical and Aerospace Engineering
NYU Tandon Online
Technology, Culture and Society
Technology Management and Innovation
Degrees & Programs
Bachelor of Science
Master of Science
Doctor of Philosophy
Online Programs
Certificate Programs
NYU Tandon Bridge
Industry Partner Programs
K12 STEM
Support & Services
Undergraduate Services
Graduate Services
Financial Aid & Fellowships
Records & Registration
Online Learning Services
Faculty Innovations (FITL)
Research & Innovation
Areas of Excellence
Research
Centers & Institutes
Labs & Groups
Student Research
Entrepreneurship
MakerSpace
Life at Tandon
Student Life
Experiential Learning
Career Hub
Support & Resources
International Students
Engage
Alumni
Giving
Partnerships
About
Overview
Explore NYU Tandon
Fast Facts
Year in Review
Strategic Plan
Leadership
History
Community
Diversity & Inclusion
Brooklyn
Visit
News & Events
News
Events
Social Media
Podcast
Media Inquiries
VisitÂ NYU ReturnsÂ for campus information.
Academics
Departments
Computer science and engineering
People
Computer Science and Engineering
There is a practical and pragmatic mindset here. Instead of teaching things on an esoteric level, we attempt to teach by doing. Our program helps worldwide students to come together and obtain the very strong background and skills that lead them well into the job market â at Wall St., major tech companies, or within the government."
â Professor Justin Cappos
Discover Our Commitment to Teaching
Quick Links
Doctoral Students
Quick Links
Quick Links
Doctoral Students
Quick Links
Doctoral Students
Jump to
Core Faculty
Associated Faculty
Global Network Faculty
Research Faculty
Affiliated Faculty
Emeritus Faculty
Staff
Core Faculty
Lisa Hellerstein
Professor & Interim Chair for the Department of Computer Science and Engineering
Greg Aloupis
Industry Professor
Boris Aronov
Professor
Juan Pablo Bello
Professor
Justin Cappos
Associate Professor
Yi-Jen Chiang
Associate Professor; Director of the MS Program
Rumi Chunara
Associate Professor, Computer Science and Engineering and Biostatistics (Global Public Health)
Peter DePasquale
Industry Associate Professor
Ratan Dey
Industry Assistant Professor
Brendan Dolan-Gavitt
Assistant Professor
Jeffrey Epstein
Industry Associate Professor
Juliana Freire
Professor of Computer Science and Data Science , Director of the VIDA Center
Guido Gerig
Institute Professor
Rachel Greenstadt
Associate Professor; Interim Director of the Ph.D. Program
Chinmay Hegde
Associate Professor
Daniel Katz-Braunschweig
Industry Professor and Director of Undergraduate Programs
Damon McCoy
Associate Professor
Nasir Memon
Vice Dean for Student and Academic Affairs, Tandon Online; Professor
Christopher Musco
Assistant Professor
Thomas Reddington
Industry Professor
Darryl Reeves
Industry Assistant Professor
Gustavo Sandoval
Industry Professor
Linda Sellie
Industry Associate Professor
Claudio Silva
Institute Professor
Fred Strauss
Industry Professor
John Sterling
Industry Professor
Julia Stoyanovich
Institute Associate Professor
Torsten Suel
Industry Professor
Qi Sun
Assistant Professor
Itay Tal
Industry Associate Professor
Julian Togelius
Associate Professor
Paul Torrens
Professor
Edward Wong
Associate Professor
Associated Faculty
Farah Emad Shamout
Assistant Professor of Computer Engineering, NYU Abu Dhabi
Global Network Faculty
Nizar Habash
Global Network Professor
Research Faculty
Ed Amoroso
Distinguished Research Professor
Nan Cao
Research Assistant Professor of Computer Science
Mark Cartwright
Research Assistant Professor
Jay Chen
Research Assistant Professor
John Iacono
Research Professor
Pawel Korus
Research Assistant Professor
Gad Landau
Research Professor
Huy Vo
Research Assistant Professor
Gus Xia
Assistant Research Professor
Affiliated Faculty
Enrico Bertini
Visiting Research Professor
Semiha Ergan
Associate Professor
Chen Feng
Assistant Professor
Siddharth Garg
Institute Associate Professor
Ramesh Karri
Professor; Co-founder and co-chair NYU Center for Cybersecurity; Founder and Organizer: Annual CSAW Embedded Security Challenge
Michael Krone
Visiting Assistant Professor
Oded Nov
Professor; Technology Management and Innovation Department Chair
Brandon Reagen
Assistant Professor
Danny Yuxing Huang
Assistant Professor
Emeritus Faculty
Phyllis Frankl
Professor Emeritus
Haldun Hadimioglu
Professor Emeritus
Kok-Ming Leung
Professor Emeritus
Henry Ruston
Professor Emeritus
Martin Shooman
Professor Emeritus
Stuart Steele
Professor Emeritus
Staff
Ann Borray
Department Administrator
Chrystanyaa Brown
Special Projects Manager
Judy Brown
Program Coordinator
Paule A. Dubreuze
Senior Grants Manager
Susana Garcia-Henriquez
Manager of Academics
Dan Goncalves
Academic Advisor
Eve Henderson
Academic Department Manager
Ian Morlan
Grants and Proposals Manager
Jessica Pascual
Academic Advisor
Kari Schwartz
Program Coordinator/HR Analyst
Amy Yochum
Department Administrator
Main Menu
NYU Tandon Made in Brooklyn
Quick Links
NYU Libraries
NYU Brightspace
NYU Albert
Accessibility
Bulletin
Tandon Directory
Login (Faculty & Staff)
Information For
Students
Faculty
Staff
Alumni
Parents
Media
Careers at Tandon
Contact
Contact Us
646-997-3600
NYU Campuses
New York
Shanghai
Abu Dhabi
NYU Tandon Made in Brooklyn
Make a Gift
Follow Us
Facebook
Twitter
Instagram
Youtube
LinkedIn
Â© NYU Tandon 2022


